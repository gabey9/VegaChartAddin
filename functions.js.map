{"version":3,"file":"functions.js","mappings":"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","sources":["webpack://excel-custom-functions-js/./src/functions/functions.js"],"sourcesContent":["/**\n * LINE custom function using the exact same specification as taskpane.js\n * Creates a multi-series line chart from Excel data range\n * \n * @customfunction\n * @param {any[][]} data The data range including headers\n * @returns {string} Status message\n */\nfunction LINE(data) {\n  return new Promise((resolve) => {\n    try {\n      if (!data || data.length < 2) {\n        resolve(\"Need at least header row + one data row\");\n        return;\n      }\n\n      const headers = data[0];\n      const rows = data.slice(1);\n\n      // Convert rows -> objects (same as taskpane.js)\n      const processedData = rows.map(row => {\n        let obj = {};\n        headers.forEach((h, i) => {\n          obj[h] = row[i];\n        });\n        return obj;\n      });\n\n      // Transform data for multi-series line chart (exact copy from taskpane.js)\n      const transformedData = [];\n      const valueColumns = headers.slice(1);\n      processedData.forEach(row => {\n        valueColumns.forEach(colName => {\n          if (row[colName] !== null && row[colName] !== undefined && row[colName] !== \"\") {\n            transformedData.push({\n              [headers[0]]: row[headers[0]], // x-axis value (first column)\n              series: colName,               // series name (column header)\n              value: parseFloat(row[colName]) || 0  // y-axis value\n            });\n          }\n        });\n      });\n\n      // Use EXACT specification from taskpane.js line chart\n      const spec = {\n        $schema: \"https://vega.github.io/schema/vega-lite/v6.json\",\n        description: \"Multi-series line chart from Excel selection\",\n        background: \"white\",\n        config: { view: { stroke: \"transparent\" }},\n        data: { values: transformedData },\n        mark: { \n          type: \"line\", \n          point: false,\n          tooltip: true,\n          strokeWidth: 2\n        },\n        encoding: {\n          x: { \n            field: headers[0], \n            type: \"ordinal\",\n            axis: {\n              title: headers[0],\n              labelFontSize: 12,\n              titleFontSize: 14,\n              labelAngle: 0\n            }\n          },\n          y: { \n            field: \"value\", \n            type: \"quantitative\",\n            axis: {\n              title: \"Value\",\n              labelFontSize: 12,\n              titleFontSize: 14\n            }\n          },\n          color: { \n            field: \"series\", \n            type: \"nominal\",\n            scale: {\n              scheme: \"category10\"\n            },\n            legend: {\n              title: \"Series\",\n              titleFontSize: 12,\n              labelFontSize: 11\n            }\n          }\n        },\n        config: {\n          font: \"Segoe UI\",\n          axis: {\n            labelColor: \"#605e5c\",\n            titleColor: \"#323130\",\n            gridColor: \"#f3f2f1\"\n          },\n          legend: {\n            titleColor: \"#323130\",\n            labelColor: \"#605e5c\"\n          },\n          point: {\n            size: 60,\n            filled: true\n          }\n        }\n      };\n\n      createChart(spec, \"line\", headers, rows)\n        .then(() => resolve(`✅ Line chart created (${valueColumns.length} series, ${rows.length} points)`))\n        .catch((error) => resolve(`❌ Error: ${error.message}`));\n\n    } catch (error) {\n      resolve(`Error: ${error.message}`);\n    }\n  });\n}\n\n/**\n * BAR custom function using the exact same specification as taskpane.js\n * Creates a bar chart from Excel data range\n * \n * @customfunction\n * @param {any[][]} data The data range including headers\n * @returns {string} Status message\n */\nfunction BAR(data) {\n  return new Promise((resolve) => {\n    try {\n      if (!data || data.length < 2) {\n        resolve(\"❌ Need at least header row + one data row\");\n        return;\n      }\n\n      const headers = data[0];\n      const rows = data.slice(1);\n\n      // Convert rows -> objects (same as taskpane.js)\n      const processedData = rows.map(row => {\n        let obj = {};\n        headers.forEach((h, i) => {\n          obj[h] = row[i];\n        });\n        return obj;\n      });\n\n      // Use EXACT specification from taskpane.js bar chart\n      const spec = {\n        $schema: \"https://vega.github.io/schema/vega-lite/v6.json\",\n        description: \"Bar chart from Excel selection\",\n        background: \"white\",\n        config: { view: { stroke: \"transparent\" }},\n        data: { values: processedData },\n        mark: { \n          type: \"bar\", \n          tooltip: true\n        },\n        encoding: {\n          x: { \n            field: headers[0], \n            type: \"nominal\",\n            axis: {\n              title: headers[0],\n              labelFontSize: 12,\n              titleFontSize: 14\n            }\n          },\n          y: { \n            field: headers[1], \n            type: \"quantitative\",\n            axis: {\n              title: headers[1],\n              labelFontSize: 12,\n              titleFontSize: 14\n            }\n          },\n          // Add color encoding for grouped bars if 3rd column exists\n          ...(headers.length >= 3 && {\n            color: { \n              field: headers[2], \n              type: \"nominal\",\n              legend: {\n                title: headers[2],\n                titleFontSize: 12,\n                labelFontSize: 11\n              }\n            }\n          })\n        },\n        config: {\n          font: \"Segoe UI\",\n          axis: {\n            labelColor: \"#605e5c\",\n            titleColor: \"#323130\",\n            gridColor: \"#f3f2f1\"\n          },\n          legend: {\n            titleColor: \"#323130\",\n            labelColor: \"#605e5c\"\n          }\n        }\n      };\n\n      createChart(spec, \"bar\", headers, rows)\n        .then(() => resolve(`✅ Bar chart created (${rows.length} bars)`))\n        .catch((error) => resolve(`❌ Error: ${error.message}`));\n\n    } catch (error) {\n      resolve(`❌ Error: ${error.message}`);\n    }\n  });\n}\n\n/**\n * PIE custom function using the exact same specification as taskpane.js\n * Creates a pie chart from Excel data range\n * \n * @customfunction\n * @param {any[][]} data The data range including headers\n * @returns {string} Status message\n */\nfunction PIE(data) {\n  return new Promise((resolve) => {\n    try {\n      if (!data || data.length < 2) {\n        resolve(\"❌ Need at least header row + one data row\");\n        return;\n      }\n\n      const headers = data[0];\n      const rows = data.slice(1);\n\n      if (headers.length < 2) {\n        resolve(\"❌ Pie chart requires 2 columns (Category, Value)\");\n        return;\n      }\n\n      // Validate that all values are positive numbers\n      const hasInvalidValues = rows.some(row => isNaN(row[1]) || row[1] <= 0);\n      if (hasInvalidValues) {\n        resolve(\"❌ Pie chart values must be positive numbers\");\n        return;\n      }\n\n      // Convert rows -> objects (same as taskpane.js)\n      const processedData = rows.map(row => {\n        let obj = {};\n        headers.forEach((h, i) => {\n          obj[h] = row[i];\n        });\n        return obj;\n      });\n\n      // Use EXACT specification from taskpane.js pie chart\n      const spec = {\n        $schema: \"https://vega.github.io/schema/vega-lite/v6.json\",\n        background: \"white\",\n        config: { view: { stroke: \"transparent\" }},\n        description: \"Pie chart from Excel selection\",\n        data: { values: processedData },\n        mark: { type: \"arc\", outerRadius: 120 },\n        encoding: {\n          theta: { field: headers[1], type: \"quantitative\" },\n          color: { field: headers[0], type: \"nominal\" }\n        }\n      };\n\n      createChart(spec, \"pie\", headers, rows)\n        .then(() => resolve(`✅ Pie chart created (${rows.length} slices)`))\n        .catch((error) => resolve(`❌ Error: ${error.message}`));\n\n    } catch (error) {\n      resolve(`❌ Error: ${error.message}`);\n    }\n  });\n}\n\n/**\n * AREA custom function using the exact same specification as taskpane.js\n * Creates an area chart from Excel data range\n * \n * @customfunction\n * @param {any[][]} data The data range including headers\n * @returns {string} Status message\n */\nfunction AREA(data) {\n  return new Promise((resolve) => {\n    try {\n      if (!data || data.length < 2) {\n        resolve(\"❌ Need at least header row + one data row\");\n        return;\n      }\n\n      const headers = data[0];\n      const rows = data.slice(1);\n\n      // Convert rows -> objects (same as taskpane.js)\n      const processedData = rows.map(row => {\n        let obj = {};\n        headers.forEach((h, i) => {\n          obj[h] = row[i];\n        });\n        return obj;\n      });\n\n      // Use EXACT specification from taskpane.js area chart\n      const spec = {\n        $schema: \"https://vega.github.io/schema/vega-lite/v6.json\",\n        description: \"Area chart from Excel selection\",\n        background: \"white\",\n        config: { view: { stroke: \"transparent\" }},\n        data: { values: processedData },\n        mark: { \n          type: \"area\", \n          tooltip: true,\n          opacity: 0.7\n        },\n        encoding: {\n          x: { \n            field: headers[0], \n            type: \"ordinal\",\n            axis: {\n              title: headers[0],\n              labelFontSize: 12,\n              titleFontSize: 14\n            }\n          },\n          y: { \n            field: headers[1], \n            type: \"quantitative\",\n            axis: {\n              title: headers[1],\n              labelFontSize: 12,\n              titleFontSize: 14\n            }\n          },\n          // Add color encoding for multiple areas if 3rd column exists\n          ...(headers.length >= 3 && {\n            color: { \n              field: headers[2], \n              type: \"nominal\",\n              legend: {\n                title: headers[2],\n                titleFontSize: 12,\n                labelFontSize: 11\n              }\n            }\n          })\n        },\n        config: {\n          font: \"Segoe UI\",\n          axis: {\n            labelColor: \"#605e5c\",\n            titleColor: \"#323130\",\n            gridColor: \"#f3f2f1\"\n          },\n          legend: {\n            titleColor: \"#323130\",\n            labelColor: \"#605e5c\"\n          }\n        }\n      };\n\n      createChart(spec, \"area\", headers, rows)\n        .then(() => resolve(`✅ Area chart created (${rows.length} points)`))\n        .catch((error) => resolve(`❌ Error: ${error.message}`));\n\n    } catch (error) {\n      resolve(`❌ Error: ${error.message}`);\n    }\n  });\n}\n\n/**\n * Generic chart creation function (same approach as taskpane.js)\n */\nasync function createChart(spec, chartType, headers, rows) {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const chartId = `${chartType}_${Date.now()}_${Math.random().toString(36).substr(2, 6)}`;\n      \n      // Render hidden chart (same as taskpane.js)\n      const hiddenDiv = document.createElement(\"div\");\n      hiddenDiv.style.display = \"none\";\n      hiddenDiv.id = chartId;\n      document.body.appendChild(hiddenDiv);\n\n      // Load Vega-Lite if not available\n      if (typeof vegaEmbed === 'undefined') {\n        await loadVegaLibraries();\n      }\n\n      const result = await vegaEmbed(hiddenDiv, spec, { actions: false });\n      const view = result.view;\n\n      // Export chart -> PNG (same as taskpane.js)\n      const pngUrl = await view.toImageURL(\"png\");\n      const response = await fetch(pngUrl);\n      const blob = await response.blob();\n\n      const reader = new FileReader();\n      reader.onloadend = async () => {\n        try {\n          const base64data = reader.result.split(\",\")[1];\n\n          // Insert into Excel (same approach as taskpane.js)\n          await insertChartIntoExcel(base64data, chartType, chartId);\n          \n          // Clean up hidden div\n          document.body.removeChild(hiddenDiv);\n          resolve();\n          \n        } catch (error) {\n          // Clean up on error\n          if (document.body.contains(hiddenDiv)) {\n            document.body.removeChild(hiddenDiv);\n          }\n          reject(error);\n        }\n      };\n      \n      reader.readAsDataURL(blob);\n\n    } catch (error) {\n      reject(error);\n    }\n  });\n}\n\n/**\n * Inserts chart into Excel using the same approach as taskpane.js\n */\nasync function insertChartIntoExcel(base64data, chartType, chartId) {\n  return Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getActiveWorksheet();\n\n    // Get current selection (same as taskpane.js approach)\n    const range = context.workbook.getSelectedRange();\n    range.load(\"values, left, top\");\n    await context.sync();\n\n    // Remove existing charts of the same type to prevent duplicates\n    await removeExistingCharts(context, sheet, chartType);\n\n    // Insert picture above/next to selection (same as taskpane.js)\n    const image = sheet.shapes.addImage(base64data);\n    image.left = range.left;\n    image.top = range.top;\n    image.lockAspectRatio = true; // keep proportions (same as taskpane.js)\n    \n    // Add unique name for tracking\n    image.name = `${chartType.charAt(0).toUpperCase() + chartType.slice(1)}Chart_${chartId}`;\n\n    await context.sync();\n  });\n}\n\n/**\n * Remove existing charts of the same type (prevents duplicates)\n */\nasync function removeExistingCharts(context, sheet, chartType) {\n  try {\n    const shapes = sheet.shapes;\n    shapes.load(\"items\");\n    await context.sync();\n\n    const chartPrefix = `${chartType.charAt(0).toUpperCase() + chartType.slice(1)}Chart_`;\n\n    for (let i = shapes.items.length - 1; i >= 0; i--) {\n      const shape = shapes.items[i];\n      shape.load(\"name\");\n      await context.sync();\n      \n      if (shape.name && shape.name.startsWith(chartPrefix)) {\n        shape.delete();\n        await context.sync();\n      }\n    }\n  } catch (error) {\n    console.warn(`Could not remove existing ${chartType} charts:`, error);\n  }\n}\n\n/**\n * Load Vega libraries (same CDN versions as taskpane.html)\n */\nfunction loadVegaLibraries() {\n  return new Promise((resolve, reject) => {\n    if (typeof vegaEmbed !== 'undefined') {\n      resolve();\n      return;\n    }\n\n    // Load libraries in sequence (same as taskpane.html)\n    const scripts = [\n      'https://cdn.jsdelivr.net/npm/vega@6',\n      'https://cdn.jsdelivr.net/npm/vega-lite@6', \n      'https://cdn.jsdelivr.net/npm/vega-embed@6'\n    ];\n\n    let loadedCount = 0;\n    \n    scripts.forEach((src, index) => {\n      const script = document.createElement('script');\n      script.src = src;\n      script.onload = () => {\n        loadedCount++;\n        if (loadedCount === scripts.length) {\n          resolve();\n        }\n      };\n      script.onerror = () => reject(new Error(`Failed to load ${src}`));\n      document.head.appendChild(script);\n    });\n  });\n}\n\n// Register all custom functions\nif (typeof CustomFunctions !== 'undefined') {\n  CustomFunctions.associate(\"LINE\", LINE);\n  CustomFunctions.associate(\"BAR\", BAR);\n  CustomFunctions.associate(\"PIE\", PIE);\n  CustomFunctions.associate(\"AREA\", AREA);\n  CustomFunctions.associate(\"SCATTER\", SCATTER);\n  CustomFunctions.associate(\"RADIAL\", RADIAL);\n  CustomFunctions.associate(\"BOX\", BOX);\n  CustomFunctions.associate(\"RADAR\", RADAR);\n}\nCustomFunctions.associate(\"LINE\", LINE);\nCustomFunctions.associate(\"BAR\", BAR);\nCustomFunctions.associate(\"PIE\", PIE);\nCustomFunctions.associate(\"AREA\", AREA);"],"names":["e","t","r","Symbol","n","iterator","o","toStringTag","i","c","prototype","Generator","u","Object","create","_regeneratorDefine2","f","p","y","G","v","a","d","bind","length","l","TypeError","call","done","value","return","GeneratorFunction","GeneratorFunctionPrototype","getPrototypeOf","setPrototypeOf","__proto__","displayName","_regenerator","w","m","defineProperty","_invoke","enumerable","configurable","writable","_typeof","constructor","asyncGeneratorStep","Promise","resolve","then","_asyncToGenerator","arguments","apply","_next","_throw","ownKeys","keys","getOwnPropertySymbols","filter","getOwnPropertyDescriptor","push","_objectSpread","forEach","_defineProperty","getOwnPropertyDescriptors","defineProperties","toPrimitive","String","_toPrimitive","_toPropertyKey","LINE","data","headers","rows","slice","processedData","map","row","obj","h","transformedData","valueColumns","colName","undefined","parseFloat","createChart","$schema","description","background","config","view","stroke","values","mark","type","point","tooltip","strokeWidth","encoding","x","field","axis","title","labelFontSize","titleFontSize","labelAngle","color","scale","scheme","legend","font","labelColor","titleColor","gridColor","size","filled","concat","catch","error","message","BAR","PIE","some","isNaN","outerRadius","theta","AREA","opacity","_x","_x2","_x3","_x4","_createChart","_callee3","spec","chartType","_context3","_ref","_callee2","reject","chartId","hiddenDiv","result","pngUrl","response","blob","reader","_t2","_context2","Date","now","Math","random","toString","substr","document","createElement","style","display","id","body","appendChild","vegaEmbed","loadVegaLibraries","actions","toImageURL","fetch","FileReader","onloadend","_callee","base64data","_t","_context","split","insertChartIntoExcel","removeChild","contains","readAsDataURL","_x1","_x10","_x5","_x6","_x7","_insertChartIntoExcel","_callee5","_context5","Excel","run","_ref3","_callee4","context","sheet","range","image","_context4","workbook","worksheets","getActiveWorksheet","getSelectedRange","load","sync","removeExistingCharts","shapes","addImage","left","top","lockAspectRatio","name","charAt","toUpperCase","_x11","_x8","_x9","_x0","_removeExistingCharts","_callee6","chartPrefix","shape","_t3","_context6","items","startsWith","delete","console","warn","scripts","loadedCount","src","index","script","onload","onerror","Error","head","CustomFunctions","associate","SCATTER","RADIAL","BOX","RADAR"],"sourceRoot":""}