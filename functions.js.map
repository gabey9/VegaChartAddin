{"version":3,"file":"functions.js","mappings":"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","sources":["webpack://excel-custom-functions-js/./src/functions/functions.js"],"sourcesContent":["/**\n * LINE custom function using the exact same specification as taskpane.js\n * Creates a multi-series line chart from Excel data range\n * \n * @customfunction\n * @param {any[][]} data The data range including headers\n * @returns {string} Status message\n */\nfunction LINE(data) {\n  return new Promise((resolve) => {\n    try {\n      if (!data || data.length < 2) {\n        resolve(\"Error: Need at least header row + one data row\");\n        return;\n      }\n\n      const headers = data[0];\n      const rows = data.slice(1);\n\n      // Convert rows -> objects (same as taskpane.js)\n      const processedData = rows.map(row => {\n        let obj = {};\n        headers.forEach((h, i) => {\n          obj[h] = row[i];\n        });\n        return obj;\n      });\n\n      // Transform data for multi-series line chart (exact copy from taskpane.js)\n      const transformedData = [];\n      const valueColumns = headers.slice(1);\n      processedData.forEach(row => {\n        valueColumns.forEach(colName => {\n          if (row[colName] !== null && row[colName] !== undefined && row[colName] !== \"\") {\n            transformedData.push({\n              [headers[0]]: row[headers[0]], // x-axis value (first column)\n              series: colName,               // series name (column header)\n              value: parseFloat(row[colName]) || 0  // y-axis value\n            });\n          }\n        });\n      });\n\n      // Use EXACT specification from taskpane.js line chart\n      const spec = {\n        $schema: \"https://vega.github.io/schema/vega-lite/v6.json\",\n        description: \"Multi-series line chart from Excel selection\",\n        background: \"white\",\n        config: { view: { stroke: \"transparent\" }},\n        data: { values: transformedData },\n        mark: { \n          type: \"line\", \n          point: false,\n          tooltip: true,\n          strokeWidth: 2\n        },\n        encoding: {\n          x: { \n            field: headers[0], \n            type: \"ordinal\",\n            axis: {\n              title: headers[0],\n              labelFontSize: 12,\n              titleFontSize: 14,\n              labelAngle: 0\n            }\n          },\n          y: { \n            field: \"value\", \n            type: \"quantitative\",\n            axis: {\n              title: \"Value\",\n              labelFontSize: 12,\n              titleFontSize: 14\n            }\n          },\n          color: { \n            field: \"series\", \n            type: \"nominal\",\n            scale: {\n              scheme: \"category10\"\n            },\n            legend: {\n              title: \"Series\",\n              titleFontSize: 12,\n              labelFontSize: 11\n            }\n          }\n        },\n        config: {\n          font: \"Segoe UI\",\n          axis: {\n            labelColor: \"#605e5c\",\n            titleColor: \"#323130\",\n            gridColor: \"#f3f2f1\"\n          },\n          legend: {\n            titleColor: \"#323130\",\n            labelColor: \"#605e5c\"\n          },\n          point: {\n            size: 60,\n            filled: true\n          }\n        }\n      };\n\n      createChart(spec, \"line\", headers, rows)\n        .then(() => resolve(\"\"))\n        .catch((error) => resolve(`Error: ${error.message}`));\n\n    } catch (error) {\n      resolve(`Error: ${error.message}`);\n    }\n  });\n}\n\n/**\n * BAR custom function using the exact same specification as taskpane.js\n * Creates a bar chart from Excel data range\n * \n * @customfunction\n * @param {any[][]} data The data range including headers\n * @returns {string} Status message\n */\nfunction BAR(data) {\n  return new Promise((resolve) => {\n    try {\n      if (!data || data.length < 2) {\n        resolve(\"Error: Need at least header row + one data row\");\n        return;\n      }\n\n      const headers = data[0];\n      const rows = data.slice(1);\n\n      // Convert rows -> objects (same as taskpane.js)\n      const processedData = rows.map(row => {\n        let obj = {};\n        headers.forEach((h, i) => {\n          obj[h] = row[i];\n        });\n        return obj;\n      });\n\n      // Use EXACT specification from taskpane.js bar chart\n      const spec = {\n        $schema: \"https://vega.github.io/schema/vega-lite/v6.json\",\n        description: \"Bar chart from Excel selection\",\n        background: \"white\",\n        config: { view: { stroke: \"transparent\" }},\n        data: { values: processedData },\n        mark: { \n          type: \"bar\", \n          tooltip: true\n        },\n        encoding: {\n          x: { \n            field: headers[0], \n            type: \"nominal\",\n            axis: {\n              title: headers[0],\n              labelFontSize: 12,\n              titleFontSize: 14\n            }\n          },\n          y: { \n            field: headers[1], \n            type: \"quantitative\",\n            axis: {\n              title: headers[1],\n              labelFontSize: 12,\n              titleFontSize: 14\n            }\n          },\n          // Add color encoding for grouped bars if 3rd column exists\n          ...(headers.length >= 3 && {\n            color: { \n              field: headers[2], \n              type: \"nominal\",\n              legend: {\n                title: headers[2],\n                titleFontSize: 12,\n                labelFontSize: 11\n              }\n            }\n          })\n        },\n        config: {\n          font: \"Segoe UI\",\n          axis: {\n            labelColor: \"#605e5c\",\n            titleColor: \"#323130\",\n            gridColor: \"#f3f2f1\"\n          },\n          legend: {\n            titleColor: \"#323130\",\n            labelColor: \"#605e5c\"\n          }\n        }\n      };\n\n      createChart(spec, \"bar\", headers, rows)\n        .then(() => resolve(\"\"))\n        .catch((error) => resolve(`Error: ${error.message}`));\n\n    } catch (error) {\n      resolve(`Error: ${error.message}`);\n    }\n  });\n}\n\n/**\n * PIE custom function using the exact same specification as taskpane.js\n * Creates a pie chart from Excel data range\n * \n * @customfunction\n * @param {any[][]} data The data range including headers\n * @returns {string} Status message\n */\nfunction PIE(data) {\n  return new Promise((resolve) => {\n    try {\n      if (!data || data.length < 2) {\n        resolve(\"Error: Need at least header row + one data row\");\n        return;\n      }\n\n      const headers = data[0];\n      const rows = data.slice(1);\n\n      if (headers.length < 2) {\n        resolve(\"Error: Pie chart requires 2 columns (Category, Value)\");\n        return;\n      }\n\n      // Validate that all values are positive numbers\n      const hasInvalidValues = rows.some(row => isNaN(row[1]) || row[1] <= 0);\n      if (hasInvalidValues) {\n        resolve(\"Error: Pie chart values must be positive numbers\");\n        return;\n      }\n\n      // Convert rows -> objects (same as taskpane.js)\n      const processedData = rows.map(row => {\n        let obj = {};\n        headers.forEach((h, i) => {\n          obj[h] = row[i];\n        });\n        return obj;\n      });\n\n      // Use EXACT specification from taskpane.js pie chart\n      const spec = {\n        $schema: \"https://vega.github.io/schema/vega-lite/v6.json\",\n        background: \"white\",\n        config: { view: { stroke: \"transparent\" }},\n        description: \"Pie chart from Excel selection\",\n        data: { values: processedData },\n        mark: { type: \"arc\", outerRadius: 120 },\n        encoding: {\n          theta: { field: headers[1], type: \"quantitative\" },\n          color: { field: headers[0], type: \"nominal\" }\n        }\n      };\n\n      createChart(spec, \"pie\", headers, rows)\n        .then(() => resolve(\"\"))\n        .catch((error) => resolve(`Error: ${error.message}`));\n\n    } catch (error) {\n      resolve(`Error: ${error.message}`);\n    }\n  });\n}\n\n/**\n * AREA custom function using the exact same specification as taskpane.js\n * Creates an area chart from Excel data range\n * \n * @customfunction\n * @param {any[][]} data The data range including headers\n * @returns {string} Status message\n */\nfunction AREA(data) {\n  return new Promise((resolve) => {\n    try {\n      if (!data || data.length < 2) {\n        resolve(\"Error: Need at least header row + one data row\");\n        return;\n      }\n\n      const headers = data[0];\n      const rows = data.slice(1);\n\n      // Convert rows -> objects (same as taskpane.js)\n      const processedData = rows.map(row => {\n        let obj = {};\n        headers.forEach((h, i) => {\n          obj[h] = row[i];\n        });\n        return obj;\n      });\n\n      // Use EXACT specification from taskpane.js area chart\n      const spec = {\n        $schema: \"https://vega.github.io/schema/vega-lite/v6.json\",\n        description: \"Area chart from Excel selection\",\n        background: \"white\",\n        config: { view: { stroke: \"transparent\" }},\n        data: { values: processedData },\n        mark: { \n          type: \"area\", \n          tooltip: true,\n          opacity: 0.7\n        },\n        encoding: {\n          x: { \n            field: headers[0], \n            type: \"ordinal\",\n            axis: {\n              title: headers[0],\n              labelFontSize: 12,\n              titleFontSize: 14\n            }\n          },\n          y: { \n            field: headers[1], \n            type: \"quantitative\",\n            axis: {\n              title: headers[1],\n              labelFontSize: 12,\n              titleFontSize: 14\n            }\n          },\n          // Add color encoding for multiple areas if 3rd column exists\n          ...(headers.length >= 3 && {\n            color: { \n              field: headers[2], \n              type: \"nominal\",\n              legend: {\n                title: headers[2],\n                titleFontSize: 12,\n                labelFontSize: 11\n              }\n            }\n          })\n        },\n        config: {\n          font: \"Segoe UI\",\n          axis: {\n            labelColor: \"#605e5c\",\n            titleColor: \"#323130\",\n            gridColor: \"#f3f2f1\"\n          },\n          legend: {\n            titleColor: \"#323130\",\n            labelColor: \"#605e5c\"\n          }\n        }\n      };\n\n      createChart(spec, \"area\", headers, rows)\n        .then(() => resolve(\"\"))\n        .catch((error) => resolve(`Error: ${error.message}`));\n\n    } catch (error) {\n      resolve(`Error: ${error.message}`);\n    }\n  });\n}\n\n/**\n * SCATTER custom function using the exact same specification as taskpane.js\n * Creates a scatter plot from Excel data range\n * \n * @customfunction\n * @param {any[][]} data The data range including headers\n * @returns {string} Status message\n */\nfunction SCATTER(data) {\n  return new Promise((resolve) => {\n    try {\n      if (!data || data.length < 2) {\n        resolve(\"Error: Need at least header row + one data row\");\n        return;\n      }\n\n      const headers = data[0];\n      const rows = data.slice(1);\n\n      if (headers.length < 2) {\n        resolve(\"Error: Scatter plot requires at least 2 columns (X, Y values)\");\n        return;\n      }\n\n      // Convert rows -> objects (same as taskpane.js)\n      const processedData = rows.map(row => {\n        let obj = {};\n        headers.forEach((h, i) => {\n          obj[h] = row[i];\n        });\n        return obj;\n      });\n\n      // Use EXACT specification from taskpane.js point chart\n      const spec = {\n        $schema: \"https://vega.github.io/schema/vega-lite/v6.json\",\n        description: \"Colored scatter plot from Excel selection\",\n        background: \"white\",\n        config: { view: { stroke: \"transparent\" }},\n        data: { values: processedData },\n        mark: { type: \"point\", size: 100, tooltip: true },\n        encoding: {\n          x: { \n            field: headers[0], \n            type: \"quantitative\",\n            scale: { zero: false },\n            axis: {\n              title: headers[0],\n              labelFontSize: 12,\n              titleFontSize: 14\n            }\n          },\n          y: { \n            field: headers[1], \n            type: \"quantitative\",\n            scale: { zero: false },\n            axis: {\n              title: headers[1],\n              labelFontSize: 12,\n              titleFontSize: 14\n            }\n          },\n          // Add color encoding if 3rd column exists\n          ...(headers.length >= 3 && {\n            color: { \n              field: headers[2], \n              type: \"nominal\",\n              legend: {\n                title: headers[2],\n                titleFontSize: 12,\n                labelFontSize: 11\n              }\n            }\n          }),\n          // Add shape encoding if 4th column exists\n          ...(headers.length >= 4 && {\n            shape: { \n              field: headers[3], \n              type: \"nominal\",\n              legend: {\n                title: headers[3],\n                titleFontSize: 12,\n                labelFontSize: 11\n              }\n            }\n          })\n        },\n        config: {\n          font: \"Segoe UI\",\n          axis: {\n            labelColor: \"#605e5c\",\n            titleColor: \"#323130\",\n            gridColor: \"#f3f2f1\"\n          },\n          legend: {\n            titleColor: \"#323130\",\n            labelColor: \"#605e5c\"\n          }\n        }\n      };\n\n      createChart(spec, \"scatter\", headers, rows)\n        .then(() => resolve(\"\"))\n        .catch((error) => resolve(`Error: ${error.message}`));\n\n    } catch (error) {\n      resolve(`Error: ${error.message}`);\n    }\n  });\n}\n\n/**\n * RADIAL custom function using the exact same specification as taskpane.js\n * Creates a radial chart from Excel data range\n * \n * @customfunction\n * @param {any[][]} data The data range including headers\n * @returns {string} Status message\n */\nfunction RADIAL(data) {\n  return new Promise((resolve) => {\n    try {\n      if (!data || data.length < 2) {\n        resolve(\"Error: Need at least header row + one data row\");\n        return;\n      }\n\n      const headers = data[0];\n      const rows = data.slice(1);\n\n      if (headers.length < 2) {\n        resolve(\"Error: Radial chart requires 2 columns (Category, Value)\");\n        return;\n      }\n\n      // Convert rows -> objects (same as taskpane.js)\n      const processedData = rows.map(row => {\n        let obj = {};\n        headers.forEach((h, i) => {\n          obj[h] = row[i];\n        });\n        return obj;\n      });\n\n      // Use EXACT specification from taskpane.js radial chart\n      const spec = {\n        $schema: \"https://vega.github.io/schema/vega-lite/v6.json\",\n        description: \"Radial chart from Excel selection\",\n        background: \"white\",\n        config: { view: { stroke: \"transparent\" }},\n        data: { values: processedData },\n        layer: [{\n          mark: { type: \"arc\", innerRadius: 20, stroke: \"#fff\" }\n        }, {\n          mark: { type: \"text\", radiusOffset: 10 },\n          encoding: {\n            text: { field: headers[1], type: \"quantitative\" }\n          }\n        }],\n        encoding: {\n          theta: { field: headers[1], type: \"quantitative\", stack: true },\n          radius: { \n            field: headers[1], \n            scale: { type: \"sqrt\", zero: true, rangeMin: 20 }\n          },\n          color: { field: headers[0], type: \"nominal\", legend: null }\n        }\n      };\n\n      createChart(spec, \"radial\", headers, rows)\n        .then(() => resolve(\"\"))\n        .catch((error) => resolve(`Error: ${error.message}`));\n\n    } catch (error) {\n      resolve(`Error: ${error.message}`);\n    }\n  });\n}\n\n/**\n * BOX custom function using the exact same specification as taskpane.js\n * Creates a box plot from Excel data range\n * \n * @customfunction\n * @param {any[][]} data The data range including headers\n * @returns {string} Status message\n */\nfunction BOX(data) {\n  return new Promise((resolve) => {\n    try {\n      if (!data || data.length < 2) {\n        resolve(\"Error: Need at least header row + one data row\");\n        return;\n      }\n\n      const headers = data[0];\n      const rows = data.slice(1);\n\n      if (headers.length < 2) {\n        resolve(\"Error: Box plot requires 2 columns (Category, Values)\");\n        return;\n      }\n\n      // Expect headers: Category | Value (same as taskpane.js)\n      const processedData = rows\n        .filter(r => r[0] && !isNaN(+r[1]))\n        .map(r => ({\n          category: r[0],\n          value: +r[1]\n        }));\n\n      if (processedData.length === 0) {\n        resolve(\"Error: No valid numeric data found for box plot\");\n        return;\n      }\n\n      // Use EXACT specification from taskpane.js box chart\n      const spec = {\n        $schema: \"https://vega.github.io/schema/vega-lite/v6.json\",\n        description: \"Box plot from Excel selection\",\n        data: { values: processedData },\n        mark: {\n          type: \"boxplot\",\n          extent: \"min-max\"   // show whiskers from min to max\n        },\n        encoding: {\n          x: { field: \"category\", type: \"nominal\" },\n          y: {\n            field: \"value\",\n            type: \"quantitative\",\n            scale: { zero: false }\n          },\n          color: {\n            field: \"category\",\n            type: \"nominal\",\n            legend: null\n          }\n        }\n      };\n\n      createChart(spec, \"box\", headers, rows)\n        .then(() => resolve(\"\"))\n        .catch((error) => resolve(`Error: ${error.message}`));\n\n    } catch (error) {\n      resolve(`Error: ${error.message}`);\n    }\n  });\n}\n\n/**\n * RADAR custom function using the exact same specification as taskpane.js\n * Creates a radar chart from Excel data range\n * \n * @customfunction\n * @param {any[][]} data The data range including headers\n * @returns {string} Status message\n */\nfunction RADAR(data) {\n  return new Promise((resolve) => {\n    try {\n      if (!data || data.length < 2) {\n        resolve(\"Error: Need at least header row + one data row\");\n        return;\n      }\n\n      const headers = data[0];\n      const rows = data.slice(1);\n\n      if (headers.length < 3) {\n        resolve(\"Error: Radar chart requires at least 3 columns (Series, Dimension1, Dimension2, ...)\");\n        return;\n      }\n\n      const radarData = [];\n      const dimensions = headers.slice(1); // All columns except first are dimensions\n      \n      rows.forEach((row, seriesIndex) => {\n        const seriesName = row[headers[0]] || `Series ${seriesIndex + 1}`;\n        \n        dimensions.forEach(dimension => {\n          const value = parseFloat(row[headers.indexOf(dimension)]) || 0;\n          radarData.push({\n            series: seriesName,\n            dimension: dimension,\n            value: value,\n            category: seriesIndex\n          });\n        });\n      });\n\n      // Get unique dimensions for grid\n      const uniqueDimensions = [...new Set(radarData.map(d => d.dimension))];\n\n      // Use EXACT specification from taskpane.js radar chart\n      const spec = {\n        $schema: \"https://vega.github.io/schema/vega/v6.json\",\n        description: \"Radar chart from Excel selection\",\n        width: 400,\n        height: 400,\n        padding: 60,\n        autosize: {\"type\": \"none\", \"contains\": \"padding\"},\n        background: \"white\",\n        config: { view: { stroke: \"transparent\" }},\n\n        signals: [\n          {\"name\": \"radius\", \"update\": \"width / 2\"}\n        ],\n\n        data: [\n          {\n            name: \"table\",\n            values: radarData\n          },\n          {\n            name: \"dimensions\",\n            values: uniqueDimensions.map(d => ({dimension: d}))\n          }\n        ],\n\n        scales: [\n          {\n            name: \"angular\",\n            type: \"point\",\n            range: {\"signal\": \"[-PI, PI]\"},\n            padding: 0.5,\n            domain: uniqueDimensions\n          },\n          {\n            name: \"radial\",\n            type: \"linear\",\n            range: {\"signal\": \"[0, radius]\"},\n            zero: true,\n            nice: true,\n            domain: {\"data\": \"table\", \"field\": \"value\"},\n            domainMin: 0\n          },\n          {\n            name: \"color\",\n            type: \"ordinal\",\n            domain: {\"data\": \"table\", \"field\": \"category\"},\n            range: [\n              \"#0078d4\", \"#00bcf2\", \"#40e0d0\", \"#00cc6a\", \"#10893e\",\n              \"#107c10\", \"#bad80a\", \"#ffb900\", \"#ff8c00\", \"#d13438\"\n            ]\n          }\n        ],\n\n        encode: {\n          enter: {\n            x: {\"signal\": \"radius\"},\n            y: {\"signal\": \"radius\"}\n          }\n        },\n\n        marks: [\n          {\n            type: \"group\",\n            name: \"categories\",\n            zindex: 1,\n            from: {\n              facet: {\"data\": \"table\", \"name\": \"facet\", \"groupby\": [\"category\", \"series\"]}\n            },\n            marks: [\n              {\n                type: \"line\",\n                name: \"category-line\",\n                from: {\"data\": \"facet\"},\n                encode: {\n                  enter: {\n                    interpolate: {\"value\": \"linear-closed\"},\n                    x: {\"signal\": \"scale('radial', datum.value) * cos(scale('angular', datum.dimension))\"},\n                    y: {\"signal\": \"scale('radial', datum.value) * sin(scale('angular', datum.dimension))\"},\n                    stroke: {\"scale\": \"color\", \"field\": \"category\"},\n                    strokeWidth: {\"value\": 2},\n                    fill: {\"scale\": \"color\", \"field\": \"category\"},\n                    fillOpacity: {\"value\": 0.1},\n                    strokeOpacity: {\"value\": 0.8}\n                  }\n                }\n              },\n              {\n                type: \"symbol\",\n                name: \"category-points\",\n                from: {\"data\": \"facet\"},\n                encode: {\n                  enter: {\n                    x: {\"signal\": \"scale('radial', datum.value) * cos(scale('angular', datum.dimension))\"},\n                    y: {\"signal\": \"scale('radial', datum.value) * sin(scale('angular', datum.dimension))\"},\n                    size: {\"value\": 50},\n                    fill: {\"scale\": \"color\", \"field\": \"category\"},\n                    stroke: {\"value\": \"white\"},\n                    strokeWidth: {\"value\": 1}\n                  }\n                }\n              }\n            ]\n          },\n          {\n            type: \"rule\",\n            name: \"radial-grid\",\n            from: {\"data\": \"dimensions\"},\n            zindex: 0,\n            encode: {\n              enter: {\n                x: {\"value\": 0},\n                y: {\"value\": 0},\n                x2: {\"signal\": \"radius * cos(scale('angular', datum.dimension))\"},\n                y2: {\"signal\": \"radius * sin(scale('angular', datum.dimension))\"},\n                stroke: {\"value\": \"#e1e4e8\"},\n                strokeWidth: {\"value\": 1}\n              }\n            }\n          },\n          {\n            type: \"text\",\n            name: \"dimension-label\",\n            from: {\"data\": \"dimensions\"},\n            zindex: 1,\n            encode: {\n              enter: {\n                x: {\"signal\": \"(radius + 20) * cos(scale('angular', datum.dimension))\"},\n                y: {\"signal\": \"(radius + 20) * sin(scale('angular', datum.dimension))\"},\n                text: {\"field\": \"dimension\"},\n                align: [\n                  {\n                    test: \"abs(scale('angular', datum.dimension)) > PI / 2\",\n                    value: \"right\"\n                  },\n                  {\n                    value: \"left\"\n                  }\n                ],\n                baseline: [\n                  {\n                    test: \"scale('angular', datum.dimension) > 0\", \n                    value: \"top\"\n                  },\n                  {\n                    test: \"scale('angular', datum.dimension) == 0\", \n                    value: \"middle\"\n                  },\n                  {\n                    value: \"bottom\"\n                  }\n                ],\n                fill: {\"value\": \"#323130\"},\n                fontWeight: {\"value\": \"bold\"},\n                font: {\"value\": \"Segoe UI\"},\n                fontSize: {\"value\": 12}\n              }\n            }\n          },\n          {\n            type: \"line\",\n            name: \"outer-line\",\n            from: {\"data\": \"radial-grid\"},\n            encode: {\n              enter: {\n                interpolate: {\"value\": \"linear-closed\"},\n                x: {\"field\": \"x2\"},\n                y: {\"field\": \"y2\"},\n                stroke: {\"value\": \"#8a8886\"},\n                strokeWidth: {\"value\": 2},\n                strokeOpacity: {\"value\": 0.6}\n              }\n            }\n          }\n        ]\n      };\n\n      createChart(spec, \"radar\", headers, rows)\n        .then(() => resolve(\"\"))\n        .catch((error) => resolve(`Error: ${error.message}`));\n\n    } catch (error) {\n      resolve(`Error: ${error.message}`);\n    }\n  });\n}\n\n/**\n * WATERFALL custom function using the exact same specification as taskpane.js\n * Creates a waterfall chart from Excel data range\n * \n * @customfunction\n * @param {any[][]} data The data range including headers\n * @returns {string} Status message\n */\nfunction WATERFALL(data) {\n  return new Promise((resolve) => {\n    try {\n      if (!data || data.length < 2) {\n        resolve(\"Error: Need at least header row + one data row\");\n        return;\n      }\n\n      const headers = data[0];\n      const rows = data.slice(1);\n\n      if (headers.length < 3) {\n        resolve(\"Error: Waterfall chart requires 3 columns (Category, Amount, Type)\");\n        return;\n      }\n\n      // Convert rows -> objects (same as taskpane.js)\n      const processedDataRaw = rows.map(row => {\n        let obj = {};\n        headers.forEach((h, i) => {\n          obj[h] = row[i];\n        });\n        return obj;\n      });\n\n      // Process waterfall data inline - set last entry's amount to 0 (same as taskpane.js)\n      const processedData = [...processedDataRaw];\n      if (processedData.length > 0) {\n        processedData[processedData.length - 1] = {\n          ...processedData[processedData.length - 1],\n          [headers[1]]: 0\n        };\n      }\n\n      // Calculate dynamic dimensions\n      const numDataPoints = processedDataRaw.length;\n      const dynamicWidth = Math.max(400, Math.min(1600, numDataPoints * 50));\n      const maxAmount = Math.max(...processedDataRaw.map(d => Math.abs(d[headers[1]])));\n      const dynamicHeight = Math.max(300, Math.min(600, maxAmount / 100 + 200));\n\n      // Use EXACT specification from taskpane.js waterfall chart\n      const spec = {\n        $schema: \"https://vega.github.io/schema/vega-lite/v6.json\",\n        description: \"Waterfall chart with multiple subtotals\",\n        background: \"white\",\n        data: { values: processedData },\n        config: { view: { stroke: \"transparent\" }},\n        width: dynamicWidth,\n        height: dynamicHeight,\n        transform: [\n          { \"window\": [{ \"op\": \"sum\", \"field\": headers[1], \"as\": \"sum\" }] },\n          { \"window\": [{ \"op\": \"lead\", \"field\": headers[0], \"as\": \"lead\" }] },\n          {\n            \"calculate\": `datum.lead === null ? datum.${headers[0]} : datum.lead`,\n            \"as\": \"lead\"\n          },\n          {\n            // If total → reset, else → running sum step\n            \"calculate\": `datum.${headers[2]} == 'total' ? 0 : datum.sum - datum.${headers[1]}`,\n            \"as\": \"previous_sum\"\n          },\n          {\n            \"calculate\": `datum.${headers[2]} == 'total' ? datum.sum : datum.${headers[1]}`,\n            \"as\": \"amount\"\n          },\n          {\n            \"calculate\": `datum.${headers[2]} == 'total' ? datum.${headers[1]} / 2 : (datum.sum + datum.previous_sum) / 2`,\n            \"as\": \"center\"\n          },\n          {\n            \"calculate\": `datum.${headers[2]} == 'total' ? datum.sum : (datum.${headers[1]} > 0 ? '+' : '') + datum.${headers[1]}`,\n            \"as\": \"text_amount\"\n          },\n          { \"calculate\": \"(datum.sum + datum.previous_sum) / 2\", \"as\": \"center\" },\n\n          // Add group index for stacked handling\n          {\n            \"window\": [{ \"op\": \"rank\", \"as\": \"group_index\" }],\n            \"frame\": [null, null],\n            \"groupby\": [headers[0]]\n          },\n\n          // Precompute color shades\n          {\n            \"calculate\": `\n            datum.${headers[2]} == 'total'\n                ? '#00B0F0'\n                : datum.amount >= 0\n                ? (datum.group_index == 1 ? '#70AD47'\n                    : (datum.group_index == 2 ? '#8BC97A'\n                    : (datum.group_index == 3 ? '#A7DA9D'\n                    : '#C3EBC0')))\n                : (datum.group_index == 1 ? '#E15759'\n                    : (datum.group_index == 2 ? '#EC7A7C'\n                    : (datum.group_index == 3 ? '#F29C9D'\n                    : '#F8BEBF')))\n            `,\n            \"as\": \"bar_color\"\n          }\n        ],\n        encoding: {\n          x: {\n            field: headers[0],\n            type: \"ordinal\",\n            sort: null,\n            axis: { labelAngle: -45, title: null },\n            scale: { paddingInner: 0.05, paddingOuter: 0.025 }\n          }\n        },\n        layer: [\n          {\n            mark: { type: \"bar\", size: 60},\n            encoding: {\n              y: { field: \"previous_sum\", type: \"quantitative\", title: null },\n              y2: { field: \"sum\" },\n              color: { field: \"bar_color\", type: \"nominal\", scale: null }\n            }\n          },\n          {\n            mark: { type: \"text\", fontWeight: \"bold\", baseline: \"middle\" },\n            encoding: {\n              y: { field: \"center\", type: \"quantitative\" },\n              text: { field: \"text_amount\", type: \"nominal\" },\n              color: {\n                condition: [\n                  { test: `datum.${headers[2]} == 'total'`, value: \"#725a30\" }\n                ],\n                value: \"white\"\n              }\n            }\n          }\n        ],\n        config: { text: { fontWeight: \"bold\", color: \"#D9D9D9\" } }\n      };\n\n      createChart(spec, \"waterfall\", headers, rows)\n        .then(() => resolve(\"\"))\n        .catch((error) => resolve(`Error: ${error.message}`));\n\n    } catch (error) {\n      resolve(`Error: ${error.message}`);\n    }\n  });\n}\n\n/**\n * SUNBURST custom function using the exact same specification as taskpane.js\n * Creates a sunburst chart from Excel data range\n * \n * @customfunction\n * @param {any[][]} data The data range including headers\n * @returns {string} Status message\n */\nfunction SUNBURST(data) {\n  return new Promise((resolve) => {\n    try {\n      if (!data || data.length < 2) {\n        resolve(\"Error: Need at least header row + one data row\");\n        return;\n      }\n\n      const headers = data[0];\n      const rows = data.slice(1);\n\n      if (headers.length < 2) {\n        resolve(\"Error: Sunburst chart requires at least 2 columns (Parent, Child, Value optional)\");\n        return;\n      }\n\n      const nodes = new Map();\n      rows.forEach((row, i) => {\n        const parent = row[headers[0]] || \"\";\n        const child = row[headers[1]] || `node_${i}`;\n        const value = headers.length >= 3 ? (parseFloat(row[headers[2]]) || 1) : 1;\n        \n        // Add parent node if it doesn't exist and is not empty\n        if (parent && !nodes.has(parent)) {\n          nodes.set(parent, {\n            id: parent,\n            parent: \"\",\n            name: parent,\n            size: 0 // Will be calculated later\n          });\n        }\n        \n        // Add child node\n        if (!nodes.has(child)) {\n          nodes.set(child, {\n            id: child,\n            parent: parent,\n            name: child,\n            size: value\n          });\n        } else {\n          // Update parent and value if child already exists\n          const existingNode = nodes.get(child);\n          existingNode.parent = parent;\n          existingNode.size = value;\n        }\n      });\n      \n      // Convert Map to array\n      const hierarchicalData = Array.from(nodes.values());\n      \n      // Find root nodes (nodes with no parent or parent not in dataset)\n      const allIds = new Set(hierarchicalData.map(d => d.id));\n      hierarchicalData.forEach(node => {\n        if (node.parent && !allIds.has(node.parent)) {\n          node.parent = \"\"; // Make it a root node if parent doesn't exist\n        }\n      });\n\n      // Calculate chart size based on data complexity\n      const nodeCount = hierarchicalData.length;\n      const chartSize = Math.max(400, Math.min(600, nodeCount * 15 + 300));\n\n      // Use EXACT specification from taskpane.js sunburst chart\n      const spec = {\n        \"$schema\": \"https://vega.github.io/schema/vega/v6.json\",\n        \"description\": \"Sunburst chart from Excel selection\",\n        \"width\": chartSize,\n        \"height\": chartSize,\n        \"padding\": 10,\n        \"autosize\": \"none\",\n        \"background\": \"white\",\n        \"config\": { \"view\": { \"stroke\": \"transparent\" }},\n\n        \"signals\": [\n          {\n            \"name\": \"centerX\",\n            \"update\": \"width / 2\"\n          },\n          {\n            \"name\": \"centerY\", \n            \"update\": \"height / 2\"\n          },\n          {\n            \"name\": \"outerRadius\",\n            \"update\": \"min(width, height) / 2 - 10\"\n          }\n        ],\n\n        \"data\": [\n          {\n            \"name\": \"tree\",\n            \"values\": hierarchicalData,\n            \"transform\": [\n              {\n                \"type\": \"stratify\",\n                \"key\": \"id\",\n                \"parentKey\": \"parent\"\n              },\n              {\n                \"type\": \"partition\",\n                \"field\": \"size\",\n                \"sort\": {\"field\": \"size\", \"order\": \"descending\"},\n                \"size\": [{\"signal\": \"2 * PI\"}, {\"signal\": \"outerRadius\"}],\n                \"as\": [\"a0\", \"r0\", \"a1\", \"r1\", \"depth\", \"children\"]\n              }\n            ]\n          }\n        ],\n\n        \"scales\": [\n          {\n            \"name\": \"color\",\n            \"type\": \"ordinal\",\n            \"domain\": {\"data\": \"tree\", \"field\": \"depth\"},\n            \"range\": [\n              \"#0078d4\", \"#00bcf2\", \"#40e0d0\", \"#00cc6a\", \"#10893e\", \n              \"#107c10\", \"#bad80a\", \"#ffb900\", \"#ff8c00\", \"#d13438\",\n              \"#8764b8\", \"#e3008c\", \"#00b7c3\", \"#038387\", \"#486991\"\n            ]\n          },\n          {\n            \"name\": \"opacity\",\n            \"type\": \"linear\",\n            \"domain\": {\"data\": \"tree\", \"field\": \"depth\"},\n            \"range\": [0.8, 0.4]\n          }\n        ],\n\n        \"marks\": [\n          {\n            \"type\": \"arc\",\n            \"from\": {\"data\": \"tree\"},\n            \"encode\": {\n              \"enter\": {\n                \"x\": {\"signal\": \"centerX\"},\n                \"y\": {\"signal\": \"centerY\"},\n                \"stroke\": {\"value\": \"white\"},\n                \"strokeWidth\": {\"value\": 1}\n              },\n              \"update\": {\n                \"startAngle\": {\"field\": \"a0\"},\n                \"endAngle\": {\"field\": \"a1\"},\n                \"innerRadius\": {\"field\": \"r0\"},\n                \"outerRadius\": {\"field\": \"r1\"},\n                \"fill\": {\"scale\": \"color\", \"field\": \"depth\"},\n                \"fillOpacity\": {\"scale\": \"opacity\", \"field\": \"depth\"}\n              }\n            }\n          },\n          {\n            \"type\": \"text\",\n            \"from\": {\"data\": \"tree\"},\n            \"encode\": {\n              \"enter\": {\n                \"x\": {\"signal\": \"centerX\"},\n                \"y\": {\"signal\": \"centerY\"},\n                \"radius\": {\"signal\": \"(datum.r0 + datum.r1) / 2\"},\n                \"theta\": {\"signal\": \"(datum.a0 + datum.a1) / 2\"},\n                \"fill\": {\"value\": \"#323130\"},\n                \"font\": {\"value\": \"Segoe UI\"},\n                \"fontSize\": {\"value\": 10},\n                \"fontWeight\": {\"value\": \"bold\"},\n                \"align\": {\"value\": \"center\"},\n                \"baseline\": {\"value\": \"middle\"}\n              },\n              \"update\": {\n                \"text\": {\n                  \"signal\": \"(datum.r1 - datum.r0) > 20 && (datum.a1 - datum.a0) > 0.3 ? datum.name : ''\"\n                },\n                \"opacity\": {\n                  \"signal\": \"(datum.r1 - datum.r0) > 20 && (datum.a1 - datum.a0) > 0.3 ? 1 : 0\"\n                }\n              }\n            }\n          }\n        ]\n      };\n\n      createChart(spec, \"sunburst\", headers, rows)\n        .then(() => resolve(\"\"))\n        .catch((error) => resolve(`Error: ${error.message}`));\n\n    } catch (error) {\n      resolve(`Error: ${error.message}`);\n    }\n  });\n}\n\n/**\n * TREEMAP custom function using the exact same specification as taskpane.js\n * Creates a treemap chart from Excel data range\n * \n * @customfunction\n * @param {any[][]} data The data range including headers\n * @returns {string} Status message\n */\nfunction TREEMAP(data) {\n  return new Promise((resolve) => {\n    try {\n      if (!data || data.length < 2) {\n        resolve(\"Error: Need at least header row + one data row\");\n        return;\n      }\n\n      const headers = data[0];\n      const rows = data.slice(1);\n\n      if (headers.length < 3) {\n        resolve(\"Error: Treemap chart requires 3 columns (Parent, Category, Value)\");\n        return;\n      }\n\n      let treeData;\n      \n      if (headers.length >= 3) {\n        // Hierarchical data with parent column\n        treeData = rows.map((d, i) => ({\n          id: `${d[headers[1]]}_${i}`,\n          name: d[headers[1]],\n          parent: d[headers[0]] || \"root\",\n          size: parseFloat(d[headers[2]]) || 0\n        }));\n        \n        // Add root and parent nodes\n        const parents = [...new Set(treeData.map(d => d.parent))];\n        parents.forEach(parent => {\n          if (parent !== \"root\" && !treeData.find(d => d.id === parent)) {\n            treeData.push({\n              id: parent,\n              name: parent,\n              parent: \"root\",\n              size: 0\n            });\n          }\n        });\n        \n        // Add root node\n        treeData.push({\n          id: \"root\",\n          name: \"Root\",\n          parent: \"\",\n          size: 0\n        });\n      } else {\n        // Simple flat data - create single level hierarchy\n        treeData = [\n          {\n            id: \"root\",\n            name: \"Root\", \n            parent: \"\",\n            size: 0\n          },\n          ...rows.map((d, i) => ({\n            id: `item_${i}`,\n            name: d[headers[1]],\n            parent: \"root\",\n            size: parseFloat(d[headers[2]]) || 0\n          }))\n        ];\n      }\n\n      // Use EXACT specification from taskpane.js treemap chart\n      const spec = {\n        $schema: \"https://vega.github.io/schema/vega/v5.json\",\n        description: \"Treemap visualization from Excel data\",\n        background: \"white\",\n        width: 600,\n        height: 400,\n        padding: 5,\n        autosize: \"fit\",\n        \n        data: [\n          {\n            name: \"tree\",\n            values: treeData,\n            transform: [\n              {\n                type: \"stratify\",\n                key: \"id\",\n                parentKey: \"parent\"\n              },\n              {\n                type: \"treemap\",\n                field: \"size\",\n                sort: { field: \"value\" },\n                round: true,\n                method: \"squarify\",\n                ratio: 1.6,\n                size: [{ signal: \"width\" }, { signal: \"height\" }]\n              }\n            ]\n          },\n          {\n            name: \"nodes\",\n            source: \"tree\",\n            transform: [\n              { type: \"filter\", expr: \"datum.children\" }\n            ]\n          },\n          {\n            name: \"leaves\", \n            source: \"tree\",\n            transform: [\n              { type: \"filter\", expr: \"!datum.children\" }\n            ]\n          }\n        ],\n        \n        scales: [\n          {\n            name: \"color\",\n            type: \"ordinal\",\n            domain: { data: \"nodes\", field: \"name\" },\n            range: [\n              \"#0078d4\", \"#00bcf2\", \"#40e0d0\", \"#00cc6a\", \"#10893e\",\n              \"#107c10\", \"#bad80a\", \"#ffb900\", \"#ff8c00\", \"#d13438\"\n            ]\n          },\n          {\n            name: \"fontSize\",\n            type: \"ordinal\", \n            domain: [0, 1, 2, 3],\n            range: [20, 16, 12, 10]\n          },\n          {\n            name: \"opacity\",\n            type: \"ordinal\",\n            domain: [0, 1, 2, 3], \n            range: [0.3, 0.6, 0.8, 1.0]\n          }\n        ],\n        \n        marks: [\n          {\n            type: \"rect\",\n            from: { data: \"nodes\" },\n            interactive: false,\n            encode: {\n              enter: {\n                fill: { scale: \"color\", field: \"name\" },\n                fillOpacity: { scale: \"opacity\", field: \"depth\" }\n              },\n              update: {\n                x: { field: \"x0\" },\n                y: { field: \"y0\" },\n                x2: { field: \"x1\" },\n                y2: { field: \"y1\" },\n                stroke: { value: \"#ffffff\" },\n                strokeWidth: { value: 1 }\n              }\n            }\n          },\n          {\n            type: \"rect\",\n            from: { data: \"leaves\" },\n            encode: {\n              enter: {\n                stroke: { value: \"#ffffff\" },\n                strokeWidth: { value: 2 }\n              },\n              update: {\n                x: { field: \"x0\" },\n                y: { field: \"y0\" },\n                x2: { field: \"x1\" },\n                y2: { field: \"y1\" },\n                fill: { value: \"transparent\" },\n                tooltip: {\n                  signal: `{'Category': datum.name, 'Value': datum.size, 'Parent': datum.parent}`\n                }\n              },\n              hover: {\n                fill: { value: \"#323130\" },\n                fillOpacity: { value: 0.1 }\n              }\n            }\n          },\n          {\n            type: \"text\",\n            from: { data: \"leaves\" },\n            interactive: false,\n            encode: {\n              enter: {\n                font: { value: \"Segoe UI, Arial, sans-serif\" },\n                align: { value: \"center\" },\n                baseline: { value: \"middle\" },\n                fill: { value: \"#323130\" },\n                fontWeight: { value: \"bold\" },\n                text: { field: \"name\" },\n                fontSize: { scale: \"fontSize\", field: \"depth\" }\n              },\n              update: {\n                x: { signal: \"0.5 * (datum.x0 + datum.x1)\" },\n                y: { signal: \"0.5 * (datum.y0 + datum.y1)\" },\n                opacity: {\n                  signal: \"(datum.x1 - datum.x0) > 50 && (datum.y1 - datum.y0) > 20 ? 1 : 0\"\n                }\n              }\n            }\n          }\n        ]\n      };\n\n      createChart(spec, \"treemap\", headers, rows)\n        .then(() => resolve(\"\"))\n        .catch((error) => resolve(`Error: ${error.message}`));\n\n    } catch (error) {\n      resolve(`Error: ${error.message}`);\n    }\n  });\n}\n\n/**\n * HISTOGRAM custom function using the exact same specification as taskpane.js\n * Creates a histogram from Excel data range\n * \n * @customfunction\n * @param {any[][]} data The data range including headers\n * @returns {string} Status message\n */\nfunction HISTOGRAM(data) {\n  return new Promise((resolve) => {\n    try {\n      if (!data || data.length < 2) {\n        resolve(\"Error: Need at least header row + one data row\");\n        return;\n      }\n\n      const headers = data[0];\n      const rows = data.slice(1);\n\n      if (headers.length < 1) {\n        resolve(\"Error: Histogram requires at least 1 column of numeric values\");\n        return;\n      }\n\n      // Expect a single numeric column (same as taskpane.js)\n      const processedData = rows\n        .filter(r => !isNaN(+r[0]))\n        .map(r => ({ value: +r[0] }));\n\n      if (processedData.length === 0) {\n        resolve(\"Error: No valid numeric data found for histogram\");\n        return;\n      }\n\n      // Use EXACT specification from taskpane.js histogram chart\n      const spec = {\n        \"$schema\": \"https://vega.github.io/schema/vega-lite/v6.json\",\n        \"description\": \"Histogram from Excel selection\",\n        \"data\": { \"values\": processedData },\n        \"mark\": \"bar\",\n        \"encoding\": {\n          \"x\": {\n            \"field\": \"value\",\n            \"bin\": { \"maxbins\": 20 },   // adjust bin count here\n            \"type\": \"quantitative\",\n            \"axis\": { \"title\": \"Value\" }\n          },\n          \"y\": {\n            \"aggregate\": \"count\",\n            \"type\": \"quantitative\",\n            \"axis\": { \"title\": \"Count\" }\n          }\n        }\n      };\n\n      createChart(spec, \"histogram\", headers, rows)\n        .then(() => resolve(\"\"))\n        .catch((error) => resolve(`Error: ${error.message}`));\n\n    } catch (error) {\n      resolve(`Error: ${error.message}`);\n    }\n  });\n}\n\n/**\n * ARC custom function using the exact same specification as taskpane.js\n * Creates an arc diagram from Excel data range\n * \n * @customfunction\n * @param {any[][]} data The data range including headers\n * @returns {string} Status message\n */\nfunction ARC(data) {\n  return new Promise((resolve) => {\n    try {\n      if (!data || data.length < 2) {\n        resolve(\"Error: Need at least header row + one data row\");\n        return;\n      }\n\n      const headers = data[0];\n      const rows = data.slice(1);\n\n      if (headers.length < 2) {\n        resolve(\"Error: Arc chart requires at least 2 columns (Source, Target, Weight optional)\");\n        return;\n      }\n\n      // Convert rows -> objects (same as taskpane.js)\n      const processedData = rows.map(row => {\n        let obj = {};\n        headers.forEach((h, i) => {\n          obj[h] = row[i];\n        });\n        return obj;\n      });\n\n      // EXACT data processing from taskpane.js - Transform Excel data for arc chart\n      const edges = processedData.map((row, index) => ({\n        source: row[headers[0]],\n        target: row[headers[1]],\n        value: headers.length >= 3 && row[headers[2]] ? row[headers[2]] : 1,\n        group: headers.length >= 4 && row[headers[3]] ? row[headers[3]] : \"default\"\n      }));\n\n      // Get unique nodes from edges\n      const nodeMap = new Map();\n      edges.forEach(edge => {\n        if (!nodeMap.has(edge.source)) {\n          nodeMap.set(edge.source, { \n            name: edge.source, \n            group: edge.group,\n            index: nodeMap.size\n          });\n        }\n        if (!nodeMap.has(edge.target)) {\n          nodeMap.set(edge.target, { \n            name: edge.target, \n            group: edge.group,\n            index: nodeMap.size\n          });\n        }\n      });\n\n      const nodes = Array.from(nodeMap.values());\n\n      // Transform edges to use node indices\n      const edgesWithIndices = edges.map(edge => ({\n        source: nodeMap.get(edge.source).index,\n        target: nodeMap.get(edge.target).index,\n        value: edge.value\n      }));\n\n      // Use EXACT specification from taskpane.js arc chart\n      const spec = {\n        $schema: \"https://vega.github.io/schema/vega/v5.json\",\n        description: \"Arc diagram from Excel selection\",\n        width: Math.max(600, nodes.length * 40),\n        height: 300,\n        padding: { top: 20, bottom: 80, left: 20, right: 20 },\n        background: \"white\",\n        config: { view: { stroke: \"transparent\" }},\n        data: [\n          {\n            name: \"edges\",\n            values: edgesWithIndices\n          },\n          {\n            name: \"sourceDegree\",\n            source: \"edges\",\n            transform: [\n              { type: \"aggregate\", groupby: [\"source\"], as: [\"count\"] }\n            ]\n          },\n          {\n            name: \"targetDegree\", \n            source: \"edges\",\n            transform: [\n              { type: \"aggregate\", groupby: [\"target\"], as: [\"count\"] }\n            ]\n          },\n          {\n            name: \"nodes\",\n            values: nodes,\n            transform: [\n              { type: \"window\", ops: [\"rank\"], as: [\"order\"] },\n              {\n                type: \"lookup\", from: \"sourceDegree\", key: \"source\",\n                fields: [\"index\"], as: [\"sourceDegree\"],\n                default: { count: 0 }\n              },\n              {\n                type: \"lookup\", from: \"targetDegree\", key: \"target\", \n                fields: [\"index\"], as: [\"targetDegree\"],\n                default: { count: 0 }\n              },\n              {\n                type: \"formula\", as: \"degree\",\n                expr: \"(datum.sourceDegree.count || 0) + (datum.targetDegree.count || 0)\"\n              }\n            ]\n          }\n        ],\n\n        scales: [\n          {\n            name: \"position\",\n            type: \"band\",\n            domain: { data: \"nodes\", field: \"order\", sort: true },\n            range: \"width\"\n          },\n          {\n            name: \"color\",\n            type: \"ordinal\",\n            range: { scheme: \"category20\" },\n            domain: { data: \"nodes\", field: \"group\" }\n          }\n        ],\n\n        marks: [\n          {\n            type: \"symbol\",\n            name: \"layout\",\n            interactive: false,\n            from: { data: \"nodes\" },\n            encode: {\n              enter: { opacity: { value: 0 } },\n              update: {\n                x: { scale: \"position\", field: \"order\" },\n                y: { value: 0 },\n                size: { field: \"degree\", mult: 8, offset: 50 },\n                fill: { scale: \"color\", field: \"group\" }\n              }\n            }\n          },\n          {\n            type: \"path\",\n            from: { data: \"edges\" },\n            encode: {\n              update: {\n                stroke: { value: \"#0078d4\" },\n                strokeOpacity: { value: 0.4 },\n                strokeWidth: { field: \"value\", mult: 2, offset: 1 }\n              }\n            },\n            transform: [\n              {\n                type: \"lookup\", from: \"layout\", key: \"datum.index\",\n                fields: [\"datum.source\", \"datum.target\"],\n                as: [\"sourceNode\", \"targetNode\"]\n              },\n              {\n                type: \"linkpath\",\n                sourceX: { expr: \"min(datum.sourceNode.x, datum.targetNode.x)\" },\n                targetX: { expr: \"max(datum.sourceNode.x, datum.targetNode.x)\" },\n                sourceY: { expr: \"0\" },\n                targetY: { expr: \"0\" },\n                shape: \"arc\"\n              }\n            ]\n          },\n          {\n            type: \"symbol\",\n            from: { data: \"layout\" },\n            encode: {\n              update: {\n                x: { field: \"x\" },\n                y: { field: \"y\" },\n                fill: { field: \"fill\" },\n                size: { field: \"size\" },\n                stroke: { value: \"white\" },\n                strokeWidth: { value: 1 },\n                tooltip: { \n                  signal: \"{'Node': datum.datum.name, 'Group': datum.datum.group, 'Connections': datum.datum.degree}\" \n                }\n              }\n            }\n          },\n          {\n            type: \"text\",\n            from: { data: \"nodes\" },\n            encode: {\n              update: {\n                x: { scale: \"position\", field: \"order\" },\n                y: { value: 25 },\n                fontSize: { value: 10 },\n                align: { value: \"center\" },\n                baseline: { value: \"top\" },\n                angle: { value: -45 },\n                text: { field: \"name\" },\n                fill: { value: \"#323130\" },\n                font: { value: \"Segoe UI\" }\n              }\n            }\n          }\n        ],\n        \n        config: {\n          view: { stroke: \"transparent\" },\n          font: \"Segoe UI\",\n          text: { font: \"Segoe UI\", fontSize: 10, fill: \"#605e5c\" }\n        }\n      };\n\n      createChart(spec, \"arc\", headers, rows)\n        .then(() => resolve(\"\"))\n        .catch((error) => resolve(`Error: ${error.message}`));\n\n    } catch (error) {\n      resolve(`Error: ${error.message}`);\n    }\n  });\n}\n\n/**\n * Generic chart creation function (same approach as taskpane.js)\n */\nasync function createChart(spec, chartType, headers, rows) {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const chartId = `${chartType}_${Date.now()}_${Math.random().toString(36).substr(2, 6)}`;\n      \n      // Render hidden chart (same as taskpane.js)\n      const hiddenDiv = document.createElement(\"div\");\n      hiddenDiv.style.display = \"none\";\n      hiddenDiv.id = chartId;\n      document.body.appendChild(hiddenDiv);\n\n      // Load Vega-Lite if not available\n      if (typeof vegaEmbed === 'undefined') {\n        await loadVegaLibraries();\n      }\n\n      const result = await vegaEmbed(hiddenDiv, spec, { actions: false });\n      const view = result.view;\n\n      // Export chart -> PNG (same as taskpane.js)\n      const pngUrl = await view.toImageURL(\"png\");\n      const response = await fetch(pngUrl);\n      const blob = await response.blob();\n\n      const reader = new FileReader();\n      reader.onloadend = async () => {\n        try {\n          const base64data = reader.result.split(\",\")[1];\n\n          // Insert into Excel (same approach as taskpane.js)\n          await insertChartIntoExcel(base64data, chartType, chartId);\n          \n          // Clean up hidden div\n          document.body.removeChild(hiddenDiv);\n          resolve();\n          \n        } catch (error) {\n          // Clean up on error\n          if (document.body.contains(hiddenDiv)) {\n            document.body.removeChild(hiddenDiv);\n          }\n          reject(error);\n        }\n      };\n      \n      reader.readAsDataURL(blob);\n\n    } catch (error) {\n      reject(error);\n    }\n  });\n}\n\n/**\n * Inserts chart into Excel using the same approach as taskpane.js\n */\nasync function insertChartIntoExcel(base64data, chartType, chartId) {\n  return Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getActiveWorksheet();\n\n    // Remove old chart and get its position\n    const oldPosition = await removeExistingCharts(context, sheet, chartType);\n\n    let left, top, targetWidth;\n\n    if (oldPosition) {\n      // Use old chart position and size\n      left = oldPosition.left;\n      top = oldPosition.top;\n      targetWidth = oldPosition.width;\n    } else {\n      // Fall back to current selection\n      const range = context.workbook.getSelectedRange();\n      range.load(\"left, top, width, height\");\n      await context.sync();\n      left = range.left;\n      top = range.top;\n      targetWidth = Math.max(400, range.width * 8); // Default chart width\n    }\n\n    // Insert the new image\n    const image = sheet.shapes.addImage(base64data);\n    image.left = left;\n    image.top = top;\n    image.lockAspectRatio = true; // Set this BEFORE setting dimensions\n    image.width = targetWidth; // Only set width, let Excel calculate height\n    image.name = `${chartType.charAt(0).toUpperCase() + chartType.slice(1)}Chart_${chartId}`;\n\n    await context.sync();\n  });\n}\n\n/**\n * Remove existing charts of the same type (prevents duplicates)\n */\nasync function removeExistingCharts(context, sheet, chartType) {\n  const shapes = sheet.shapes;\n  shapes.load(\"items\");\n  await context.sync();\n\n  const chartPrefix = `${chartType.charAt(0).toUpperCase() + chartType.slice(1)}Chart_`;\n  let oldPosition = null;\n\n  for (let i = shapes.items.length - 1; i >= 0; i--) {\n    const shape = shapes.items[i];\n    shape.load([\"name\", \"left\", \"top\", \"width\", \"height\"]);\n  }\n  await context.sync();\n\n  for (let i = shapes.items.length - 1; i >= 0; i--) {\n    const shape = shapes.items[i];\n    if (shape.name && shape.name.startsWith(chartPrefix)) {\n      // Save position before deleting\n      oldPosition = {\n        left: shape.left,\n        top: shape.top,\n        width: shape.width,\n        height: shape.height,\n      };\n      shape.delete();\n      await context.sync();\n    }\n  }\n\n  return oldPosition;\n}\n\n/**\n * Load Vega libraries (same CDN versions as taskpane.html)\n */\nfunction loadVegaLibraries() {\n  return new Promise((resolve, reject) => {\n    if (typeof vegaEmbed !== 'undefined') {\n      resolve();\n      return;\n    }\n\n    // Load libraries in sequence (same as taskpane.html)\n    const scripts = [\n      'https://cdn.jsdelivr.net/npm/vega@6',\n      'https://cdn.jsdelivr.net/npm/vega-lite@6', \n      'https://cdn.jsdelivr.net/npm/vega-embed@6'\n    ];\n\n    let loadedCount = 0;\n    \n    scripts.forEach((src, index) => {\n      const script = document.createElement('script');\n      script.src = src;\n      script.onload = () => {\n        loadedCount++;\n        if (loadedCount === scripts.length) {\n          resolve();\n        }\n      };\n      script.onerror = () => reject(new Error(`Failed to load ${src}`));\n      document.head.appendChild(script);\n    });\n  });\n}\n\n// Register all custom functions\nif (typeof CustomFunctions !== 'undefined') {\n  CustomFunctions.associate(\"LINE\", LINE);\n  CustomFunctions.associate(\"BAR\", BAR);\n  CustomFunctions.associate(\"PIE\", PIE);\n  CustomFunctions.associate(\"AREA\", AREA);\n  CustomFunctions.associate(\"SCATTER\", SCATTER);\n  CustomFunctions.associate(\"RADIAL\", RADIAL);\n  CustomFunctions.associate(\"BOX\", BOX);\n  CustomFunctions.associate(\"RADAR\", RADAR);\n  CustomFunctions.associate(\"WATERFALL\", WATERFALL);\n  CustomFunctions.associate(\"SUNBURST\", SUNBURST);\n  CustomFunctions.associate(\"TREEMAP\", TREEMAP);\n  CustomFunctions.associate(\"HISTOGRAM\", HISTOGRAM);\n  CustomFunctions.associate(\"ARC\", ARC);\n}\nCustomFunctions.associate(\"LINE\", LINE);\nCustomFunctions.associate(\"BAR\", BAR);\nCustomFunctions.associate(\"PIE\", PIE);\nCustomFunctions.associate(\"AREA\", AREA);\nCustomFunctions.associate(\"SCATTER\", SCATTER);\nCustomFunctions.associate(\"RADIAL\", RADIAL);\nCustomFunctions.associate(\"BOX\", BOX);\nCustomFunctions.associate(\"RADAR\", RADAR);\nCustomFunctions.associate(\"WATERFALL\", WATERFALL);\nCustomFunctions.associate(\"SUNBURST\", SUNBURST);\nCustomFunctions.associate(\"TREEMAP\", TREEMAP);\nCustomFunctions.associate(\"HISTOGRAM\", HISTOGRAM);\nCustomFunctions.associate(\"ARC\", ARC);"],"names":["e","t","r","Symbol","n","iterator","o","toStringTag","i","c","prototype","Generator","u","Object","create","_regeneratorDefine2","f","p","y","G","v","a","d","bind","length","l","TypeError","call","done","value","return","GeneratorFunction","GeneratorFunctionPrototype","getPrototypeOf","setPrototypeOf","__proto__","displayName","_regenerator","w","m","defineProperty","_invoke","enumerable","configurable","writable","_typeof","constructor","asyncGeneratorStep","Promise","resolve","then","_asyncToGenerator","arguments","apply","_next","_throw","_toConsumableArray","Array","isArray","_arrayLikeToArray","_arrayWithoutHoles","from","_iterableToArray","toString","slice","name","test","_unsupportedIterableToArray","_nonIterableSpread","ownKeys","keys","getOwnPropertySymbols","filter","getOwnPropertyDescriptor","push","_objectSpread","forEach","_defineProperty","getOwnPropertyDescriptors","defineProperties","toPrimitive","String","_toPrimitive","_toPropertyKey","LINE","data","headers","rows","processedData","map","row","obj","h","transformedData","valueColumns","colName","undefined","parseFloat","createChart","$schema","description","background","config","view","stroke","values","mark","type","point","tooltip","strokeWidth","encoding","x","field","axis","title","labelFontSize","titleFontSize","labelAngle","color","scale","scheme","legend","font","labelColor","titleColor","gridColor","size","filled","catch","error","concat","message","BAR","PIE","some","isNaN","outerRadius","theta","AREA","opacity","SCATTER","zero","shape","RADIAL","layer","innerRadius","radiusOffset","text","stack","radius","rangeMin","BOX","category","extent","RADAR","radarData","dimensions","seriesIndex","seriesName","dimension","indexOf","series","uniqueDimensions","Set","width","height","padding","autosize","signals","scales","range","domain","nice","domainMin","encode","enter","marks","zindex","facet","interpolate","fill","fillOpacity","strokeOpacity","x2","y2","align","baseline","fontWeight","fontSize","WATERFALL","processedDataRaw","numDataPoints","dynamicWidth","Math","max","min","maxAmount","abs","transform","sort","paddingInner","paddingOuter","condition","SUNBURST","nodes","Map","parent","child","has","set","id","existingNode","get","hierarchicalData","allIds","node","nodeCount","chartSize","TREEMAP","treeData","find","key","parentKey","round","method","ratio","signal","source","expr","interactive","update","hover","HISTOGRAM","ARC","edges","index","target","group","nodeMap","edge","edgesWithIndices","top","bottom","left","right","groupby","as","ops","fields","default","count","mult","offset","sourceX","targetX","sourceY","targetY","angle","_x","_x2","_x3","_x4","_createChart","_callee3","spec","chartType","_context3","_ref","_callee2","reject","chartId","hiddenDiv","result","pngUrl","response","blob","reader","_t2","_context2","Date","now","random","substr","document","createElement","style","display","body","appendChild","vegaEmbed","loadVegaLibraries","actions","toImageURL","fetch","FileReader","onloadend","_callee","base64data","_t","_context","split","insertChartIntoExcel","removeChild","contains","readAsDataURL","_x1","_x10","_x5","_x6","_x7","_insertChartIntoExcel","_callee5","_context5","Excel","run","_ref3","_callee4","context","sheet","oldPosition","targetWidth","image","_context4","workbook","worksheets","getActiveWorksheet","removeExistingCharts","getSelectedRange","load","sync","shapes","addImage","lockAspectRatio","charAt","toUpperCase","_x11","_x8","_x9","_x0","_removeExistingCharts","_callee6","chartPrefix","_i","_shape","_context6","items","startsWith","delete","scripts","loadedCount","src","script","onload","onerror","Error","head","CustomFunctions","associate"],"sourceRoot":""}