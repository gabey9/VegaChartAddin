{"version":3,"file":"functions.js","mappings":"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","sources":["webpack://excel-custom-functions-js/./src/functions/functions.js"],"sourcesContent":["/**\n * LINE custom function using the exact same specification as taskpane.js\n * Creates a multi-series line chart from Excel data range\n * \n * @customfunction\n * @param {any[][]} data The data range including headers\n * @returns {string} Status message\n */\nfunction LINE(data) {\n  return new Promise((resolve) => {\n    try {\n      if (!data || data.length < 2) {\n        resolve(\"Error: Need at least header row + one data row\");\n        return;\n      }\n\n      const headers = data[0];\n      const rows = data.slice(1);\n\n      // Convert rows -> objects (same as taskpane.js)\n      const processedData = rows.map(row => {\n        let obj = {};\n        headers.forEach((h, i) => {\n          obj[h] = row[i];\n        });\n        return obj;\n      });\n\n      // Transform data for multi-series line chart (exact copy from taskpane.js)\n      const transformedData = [];\n      const valueColumns = headers.slice(1);\n      processedData.forEach(row => {\n        valueColumns.forEach(colName => {\n          if (row[colName] !== null && row[colName] !== undefined && row[colName] !== \"\") {\n            transformedData.push({\n              [headers[0]]: row[headers[0]], // x-axis value (first column)\n              series: colName,               // series name (column header)\n              value: parseFloat(row[colName]) || 0  // y-axis value\n            });\n          }\n        });\n      });\n\n      // Use EXACT specification from taskpane.js line chart\n      const spec = {\n        $schema: \"https://vega.github.io/schema/vega-lite/v6.json\",\n        description: \"Multi-series line chart from Excel selection\",\n        background: \"white\",\n        config: { view: { stroke: \"transparent\" }},\n        data: { values: transformedData },\n        mark: { \n          type: \"line\", \n          point: false,\n          tooltip: true,\n          strokeWidth: 2\n        },\n        encoding: {\n          x: { \n            field: headers[0], \n            type: \"ordinal\",\n            axis: {\n              title: headers[0],\n              labelFontSize: 12,\n              titleFontSize: 14,\n              labelAngle: 0\n            }\n          },\n          y: { \n            field: \"value\", \n            type: \"quantitative\",\n            axis: {\n              title: \"Value\",\n              labelFontSize: 12,\n              titleFontSize: 14\n            }\n          },\n          color: { \n            field: \"series\", \n            type: \"nominal\",\n            scale: {\n              scheme: \"category10\"\n            },\n            legend: {\n              title: \"Series\",\n              titleFontSize: 12,\n              labelFontSize: 11\n            }\n          }\n        },\n        config: {\n          font: \"Segoe UI\",\n          axis: {\n            labelColor: \"#605e5c\",\n            titleColor: \"#323130\",\n            gridColor: \"#f3f2f1\"\n          },\n          legend: {\n            titleColor: \"#323130\",\n            labelColor: \"#605e5c\"\n          },\n          point: {\n            size: 60,\n            filled: true\n          }\n        }\n      };\n\n      createChart(spec, \"line\", headers, rows)\n        .then(() => resolve(\"\"))\n        .catch((error) => resolve(`Error: ${error.message}`));\n\n    } catch (error) {\n      resolve(`Error: ${error.message}`);\n    }\n  });\n}\n\n/**\n * BAR custom function using the exact same specification as taskpane.js\n * Creates a bar chart from Excel data range\n * \n * @customfunction\n * @param {any[][]} data The data range including headers\n * @returns {string} Status message\n */\nfunction BAR(data) {\n  return new Promise((resolve) => {\n    try {\n      if (!data || data.length < 2) {\n        resolve(\"Error: Need at least header row + one data row\");\n        return;\n      }\n\n      const headers = data[0];\n      const rows = data.slice(1);\n\n      // Convert rows -> objects (same as taskpane.js)\n      const processedData = rows.map(row => {\n        let obj = {};\n        headers.forEach((h, i) => {\n          obj[h] = row[i];\n        });\n        return obj;\n      });\n\n      // Use EXACT specification from taskpane.js bar chart\n      const spec = {\n        $schema: \"https://vega.github.io/schema/vega-lite/v6.json\",\n        description: \"Bar chart from Excel selection\",\n        background: \"white\",\n        config: { view: { stroke: \"transparent\" }},\n        data: { values: processedData },\n        mark: { \n          type: \"bar\", \n          tooltip: true\n        },\n        encoding: {\n          x: { \n            field: headers[0], \n            type: \"nominal\",\n            axis: {\n              title: headers[0],\n              labelFontSize: 12,\n              titleFontSize: 14\n            }\n          },\n          y: { \n            field: headers[1], \n            type: \"quantitative\",\n            axis: {\n              title: headers[1],\n              labelFontSize: 12,\n              titleFontSize: 14\n            }\n          },\n          // Add color encoding for grouped bars if 3rd column exists\n          ...(headers.length >= 3 && {\n            color: { \n              field: headers[2], \n              type: \"nominal\",\n              legend: {\n                title: headers[2],\n                titleFontSize: 12,\n                labelFontSize: 11\n              }\n            }\n          })\n        },\n        config: {\n          font: \"Segoe UI\",\n          axis: {\n            labelColor: \"#605e5c\",\n            titleColor: \"#323130\",\n            gridColor: \"#f3f2f1\"\n          },\n          legend: {\n            titleColor: \"#323130\",\n            labelColor: \"#605e5c\"\n          }\n        }\n      };\n\n      createChart(spec, \"bar\", headers, rows)\n        .then(() => resolve(\"\"))\n        .catch((error) => resolve(`Error: ${error.message}`));\n\n    } catch (error) {\n      resolve(`Error: ${error.message}`);\n    }\n  });\n}\n\n/**\n * PIE custom function using the exact same specification as taskpane.js\n * Creates a pie chart from Excel data range\n * \n * @customfunction\n * @param {any[][]} data The data range including headers\n * @returns {string} Status message\n */\nfunction PIE(data) {\n  return new Promise((resolve) => {\n    try {\n      if (!data || data.length < 2) {\n        resolve(\"Error: Need at least header row + one data row\");\n        return;\n      }\n\n      const headers = data[0];\n      const rows = data.slice(1);\n\n      if (headers.length < 2) {\n        resolve(\"Error: Pie chart requires 2 columns (Category, Value)\");\n        return;\n      }\n\n      // Validate that all values are positive numbers\n      const hasInvalidValues = rows.some(row => isNaN(row[1]) || row[1] <= 0);\n      if (hasInvalidValues) {\n        resolve(\"Error: Pie chart values must be positive numbers\");\n        return;\n      }\n\n      // Convert rows -> objects (same as taskpane.js)\n      const processedData = rows.map(row => {\n        let obj = {};\n        headers.forEach((h, i) => {\n          obj[h] = row[i];\n        });\n        return obj;\n      });\n\n      // Use EXACT specification from taskpane.js pie chart\n      const spec = {\n        $schema: \"https://vega.github.io/schema/vega-lite/v6.json\",\n        background: \"white\",\n        config: { view: { stroke: \"transparent\" }},\n        description: \"Pie chart from Excel selection\",\n        data: { values: processedData },\n        mark: { type: \"arc\", outerRadius: 120 },\n        encoding: {\n          theta: { field: headers[1], type: \"quantitative\" },\n          color: { field: headers[0], type: \"nominal\" }\n        }\n      };\n\n      createChart(spec, \"pie\", headers, rows)\n        .then(() => resolve(\"\"))\n        .catch((error) => resolve(`Error: ${error.message}`));\n\n    } catch (error) {\n      resolve(`Error: ${error.message}`);\n    }\n  });\n}\n\n/**\n * AREA custom function using the exact same specification as taskpane.js\n * Creates an area chart from Excel data range\n * \n * @customfunction\n * @param {any[][]} data The data range including headers\n * @returns {string} Status message\n */\nfunction AREA(data) {\n  return new Promise((resolve) => {\n    try {\n      if (!data || data.length < 2) {\n        resolve(\"Error: Need at least header row + one data row\");\n        return;\n      }\n\n      const headers = data[0];\n      const rows = data.slice(1);\n\n      // Convert rows -> objects (same as taskpane.js)\n      const processedData = rows.map(row => {\n        let obj = {};\n        headers.forEach((h, i) => {\n          obj[h] = row[i];\n        });\n        return obj;\n      });\n\n      // Use EXACT specification from taskpane.js area chart\n      const spec = {\n        $schema: \"https://vega.github.io/schema/vega-lite/v6.json\",\n        description: \"Area chart from Excel selection\",\n        background: \"white\",\n        config: { view: { stroke: \"transparent\" }},\n        data: { values: processedData },\n        mark: { \n          type: \"area\", \n          tooltip: true,\n          opacity: 0.7\n        },\n        encoding: {\n          x: { \n            field: headers[0], \n            type: \"ordinal\",\n            axis: {\n              title: headers[0],\n              labelFontSize: 12,\n              titleFontSize: 14\n            }\n          },\n          y: { \n            field: headers[1], \n            type: \"quantitative\",\n            axis: {\n              title: headers[1],\n              labelFontSize: 12,\n              titleFontSize: 14\n            }\n          },\n          // Add color encoding for multiple areas if 3rd column exists\n          ...(headers.length >= 3 && {\n            color: { \n              field: headers[2], \n              type: \"nominal\",\n              legend: {\n                title: headers[2],\n                titleFontSize: 12,\n                labelFontSize: 11\n              }\n            }\n          })\n        },\n        config: {\n          font: \"Segoe UI\",\n          axis: {\n            labelColor: \"#605e5c\",\n            titleColor: \"#323130\",\n            gridColor: \"#f3f2f1\"\n          },\n          legend: {\n            titleColor: \"#323130\",\n            labelColor: \"#605e5c\"\n          }\n        }\n      };\n\n      createChart(spec, \"area\", headers, rows)\n        .then(() => resolve(\"\"))\n        .catch((error) => resolve(`Error: ${error.message}`));\n\n    } catch (error) {\n      resolve(`Error: ${error.message}`);\n    }\n  });\n}\n\n/**\n * SCATTER custom function using the exact same specification as taskpane.js\n * Creates a scatter plot from Excel data range\n * \n * @customfunction\n * @param {any[][]} data The data range including headers\n * @returns {string} Status message\n */\nfunction SCATTER(data) {\n  return new Promise((resolve) => {\n    try {\n      if (!data || data.length < 2) {\n        resolve(\"Error: Need at least header row + one data row\");\n        return;\n      }\n\n      const headers = data[0];\n      const rows = data.slice(1);\n\n      if (headers.length < 2) {\n        resolve(\"Error: Scatter plot requires at least 2 columns (X, Y values)\");\n        return;\n      }\n\n      // Convert rows -> objects (same as taskpane.js)\n      const processedData = rows.map(row => {\n        let obj = {};\n        headers.forEach((h, i) => {\n          obj[h] = row[i];\n        });\n        return obj;\n      });\n\n      // Use EXACT specification from taskpane.js point chart\n      const spec = {\n        $schema: \"https://vega.github.io/schema/vega-lite/v6.json\",\n        description: \"Colored scatter plot from Excel selection\",\n        background: \"white\",\n        config: { view: { stroke: \"transparent\" }},\n        data: { values: processedData },\n        mark: { type: \"point\", size: 100, tooltip: true },\n        encoding: {\n          x: { \n            field: headers[0], \n            type: \"quantitative\",\n            scale: { zero: false },\n            axis: {\n              title: headers[0],\n              labelFontSize: 12,\n              titleFontSize: 14\n            }\n          },\n          y: { \n            field: headers[1], \n            type: \"quantitative\",\n            scale: { zero: false },\n            axis: {\n              title: headers[1],\n              labelFontSize: 12,\n              titleFontSize: 14\n            }\n          },\n          // Add color encoding if 3rd column exists\n          ...(headers.length >= 3 && {\n            color: { \n              field: headers[2], \n              type: \"nominal\",\n              legend: {\n                title: headers[2],\n                titleFontSize: 12,\n                labelFontSize: 11\n              }\n            }\n          }),\n          // Add shape encoding if 4th column exists\n          ...(headers.length >= 4 && {\n            shape: { \n              field: headers[3], \n              type: \"nominal\",\n              legend: {\n                title: headers[3],\n                titleFontSize: 12,\n                labelFontSize: 11\n              }\n            }\n          })\n        },\n        config: {\n          font: \"Segoe UI\",\n          axis: {\n            labelColor: \"#605e5c\",\n            titleColor: \"#323130\",\n            gridColor: \"#f3f2f1\"\n          },\n          legend: {\n            titleColor: \"#323130\",\n            labelColor: \"#605e5c\"\n          }\n        }\n      };\n\n      createChart(spec, \"scatter\", headers, rows)\n        .then(() => resolve(\"\"))\n        .catch((error) => resolve(`Error: ${error.message}`));\n\n    } catch (error) {\n      resolve(`Error: ${error.message}`);\n    }\n  });\n}\n\n/**\n * RADIAL custom function using the exact same specification as taskpane.js\n * Creates a radial chart from Excel data range\n * \n * @customfunction\n * @param {any[][]} data The data range including headers\n * @returns {string} Status message\n */\nfunction RADIAL(data) {\n  return new Promise((resolve) => {\n    try {\n      if (!data || data.length < 2) {\n        resolve(\"Error: Need at least header row + one data row\");\n        return;\n      }\n\n      const headers = data[0];\n      const rows = data.slice(1);\n\n      if (headers.length < 2) {\n        resolve(\"Error: Radial chart requires 2 columns (Category, Value)\");\n        return;\n      }\n\n      // Convert rows -> objects (same as taskpane.js)\n      const processedData = rows.map(row => {\n        let obj = {};\n        headers.forEach((h, i) => {\n          obj[h] = row[i];\n        });\n        return obj;\n      });\n\n      // Use EXACT specification from taskpane.js radial chart\n      const spec = {\n        $schema: \"https://vega.github.io/schema/vega-lite/v6.json\",\n        description: \"Radial chart from Excel selection\",\n        background: \"white\",\n        config: { view: { stroke: \"transparent\" }},\n        data: { values: processedData },\n        layer: [{\n          mark: { type: \"arc\", innerRadius: 20, stroke: \"#fff\" }\n        }, {\n          mark: { type: \"text\", radiusOffset: 10 },\n          encoding: {\n            text: { field: headers[1], type: \"quantitative\" }\n          }\n        }],\n        encoding: {\n          theta: { field: headers[1], type: \"quantitative\", stack: true },\n          radius: { \n            field: headers[1], \n            scale: { type: \"sqrt\", zero: true, rangeMin: 20 }\n          },\n          color: { field: headers[0], type: \"nominal\", legend: null }\n        }\n      };\n\n      createChart(spec, \"radial\", headers, rows)\n        .then(() => resolve(\"\"))\n        .catch((error) => resolve(`Error: ${error.message}`));\n\n    } catch (error) {\n      resolve(`Error: ${error.message}`);\n    }\n  });\n}\n\n/**\n * BOX custom function using the exact same specification as taskpane.js\n * Creates a box plot from Excel data range\n * \n * @customfunction\n * @param {any[][]} data The data range including headers\n * @returns {string} Status message\n */\nfunction BOX(data) {\n  return new Promise((resolve) => {\n    try {\n      if (!data || data.length < 2) {\n        resolve(\"Error: Need at least header row + one data row\");\n        return;\n      }\n\n      const headers = data[0];\n      const rows = data.slice(1);\n\n      if (headers.length < 2) {\n        resolve(\"Error: Box plot requires 2 columns (Category, Values)\");\n        return;\n      }\n\n      // Expect headers: Category | Value (same as taskpane.js)\n      const processedData = rows\n        .filter(r => r[0] && !isNaN(+r[1]))\n        .map(r => ({\n          category: r[0],\n          value: +r[1]\n        }));\n\n      if (processedData.length === 0) {\n        resolve(\"Error: No valid numeric data found for box plot\");\n        return;\n      }\n\n      // Use EXACT specification from taskpane.js box chart\n      const spec = {\n        $schema: \"https://vega.github.io/schema/vega-lite/v6.json\",\n        description: \"Box plot from Excel selection\",\n        data: { values: processedData },\n        mark: {\n          type: \"boxplot\",\n          extent: \"min-max\"   // show whiskers from min to max\n        },\n        encoding: {\n          x: { field: \"category\", type: \"nominal\" },\n          y: {\n            field: \"value\",\n            type: \"quantitative\",\n            scale: { zero: false }\n          },\n          color: {\n            field: \"category\",\n            type: \"nominal\",\n            legend: null\n          }\n        }\n      };\n\n      createChart(spec, \"box\", headers, rows)\n        .then(() => resolve(\"\"))\n        .catch((error) => resolve(`Error: ${error.message}`));\n\n    } catch (error) {\n      resolve(`Error: ${error.message}`);\n    }\n  });\n}\n\n/**\n * RADAR custom function using the exact same specification as taskpane.js\n * Creates a radar chart from Excel data range\n * \n * @customfunction\n * @param {any[][]} data The data range including headers\n * @returns {string} Status message\n */\nfunction RADAR(data) {\n  return new Promise((resolve) => {\n    try {\n      if (!data || data.length < 2) {\n        resolve(\"Error: Need at least header row + one data row\");\n        return;\n      }\n\n      const headers = data[0];\n      const rows = data.slice(1);\n\n      if (headers.length < 3) {\n        resolve(\"Error: Radar chart requires at least 3 columns (Series, Dimension1, Dimension2, ...)\");\n        return;\n      }\n\n      const radarData = [];\n      const dimensions = headers.slice(1); // All columns except first are dimensions\n      \n      rows.forEach((row, seriesIndex) => {\n        const seriesName = row[headers[0]] || `Series ${seriesIndex + 1}`;\n        \n        dimensions.forEach(dimension => {\n          const value = parseFloat(row[headers.indexOf(dimension)]) || 0;\n          radarData.push({\n            series: seriesName,\n            dimension: dimension,\n            value: value,\n            category: seriesIndex\n          });\n        });\n      });\n\n      // Get unique dimensions for grid\n      const uniqueDimensions = [...new Set(radarData.map(d => d.dimension))];\n\n      // Use EXACT specification from taskpane.js radar chart\n      const spec = {\n        $schema: \"https://vega.github.io/schema/vega/v6.json\",\n        description: \"Radar chart from Excel selection\",\n        width: 400,\n        height: 400,\n        padding: 60,\n        autosize: {\"type\": \"none\", \"contains\": \"padding\"},\n        background: \"white\",\n        config: { view: { stroke: \"transparent\" }},\n\n        signals: [\n          {\"name\": \"radius\", \"update\": \"width / 2\"}\n        ],\n\n        data: [\n          {\n            name: \"table\",\n            values: radarData\n          },\n          {\n            name: \"dimensions\",\n            values: uniqueDimensions.map(d => ({dimension: d}))\n          }\n        ],\n\n        scales: [\n          {\n            name: \"angular\",\n            type: \"point\",\n            range: {\"signal\": \"[-PI, PI]\"},\n            padding: 0.5,\n            domain: uniqueDimensions\n          },\n          {\n            name: \"radial\",\n            type: \"linear\",\n            range: {\"signal\": \"[0, radius]\"},\n            zero: true,\n            nice: true,\n            domain: {\"data\": \"table\", \"field\": \"value\"},\n            domainMin: 0\n          },\n          {\n            name: \"color\",\n            type: \"ordinal\",\n            domain: {\"data\": \"table\", \"field\": \"category\"},\n            range: [\n              \"#0078d4\", \"#00bcf2\", \"#40e0d0\", \"#00cc6a\", \"#10893e\",\n              \"#107c10\", \"#bad80a\", \"#ffb900\", \"#ff8c00\", \"#d13438\"\n            ]\n          }\n        ],\n\n        encode: {\n          enter: {\n            x: {\"signal\": \"radius\"},\n            y: {\"signal\": \"radius\"}\n          }\n        },\n\n        marks: [\n          {\n            type: \"group\",\n            name: \"categories\",\n            zindex: 1,\n            from: {\n              facet: {\"data\": \"table\", \"name\": \"facet\", \"groupby\": [\"category\", \"series\"]}\n            },\n            marks: [\n              {\n                type: \"line\",\n                name: \"category-line\",\n                from: {\"data\": \"facet\"},\n                encode: {\n                  enter: {\n                    interpolate: {\"value\": \"linear-closed\"},\n                    x: {\"signal\": \"scale('radial', datum.value) * cos(scale('angular', datum.dimension))\"},\n                    y: {\"signal\": \"scale('radial', datum.value) * sin(scale('angular', datum.dimension))\"},\n                    stroke: {\"scale\": \"color\", \"field\": \"category\"},\n                    strokeWidth: {\"value\": 2},\n                    fill: {\"scale\": \"color\", \"field\": \"category\"},\n                    fillOpacity: {\"value\": 0.1},\n                    strokeOpacity: {\"value\": 0.8}\n                  }\n                }\n              },\n              {\n                type: \"symbol\",\n                name: \"category-points\",\n                from: {\"data\": \"facet\"},\n                encode: {\n                  enter: {\n                    x: {\"signal\": \"scale('radial', datum.value) * cos(scale('angular', datum.dimension))\"},\n                    y: {\"signal\": \"scale('radial', datum.value) * sin(scale('angular', datum.dimension))\"},\n                    size: {\"value\": 50},\n                    fill: {\"scale\": \"color\", \"field\": \"category\"},\n                    stroke: {\"value\": \"white\"},\n                    strokeWidth: {\"value\": 1}\n                  }\n                }\n              }\n            ]\n          },\n          {\n            type: \"rule\",\n            name: \"radial-grid\",\n            from: {\"data\": \"dimensions\"},\n            zindex: 0,\n            encode: {\n              enter: {\n                x: {\"value\": 0},\n                y: {\"value\": 0},\n                x2: {\"signal\": \"radius * cos(scale('angular', datum.dimension))\"},\n                y2: {\"signal\": \"radius * sin(scale('angular', datum.dimension))\"},\n                stroke: {\"value\": \"#e1e4e8\"},\n                strokeWidth: {\"value\": 1}\n              }\n            }\n          },\n          {\n            type: \"text\",\n            name: \"dimension-label\",\n            from: {\"data\": \"dimensions\"},\n            zindex: 1,\n            encode: {\n              enter: {\n                x: {\"signal\": \"(radius + 20) * cos(scale('angular', datum.dimension))\"},\n                y: {\"signal\": \"(radius + 20) * sin(scale('angular', datum.dimension))\"},\n                text: {\"field\": \"dimension\"},\n                align: [\n                  {\n                    test: \"abs(scale('angular', datum.dimension)) > PI / 2\",\n                    value: \"right\"\n                  },\n                  {\n                    value: \"left\"\n                  }\n                ],\n                baseline: [\n                  {\n                    test: \"scale('angular', datum.dimension) > 0\", \n                    value: \"top\"\n                  },\n                  {\n                    test: \"scale('angular', datum.dimension) == 0\", \n                    value: \"middle\"\n                  },\n                  {\n                    value: \"bottom\"\n                  }\n                ],\n                fill: {\"value\": \"#323130\"},\n                fontWeight: {\"value\": \"bold\"},\n                font: {\"value\": \"Segoe UI\"},\n                fontSize: {\"value\": 12}\n              }\n            }\n          },\n          {\n            type: \"line\",\n            name: \"outer-line\",\n            from: {\"data\": \"radial-grid\"},\n            encode: {\n              enter: {\n                interpolate: {\"value\": \"linear-closed\"},\n                x: {\"field\": \"x2\"},\n                y: {\"field\": \"y2\"},\n                stroke: {\"value\": \"#8a8886\"},\n                strokeWidth: {\"value\": 2},\n                strokeOpacity: {\"value\": 0.6}\n              }\n            }\n          }\n        ]\n      };\n\n      createChart(spec, \"radar\", headers, rows)\n        .then(() => resolve(\"\"))\n        .catch((error) => resolve(`Error: ${error.message}`));\n\n    } catch (error) {\n      resolve(`Error: ${error.message}`);\n    }\n  });\n}\n\n/**\n * WATERFALL custom function using the exact same specification as taskpane.js\n * Creates a waterfall chart from Excel data range\n * \n * @customfunction\n * @param {any[][]} data The data range including headers\n * @returns {string} Status message\n */\nfunction WATERFALL(data) {\n  return new Promise((resolve) => {\n    try {\n      if (!data || data.length < 2) {\n        resolve(\"Error: Need at least header row + one data row\");\n        return;\n      }\n\n      const headers = data[0];\n      const rows = data.slice(1);\n\n      if (headers.length < 3) {\n        resolve(\"Error: Waterfall chart requires 3 columns (Category, Amount, Type)\");\n        return;\n      }\n\n      // Convert rows -> objects (same as taskpane.js)\n      const processedDataRaw = rows.map(row => {\n        let obj = {};\n        headers.forEach((h, i) => {\n          obj[h] = row[i];\n        });\n        return obj;\n      });\n\n      // Process waterfall data inline - set last entry's amount to 0 (same as taskpane.js)\n      const processedData = [...processedDataRaw];\n      if (processedData.length > 0) {\n        processedData[processedData.length - 1] = {\n          ...processedData[processedData.length - 1],\n          [headers[1]]: 0\n        };\n      }\n\n      // Calculate dynamic dimensions\n      const numDataPoints = processedDataRaw.length;\n      const dynamicWidth = Math.max(400, Math.min(1600, numDataPoints * 50));\n      const maxAmount = Math.max(...processedDataRaw.map(d => Math.abs(d[headers[1]])));\n      const dynamicHeight = Math.max(300, Math.min(600, maxAmount / 100 + 200));\n\n      // Use EXACT specification from taskpane.js waterfall chart\n      const spec = {\n        $schema: \"https://vega.github.io/schema/vega-lite/v6.json\",\n        description: \"Waterfall chart with multiple subtotals\",\n        background: \"white\",\n        data: { values: processedData },\n        config: { view: { stroke: \"transparent\" }},\n        width: dynamicWidth,\n        height: dynamicHeight,\n        transform: [\n          { \"window\": [{ \"op\": \"sum\", \"field\": headers[1], \"as\": \"sum\" }] },\n          { \"window\": [{ \"op\": \"lead\", \"field\": headers[0], \"as\": \"lead\" }] },\n          {\n            \"calculate\": `datum.lead === null ? datum.${headers[0]} : datum.lead`,\n            \"as\": \"lead\"\n          },\n          {\n            // If total → reset, else → running sum step\n            \"calculate\": `datum.${headers[2]} == 'total' ? 0 : datum.sum - datum.${headers[1]}`,\n            \"as\": \"previous_sum\"\n          },\n          {\n            \"calculate\": `datum.${headers[2]} == 'total' ? datum.sum : datum.${headers[1]}`,\n            \"as\": \"amount\"\n          },\n          {\n            \"calculate\": `datum.${headers[2]} == 'total' ? datum.${headers[1]} / 2 : (datum.sum + datum.previous_sum) / 2`,\n            \"as\": \"center\"\n          },\n          {\n            \"calculate\": `datum.${headers[2]} == 'total' ? datum.sum : (datum.${headers[1]} > 0 ? '+' : '') + datum.${headers[1]}`,\n            \"as\": \"text_amount\"\n          },\n          { \"calculate\": \"(datum.sum + datum.previous_sum) / 2\", \"as\": \"center\" },\n\n          // Add group index for stacked handling\n          {\n            \"window\": [{ \"op\": \"rank\", \"as\": \"group_index\" }],\n            \"frame\": [null, null],\n            \"groupby\": [headers[0]]\n          },\n\n          // Precompute color shades\n          {\n            \"calculate\": `\n            datum.${headers[2]} == 'total'\n                ? '#00B0F0'\n                : datum.amount >= 0\n                ? (datum.group_index == 1 ? '#70AD47'\n                    : (datum.group_index == 2 ? '#8BC97A'\n                    : (datum.group_index == 3 ? '#A7DA9D'\n                    : '#C3EBC0')))\n                : (datum.group_index == 1 ? '#E15759'\n                    : (datum.group_index == 2 ? '#EC7A7C'\n                    : (datum.group_index == 3 ? '#F29C9D'\n                    : '#F8BEBF')))\n            `,\n            \"as\": \"bar_color\"\n          }\n        ],\n        encoding: {\n          x: {\n            field: headers[0],\n            type: \"ordinal\",\n            sort: null,\n            axis: { labelAngle: -45, title: null },\n            scale: { paddingInner: 0.05, paddingOuter: 0.025 }\n          }\n        },\n        layer: [\n          {\n            mark: { type: \"bar\", size: 60},\n            encoding: {\n              y: { field: \"previous_sum\", type: \"quantitative\", title: null },\n              y2: { field: \"sum\" },\n              color: { field: \"bar_color\", type: \"nominal\", scale: null }\n            }\n          },\n          {\n            mark: { type: \"text\", fontWeight: \"bold\", baseline: \"middle\" },\n            encoding: {\n              y: { field: \"center\", type: \"quantitative\" },\n              text: { field: \"text_amount\", type: \"nominal\" },\n              color: {\n                condition: [\n                  { test: `datum.${headers[2]} == 'total'`, value: \"#725a30\" }\n                ],\n                value: \"white\"\n              }\n            }\n          }\n        ],\n        config: { text: { fontWeight: \"bold\", color: \"#D9D9D9\" } }\n      };\n\n      createChart(spec, \"waterfall\", headers, rows)\n        .then(() => resolve(\"\"))\n        .catch((error) => resolve(`Error: ${error.message}`));\n\n    } catch (error) {\n      resolve(`Error: ${error.message}`);\n    }\n  });\n}\n\n/**\n * SUNBURST custom function using the exact same specification as taskpane.js\n * Creates a sunburst chart from Excel data range\n * \n * @customfunction\n * @param {any[][]} data The data range including headers\n * @returns {string} Status message\n */\nfunction SUNBURST(data) {\n  return new Promise((resolve) => {\n    try {\n      if (!data || data.length < 2) {\n        resolve(\"Error: Need at least header row + one data row\");\n        return;\n      }\n\n      const headers = data[0];\n      const rows = data.slice(1);\n\n      if (headers.length < 2) {\n        resolve(\"Error: Sunburst chart requires at least 2 columns (Parent, Child, optional Value)\");\n        return;\n      }\n\n      // Build hierarchical data (same as taskpane.js)\n      const nodes = new Map();\n      rows.forEach((row, i) => {\n        const parent = row[0] || \"\";\n        const child = row[1] || `node_${i}`;\n        const value = headers.length >= 3 ? (parseFloat(row[2]) || 1) : 1;\n        \n        // Add parent node if it doesn't exist and is not empty\n        if (parent && !nodes.has(parent)) {\n          nodes.set(parent, {\n            id: parent,\n            parent: \"\",\n            name: parent,\n            size: 0 // Will be calculated later\n          });\n        }\n        \n        // Add child node\n        if (!nodes.has(child)) {\n          nodes.set(child, {\n            id: child,\n            parent: parent,\n            name: child,\n            size: value\n          });\n        } else {\n          // Update parent and value if child already exists\n          const existingNode = nodes.get(child);\n          existingNode.parent = parent;\n          existingNode.size = value;\n        }\n      });\n      \n      // Convert Map to array\n      const hierarchicalData = Array.from(nodes.values());\n      \n      // Find root nodes (nodes with no parent or parent not in dataset)\n      const allIds = new Set(hierarchicalData.map(d => d.id));\n      hierarchicalData.forEach(node => {\n        if (node.parent && !allIds.has(node.parent)) {\n          node.parent = \"\"; // Make it a root node if parent doesn't exist\n        }\n      });\n\n      // Calculate chart size based on data complexity\n      const nodeCount = hierarchicalData.length;\n      const chartSize = Math.max(400, Math.min(600, nodeCount * 15 + 300));\n\n      // Use EXACT specification from taskpane.js sunburst chart\n      const spec = {\n        \"$schema\": \"https://vega.github.io/schema/vega/v6.json\",\n        \"description\": \"Sunburst chart from Excel selection\",\n        \"width\": chartSize,\n        \"height\": chartSize,\n        \"padding\": 10,\n        \"autosize\": \"none\",\n        \"background\": \"white\",\n        \"config\": { \"view\": { \"stroke\": \"transparent\" }},\n\n        \"signals\": [\n          {\n            \"name\": \"centerX\",\n            \"update\": \"width / 2\"\n          },\n          {\n            \"name\": \"centerY\", \n            \"update\": \"height / 2\"\n          },\n          {\n            \"name\": \"outerRadius\",\n            \"update\": \"min(width, height) / 2 - 10\"\n          }\n        ],\n\n        \"data\": [\n          {\n            \"name\": \"tree\",\n            \"values\": hierarchicalData,\n            \"transform\": [\n              {\n                \"type\": \"stratify\",\n                \"key\": \"id\",\n                \"parentKey\": \"parent\"\n              },\n              {\n                \"type\": \"partition\",\n                \"field\": \"size\",\n                \"sort\": {\"field\": \"size\", \"order\": \"descending\"},\n                \"size\": [{\"signal\": \"2 * PI\"}, {\"signal\": \"outerRadius\"}],\n                \"as\": [\"a0\", \"r0\", \"a1\", \"r1\", \"depth\", \"children\"]\n              }\n            ]\n          }\n        ],\n\n        \"scales\": [\n          {\n            \"name\": \"color\",\n            \"type\": \"ordinal\",\n            \"domain\": {\"data\": \"tree\", \"field\": \"depth\"},\n            \"range\": [\n              \"#0078d4\", \"#00bcf2\", \"#40e0d0\", \"#00cc6a\", \"#10893e\", \n              \"#107c10\", \"#bad80a\", \"#ffb900\", \"#ff8c00\", \"#d13438\",\n              \"#8764b8\", \"#e3008c\", \"#00b7c3\", \"#038387\", \"#486991\"\n            ]\n          },\n          {\n            \"name\": \"opacity\",\n            \"type\": \"linear\",\n            \"domain\": {\"data\": \"tree\", \"field\": \"depth\"},\n            \"range\": [0.8, 0.4]\n          }\n        ],\n\n        \"marks\": [\n          {\n            \"type\": \"arc\",\n            \"from\": {\"data\": \"tree\"},\n            \"encode\": {\n              \"enter\": {\n                \"x\": {\"signal\": \"centerX\"},\n                \"y\": {\"signal\": \"centerY\"},\n                \"stroke\": {\"value\": \"white\"},\n                \"strokeWidth\": {\"value\": 1}\n              },\n              \"update\": {\n                \"startAngle\": {\"field\": \"a0\"},\n                \"endAngle\": {\"field\": \"a1\"},\n                \"innerRadius\": {\"field\": \"r0\"},\n                \"outerRadius\": {\"field\": \"r1\"},\n                \"fill\": {\"scale\": \"color\", \"field\": \"depth\"},\n                \"fillOpacity\": {\"scale\": \"opacity\", \"field\": \"depth\"}\n              }\n            }\n          },\n          {\n            \"type\": \"text\",\n            \"from\": {\"data\": \"tree\"},\n            \"encode\": {\n              \"enter\": {\n                \"x\": {\"signal\": \"centerX\"},\n                \"y\": {\"signal\": \"centerY\"},\n                \"radius\": {\"signal\": \"(datum.r0 + datum.r1) / 2\"},\n                \"theta\": {\"signal\": \"(datum.a0 + datum.a1) / 2\"},\n                \"fill\": {\"value\": \"#323130\"},\n                \"font\": {\"value\": \"Segoe UI\"},\n                \"fontSize\": {\"value\": 10},\n                \"fontWeight\": {\"value\": \"bold\"},\n                \"align\": {\"value\": \"center\"},\n                \"baseline\": {\"value\": \"middle\"}\n              },\n              \"update\": {\n                \"text\": {\n                  \"signal\": \"(datum.r1 - datum.r0) > 20 && (datum.a1 - datum.a0) > 0.3 ? datum.name : ''\"\n                },\n                \"opacity\": {\n                  \"signal\": \"(datum.r1 - datum.r0) > 20 && (datum.a1 - datum.a0) > 0.3 ? 1 : 0\"\n                }\n              }\n            }\n          }\n        ]\n      };\n\n      createChart(spec, \"sunburst\", headers, rows)\n        .then(() => resolve(\"\"))\n        .catch((error) => resolve(`Error: ${error.message}`));\n\n    } catch (error) {\n      resolve(`Error: ${error.message}`);\n    }\n  });\n}\n\n/**\n * TREEMAP custom function using the exact same specification as taskpane.js\n * Creates a treemap chart from Excel data range\n * \n * @customfunction\n * @param {any[][]} data The data range including headers\n * @returns {string} Status message\n */\nfunction TREEMAP(data) {\n  return new Promise((resolve) => {\n    try {\n      if (!data || data.length < 2) {\n        resolve(\"Error: Need at least header row + one data row\");\n        return;\n      }\n\n      const headers = data[0];\n      const rows = data.slice(1);\n\n      if (headers.length < 3) {\n        resolve(\"Error: Treemap chart requires 3 columns (Parent, Category, Value)\");\n        return;\n      }\n\n      // Convert rows -> objects (same as taskpane.js)\n      const processedData = rows.map(row => {\n        let obj = {};\n        headers.forEach((h, i) => {\n          obj[h] = row[i];\n        });\n        return obj;\n      });\n\n      // Build treemap data structure (same as taskpane.js)\n      let treeData;\n      \n      if (headers.length >= 3) {\n        // Hierarchical data with parent column\n        treeData = processedData.map((d, i) => ({\n          id: `${d[headers[1]]}_${i}`,\n          name: d[headers[1]],\n          parent: d[headers[0]] || \"root\",\n          size: parseFloat(d[headers[2]]) || 0\n        }));\n        \n        // Add root and parent nodes\n        const parents = [...new Set(treeData.map(d => d.parent))];\n        parents.forEach(parent => {\n          if (parent !== \"root\" && !treeData.find(d => d.id === parent)) {\n            treeData.push({\n              id: parent,\n              name: parent,\n              parent: \"root\",\n              size: 0\n            });\n          }\n        });\n        \n        // Add root node\n        treeData.push({\n          id: \"root\",\n          name: \"Root\",\n          parent: \"\",\n          size: 0\n        });\n      } else {\n        // Simple flat data - create single level hierarchy\n        treeData = [\n          {\n            id: \"root\",\n            name: \"Root\", \n            parent: \"\",\n            size: 0\n          },\n          ...processedData.map((d, i) => ({\n            id: `item_${i}`,\n            name: d[headers[1]],\n            parent: \"root\",\n            size: parseFloat(d[headers[2]]) || 0\n          }))\n        ];\n      }\n\n      // Use EXACT specification from taskpane.js treemap chart\n      const spec = {\n        $schema: \"https://vega.github.io/schema/vega/v5.json\",\n        description: \"Treemap visualization from Excel data\",\n        background: \"white\",\n        width: 600,\n        height: 400,\n        padding: 5,\n        autosize: \"fit\",\n        \n        data: [\n          {\n            name: \"tree\",\n            values: treeData,\n            transform: [\n              {\n                type: \"stratify\",\n                key: \"id\",\n                parentKey: \"parent\"\n              },\n              {\n                type: \"treemap\",\n                field: \"size\",\n                sort: { field: \"value\" },\n                round: true,\n                method: \"squarify\",\n                ratio: 1.6,\n                size: [{ signal: \"width\" }, { signal: \"height\" }]\n              }\n            ]\n          },\n          {\n            name: \"nodes\",\n            source: \"tree\",\n            transform: [\n              { type: \"filter\", expr: \"datum.children\" }\n            ]\n          },\n          {\n            name: \"leaves\", \n            source: \"tree\",\n            transform: [\n              { type: \"filter\", expr: \"!datum.children\" }\n            ]\n          }\n        ],\n        \n        scales: [\n          {\n            name: \"color\",\n            type: \"ordinal\",\n            domain: { data: \"nodes\", field: \"name\" },\n            range: [\n              \"#0078d4\", \"#00bcf2\", \"#40e0d0\", \"#00cc6a\", \"#10893e\",\n              \"#107c10\", \"#bad80a\", \"#ffb900\", \"#ff8c00\", \"#d13438\"\n            ]\n          },\n          {\n            name: \"fontSize\",\n            type: \"ordinal\", \n            domain: [0, 1, 2, 3],\n            range: [20, 16, 12, 10]\n          },\n          {\n            name: \"opacity\",\n            type: \"ordinal\",\n            domain: [0, 1, 2, 3], \n            range: [0.3, 0.6, 0.8, 1.0]\n          }\n        ],\n        \n        marks: [\n          {\n            type: \"rect\",\n            from: { data: \"nodes\" },\n            interactive: false,\n            encode: {\n              enter: {\n                fill: { scale: \"color\", field: \"name\" },\n                fillOpacity: { scale: \"opacity\", field: \"depth\" }\n              },\n              update: {\n                x: { field: \"x0\" },\n                y: { field: \"y0\" },\n                x2: { field: \"x1\" },\n                y2: { field: \"y1\" },\n                stroke: { value: \"#ffffff\" },\n                strokeWidth: { value: 1 }\n              }\n            }\n          },\n          {\n            type: \"rect\",\n            from: { data: \"leaves\" },\n            encode: {\n              enter: {\n                stroke: { value: \"#ffffff\" },\n                strokeWidth: { value: 2 }\n              },\n              update: {\n                x: { field: \"x0\" },\n                y: { field: \"y0\" },\n                x2: { field: \"x1\" },\n                y2: { field: \"y1\" },\n                fill: { value: \"transparent\" },\n                tooltip: {\n                  signal: `{'Category': datum.name, 'Value': datum.size, 'Parent': datum.parent}`\n                }\n              },\n              hover: {\n                fill: { value: \"#323130\" },\n                fillOpacity: { value: 0.1 }\n              }\n            }\n          },\n          {\n            type: \"text\",\n            from: { data: \"leaves\" },\n            interactive: false,\n            encode: {\n              enter: {\n                font: { value: \"Segoe UI, Arial, sans-serif\" },\n                align: { value: \"center\" },\n                baseline: { value: \"middle\" },\n                fill: { value: \"#323130\" },\n                fontWeight: { value: \"bold\" },\n                text: { field: \"name\" },\n                fontSize: { scale: \"fontSize\", field: \"depth\" }\n              },\n              update: {\n                x: { signal: \"0.5 * (datum.x0 + datum.x1)\" },\n                y: { signal: \"0.5 * (datum.y0 + datum.y1)\" },\n                opacity: {\n                  signal: \"(datum.x1 - datum.x0) > 50 && (datum.y1 - datum.y0) > 20 ? 1 : 0\"\n                }\n              }\n            }\n          }\n        ]\n      };\n\n      createChart(spec, \"treemap\", headers, rows)\n        .then(() => resolve(\"\"))\n        .catch((error) => resolve(`Error: ${error.message}`));\n\n    } catch (error) {\n      resolve(`Error: ${error.message}`);\n    }\n  });\n}\n\n/**\n * HISTOGRAM custom function using the exact same specification as taskpane.js\n * Creates a histogram from Excel data range\n * \n * @customfunction\n * @param {any[][]} data The data range including headers\n * @returns {string} Status message\n */\nfunction HISTOGRAM(data) {\n  return new Promise((resolve) => {\n    try {\n      if (!data || data.length < 2) {\n        resolve(\"Error: Need at least header row + one data row\");\n        return;\n      }\n\n      const headers = data[0];\n      const rows = data.slice(1);\n\n      // Expect a single numeric column\n      const numericData = rows\n        .filter(r => !isNaN(+r[0]))\n        .map(r => ({ value: +r[0] }));\n\n      if (numericData.length === 0) {\n        resolve(\"Error: No valid numeric data found for histogram\");\n        return;\n      }\n\n      // Calculate data range for better binning control\n      const values = numericData.map(d => d.value);\n      const minVal = Math.min(...values);\n      const maxVal = Math.max(...values);\n      const range = maxVal - minVal;\n      \n      // Calculate nice bin boundaries\n      const binCount = 20;\n      const binWidth = range / binCount;\n      const niceMin = Math.floor(minVal / binWidth) * binWidth;\n      const niceMax = Math.ceil(maxVal / binWidth) * binWidth;\n\n      // Use EXACT specification from taskpane.js histogram\n      const spec = {\n        \"$schema\": \"https://vega.github.io/schema/vega-lite/v6.json\",\n        \"description\": \"Histogram from Excel selection\",\n        \"background\": \"white\",\n        \"config\": { \"view\": { \"stroke\": \"transparent\" }},\n        \"data\": { \"values\": numericData },\n        \"mark\": {\n          \"type\": \"bar\",\n          \"tooltip\": true,\n          \"stroke\": \"white\",\n          \"strokeWidth\": 1\n        },\n        \"encoding\": {\n          \"x\": {\n            \"field\": \"value\",\n            \"bin\": { \n              \"extent\": [niceMin, niceMax],\n              \"step\": binWidth,\n              \"nice\": false  // Prevent Vega from adjusting our nice boundaries\n            },\n            \"type\": \"quantitative\",\n            \"axis\": { \n              \"title\": \"Value\",\n              \"labelFontSize\": 12,\n              \"titleFontSize\": 14,\n              \"labelColor\": \"#605e5c\",\n              \"titleColor\": \"#323130\"\n            },\n            \"scale\": {\n              \"domain\": [niceMin, niceMax],\n              \"range\": \"width\",\n              \"paddingInner\": 0.05,\n              \"paddingOuter\": 0.02\n            }\n          },\n          \"y\": {\n            \"aggregate\": \"count\",\n            \"type\": \"quantitative\",\n            \"axis\": { \n              \"title\": \"Count\",\n              \"labelFontSize\": 12,\n              \"titleFontSize\": 14,\n              \"labelColor\": \"#605e5c\",\n              \"titleColor\": \"#323130\",\n              \"gridColor\": \"#f3f2f1\"\n            }\n          },\n          \"color\": {\n            \"value\": \"#0078d4\"\n          }\n        },\n        \"config\": {\n          \"font\": \"Segoe UI\",\n          \"axis\": {\n            \"labelColor\": \"#605e5c\",\n            \"titleColor\": \"#323130\",\n            \"gridColor\": \"#f3f2f1\"\n          }\n        }\n      };\n\n      createChart(spec, \"histogram\", headers, rows)\n        .then(() => resolve(\"\"))\n        .catch((error) => resolve(`Error: ${error.message}`));\n\n    } catch (error) {\n      resolve(`Error: ${error.message}`);\n    }\n  });\n}\n\n/**\n * MAP custom function using the exact same specification as taskpane.js\n * Creates a world map chart from Excel data range\n * \n * @customfunction\n * @param {any[][]} data The data range including headers\n * @returns {string} Status message\n */\nfunction MAP(data) {\n  return new Promise((resolve) => {\n    try {\n      if (!data || data.length < 2) {\n        resolve(\"Error: Need at least header row + one data row\");\n        return;\n      }\n\n      const headers = data[0];\n      const rows = data.slice(1);\n\n      if (headers.length < 2) {\n        resolve(\"Error: Map chart requires 2 columns (Country ISO3, Value)\");\n        return;\n      }\n\n      // ISO3 to numeric ID mapping (same as taskpane.js)\n      const isoToId = {\n        \"AFG\": 4,    // Afghanistan\n        \"AGO\": 24,   // Angola\n        \"ALB\": 8,    // Albania\n        \"AND\": 20,   // Andorra\n        \"ARE\": 784,  // United Arab Emirates\n        \"ARG\": 32,   // Argentina\n        \"ARM\": 51,   // Armenia\n        \"ATA\": 10,   // Antarctica\n        \"ATG\": 28,   // Antigua and Barbuda\n        \"AUS\": 36,   // Australia\n        \"AUT\": 40,   // Austria\n        \"AZE\": 31,   // Azerbaijan\n        \"BDI\": 108,  // Burundi\n        \"BEL\": 56,   // Belgium\n        \"BEN\": 204,  // Benin\n        \"BFA\": 854,  // Burkina Faso\n        \"BGD\": 50,   // Bangladesh\n        \"BGR\": 100,  // Bulgaria\n        \"BHR\": 48,   // Bahrain\n        \"BHS\": 44,   // Bahamas\n        \"BIH\": 70,   // Bosnia and Herzegovina\n        \"BLR\": 112,  // Belarus\n        \"BLZ\": 84,   // Belize\n        \"BOL\": 68,   // Bolivia\n        \"BRA\": 76,   // Brazil\n        \"BRB\": 52,   // Barbados\n        \"BRN\": 96,   // Brunei\n        \"BTN\": 64,   // Bhutan\n        \"BWA\": 72,   // Botswana\n        \"CAF\": 140,  // Central African Republic\n        \"CAN\": 124,  // Canada\n        \"CHE\": 756,  // Switzerland\n        \"CHL\": 152,  // Chile\n        \"CHN\": 156,  // China\n        \"CIV\": 384,  // Côte d'Ivoire\n        \"CMR\": 120,  // Cameroon\n        \"COD\": 180,  // Democratic Republic of Congo\n        \"COG\": 178,  // Congo\n        \"COL\": 170,  // Colombia\n        \"COM\": 174,  // Comoros\n        \"CPV\": 132,  // Cape Verde\n        \"CRI\": 188,  // Costa Rica\n        \"CUB\": 192,  // Cuba\n        \"CYP\": 196,  // Cyprus\n        \"CZE\": 203,  // Czechia\n        \"DEU\": 276,  // Germany\n        \"DJI\": 262,  // Djibouti\n        \"DMA\": 212,  // Dominica\n        \"DNK\": 208,  // Denmark\n        \"DOM\": 214,  // Dominican Republic\n        \"DZA\": 12,   // Algeria\n        \"ECU\": 218,  // Ecuador\n        \"EGY\": 818,  // Egypt\n        \"ERI\": 232,  // Eritrea\n        \"ESH\": 732,  // Western Sahara\n        \"ESP\": 724,  // Spain\n        \"EST\": 233,  // Estonia\n        \"ETH\": 231,  // Ethiopia\n        \"FIN\": 246,  // Finland\n        \"FJI\": 242,  // Fiji\n        \"FRA\": 250,  // France\n        \"FSM\": 583,  // Micronesia\n        \"GAB\": 266,  // Gabon\n        \"GBR\": 826,  // United Kingdom\n        \"GEO\": 268,  // Georgia\n        \"GHA\": 288,  // Ghana\n        \"GIN\": 324,  // Guinea\n        \"GMB\": 270,  // Gambia\n        \"GNB\": 624,  // Guinea-Bissau\n        \"GNQ\": 226,  // Equatorial Guinea\n        \"GRC\": 300,  // Greece\n        \"GRD\": 308,  // Grenada\n        \"GRL\": 304,  // Greenland\n        \"GTM\": 320,  // Guatemala\n        \"GUY\": 328,  // Guyana\n        \"HND\": 340,  // Honduras\n        \"HRV\": 191,  // Croatia\n        \"HTI\": 332,  // Haiti\n        \"HUN\": 348,  // Hungary\n        \"IDN\": 360,  // Indonesia\n        \"IND\": 356,  // India\n        \"IRL\": 372,  // Ireland\n        \"IRN\": 364,  // Iran\n        \"IRQ\": 368,  // Iraq\n        \"ISL\": 352,  // Iceland\n        \"ISR\": 376,  // Israel\n        \"ITA\": 380,  // Italy\n        \"JAM\": 388,  // Jamaica\n        \"JOR\": 400,  // Jordan\n        \"JPN\": 392,  // Japan\n        \"KAZ\": 398,  // Kazakhstan\n        \"KEN\": 404,  // Kenya\n        \"KGZ\": 417,  // Kyrgyzstan\n        \"KHM\": 116,  // Cambodia\n        \"KIR\": 296,  // Kiribati\n        \"KNA\": 659,  // Saint Kitts and Nevis\n        \"KOR\": 410,  // South Korea\n        \"KWT\": 414,  // Kuwait\n        \"LAO\": 418,  // Laos\n        \"LBN\": 422,  // Lebanon\n        \"LBR\": 430,  // Liberia\n        \"LBY\": 434,  // Libya\n        \"LCA\": 662,  // Saint Lucia\n        \"LIE\": 438,  // Liechtenstein\n        \"LKA\": 144,  // Sri Lanka\n        \"LSO\": 426,  // Lesotho\n        \"LTU\": 440,  // Lithuania\n        \"LUX\": 442,  // Luxembourg\n        \"LVA\": 428,  // Latvia\n        \"MAR\": 504,  // Morocco\n        \"MCO\": 492,  // Monaco\n        \"MDA\": 498,  // Moldova\n        \"MDG\": 450,  // Madagascar\n        \"MDV\": 462,  // Maldives\n        \"MEX\": 484,  // Mexico\n        \"MHL\": 584,  // Marshall Islands\n        \"MKD\": 807,  // North Macedonia\n        \"MLI\": 466,  // Mali\n        \"MLT\": 470,  // Malta\n        \"MMR\": 104,  // Myanmar\n        \"MNE\": 499,  // Montenegro\n        \"MNG\": 496,  // Mongolia\n        \"MOZ\": 508,  // Mozambique\n        \"MRT\": 478,  // Mauritania\n        \"MUS\": 480,  // Mauritius\n        \"MWI\": 454,  // Malawi\n        \"MYS\": 458,  // Malaysia\n        \"NAM\": 516,  // Namibia\n        \"NCL\": 540,  // New Caledonia\n        \"NER\": 562,  // Niger\n        \"NGA\": 566,  // Nigeria\n        \"NIC\": 558,  // Nicaragua\n        \"NLD\": 528,  // Netherlands\n        \"NOR\": 578,  // Norway\n        \"NPL\": 524,  // Nepal\n        \"NRU\": 520,  // Nauru\n        \"NZL\": 554,  // New Zealand\n        \"OMN\": 512,  // Oman\n        \"PAK\": 586,  // Pakistan\n        \"PAN\": 591,  // Panama\n        \"PER\": 604,  // Peru\n        \"PHL\": 608,  // Philippines\n        \"PLW\": 585,  // Palau\n        \"PNG\": 598,  // Papua New Guinea\n        \"POL\": 616,  // Poland\n        \"PRI\": 630,  // Puerto Rico\n        \"PRK\": 408,  // North Korea\n        \"PRT\": 620,  // Portugal\n        \"PRY\": 600,  // Paraguay\n        \"PSE\": 275,  // Palestine\n        \"QAT\": 634,  // Qatar\n        \"ROU\": 642,  // Romania\n        \"RUS\": 643,  // Russia\n        \"RWA\": 646,  // Rwanda\n        \"SAU\": 682,  // Saudi Arabia\n        \"SDN\": 729,  // Sudan\n        \"SEN\": 686,  // Senegal\n        \"SGP\": 702,  // Singapore\n        \"SLB\": 90,   // Solomon Islands\n        \"SLE\": 694,  // Sierra Leone\n        \"SLV\": 222,  // El Salvador\n        \"SMR\": 674,  // San Marino\n        \"SOM\": 706,  // Somalia\n        \"SRB\": 688,  // Serbia\n        \"SSD\": 728,  // South Sudan\n        \"STP\": 678,  // São Tomé and Príncipe\n        \"SUR\": 740,  // Suriname\n        \"SVK\": 703,  // Slovakia\n        \"SVN\": 705,  // Slovenia\n        \"SWE\": 752,  // Sweden\n        \"SWZ\": 748,  // Eswatini\n        \"SYC\": 690,  // Seychelles\n        \"SYR\": 760,  // Syria\n        \"TCD\": 148,  // Chad\n        \"TGO\": 768,  // Togo\n        \"THA\": 764,  // Thailand\n        \"TJK\": 762,  // Tajikistan\n        \"TKM\": 795,  // Turkmenistan\n        \"TLS\": 626,  // Timor-Leste\n        \"TON\": 776,  // Tonga\n        \"TTO\": 780,  // Trinidad and Tobago\n        \"TUN\": 788,  // Tunisia\n        \"TUR\": 792,  // Turkey\n        \"TUV\": 798,  // Tuvalu\n        \"TWN\": 158,  // Taiwan\n        \"TZA\": 834,  // Tanzania\n        \"UGA\": 800,  // Uganda\n        \"UKR\": 804,  // Ukraine\n        \"URY\": 858,  // Uruguay\n        \"USA\": 840,  // United States\n        \"UZB\": 860,  // Uzbekistan\n        \"VAT\": 336,  // Vatican City\n        \"VCT\": 670,  // Saint Vincent and the Grenadines\n        \"VEN\": 862,  // Venezuela\n        \"VNM\": 704,  // Vietnam\n        \"VUT\": 548,  // Vanuatu\n        \"WSM\": 882,  // Samoa\n        \"XKX\": 383,  // Kosovo\n        \"YEM\": 887,  // Yemen\n        \"ZAF\": 710,  // South Africa\n        \"ZMB\": 894,  // Zambia\n        \"ZWE\": 716   // Zimbabwe\n      };\n\n      // Process data (same as taskpane.js)\n      const worldData = rows\n        .filter(r => r[0] && !isNaN(+r[1]))\n        .map(r => {\n          const iso = (r[0] || \"\").toUpperCase().trim();\n          const idVal = isoToId[iso];\n          return {\n            id: idVal,     // numeric ID matching topojson country.id\n            iso: iso,       // original ISO3 for tooltip\n            rate: +r[1]\n          };\n        })\n        .filter(d => d.id); // drop rows where iso isn't in lookup\n\n      if (worldData.length === 0) {\n        resolve(\"Error: No valid country data found. Please use ISO3 country codes (USA, GBR, DEU, etc.)\");\n        return;\n      }\n\n      // Use EXACT specification from taskpane.js map chart\n      const spec = {\n        $schema: \"https://vega.github.io/schema/vega-lite/v6.json\",\n        width: 800,\n        height: 450,\n        data: {\n          url: \"https://cdn.jsdelivr.net/npm/world-atlas@2/countries-110m.json\",\n          format: { type: \"topojson\", feature: \"countries\" }\n        },\n        transform: [\n          {\n            lookup: \"id\",\n            from: {\n              data: { values: worldData },\n              key: \"id\",\n              fields: [\"rate\", \"iso\"]\n            }\n          }\n        ],\n        projection: { type: \"equalEarth\" },\n        mark: { type: \"geoshape\", stroke: \"white\", strokeWidth: 0.5 },\n        encoding: {\n          color: {\n            field: \"rate\",\n            type: \"quantitative\",\n            scale: { scheme: \"blues\" }\n          },\n          tooltip: [\n            { field: \"iso\", type: \"nominal\", title: \"Country (ISO3)\" },\n            { field: \"rate\", type: \"quantitative\", title: \"Value\" }\n          ]\n        }\n      };\n\n      createChart(spec, \"map\", headers, rows)\n        .then(() => resolve(\"\"))\n        .catch((error) => resolve(`Error: ${error.message}`));\n\n    } catch (error) {\n      resolve(`Error: ${error.message}`);\n    }\n  });\n}\n\n/**\n * CANDLESTICK custom function with dynamic width and optimal spacing\n * Creates a candlestick chart from Excel data range\n * \n * @customfunction\n * @param {any[][]} data The data range including headers\n * @returns {string} Status message\n */\nfunction CANDLESTICK(data) {\n  return new Promise((resolve) => {\n    try {\n      if (!data || data.length < 2) {\n        resolve(\"Error: Need at least header row + one data row\");\n        return;\n      }\n\n      const headers = data[0];\n      const rows = data.slice(1);\n\n      if (headers.length < 5) {\n        resolve(\"Error: Candlestick chart requires 5 columns (Date, Open, High, Low, Close)\");\n        return;\n      }\n\n      // Convert rows -> objects (same as taskpane.js)\n      const processedData = rows.map(row => {\n        let obj = {};\n        headers.forEach((h, i) => {\n          obj[h] = row[i];\n        });\n        return obj;\n      });\n\n      // Helper function to convert Excel dates to JS dates\n      function excelDateToJSDate(serial) {\n        if (typeof serial === 'number') {\n          return new Date(Math.round((serial - 25569) * 86400 * 1000));\n        }\n        return new Date(serial);\n      }\n\n      // Process and validate data - SKIP ROWS WITH MISSING VALUES\n      const candlestickData = processedData\n        .map((row, index) => {\n          // Skip if any required value is missing/null/empty\n          if (!row[headers[0]] || \n              row[headers[1]] == null || row[headers[1]] === \"\" ||\n              row[headers[2]] == null || row[headers[2]] === \"\" ||\n              row[headers[3]] == null || row[headers[3]] === \"\" ||\n              row[headers[4]] == null || row[headers[4]] === \"\") {\n            return null;\n          }\n\n          const date = excelDateToJSDate(row[headers[0]]);\n          const open = parseFloat(row[headers[1]]);\n          const high = parseFloat(row[headers[2]]);\n          const low = parseFloat(row[headers[3]]);\n          const close = parseFloat(row[headers[4]]);\n          \n          if (isNaN(date.getTime()) || isNaN(open) || isNaN(high) || isNaN(low) || isNaN(close)) {\n            return null;\n          }\n          \n          return {\n            date: date.toISOString(),\n            open: open,\n            high: high,\n            low: low,\n            close: close\n          };\n        })\n        .filter(Boolean); // Remove null entries\n\n      if (candlestickData.length === 0) {\n        resolve(\"Error: No valid candlestick data found\");\n        return;\n      }\n\n      // Calculate dynamic width based on number of data points\n      const dataPoints = candlestickData.length;\n      const minWidth = 400;\n      const maxWidth = 1200;\n      const widthPerPoint = 15; // Pixels per candlestick\n      const dynamicWidth = Math.max(minWidth, Math.min(maxWidth, dataPoints * widthPerPoint));\n\n      // Calculate optimal bar width and spacing\n      const availableWidth = dynamicWidth - 100; // Account for margins and axes\n      const barWidth = Math.max(2, Math.min(20, availableWidth / dataPoints * 0.7)); // 70% of available space per point\n      const spacing = Math.max(1, availableWidth / dataPoints * 0.1); // 10% spacing\n\n      // Use EXACT specification with dynamic sizing\n      const spec = {\n        \"$schema\": \"https://vega.github.io/schema/vega-lite/v6.json\",\n        \"width\": dynamicWidth,\n        \"height\": 400,\n        \"description\": \"Candlestick chart from Excel selection\",\n        \"background\": \"white\",\n        \"config\": { \"view\": { \"stroke\": \"transparent\" }},\n        \"data\": { \"values\": candlestickData },\n        \"encoding\": {\n          \"x\": {\n            \"field\": \"date\",\n            \"type\": \"temporal\",\n            \"title\": \"Date\",\n            \"axis\": {\n              \"format\": dataPoints > 50 ? \"%m/%d\" : \"%m/%d/%y\", // Shorter format for many points\n              \"labelAngle\": dataPoints > 30 ? -45 : 0, // Angle labels if crowded\n              \"labelFontSize\": 11,\n              \"titleFontSize\": 12,\n              \"labelColor\": \"#605e5c\",\n              \"titleColor\": \"#323130\",\n              \"font\": \"Segoe UI\",\n              \"tickCount\": Math.min(dataPoints, 20) // Limit number of ticks\n            },\n            \"scale\": {\n              \"padding\": 0.1 // Small padding to prevent bars from touching edges\n            }\n          },\n          \"y\": {\n            \"type\": \"quantitative\",\n            \"scale\": { \"zero\": false },\n            \"axis\": {\n              \"title\": \"Price\",\n              \"labelFontSize\": 11,\n              \"titleFontSize\": 12,\n              \"labelColor\": \"#605e5c\",\n              \"titleColor\": \"#323130\",\n              \"font\": \"Segoe UI\",\n              \"grid\": true,\n              \"gridColor\": \"#f3f2f1\"\n            }\n          },\n          \"color\": {\n            \"condition\": {\n              \"test\": \"datum.open < datum.close\",\n              \"value\": \"#06982d\"\n            },\n            \"value\": \"#ae1325\"\n          }\n        },\n        \"layer\": [\n          {\n            \"mark\": {\n              \"type\": \"rule\",\n              \"tooltip\": true,\n              \"strokeWidth\": 1\n            },\n            \"encoding\": {\n              \"y\": { \"field\": \"low\" },\n              \"y2\": { \"field\": \"high\" },\n              \"tooltip\": [\n                { \"field\": \"date\", \"type\": \"temporal\", \"title\": \"Date\", \"format\": \"%Y-%m-%d\" },\n                { \"field\": \"open\", \"type\": \"quantitative\", \"title\": \"Open\", \"format\": \".2f\" },\n                { \"field\": \"high\", \"type\": \"quantitative\", \"title\": \"High\", \"format\": \".2f\" },\n                { \"field\": \"low\", \"type\": \"quantitative\", \"title\": \"Low\", \"format\": \".2f\" },\n                { \"field\": \"close\", \"type\": \"quantitative\", \"title\": \"Close\", \"format\": \".2f\" }\n              ]\n            }\n          },\n          {\n            \"mark\": {\n              \"type\": \"bar\",\n              \"tooltip\": true,\n              \"size\": barWidth, // Dynamic bar width\n              \"stroke\": \"white\",\n              \"strokeWidth\": 0.5\n            },\n            \"encoding\": {\n              \"y\": { \"field\": \"open\" },\n              \"y2\": { \"field\": \"close\" },\n              \"tooltip\": [\n                { \"field\": \"date\", \"type\": \"temporal\", \"title\": \"Date\", \"format\": \"%Y-%m-%d\" },\n                { \"field\": \"open\", \"type\": \"quantitative\", \"title\": \"Open\", \"format\": \".2f\" },\n                { \"field\": \"high\", \"type\": \"quantitative\", \"title\": \"High\", \"format\": \".2f\" },\n                { \"field\": \"low\", \"type\": \"quantitative\", \"title\": \"Low\", \"format\": \".2f\" },\n                { \"field\": \"close\", \"type\": \"quantitative\", \"title\": \"Close\", \"format\": \".2f\" }\n              ]\n            }\n          }\n        ],\n        \"config\": {\n          \"font\": \"Segoe UI\",\n          \"axis\": {\n            \"labelColor\": \"#605e5c\",\n            \"titleColor\": \"#323130\",\n            \"gridColor\": \"#f3f2f1\"\n          }\n        }\n      };\n\n      createChart(spec, \"candlestick\", headers, rows)\n        .then(() => resolve(\"\"))\n        .catch((error) => resolve(`Error: ${error.message}`));\n\n    } catch (error) {\n      resolve(`Error: ${error.message}`);\n    }\n  });\n}\n\n/**\n * ARC custom function using the exact same specification as taskpane.js\n * Creates an arc diagram from Excel data range\n * \n * @customfunction\n * @param {any[][]} data The data range including headers\n * @returns {string} Status message\n */\nfunction ARC(data) {\n  return new Promise((resolve) => {\n    try {\n      if (!data || data.length < 2) {\n        resolve(\"Error: Need at least header row + one data row\");\n        return;\n      }\n\n      const headers = data[0];\n      const rows = data.slice(1);\n\n      if (headers.length < 2) {\n        resolve(\"Error: Arc chart requires at least 2 columns (Source, Target, Weight optional)\");\n        return;\n      }\n\n      // Convert rows -> objects (same as taskpane.js)\n      const processedData = rows.map(row => {\n        let obj = {};\n        headers.forEach((h, i) => {\n          obj[h] = row[i];\n        });\n        return obj;\n      });\n\n      // EXACT data processing from taskpane.js - Transform Excel data for arc chart\n      const edges = processedData.map((row, index) => ({\n        source: row[headers[0]],\n        target: row[headers[1]],\n        value: headers.length >= 3 && row[headers[2]] ? row[headers[2]] : 1,\n        group: headers.length >= 4 && row[headers[3]] ? row[headers[3]] : \"default\"\n      }));\n\n      // Get unique nodes from edges\n      const nodeMap = new Map();\n      edges.forEach(edge => {\n        if (!nodeMap.has(edge.source)) {\n          nodeMap.set(edge.source, { \n            name: edge.source, \n            group: edge.group,\n            index: nodeMap.size\n          });\n        }\n        if (!nodeMap.has(edge.target)) {\n          nodeMap.set(edge.target, { \n            name: edge.target, \n            group: edge.group,\n            index: nodeMap.size\n          });\n        }\n      });\n\n      const nodes = Array.from(nodeMap.values());\n\n      // Transform edges to use node indices\n      const edgesWithIndices = edges.map(edge => ({\n        source: nodeMap.get(edge.source).index,\n        target: nodeMap.get(edge.target).index,\n        value: edge.value\n      }));\n\n      // Use EXACT specification from taskpane.js arc chart\n      const spec = {\n        $schema: \"https://vega.github.io/schema/vega/v5.json\",\n        description: \"Arc diagram from Excel selection\",\n        width: Math.max(600, nodes.length * 40),\n        height: 300,\n        padding: { top: 20, bottom: 80, left: 20, right: 20 },\n        background: \"white\",\n        config: { view: { stroke: \"transparent\" }},\n        data: [\n          {\n            name: \"edges\",\n            values: edgesWithIndices\n          },\n          {\n            name: \"sourceDegree\",\n            source: \"edges\",\n            transform: [\n              { type: \"aggregate\", groupby: [\"source\"], as: [\"count\"] }\n            ]\n          },\n          {\n            name: \"targetDegree\", \n            source: \"edges\",\n            transform: [\n              { type: \"aggregate\", groupby: [\"target\"], as: [\"count\"] }\n            ]\n          },\n          {\n            name: \"nodes\",\n            values: nodes,\n            transform: [\n              { type: \"window\", ops: [\"rank\"], as: [\"order\"] },\n              {\n                type: \"lookup\", from: \"sourceDegree\", key: \"source\",\n                fields: [\"index\"], as: [\"sourceDegree\"],\n                default: { count: 0 }\n              },\n              {\n                type: \"lookup\", from: \"targetDegree\", key: \"target\", \n                fields: [\"index\"], as: [\"targetDegree\"],\n                default: { count: 0 }\n              },\n              {\n                type: \"formula\", as: \"degree\",\n                expr: \"(datum.sourceDegree.count || 0) + (datum.targetDegree.count || 0)\"\n              }\n            ]\n          }\n        ],\n\n        scales: [\n          {\n            name: \"position\",\n            type: \"band\",\n            domain: { data: \"nodes\", field: \"order\", sort: true },\n            range: \"width\"\n          },\n          {\n            name: \"color\",\n            type: \"ordinal\",\n            range: { scheme: \"category20\" },\n            domain: { data: \"nodes\", field: \"group\" }\n          }\n        ],\n\n        marks: [\n          {\n            type: \"symbol\",\n            name: \"layout\",\n            interactive: false,\n            from: { data: \"nodes\" },\n            encode: {\n              enter: { opacity: { value: 0 } },\n              update: {\n                x: { scale: \"position\", field: \"order\" },\n                y: { value: 0 },\n                size: { field: \"degree\", mult: 8, offset: 50 },\n                fill: { scale: \"color\", field: \"group\" }\n              }\n            }\n          },\n          {\n            type: \"path\",\n            from: { data: \"edges\" },\n            encode: {\n              update: {\n                stroke: { value: \"#0078d4\" },\n                strokeOpacity: { value: 0.4 },\n                strokeWidth: { field: \"value\", mult: 2, offset: 1 }\n              }\n            },\n            transform: [\n              {\n                type: \"lookup\", from: \"layout\", key: \"datum.index\",\n                fields: [\"datum.source\", \"datum.target\"],\n                as: [\"sourceNode\", \"targetNode\"]\n              },\n              {\n                type: \"linkpath\",\n                sourceX: { expr: \"min(datum.sourceNode.x, datum.targetNode.x)\" },\n                targetX: { expr: \"max(datum.sourceNode.x, datum.targetNode.x)\" },\n                sourceY: { expr: \"0\" },\n                targetY: { expr: \"0\" },\n                shape: \"arc\"\n              }\n            ]\n          },\n          {\n            type: \"symbol\",\n            from: { data: \"layout\" },\n            encode: {\n              update: {\n                x: { field: \"x\" },\n                y: { field: \"y\" },\n                fill: { field: \"fill\" },\n                size: { field: \"size\" },\n                stroke: { value: \"white\" },\n                strokeWidth: { value: 1 },\n                tooltip: { \n                  signal: \"{'Node': datum.datum.name, 'Group': datum.datum.group, 'Connections': datum.datum.degree}\" \n                }\n              }\n            }\n          },\n          {\n            type: \"text\",\n            from: { data: \"nodes\" },\n            encode: {\n              update: {\n                x: { scale: \"position\", field: \"order\" },\n                y: { value: 25 },\n                fontSize: { value: 10 },\n                align: { value: \"center\" },\n                baseline: { value: \"top\" },\n                angle: { value: -45 },\n                text: { field: \"name\" },\n                fill: { value: \"#323130\" },\n                font: { value: \"Segoe UI\" }\n              }\n            }\n          }\n        ],\n        \n        config: {\n          view: { stroke: \"transparent\" },\n          font: \"Segoe UI\",\n          text: { font: \"Segoe UI\", fontSize: 10, fill: \"#605e5c\" }\n        }\n      };\n\n      createChart(spec, \"arc\", headers, rows)\n        .then(() => resolve(\"\"))\n        .catch((error) => resolve(`Error: ${error.message}`));\n\n    } catch (error) {\n      resolve(`Error: ${error.message}`);\n    }\n  });\n}\n\n/**\n * TREE custom function using the exact same specification as taskpane.js\n * Creates a tree diagram from Excel data range\n * \n * @customfunction\n * @param {any[][]} data The data range including headers\n * @returns {string} Status message\n */\nfunction TREE(data) {\n  return new Promise((resolve) => {\n    try {\n      if (!data || data.length < 2) {\n        resolve(\"Error: Need at least header row + one data row\");\n        return;\n      }\n\n      const headers = data[0];\n      const rows = data.slice(1);\n\n      if (headers.length < 2) {\n        resolve(\"Error: Tree chart requires at least 2 columns (Parent, Child, Value optional)\");\n        return;\n      }\n\n      // Process data same as taskpane.js\n      const nodes = new Map();\n\n      rows.forEach((row, i) => {\n        const parent = row[0] || \"\";\n        const child = row[1] || `node_${i}`;\n        const value = headers.length >= 3 ? (parseFloat(row[2]) || 1) : 1;\n        \n        // Add parent node if it doesn't exist and is not empty\n        if (parent && !nodes.has(parent)) {\n          nodes.set(parent, {\n            id: parent,\n            parent: \"\",\n            name: parent,\n            value: 1\n          });\n        }\n        \n        // Add child node\n        if (!nodes.has(child)) {\n          nodes.set(child, {\n            id: child,\n            parent: parent,\n            name: child,\n            value: value\n          });\n        } else {\n          // Update parent and value if child already exists\n          const existingNode = nodes.get(child);\n          existingNode.parent = parent;\n          existingNode.value = value;\n        }\n      });\n      \n      // Convert Map to array\n      const treeData = Array.from(nodes.values());\n      \n      // Find root nodes (nodes with no parent or parent not in dataset)\n      const allIds = new Set(treeData.map(d => d.id));\n      treeData.forEach(node => {\n        if (node.parent && !allIds.has(node.parent)) {\n          node.parent = \"\"; // Make it a root node if parent doesn't exist\n        }\n      });\n\n      // Calculate dynamic dimensions based on data size\n      const nodeCount = treeData.length;\n      const dynamicWidth = Math.max(600, Math.min(1200, nodeCount * 40));\n      const dynamicHeight = Math.max(400, Math.min(1600, nodeCount * 30));\n\n      // Use EXACT specification from taskpane.js tree chart\n      const spec = {\n        \"$schema\": \"https://vega.github.io/schema/vega/v6.json\",\n        \"description\": \"Tree diagram from Excel selection\",\n        \"width\": dynamicWidth,\n        \"height\": dynamicHeight,\n        \"padding\": 20,\n        \"background\": \"white\",\n        \"config\": { \"view\": { \"stroke\": \"transparent\" }},\n\n        \"signals\": [\n          {\n            \"name\": \"layout\", \n            \"value\": \"tidy\"\n          },\n          {\n            \"name\": \"links\", \n            \"value\": \"diagonal\"\n          }\n        ],\n\n        \"data\": [\n          {\n            \"name\": \"tree\",\n            \"values\": treeData,\n            \"transform\": [\n              {\n                \"type\": \"stratify\",\n                \"key\": \"id\",\n                \"parentKey\": \"parent\"\n              },\n              {\n                \"type\": \"tree\",\n                \"method\": {\"signal\": \"layout\"},\n                \"size\": [{\"signal\": \"height - 40\"}, {\"signal\": \"width - 100\"}],\n                \"as\": [\"y\", \"x\", \"depth\", \"children\"]\n              }\n            ]\n          },\n          {\n            \"name\": \"links\",\n            \"source\": \"tree\",\n            \"transform\": [\n              { \"type\": \"treelinks\" },\n              {\n                \"type\": \"linkpath\",\n                \"orient\": \"horizontal\",\n                \"shape\": {\"signal\": \"links\"}\n              }\n            ]\n          }\n        ],\n\n        \"scales\": [\n          {\n            \"name\": \"color\",\n            \"type\": \"ordinal\",\n            \"range\": [\"#0078d4\", \"#00bcf2\", \"#40e0d0\", \"#00cc6a\", \"#10893e\", \"#107c10\", \"#bad80a\", \"#ffb900\", \"#ff8c00\", \"#d13438\"],\n            \"domain\": {\"data\": \"tree\", \"field\": \"depth\"}\n          },\n          {\n            \"name\": \"size\",\n            \"type\": \"linear\",\n            \"range\": [100, 400],\n            \"domain\": {\"data\": \"tree\", \"field\": \"value\"}\n          }\n        ],\n\n        \"marks\": [\n          {\n            \"type\": \"path\",\n            \"from\": {\"data\": \"links\"},\n            \"encode\": {\n              \"update\": {\n                \"path\": {\"field\": \"path\"},\n                \"stroke\": {\"value\": \"#8a8886\"},\n                \"strokeWidth\": {\"value\": 2},\n                \"strokeOpacity\": {\"value\": 0.6}\n              }\n            }\n          },\n          {\n            \"type\": \"symbol\",\n            \"from\": {\"data\": \"tree\"},\n            \"encode\": {\n              \"enter\": {\n                \"stroke\": {\"value\": \"#ffffff\"},\n                \"strokeWidth\": {\"value\": 2}\n              },\n              \"update\": {\n                \"x\": {\"field\": \"x\"},\n                \"y\": {\"field\": \"y\"},\n                \"size\": {\"scale\": \"size\", \"field\": \"value\"},\n                \"fill\": {\"scale\": \"color\", \"field\": \"depth\"},\n                \"fillOpacity\": {\"value\": 0.8},\n                \"tooltip\": {\n                  \"signal\": \"{'Name': datum.name, 'ID': datum.id, 'Parent': datum.parent, 'Depth': datum.depth, 'Value': datum.value}\"\n                }\n              },\n              \"hover\": {\n                \"fillOpacity\": {\"value\": 1.0},\n                \"strokeWidth\": {\"value\": 3}\n              }\n            }\n          },\n          {\n            \"type\": \"text\",\n            \"from\": {\"data\": \"tree\"},\n            \"encode\": {\n              \"enter\": {\n                \"fontSize\": {\"value\": 11},\n                \"baseline\": {\"value\": \"middle\"},\n                \"font\": {\"value\": \"Segoe UI\"},\n                \"fontWeight\": {\"value\": \"bold\"}\n              },\n              \"update\": {\n                \"x\": {\"field\": \"x\"},\n                \"y\": {\"field\": \"y\"},\n                \"text\": {\"field\": \"name\"},\n                \"dx\": {\"signal\": \"datum.children ? -12 : 12\"},\n                \"align\": {\"signal\": \"datum.children ? 'right' : 'left'\"},\n                \"fill\": {\"value\": \"#323130\"}\n              }\n            }\n          }\n        ]\n      };\n\n      createChart(spec, \"tree\", headers, rows)\n        .then(() => resolve(\"\"))\n        .catch((error) => resolve(`Error: ${error.message}`));\n\n    } catch (error) {\n      resolve(`Error: ${error.message}`);\n    }\n  });\n}\n\n/**\n * WORDCLOUD custom function using the exact same specification as taskpane.js\n * Creates a word cloud from Excel data range\n * \n * @customfunction\n * @param {any[][]} data The data range including headers\n * @returns {string} Status message\n */\nfunction WORDCLOUD(data) {\n  return new Promise((resolve) => {\n    try {\n      if (!data || data.length < 2) {\n        resolve(\"Error: Need at least header row + one data row\");\n        return;\n      }\n\n      const headers = data[0];\n      const rows = data.slice(1);\n\n      if (headers.length < 1) {\n        resolve(\"Error: Wordcloud requires at least 1 column (Text data)\");\n        return;\n      }\n\n      // Convert rows -> objects (same as taskpane.js)\n      const processedData = rows.map(row => {\n        let obj = {};\n        headers.forEach((h, i) => {\n          obj[h] = row[i];\n        });\n        return obj;\n      });\n\n      // Use EXACT specification from taskpane.js wordcloud chart\n      const spec = {\n        $schema: \"https://vega.github.io/schema/vega/v5.json\",\n        description: \"Word cloud from Excel selection\",\n        width: 800,\n        height: 400,\n        padding: 0,\n        background: \"white\",\n        config: { view: { stroke: \"transparent\" }},\n        data: [\n          {\n            name: \"table\",\n            values: processedData,\n            transform: [\n              {\n                type: \"countpattern\",\n                field: headers[0], // Use first column as text source\n                case: \"upper\",\n                pattern: \"[\\\\w']{3,}\",\n                stopwords: \"(i|me|my|myself|we|us|our|ours|ourselves|you|your|yours|yourself|yourselves|he|him|his|himself|she|her|hers|herself|it|its|itself|they|them|their|theirs|themselves|what|which|who|whom|whose|this|that|these|those|am|is|are|was|were|be|been|being|have|has|had|having|do|does|did|doing|will|would|should|can|could|ought|i'm|you're|he's|she's|it's|we're|they're|i've|you've|we've|they've|i'd|you'd|he'd|she'd|we'd|they'd|i'll|you'll|he'll|she'll|we'll|they'll|isn't|aren't|wasn't|weren't|hasn't|haven't|hadn't|doesn't|don't|didn't|won't|wouldn't|shan't|shouldn't|can't|cannot|couldn't|mustn't|let's|that's|who's|what's|here's|there's|when's|where's|why's|how's|a|an|the|and|but|if|or|because|as|until|while|of|at|by|for|with|about|against|between|into|through|during|before|after|above|below|to|from|up|upon|down|in|out|on|off|over|under|again|further|then|once|here|there|when|where|why|how|all|any|both|each|few|more|most|other|some|such|no|nor|not|only|own|same|so|than|too|very|say|says|said|shall)\"\n              },\n              {\n                type: \"formula\", \n                as: \"angle\",\n                expr: \"[-45, 0, 45][~~(random() * 3)]\"\n              },\n              {\n                type: \"formula\", \n                as: \"weight\",\n                expr: \"if(datum.count > 10, 600, 300)\"\n              }\n            ]\n          }\n        ],\n        \n        scales: [\n          {\n            name: \"color\",\n            type: \"ordinal\",\n            domain: { data: \"table\", field: \"text\" },\n            range: [\"#d5a928\", \"#652c90\", \"#939597\", \"#2563eb\", \"#dc2626\", \"#059669\"]\n          }\n        ],\n        \n        marks: [\n          {\n            type: \"text\",\n            from: { data: \"table\" },\n            encode: {\n              enter: {\n                text: { field: \"text\" },\n                align: { value: \"center\" },\n                baseline: { value: \"alphabetic\" },\n                fill: { scale: \"color\", field: \"text\" }\n              },\n              update: {\n                fillOpacity: { value: 1 }\n              },\n              hover: {\n                fillOpacity: { value: 0.5 }\n              }\n            },\n            transform: [\n              {\n                type: \"wordcloud\",\n                size: [800, 400],\n                text: { field: \"text\" },\n                rotate: { field: \"datum.angle\" },\n                font: \"Helvetica Neue, Arial\",\n                fontSize: { field: \"datum.count\" },\n                fontWeight: { field: \"datum.weight\" },\n                fontSizeRange: [12, 56],\n                padding: 2\n              }\n            ]\n          }\n        ]\n      };\n\n      createChart(spec, \"wordcloud\", headers, rows)\n        .then(() => resolve(\"\"))\n        .catch((error) => resolve(`Error: ${error.message}`));\n\n    } catch (error) {\n      resolve(`Error: ${error.message}`);\n    }\n  });\n}\n\n/**\n * STRIP custom function using the exact same specification as taskpane.js\n * Creates a strip plot from Excel data range\n * \n * @customfunction\n * @param {any[][]} data The data range including headers\n * @returns {string} Status message\n */\nfunction STRIP(data) {\n  return new Promise((resolve) => {\n    try {\n      if (!data || data.length < 2) {\n        resolve(\"Error: Need at least header row + one data row\");\n        return;\n      }\n\n      const headers = data[0];\n      const rows = data.slice(1);\n\n      if (headers.length < 2) {\n        resolve(\"Error: Strip plot requires at least 2 columns (Categories, Values)\");\n        return;\n      }\n\n      // Convert rows -> objects (same as taskpane.js)\n      const processedData = rows.map(row => {\n        let obj = {};\n        headers.forEach((h, i) => {\n          obj[h] = row[i];\n        });\n        return obj;\n      });\n\n      // Use EXACT specification from taskpane.js strip chart\n      const spec = {\n        $schema: \"https://vega.github.io/schema/vega-lite/v6.json\",\n        description: \"Strip plot showing distribution using tick marks\",\n        background: \"white\",\n        config: { \n          view: { stroke: \"transparent\" },\n          axis: {\n            labelFontSize: 11,\n            titleFontSize: 12,\n            labelColor: \"#605E5C\",\n            titleColor: \"#323130\"\n          }\n        },\n        data: { values: processedData },\n        mark: {\n          type: \"tick\",\n          thickness: 2,\n          size: 15,\n          color: \"#0078d4\",\n          opacity: 0.8,\n          tooltip: true\n        },\n        encoding: {\n          y: { \n            field: headers[0],\n            type: \"ordinal\",\n            axis: {\n              title: headers[0],\n              labelAngle: 0\n            }\n          },\n          x: { \n            field: headers[1],\n            type: \"quantitative\",\n            axis: {\n              title: headers[1],\n              grid: true,\n              gridColor: \"#f3f2f1\",\n              gridOpacity: 0.5\n            }\n          },\n          // Add color encoding if 3rd column exists\n          ...(headers.length > 2 && {\n            color: {\n              field: headers[2],\n              type: \"nominal\",\n              scale: { scheme: \"category10\" },\n              legend: {\n                title: headers[2],\n                orient: \"right\",\n                titleFontSize: 11,\n                labelFontSize: 10\n              }\n            }\n          }),\n          tooltip: headers.map(h => ({ field: h, type: \"nominal\" }))\n        }\n      };\n\n      createChart(spec, \"strip\", headers, rows)\n        .then(() => resolve(\"\"))\n        .catch((error) => resolve(`Error: ${error.message}`));\n\n    } catch (error) {\n      resolve(`Error: ${error.message}`);\n    }\n  });\n}\n\n/**\n * HEATMAP custom function using the exact same specification as taskpane.js\n * Creates a heatmap from Excel data range\n * \n * @customfunction\n * @param {any[][]} data The data range including headers\n * @returns {string} Status message\n */\nfunction HEATMAP(data) {\n  return new Promise((resolve) => {\n    try {\n      if (!data || data.length < 2) {\n        resolve(\"Error: Need at least header row + one data row\");\n        return;\n      }\n\n      const headers = data[0];\n      const rows = data.slice(1);\n\n      if (headers.length < 3) {\n        resolve(\"Error: Heatmap requires 3 columns (Y-categories, X-categories, Values)\");\n        return;\n      }\n\n      // Convert rows -> objects (same as taskpane.js)\n      const processedData = rows.map(row => {\n        let obj = {};\n        headers.forEach((h, i) => {\n          obj[h] = row[i];\n        });\n        return obj;\n      });\n\n      // Use EXACT specification from taskpane.js heatmap chart\n      const spec = {\n        $schema: \"https://vega.github.io/schema/vega-lite/v5.json\",\n        description: \"Heatmap with marginal bars from Excel selection\",\n        background: \"white\",\n        config: { view: { stroke: \"transparent\" }},\n        data: { values: processedData },\n        spacing: 15,\n        bounds: \"flush\",\n        vconcat: [\n          {\n            height: 60,\n            mark: {\n              type: \"bar\",\n              stroke: null,\n              cornerRadiusEnd: 2,\n              tooltip: true,\n              color: \"lightgrey\"\n            },\n            encoding: {\n              x: {\n                field: headers[1],\n                type: \"ordinal\",\n                axis: null\n              },\n              y: {\n                field: headers[2],\n                aggregate: \"mean\",\n                type: \"quantitative\",\n                axis: null\n              }\n            }\n          },\n          {\n            spacing: 15,\n            bounds: \"flush\",\n            hconcat: [\n              {\n                mark: {\n                  type: \"rect\",\n                  stroke: \"white\",\n                  tooltip: true\n                },\n                encoding: {\n                  y: {\n                    field: headers[0],\n                    type: \"ordinal\",\n                    title: headers[0],\n                    axis: {\n                      domain: false,\n                      ticks: false,\n                      labels: true,\n                      labelAngle: 0,\n                      labelPadding: 5\n                    }\n                  },\n                  x: {\n                    field: headers[1],\n                    type: \"ordinal\",\n                    title: headers[1],\n                    axis: {\n                      domain: false,\n                      ticks: false,\n                      labels: true,\n                      labelAngle: 0\n                    }\n                  },\n                  color: {\n                    aggregate: \"mean\",\n                    field: headers[2],\n                    type: \"quantitative\",\n                    title: headers[2],\n                    scale: {\n                      scheme: \"blues\"\n                    },\n                    legend: {\n                      direction: \"vertical\",\n                      gradientLength: 120\n                    }\n                  }\n                }\n              },\n              {\n                mark: {\n                  type: \"bar\",\n                  stroke: null,\n                  cornerRadiusEnd: 2,\n                  tooltip: true,\n                  color: \"lightgrey\"\n                },\n                width: 60,\n                encoding: {\n                  y: {\n                    field: headers[0],\n                    type: \"ordinal\",\n                    axis: null\n                  },\n                  x: {\n                    field: headers[2],\n                    type: \"quantitative\",\n                    aggregate: \"mean\",\n                    axis: null\n                  }\n                }\n              }\n            ]\n          }\n        ],\n        config: {\n          autosize: {\n            type: \"fit\",\n            contains: \"padding\"\n          },\n          view: { stroke: \"transparent\" },\n          font: \"Segoe UI\",\n          text: { font: \"Segoe UI\", fontSize: 12, fill: \"#605E5C\" },\n          axis: {\n            ticks: false,\n            grid: false,\n            domain: false,\n            labelColor: \"#605E5C\",\n            labelFontSize: 12,\n            titleFontSize: 14,\n            titleColor: \"#323130\"\n          },\n          legend: {\n            titleFont: \"Segoe UI\",\n            titleFontWeight: \"bold\",\n            titleColor: \"#605E5C\",\n            labelFont: \"Segoe UI\",\n            labelFontSize: 12,\n            labelColor: \"#605E5C\"\n          }\n        }\n      };\n\n      createChart(spec, \"heatmap\", headers, rows)\n        .then(() => resolve(\"\"))\n        .catch((error) => resolve(`Error: ${error.message}`));\n\n    } catch (error) {\n      resolve(`Error: ${error.message}`);\n    }\n  });\n}\n\n/**\n * BULLET custom function using the exact same specification as taskpane.js\n * Creates a bullet chart from Excel data range\n * \n * @customfunction\n * @param {any[][]} data The data range including headers\n * @returns {string} Status message\n */\nfunction BULLET(data) {\n  return new Promise((resolve) => {\n    try {\n      if (!data || data.length < 2) {\n        resolve(\"Error: Need at least header row + one data row\");\n        return;\n      }\n\n      const headers = data[0];\n      const rows = data.slice(1);\n\n      if (headers.length < 7) {\n        resolve(\"Error: Bullet chart requires 7 columns (Title, Poor max, Satisfactory max, Good max, Actual, Forecast, Target)\");\n        return;\n      }\n\n      // Convert to bullet chart data format (same as taskpane.js)\n      const processedData = rows.map(r => ({\n        title: r[0],\n        ranges: [+r[1], +r[2], +r[3]],\n        measures: [+r[4], +r[5]],\n        markers: [+r[6]]\n      }));\n\n      // Use EXACT specification from taskpane.js bullet chart\n      const spec = {\n        \"$schema\": \"https://vega.github.io/schema/vega-lite/v6.json\",\n        background: \"white\",\n        config: { view: { stroke: \"transparent\" }},\n        \"data\": { \"values\": processedData },\n        \"facet\": {\n          \"row\": {\n            \"field\": \"title\", \"type\": \"ordinal\",\n            \"header\": { \"labelAngle\": 0, \"title\": \"\", \"labelAlign\": \"left\" }\n          }\n        },\n        \"spacing\": 10,\n        \"spec\": {\n          \"encoding\": {\n            \"x\": {\n              \"type\": \"quantitative\",\n              \"scale\": { \"nice\": false },\n              \"title\": null\n            }\n          },\n          \"layer\": [\n            { \"mark\": { \"type\": \"bar\", \"color\": \"#eee\" }, \"encoding\": { \"x\": { \"field\": \"ranges[2]\" } } },\n            { \"mark\": { \"type\": \"bar\", \"color\": \"#ddd\" }, \"encoding\": { \"x\": { \"field\": \"ranges[1]\" } } },\n            { \"mark\": { \"type\": \"bar\", \"color\": \"#ccc\" }, \"encoding\": { \"x\": { \"field\": \"ranges[0]\" } } },\n            { \"mark\": { \"type\": \"bar\", \"color\": \"lightsteelblue\", \"size\": 10 }, \"encoding\": { \"x\": { \"field\": \"measures[1]\" } } },\n            { \"mark\": { \"type\": \"bar\", \"color\": \"steelblue\", \"size\": 10 }, \"encoding\": { \"x\": { \"field\": \"measures[0]\" } } },\n            { \"mark\": { \"type\": \"tick\", \"color\": \"black\" }, \"encoding\": { \"x\": { \"field\": \"markers[0]\" } } }\n          ]\n        },\n        \"resolve\": { \"scale\": { \"x\": \"independent\" } },\n        \"config\": { \"tick\": { \"thickness\": 2 }, \"scale\": { \"barBandPaddingInner\": 0 } }\n      };\n\n      createChart(spec, \"bullet\", headers, rows)\n        .then(() => resolve(\"\"))\n        .catch((error) => resolve(`Error: ${error.message}`));\n\n    } catch (error) {\n      resolve(`Error: ${error.message}`);\n    }\n  });\n}\n\n/**\n * HORIZON custom function using the exact same specification as taskpane.js\n * Creates a horizon chart from Excel data range\n * \n * @customfunction\n * @param {any[][]} data The data range including headers\n * @returns {string} Status message\n */\nfunction HORIZON(data) {\n  return new Promise((resolve) => {\n    try {\n      if (!data || data.length < 2) {\n        resolve(\"Error: Need at least header row + one data row\");\n        return;\n      }\n\n      const headers = data[0];\n      const rows = data.slice(1);\n\n      if (headers.length < 2) {\n        resolve(\"Error: Horizon chart requires 2 columns (X values, Y values)\");\n        return;\n      }\n\n      // Convert rows -> objects and transform data (same as taskpane.js)\n      const horizonData = rows.map((row, index) => ({\n        x: row[0] || index + 1,\n        y: parseFloat(row[1]) || 0\n      }));\n\n      // Calculate data range and bands (same as taskpane.js)\n      const yValues = horizonData.map(d => d.y);\n      const maxY = Math.max(...yValues);\n      const minY = Math.min(...yValues);\n      const range = maxY - minY;\n      \n      // Define number of bands (typically 2-4 for horizon graphs)\n      const numBands = 3;\n      const bandHeight = range / (numBands * 2); // Divide by 2 for positive and negative\n      const baseline = minY + range / 2; // Use middle as baseline\n      \n      // Calculate dynamic dimensions\n      const dataPoints = horizonData.length;\n      const dynamicWidth = Math.max(300, Math.min(800, dataPoints * 15));\n\n      // Use EXACT specification from taskpane.js horizon chart\n      const spec = {\n        \"$schema\": \"https://vega.github.io/schema/vega-lite/v6.json\",\n        \"description\": \"Horizon Graph from Excel selection (IDL methodology)\",\n        \"width\": dynamicWidth,\n        \"height\": 60,\n        \"background\": \"white\",\n        \"config\": { \n          \"view\": { \"stroke\": \"transparent\" },\n          \"area\": {\"interpolate\": \"monotone\"}\n        },\n        \"data\": { \"values\": horizonData },\n        \"encoding\": {\n          \"x\": {\n            \"field\": \"x\",\n            \"type\": headers[0].toLowerCase().includes('date') ? \"temporal\" : \"quantitative\",\n            \"scale\": {\"zero\": false, \"nice\": false},\n            \"axis\": {\n              \"title\": headers[0],\n              \"labelFontSize\": 10,\n              \"titleFontSize\": 12,\n              \"labelColor\": \"#605e5c\",\n              \"titleColor\": \"#323130\",\n              \"font\": \"Segoe UI\"\n            }\n          },\n          \"y\": {\n            \"type\": \"quantitative\",\n            \"scale\": {\"domain\": [0, bandHeight]},\n            \"axis\": {\n              \"title\": headers[1],\n              \"orient\": \"left\",\n              \"labelFontSize\": 10,\n              \"titleFontSize\": 12,\n              \"labelColor\": \"#605e5c\",\n              \"titleColor\": \"#323130\",\n              \"font\": \"Segoe UI\",\n              \"tickCount\": 3\n            }\n          }\n        },\n        \"layer\": [\n          // Band 1 (lightest positive)\n          {\n            \"transform\": [\n              {\"calculate\": `max(0, min(datum.y - ${baseline}, ${bandHeight}))`, \"as\": \"band1\"}\n            ],\n            \"mark\": {\n              \"type\": \"area\",\n              \"clip\": true,\n              \"opacity\": 0.3,\n              \"color\": \"#4a90e2\",\n              \"interpolate\": \"monotone\"\n            },\n            \"encoding\": {\n              \"y\": {\"field\": \"band1\"}\n            }\n          },\n          // Band 2 (medium positive)\n          {\n            \"transform\": [\n              {\"calculate\": `max(0, min(datum.y - ${baseline} - ${bandHeight}, ${bandHeight}))`, \"as\": \"band2\"}\n            ],\n            \"mark\": {\n              \"type\": \"area\",\n              \"clip\": true,\n              \"opacity\": 0.6,\n              \"color\": \"#2e7bd6\",\n              \"interpolate\": \"monotone\"\n            },\n            \"encoding\": {\n              \"y\": {\"field\": \"band2\"}\n            }\n          },\n          // Band 3 (darkest positive)\n          {\n            \"transform\": [\n              {\"calculate\": `max(0, datum.y - ${baseline} - ${bandHeight * 2})`, \"as\": \"band3\"}\n            ],\n            \"mark\": {\n              \"type\": \"area\",\n              \"clip\": true,\n              \"opacity\": 0.9,\n              \"color\": \"#1a5bb8\",\n              \"interpolate\": \"monotone\"\n            },\n            \"encoding\": {\n              \"y\": {\"field\": \"band3\"}\n            }\n          },\n          // Band -1 (lightest negative, mirrored)\n          {\n            \"transform\": [\n              {\"calculate\": `max(0, min(${baseline} - datum.y, ${bandHeight}))`, \"as\": \"nband1\"}\n            ],\n            \"mark\": {\n              \"type\": \"area\",\n              \"clip\": true,\n              \"opacity\": 0.3,\n              \"color\": \"#e74c3c\",\n              \"interpolate\": \"monotone\"\n            },\n            \"encoding\": {\n              \"y\": {\"field\": \"nband1\"}\n            }\n          },\n          // Band -2 (medium negative, mirrored)\n          {\n            \"transform\": [\n              {\"calculate\": `max(0, min(${baseline} - datum.y - ${bandHeight}, ${bandHeight}))`, \"as\": \"nband2\"}\n            ],\n            \"mark\": {\n              \"type\": \"area\",\n              \"clip\": true,\n              \"opacity\": 0.6,\n              \"color\": \"#c0392b\",\n              \"interpolate\": \"monotone\"\n            },\n            \"encoding\": {\n              \"y\": {\"field\": \"nband2\"}\n            }\n          },\n          // Band -3 (darkest negative, mirrored)\n          {\n            \"transform\": [\n              {\"calculate\": `max(0, ${baseline} - datum.y - ${bandHeight * 2})`, \"as\": \"nband3\"}\n            ],\n            \"mark\": {\n              \"type\": \"area\",\n              \"clip\": true,\n              \"opacity\": 0.9,\n              \"color\": \"#a93226\",\n              \"interpolate\": \"monotone\"\n            },\n            \"encoding\": {\n              \"y\": {\"field\": \"nband3\"}\n            }\n          }\n        ]\n      };\n\n      createChart(spec, \"horizon\", headers, rows)\n        .then(() => resolve(\"\"))\n        .catch((error) => resolve(`Error: ${error.message}`));\n\n    } catch (error) {\n      resolve(`Error: ${error.message}`);\n    }\n  });\n}\n\n/**\n * SLOPE custom function using the exact same specification as taskpane.js\n * Creates a slope chart from Excel data range\n * \n * @customfunction\n * @param {any[][]} data The data range including headers\n * @returns {string} Status message\n */\nfunction SLOPE(data) {\n  return new Promise((resolve) => {\n    try {\n      if (!data || data.length < 2) {\n        resolve(\"Error: Need at least header row + one data row\");\n        return;\n      }\n\n      const headers = data[0];\n      const rows = data.slice(1);\n\n      if (headers.length < 3) {\n        resolve(\"Error: Slope chart requires 3 columns (Time Period, Category, Value)\");\n        return;\n      }\n\n      // Convert rows -> objects (same as taskpane.js)\n      const processedData = rows.map(row => {\n        let obj = {};\n        headers.forEach((h, i) => {\n          obj[h] = row[i];\n        });\n        return obj;\n      });\n\n      const timePeriods = [...new Set(processedData.map(d => d[headers[0]]))];\n      const categories = [...new Set(processedData.map(d => d[headers[1]]))];\n      \n      // Filter data for first and last periods only (same as taskpane.js)\n      const firstPeriod = timePeriods[0];\n      const lastPeriod = timePeriods[timePeriods.length - 1];\n      \n      const slopeData = processedData.filter(d => \n        d[headers[0]] === firstPeriod || d[headers[0]] === lastPeriod\n      );\n\n      // Check if values are percentages (between -1 and 1)\n      const allValues = slopeData.map(d => d[headers[2]]);\n      const isPercentage = allValues.every(v => v >= -1 && v <= 1);\n      const formatString = isPercentage ? \".1%\" : \",.0f\";\n\n      // Calculate dynamic dimensions based on number of categories\n      const dynamicHeight = Math.max(300, Math.min(600, categories.length * 40));\n      const dynamicWidth = 500;\n\n      // Use EXACT specification from taskpane.js slope chart\n      const spec = {\n        $schema: \"https://vega.github.io/schema/vega-lite/v6.json\",\n        description: \"Slope chart from Excel selection\",\n        background: \"white\",\n        config: { \n          view: { stroke: \"transparent\" },\n          autosize: { type: \"fit\", contains: \"padding\" }\n        },\n        width: dynamicWidth,\n        height: dynamicHeight,\n        data: { values: slopeData },\n        encoding: {\n          x: {\n            field: headers[0],\n            type: \"ordinal\",\n            axis: {\n              title: null,\n              labelFontSize: 14,\n              labelFontWeight: \"bold\",\n              labelPadding: 10,\n              domain: false,\n              ticks: false,\n              labelColor: \"#323130\"\n            },\n            scale: { padding: 0.1 }\n          },\n          y: {\n            field: headers[2],\n            type: \"quantitative\",\n            axis: null,\n            scale: { zero: false }\n          },\n          color: {\n            field: headers[1],\n            type: \"nominal\",\n            legend: null,\n            scale: { scheme: \"category10\" }\n          }\n        },\n        layer: [\n          // Background grid lines\n          {\n            mark: {\n              type: \"rule\",\n              strokeDash: [2, 2],\n              opacity: 0.3\n            },\n            data: { values: [{}] },\n            encoding: {\n              x: { datum: firstPeriod },\n              x2: { datum: lastPeriod },\n              y: { value: 0 },\n              color: { value: \"#e0e0e0\" }\n            }\n          },\n          // Slope lines\n          {\n            mark: {\n              type: \"line\",\n              strokeWidth: 2,\n              opacity: 0.7,\n              tooltip: true\n            },\n            encoding: {\n              detail: { field: headers[1], type: \"nominal\" },\n              tooltip: [\n                { field: headers[1], type: \"nominal\", title: \"Category\" },\n                { field: headers[0], type: \"nominal\", title: \"Period\" },\n                { field: headers[2], type: \"quantitative\", title: \"Value\", format: formatString }\n              ]\n            }\n          },\n          // Points at the ends\n          {\n            mark: {\n              type: \"circle\",\n              size: 100,\n              opacity: 1,\n              tooltip: true\n            }\n          },\n          // Left side value labels\n          {\n            transform: [\n              { filter: `datum['${headers[0]}'] == '${firstPeriod}'` }\n            ],\n            mark: {\n              type: \"text\",\n              align: \"right\",\n              baseline: \"middle\",\n              dx: -8,\n              fontSize: 11,\n              fontWeight: \"normal\"\n            },\n            encoding: {\n              text: { \n                field: headers[2], \n                type: \"quantitative\",\n                format: formatString\n              }\n            }\n          },\n          // Left side category labels (for top values)\n          {\n            transform: [\n              { filter: `datum['${headers[0]}'] == '${firstPeriod}'` },\n              {\n                window: [{ op: \"rank\", as: \"rank\" }],\n                sort: [{ field: headers[2], order: \"descending\" }]\n              },\n              { filter: \"datum.rank <= 3\" }\n            ],\n            mark: {\n              type: \"text\",\n              align: \"right\",\n              baseline: \"bottom\",\n              dx: -8,\n              dy: -12,\n              fontSize: 10,\n              fontWeight: \"bold\",\n              fontStyle: \"italic\"\n            },\n            encoding: {\n              text: { field: headers[1], type: \"nominal\" }\n            }\n          },\n          // Right side value labels\n          {\n            transform: [\n              { filter: `datum['${headers[0]}'] == '${lastPeriod}'` }\n            ],\n            mark: {\n              type: \"text\",\n              align: \"left\",\n              baseline: \"middle\",\n              dx: 8,\n              fontSize: 11,\n              fontWeight: \"normal\"\n            },\n            encoding: {\n              text: { \n                field: headers[2], \n                type: \"quantitative\",\n                format: formatString\n              }\n            }\n          },\n          // Right side category labels\n          {\n            transform: [\n              { filter: `datum['${headers[0]}'] == '${lastPeriod}'` }\n            ],\n            mark: {\n              type: \"text\",\n              align: \"left\",\n              baseline: \"middle\",\n              dx: 35,\n              fontSize: 10,\n              fontWeight: \"bold\"\n            },\n            encoding: {\n              text: { field: headers[1], type: \"nominal\" }\n            }\n          }\n        ],\n        config: {\n          view: { stroke: \"transparent\" },\n          font: \"Segoe UI\",\n          text: { \n            font: \"Segoe UI\", \n            fontSize: 11, \n            fill: \"#605E5C\" \n          },\n          axis: {\n            labelColor: \"#605e5c\",\n            titleColor: \"#323130\",\n            gridColor: \"#f3f2f1\"\n          }\n        }\n      };\n\n      createChart(spec, \"slope\", headers, rows)\n        .then(() => resolve(\"\"))\n        .catch((error) => resolve(`Error: ${error.message}`));\n\n    } catch (error) {\n      resolve(`Error: ${error.message}`);\n    }\n  });\n}\n\n/**\n * MEKKO custom function using the exact same specification as taskpane.js\n * Creates a Mekko chart from Excel data range\n * \n * @customfunction\n * @param {any[][]} data The data range including headers\n * @returns {string} Status message\n */\nfunction MEKKO(data) {\n  return new Promise((resolve) => {\n    try {\n      if (!data || data.length < 2) {\n        resolve(\"Error: Need at least header row + one data row\");\n        return;\n      }\n\n      const headers = data[0];\n      const rows = data.slice(1);\n\n      if (headers.length < 3) {\n        resolve(\"Error: Mekko chart requires 3 columns (Category, Subcategory, Value)\");\n        return;\n      }\n\n      // Convert rows -> objects (same as taskpane.js)\n      const processedData = rows.map(row => {\n        let obj = {};\n        headers.forEach((h, i) => {\n          obj[h] = row[i];\n        });\n        return obj;\n      });\n\n      // Use EXACT specification from taskpane.js mekko chart\n      const spec = {\n        $schema: \"https://vega.github.io/schema/vega/v5.json\",\n        description: \"Marimekko chart from Excel selection\",\n        width: 800,\n        height: 500,\n        background: \"white\",\n        config: { view: { stroke: \"transparent\" }},\n        view: { stroke: null },\n        padding: { top: 60, bottom: 80, left: 60, right: 60 },\n        data: [\n          {\n            name: \"table\",\n            values: processedData\n          },\n          {\n            name: \"categories\",\n            source: \"table\",\n            transform: [\n              {\n                type: \"aggregate\",\n                fields: [headers[2]],\n                ops: [\"sum\"],\n                as: [\"categoryTotal\"],\n                groupby: [headers[0]]\n              },\n              {\n                type: \"stack\",\n                offset: \"normalize\",\n                sort: { field: \"categoryTotal\", order: \"descending\" },\n                field: \"categoryTotal\",\n                as: [\"x0\", \"x1\"]\n              },\n              {\n                type: \"formula\",\n                as: \"Percent\",\n                expr: \"datum.x1-datum.x0\"\n              },\n              {\n                type: \"formula\",\n                as: \"Label\",\n                expr: `datum.${headers[0]} + ' (' + format(datum.Percent,'.1%') + ')'`\n              }\n            ]\n          },\n          {\n            name: \"finalTable\",\n            source: \"table\",\n            transform: [\n              {\n                type: \"stack\",\n                offset: \"normalize\",\n                groupby: [headers[0]],\n                sort: { field: headers[2], order: \"descending\" },\n                field: headers[2],\n                as: [\"y0\", \"y1\"]\n              },\n              {\n                type: \"stack\",\n                groupby: [headers[0]],\n                sort: { field: headers[2], order: \"descending\" },\n                field: headers[2],\n                as: [\"z0\", \"z1\"]\n              },\n              {\n                type: \"lookup\",\n                from: \"categories\",\n                key: headers[0],\n                values: [\"x0\", \"x1\"],\n                fields: [headers[0]]\n              },\n              {\n                type: \"formula\",\n                as: \"Percent\",\n                expr: \"datum.y1-datum.y0\"\n              },\n              {\n                type: \"formula\",\n                as: \"Label\",\n                expr: `[datum.${headers[1]}, format(datum.${headers[2]}, '.0f') + ' (' + format(datum.Percent, '.1%') + ')']`\n              },\n              {\n                type: \"window\",\n                sort: { field: \"y0\", order: \"ascending\" },\n                ops: [\"row_number\"],\n                fields: [null],\n                as: [\"rank\"],\n                groupby: [headers[0]]\n              }\n            ]\n          }\n        ],\n        scales: [\n          {\n            name: \"x\",\n            type: \"linear\",\n            range: \"width\",\n            domain: { data: \"finalTable\", field: \"x1\" }\n          },\n          {\n            name: \"y\",\n            type: \"linear\",\n            range: \"height\",\n            nice: false,\n            zero: true,\n            domain: { data: \"finalTable\", field: \"z1\" }\n          },\n          {\n            name: \"opacity\",\n            type: \"linear\",\n            range: [1, 0.6],\n            domain: { data: \"finalTable\", field: \"rank\" }\n          },\n          {\n            name: \"color\",\n            type: \"ordinal\",\n            range: { scheme: \"category20\" },\n            domain: {\n              data: \"categories\",\n              field: headers[0],\n              sort: { field: \"x0\", order: \"ascending\", op: \"sum\" }\n            }\n          }\n        ],\n        axes: [\n          {\n            orient: \"left\",\n            scale: \"y\",\n            zindex: 1,\n            format: \"\",\n            tickCount: 5,\n            tickSize: 15,\n            labelColor: { value: \"#333740\" },\n            labelFontWeight: { value: \"normal\" },\n            labelFontSize: { value: 12 },\n            labelFont: { value: \"Segoe UI\" },\n            offset: 5,\n            domain: false,\n            encode: {\n              labels: {\n                update: {\n                  text: { signal: `format(datum.value, '.0f')` }\n                }\n              }\n            }\n          }\n        ],\n        marks: [\n          {\n            type: \"rect\",\n            name: \"bars\",\n            from: { data: \"finalTable\" },\n            encode: {\n              update: {\n                x: { scale: \"x\", field: \"x0\" },\n                x2: { scale: \"x\", field: \"x1\" },\n                y: { scale: \"y\", field: \"z0\" },\n                y2: { scale: \"y\", field: \"z1\" },\n                fill: { scale: \"color\", field: headers[0] },\n                stroke: { value: \"white\" },\n                strokeWidth: { value: 1 },\n                fillOpacity: { scale: \"opacity\", field: \"rank\" },\n                tooltip: { signal: \"datum\" }\n              }\n            }\n          },\n          {\n            type: \"text\",\n            name: \"labels\",\n            interactive: false,\n            from: { data: \"bars\" },\n            encode: {\n              update: {\n                x: { signal: \"(datum.x2 - datum.x)*0.5 + datum.x\" },\n                align: { value: \"center\" },\n                text: { field: \"datum.Label\" },\n                y: { signal: \"(datum.y2 - datum.y)*0.5 + datum.y\" },\n                fill: { value: \"white\" },\n                font: { value: \"Segoe UI\" },\n                lineHeight: { value: 12 },\n                fontSize: { value: 10 },\n                opacity: { signal: \"(datum.x2 - datum.x) > 0.05 && (datum.y2 - datum.y) > 20 ? 1 : 0\" }\n              }\n            }\n          },\n          {\n            type: \"text\",\n            name: \"categoryLabels\",\n            from: { data: \"categories\" },\n            encode: {\n              update: {\n                x: { scale: \"x\", signal: \"(datum.x1-datum.x0)/2 + datum.x0\" },\n                y: { signal: \"-15\" },\n                text: { field: headers[0] },\n                align: { value: \"center\" },\n                baseline: { value: \"bottom\" },\n                fill: { value: \"#333740\" },\n                fontWeight: { value: \"bold\" },\n                fontSize: { value: 12 },\n                font: { value: \"Segoe UI\" }\n              }\n            }\n          },\n          {\n            type: \"text\",\n            name: \"categoryPercentages\",\n            from: { data: \"categories\" },\n            encode: {\n              update: {\n                x: { scale: \"x\", signal: \"(datum.x1-datum.x0)/2 + datum.x0\" },\n                y: { signal: \"height + 30\" },\n                text: { field: \"Label\" },\n                align: { value: \"center\" },\n                baseline: { value: \"top\" },\n                fill: { value: \"#666666\" },\n                fontWeight: { value: \"normal\" },\n                fontSize: { value: 10 },\n                font: { value: \"Segoe UI\" }\n              }\n            }\n          }\n        ]\n      };\n\n      createChart(spec, \"mekko\", headers, rows)\n        .then(() => resolve(\"\"))\n        .catch((error) => resolve(`Error: ${error.message}`));\n\n    } catch (error) {\n      resolve(`Error: ${error.message}`);\n    }\n  });\n}\n\n/**\n * MARIMEKKO custom function using the exact same specification as taskpane.js\n * Creates a marimekko chart from Excel data range\n * \n * @customfunction\n * @param {any[][]} data The data range including headers\n * @returns {string} Status message\n */\nfunction MARIMEKKO(data) {\n  return new Promise((resolve) => {\n    try {\n      if (!data || data.length < 2) {\n        resolve(\"Error: Need at least header row + one data row\");\n        return;\n      }\n\n      const headers = data[0];\n      const rows = data.slice(1);\n\n      if (headers.length < 3) {\n        resolve(\"Error: Marimekko chart requires at least 3 columns: Category, Subcategory, Value\");\n        return;\n      }\n\n      // Convert rows -> objects (same as taskpane.js)\n      const processedData = rows.map(row => {\n        let obj = {};\n        headers.forEach((h, i) => {\n          obj[h] = row[i];\n        });\n        return obj;\n      });\n\n      // Use EXACT specification from taskpane.js marimekko chart\n      const spec = {\n        \"$schema\": \"https://vega.github.io/schema/vega/v5.json\",\n        \"description\": \"Marimekko Chart from Excel selection\",\n        \"width\": 600,\n        \"height\": 400,\n        \"background\": \"white\",\n        \"config\": { \"view\": { \"stroke\": \"transparent\" }},\n        \"padding\": { \"top\": 30, \"bottom\": 60, \"left\": 60, \"right\": 60 },\n        \"data\": [\n          {\n            \"name\": \"table\",\n            \"values\": processedData,\n            \"transform\": [\n              {\n                \"type\": \"formula\",\n                \"as\": \"Category\",\n                \"expr\": `datum['${headers[0]}']`\n              },\n              {\n                \"type\": \"formula\", \n                \"as\": \"Subcategory\",\n                \"expr\": `datum['${headers[1]}']`\n              },\n              {\n                \"type\": \"formula\",\n                \"as\": \"Value\", \n                \"expr\": `datum['${headers[2]}']`\n              }\n            ]\n          },\n          {\n            \"name\": \"categories\",\n            \"source\": \"table\",\n            \"transform\": [\n              {\n                \"type\": \"aggregate\",\n                \"fields\": [\"Value\"],\n                \"ops\": [\"sum\"],\n                \"as\": [\"categoryTotal\"],\n                \"groupby\": [\"Category\"]\n              },\n              {\n                \"type\": \"stack\",\n                \"offset\": \"normalize\",\n                \"sort\": { \"field\": \"categoryTotal\", \"order\": \"descending\" },\n                \"field\": \"categoryTotal\",\n                \"as\": [\"x0\", \"x1\"]\n              },\n              {\n                \"type\": \"formula\",\n                \"as\": \"Percent\",\n                \"expr\": \"datum.x1 - datum.x0\"\n              }\n            ]\n          },\n          {\n            \"name\": \"finalTable\",\n            \"source\": \"table\",\n            \"transform\": [\n              {\n                \"type\": \"stack\",\n                \"offset\": \"normalize\",\n                \"groupby\": [\"Category\"],\n                \"sort\": { \"field\": \"Value\", \"order\": \"descending\" },\n                \"field\": \"Value\",\n                \"as\": [\"y0\", \"y1\"]\n              },\n              {\n                \"type\": \"lookup\",\n                \"from\": \"categories\",\n                \"key\": \"Category\",\n                \"values\": [\"x0\", \"x1\"],\n                \"fields\": [\"Category\"]\n              },\n              {\n                \"type\": \"formula\",\n                \"as\": \"Percent\",\n                \"expr\": \"datum.y1 - datum.y0\"\n              }\n            ]\n          }\n        ],\n        \"scales\": [\n          {\n            \"name\": \"x\",\n            \"type\": \"linear\",\n            \"range\": \"width\",\n            \"domain\": { \"data\": \"finalTable\", \"field\": \"x1\" }\n          },\n          {\n            \"name\": \"y\",\n            \"type\": \"linear\",\n            \"range\": \"height\",\n            \"nice\": false,\n            \"zero\": true,\n            \"domain\": { \"data\": \"finalTable\", \"field\": \"y1\" }\n          },\n          {\n            \"name\": \"color\",\n            \"type\": \"ordinal\",\n            \"range\": { \"scheme\": \"category20\" },\n            \"domain\": {\n              \"data\": \"categories\",\n              \"field\": \"Category\",\n              \"sort\": { \"field\": \"x0\", \"order\": \"ascending\", \"op\": \"sum\" }\n            }\n          }\n        ],\n        \"axes\": [\n          {\n            \"orient\": \"left\",\n            \"scale\": \"y\",\n            \"format\": \"%\",\n            \"tickCount\": 5,\n            \"labelColor\": \"#333333\",\n            \"labelFontSize\": 11,\n            \"domain\": false\n          },\n          {\n            \"orient\": \"bottom\",\n            \"scale\": \"x\",\n            \"format\": \"%\",\n            \"tickCount\": 5,\n            \"labelColor\": \"#333333\", \n            \"labelFontSize\": 11,\n            \"domain\": false\n          }\n        ],\n        \"marks\": [\n          {\n            \"type\": \"rect\",\n            \"name\": \"bars\",\n            \"from\": { \"data\": \"finalTable\" },\n            \"encode\": {\n              \"update\": {\n                \"x\": { \"scale\": \"x\", \"field\": \"x0\" },\n                \"x2\": { \"scale\": \"x\", \"field\": \"x1\" },\n                \"y\": { \"scale\": \"y\", \"field\": \"y0\" },\n                \"y2\": { \"scale\": \"y\", \"field\": \"y1\" },\n                \"fill\": { \"scale\": \"color\", \"field\": \"Category\" },\n                \"stroke\": { \"value\": \"white\" },\n                \"strokeWidth\": { \"value\": 1 },\n                \"opacity\": { \"value\": 0.8 },\n                \"tooltip\": { \n                  \"signal\": \"{'Category': datum.Category, 'Subcategory': datum.Subcategory, 'Value': datum.Value, 'Percentage': format(datum.Percent, '.1%')}\" \n                }\n              },\n              \"hover\": {\n                \"opacity\": { \"value\": 1.0 }\n              }\n            }\n          },\n          {\n            \"type\": \"text\",\n            \"name\": \"valueLabels\",\n            \"from\": { \"data\": \"finalTable\" },\n            \"encode\": {\n              \"update\": {\n                \"x\": { \"scale\": \"x\", \"signal\": \"(datum.x1 - datum.x0)/2 + datum.x0\" },\n                \"y\": { \"scale\": \"y\", \"signal\": \"(datum.y1 - datum.y0)/2 + datum.y0\" },\n                \"text\": { \n                  \"signal\": \"datum.Percent > 0.027 ? [datum.Subcategory, format(datum.Value, ',.0f') + ' (' + format(datum.Percent, '.0%') + ')'] : []\" \n                },\n                \"align\": { \"value\": \"center\" },\n                \"baseline\": { \"value\": \"middle\" },\n                \"fill\": { \"value\": \"white\" },\n                \"fontSize\": { \"value\": 10 },\n                \"fontWeight\": { \"value\": \"normal\" },\n                \"font\": { \"value\": \"Segoe UI\" },\n                \"lineHeight\": { \"value\": 12 },\n                \"opacity\": { \"signal\": \"datum.Percent > 0.027 ? 1 : 0\" }\n              }\n            }\n          }\n        ]\n      };\n\n      createChart(spec, \"marimekko\", headers, rows)\n        .then(() => resolve(\"\"))\n        .catch((error) => resolve(`Error: ${error.message}`));\n\n    } catch (error) {\n      resolve(`Error: ${error.message}`);\n    }\n  });\n}\n\n/**\n * BUMP custom function using the exact same specification as taskpane.js\n * Creates a bump chart from Excel data range\n * \n * @customfunction\n * @param {any[][]} data The data range including headers\n * @returns {string} Status message\n */\nfunction BUMP(data) {\n  return new Promise((resolve) => {\n    try {\n      if (!data || data.length < 2) {\n        resolve(\"Error: Need at least header row + one data row\");\n        return;\n      }\n\n      const headers = data[0];\n      const rows = data.slice(1);\n\n      if (headers.length < 3) {\n        resolve(\"Error: Bump chart requires 3 columns: Time periods, Categories, Rank values\");\n        return;\n      }\n\n      // Convert rows -> objects (same as taskpane.js)\n      const processedData = rows.map(row => {\n        let obj = {};\n        headers.forEach((h, i) => {\n          obj[h] = row[i];\n        });\n        return obj;\n      });\n\n      // Calculate width based on number of unique x-values\n      const uniqueX = [...new Set(processedData.map(d => d[headers[0]]))];\n      const dynamicWidth = Math.max(400, uniqueX.length * 80);\n\n      // Use EXACT specification from taskpane.js bump chart\n      const spec = {\n        $schema: \"https://vega.github.io/schema/vega-lite/v6.json\",\n        description: \"Bump chart from Excel selection\",\n        background: \"white\",\n        config: { view: { stroke: \"transparent\" }},\n        data: { values: processedData },\n        width: dynamicWidth,\n        height: 200,   // give it some room\n        encoding: {\n          x: {\n            field: headers[0],\n            type: \"nominal\",\n            axis: { title: \"\" },\n            scale: { type: \"point\", padding: 1 }   // padding 1 for more spread\n          },\n          y: {\n            field: headers[2],      \n            type: \"ordinal\",\n            axis: false\n          }\n        },\n        layer: [\n          {\n            mark: { type: \"line\", interpolate: \"monotone\" },\n            encoding: {\n              color: {\n                field: headers[1],   \n                type: \"nominal\",\n                legend: false\n              }\n            }\n          },\n          {\n            mark: { type: \"circle\", size: 400, tooltip: true },\n            encoding: {\n              color: {\n                field: headers[1],\n                type: \"nominal\",\n                legend: false\n              }\n            }\n          },\n          {\n            mark: { type: \"text\", color: \"white\" },\n            encoding: {\n              text: { field: headers[2] }\n            }\n          },\n          {\n            // Left-side labels\n            transform: [\n              { window: [{ op: \"rank\", as: \"rank\" }], sort: [{ field: headers[0], order: \"descending\" }] },\n              { filter: \"datum.rank === 1\" }\n            ],\n            mark: {\n              type: \"text\",\n              align: \"left\",\n              baseline: \"middle\",\n              dx: 15,\n              fontWeight: \"bold\",\n              fontSize: 12\n            },\n            encoding: {\n              text: { field: headers[1], type: \"nominal\" },\n              color: { field: headers[1], type: \"nominal\", legend: false }\n            }\n          },\n          {\n            // Right-side labels\n            transform: [\n              { window: [{ op: \"rank\", as: \"rank\" }], sort: [{ field: headers[0], order: \"ascending\" }] },\n              { filter: \"datum.rank === 1\" }\n            ],\n            mark: {\n              type: \"text\",\n              align: \"right\",\n              baseline: \"middle\",\n              dx: -15,\n              fontWeight: \"bold\",\n              fontSize: 12\n            },\n            encoding: {\n              text: { field: headers[1], type: \"nominal\" },\n              color: { field: headers[1], type: \"nominal\", legend: false }\n            }\n          }\n        ],\n        config: {\n          view: { stroke: \"transparent\" },\n          line: { strokeWidth: 3, strokeCap: \"round\", strokeJoin: \"round\" },\n          axis: {\n            ticks: false,\n            grid: false,\n            domain: false,\n            labelColor: \"#666666\",\n            labelFontSize: 12\n          }\n        }\n      };\n\n      createChart(spec, \"bump\", headers, rows)\n        .then(() => resolve(\"\"))\n        .catch((error) => resolve(`Error: ${error.message}`));\n\n    } catch (error) {\n      resolve(`Error: ${error.message}`);\n    }\n  });\n}\n\n/**\n * WAFFLE custom function using the exact same specification as taskpane.js\n * Creates a waffle chart from Excel data range\n * \n * @customfunction\n * @param {any[][]} data The data range including headers\n * @returns {string} Status message\n */\nfunction WAFFLE(data) {\n  return new Promise((resolve) => {\n    try {\n      if (!data || data.length < 2) {\n        resolve(\"Error: Need at least header row + one data row\");\n        return;\n      }\n\n      const headers = data[0];\n      const rows = data.slice(1);\n\n      if (headers.length < 2) {\n        resolve(\"Error: Waffle chart requires 2 columns: Category names, Values\");\n        return;\n      }\n\n      // Convert rows -> objects (same as taskpane.js)\n      const processedData = rows.map(row => {\n        let obj = {};\n        headers.forEach((h, i) => {\n          obj[h] = row[i];\n        });\n        return obj;\n      });\n\n      // Use EXACT specification from taskpane.js waffle chart\n      const spec = {\n        $schema: \"https://vega.github.io/schema/vega-lite/v5.json\",\n        description: \"Waffle chart from Excel selection\",\n        background: \"white\",\n        config: { view: { stroke: \"transparent\" }},\n        data: { values: processedData },\n        transform: [\n          {\n            joinaggregate: [{\"op\": \"sum\", \"field\": headers[1], \"as\": \"TotalValue\"}]\n          },\n          {\n            calculate: `round(datum.${headers[1]}/datum.TotalValue * 100)`,\n            as: \"PercentOfTotal\"\n          },\n          {\n            aggregate: [{\"op\": \"min\", \"field\": \"PercentOfTotal\", \"as\": \"Percent\"}],\n            groupby: [headers[0]]\n          },\n          {\"calculate\": \"sequence(1,101)\", \"as\": \"Sequence\"},\n          {\"flatten\": [\"Sequence\"]},\n          {\n            calculate: `if(datum.Sequence <= datum.Percent, datum.${headers[0]},'_blank')`,\n            as: \"Plot\"\n          },\n          {\"calculate\": \"ceil (datum.Sequence / 10)\", \"as\": \"row\"},\n          {\"calculate\": \"datum.Sequence - datum.row * 10\", \"as\": \"col\"}\n        ],\n        facet: {\"column\": {\"field\": headers[0], \"header\": {\"labelOrient\": \"bottom\"}}},\n        spec: {\n          layer: [\n            {\n              mark: {\n                type: \"circle\",\n                filled: true,\n                tooltip: true,\n                stroke: \"#9e9b9b\",\n                strokeWidth: 0.7\n              },\n              encoding: {\n                x: {\"field\": \"col\", \"type\": \"ordinal\", \"axis\": null},\n                y: {\"field\": \"row\", \"type\": \"ordinal\", \"axis\": null, \"sort\": \"-y\"},\n                color: {\n                  condition: {\"test\": \"datum.Plot == '_blank'\", \"value\": \"#e6e3e3\"},\n                  scale: {\"scheme\": \"set1\"},\n                  field: \"Plot\",\n                  type: \"nominal\",\n                  legend: null\n                },\n                size: {\"value\": 241},\n                tooltip: [{\"field\": headers[0], \"type\": \"nominal\"}]\n              }\n            },\n            {\n              mark: {\"type\": \"text\", \"fontSize\": 30, \"fontWeight\": \"bold\"},\n              encoding: {\n                y: {\"value\": 30},\n                text: {\n                  condition: {\n                    test: \"datum.Sequence == 1\",\n                    value: {\"expr\": \"datum.Percent + '%'\"}\n                  }\n                },\n                color: {\"scale\": {\"scheme\": \"set1\"}, \"field\": \"Plot\"}\n              }\n            }\n          ]\n        },\n        config: {\n          view: {\"stroke\": \"transparent\"},\n          font: \"Segoe UI\",\n          text: {\"font\": \"Segoe UI\", \"fontSize\": 12, \"fill\": \"#605E5C\"},\n          axis: {\n            ticks: false,\n            grid: false,\n            domain: false,\n            labelColor: \"#605E5C\",\n            labelFontSize: 12\n          },\n          header: {\n            titleFont: \"Segoe UI\",\n            titleFontSize: 16,\n            titleColor: \"#757575\",\n            labelFont: \"Segoe UI\",\n            labelFontSize: 13,\n            labelColor: \"#605E5C\"\n          },\n          legend: {\n            titleFont: \"Segoe UI\",\n            titleFontWeight: \"bold\",\n            titleColor: \"#605E5C\",\n            labelFont: \"Segoe UI\",\n            labelFontSize: 13,\n            labelColor: \"#605E5C\",\n            symbolType: \"circle\",\n            symbolSize: 75\n          }\n        }\n      };\n\n      createChart(spec, \"waffle\", headers, rows)\n        .then(() => resolve(\"\"))\n        .catch((error) => resolve(`Error: ${error.message}`));\n\n    } catch (error) {\n      resolve(`Error: ${error.message}`);\n    }\n  });\n}\n\n/**\n * LOLLIPOP custom function using the exact same specification as taskpane.js\n * Creates a lollipop chart from Excel data range\n * \n * @customfunction\n * @param {any[][]} data The data range including headers\n * @returns {string} Status message\n */\nfunction LOLLIPOP(data) {\n  return new Promise((resolve) => {\n    try {\n      if (!data || data.length < 2) {\n        resolve(\"Error: Need at least header row + one data row\");\n        return;\n      }\n\n      const headers = data[0];\n      const rows = data.slice(1);\n\n      if (headers.length < 2) {\n        resolve(\"Error: Lollipop chart requires 2 columns: Category names, Values\");\n        return;\n      }\n\n      // Convert rows -> objects (same as taskpane.js)\n      const processedData = rows.map(row => {\n        let obj = {};\n        headers.forEach((h, i) => {\n          obj[h] = row[i];\n        });\n        return obj;\n      });\n\n      // Use EXACT specification from taskpane.js lollipop chart\n      const spec = {\n        $schema: \"https://vega.github.io/schema/vega-lite/v5.json\",\n        description: \"Lollipop chart from Excel selection\",\n        background: \"white\",\n        config: { view: { stroke: \"transparent\" }},\n        data: { values: processedData },\n        encoding: {\n          y: {\n            field: headers[0],\n            type: \"nominal\",\n            sort: \"-x\",\n            axis: {\n              domain: false,\n              title: null,\n              ticks: false,\n              labelFont: \"Segoe UI\",\n              labelFontSize: 14,\n              labelPadding: 10,\n              labelColor: \"#605e5c\"\n            }\n          },\n          x: {\n            field: headers[1],\n            type: \"quantitative\",\n            axis: {\n              domain: false,\n              ticks: false,\n              grid: true,\n              gridColor: \"#e0e0e0\",\n              labelFont: \"Segoe UI\",\n              labelFontSize: 12,\n              labelColor: \"#605e5c\",\n              title: headers[1],\n              titleFont: \"Segoe UI\",\n              titleFontSize: 14,\n              titleColor: \"#323130\"\n            }\n          },\n          color: { value: \"#0078d4\" }\n        },\n        layer: [\n          {\n            mark: {\n              type: \"rule\",\n              tooltip: true,\n              strokeWidth: 3,\n              opacity: 0.7\n            }\n          },\n          {\n            mark: {\n              type: \"circle\",\n              tooltip: true,\n              size: 300,\n              opacity: 0.9\n            },\n            encoding: {\n              size: {\n                field: headers[1],\n                type: \"quantitative\",\n                scale: {\n                  range: [200, 800]\n                },\n                legend: null\n              }\n            }\n          }\n        ],\n        config: {\n          autosize: {\n            type: \"fit\",\n            contains: \"padding\"\n          },\n          view: { stroke: \"transparent\" },\n          font: \"Segoe UI\",\n          text: { font: \"Segoe UI\", fontSize: 12, fill: \"#605E5C\" }\n        }\n      };\n\n      createChart(spec, \"lollipop\", headers, rows)\n        .then(() => resolve(\"\"))\n        .catch((error) => resolve(`Error: ${error.message}`));\n\n    } catch (error) {\n      resolve(`Error: ${error.message}`);\n    }\n  });\n}\n\n/**\n * VIOLIN custom function using the exact specification provided\n * Creates a violin chart from Excel data range\n * \n * @customfunction\n * @param {any[][]} data The data range including headers\n * @returns {string} Status message\n */\nfunction VIOLIN(data) {\n  return new Promise((resolve) => {\n    try {\n      if (!data || data.length < 2) {\n        resolve(\"Error: Need at least header row + one data row\");\n        return;\n      }\n\n      const headers = data[0];\n      const rows = data.slice(1);\n\n      if (headers.length < 2) {\n        resolve(\"Error: Violin chart requires 2 columns: Categories/Groups, Continuous values\");\n        return;\n      }\n\n      // Convert rows -> objects\n      const processedData = rows.map(row => {\n        let obj = {};\n        headers.forEach((h, i) => {\n          obj[h] = row[i];\n        });\n        return obj;\n      });\n\n      // Use EXACT specification as provided\n      const spec = {\n        $schema: \"https://vega.github.io/schema/vega-lite/v5.20.1.json\",\n        description: \"Violin chart from Excel selection\",\n        background: \"white\",\n        config: {\n          view: { continuousWidth: 300, continuousHeight: 300, stroke: null },\n          facet: { spacing: 0 }\n        },\n        data: { values: processedData },\n        mark: { type: \"area\", orient: \"horizontal\" },\n        encoding: {\n          color: { field: headers[0], type: \"nominal\" },\n          column: {\n            field: headers[0],\n            header: {\n              labelOrient: \"bottom\",\n              labelPadding: 0,\n              titleOrient: \"bottom\"\n            },\n            type: \"nominal\"\n          },\n          x: {\n            axis: { grid: false, labels: false, ticks: true, values: [0] },\n            field: \"density\",\n            impute: null,\n            stack: \"center\",\n            title: null,\n            type: \"quantitative\"\n          },\n          y: { field: headers[1], type: \"quantitative\" }\n        },\n        transform: [\n          {\n            density: headers[1],\n            groupby: [headers[0]],\n            as: [headers[1], \"density\"]\n          }\n        ],\n        width: 100\n      };\n\n      createChart(spec, \"violin\", headers, rows)\n        .then(() => resolve(\"\"))\n        .catch((error) => resolve(`Error: ${error.message}`));\n\n    } catch (error) {\n      resolve(`Error: ${error.message}`);\n    }\n  });\n}\n\n/**\n * GANTT custom function using the exact same specification as taskpane.js\n * Creates a Gantt chart from Excel data range\n * \n * @customfunction\n * @param {any[][]} data The data range including headers\n * @returns {string} Status message\n */\nfunction GANTT(data) {\n  return new Promise((resolve) => {\n    try {\n      if (!data || data.length < 2) {\n        resolve(\"Error: Need at least header row + one data row\");\n        return;\n      }\n\n      const headers = data[0];\n      const rows = data.slice(1);\n\n      if (headers.length < 6) {\n        resolve(\"Error: Gantt chart requires 6 columns (Parent ID, Task ID, Task Name, Start Date, End Date, Progress)\");\n        return;\n      }\n\n      // Helper function to convert Excel dates (same as taskpane.js)\n      function excelDateToJSDate(serial) {\n        return new Date(Math.round((serial - 25569) * 86400 * 1000));\n      }\n\n      const ganttData = rows.map(row => {\n        const parentId = row[0] || null;   // col 1 = parent id\n        const id = row[1];                 // col 2 = task id\n        const name = row[2] || `Task ${id}`;\n        if (!id) return null;\n\n        const start = typeof row[3] === \"number\" ? excelDateToJSDate(row[3]) : new Date(row[3]);\n        const end = typeof row[4] === \"number\" ? excelDateToJSDate(row[4]) : new Date(row[4]);\n        if (!(start instanceof Date) || isNaN(start) || !(end instanceof Date) || isNaN(end)) return null;\n\n        let progress = 0;\n        if (row[5]) {\n          if (typeof row[5] === \"string\" && row[5].includes(\"%\")) {\n            progress = parseFloat(row[5]) / 100;\n          } else if (row[5] > 1) {\n            progress = row[5] / 100;\n          } else {\n            progress = row[5];\n          }\n        }\n\n        const dependencies = row[6] ? String(row[6]).split(\",\").map(d => d.trim()) : [];\n\n        return { id, parentId, name, startDate: start, endDate: end, progress, dependencies };\n      }).filter(Boolean);\n\n      // Precompute progressEnd\n      ganttData.forEach(task => {\n        const duration = task.endDate - task.startDate;\n        task.progressEnd = new Date(task.startDate.getTime() + duration * task.progress);\n      });\n\n      // Build parent->children map\n      const childrenMap = new Map();\n      ganttData.forEach(task => {\n        if (!childrenMap.has(task.parentId)) {\n          childrenMap.set(task.parentId, []);\n        }\n        childrenMap.get(task.parentId).push(task);\n      });\n\n      // Sort children by startDate\n      for (let [pid, childList] of childrenMap.entries()) {\n        childList.sort((a, b) => a.startDate - b.startDate);\n      }\n\n      // Recursive hierarchy ordering\n      function buildHierarchy(parentId = null, level = 0) {\n        const ordered = [];\n        const tasks = childrenMap.get(parentId) || [];\n        for (const task of tasks) {\n          task.level = level;\n          ordered.push(task);\n          ordered.push(...buildHierarchy(task.id, level + 1));\n        }\n        return ordered;\n      }\n\n      const orderedTasks = buildHierarchy(null);\n\n      // Use EXACT specification from taskpane.js gantt chart\n      const spec = {\n        $schema: \"https://vega.github.io/schema/vega-lite/v5.json\",\n        description: \"Gantt Chart from Excel Data\",\n        width: 800,\n        height: Math.max(300, orderedTasks.length * 30),\n        data: { values: orderedTasks },\n        layer: [\n          {\n            mark: { type: \"bar\", opacity: 0.3, height: 20 },\n            encoding: {\n              y: { field: \"name\", type: \"nominal\", axis: { title: null, labelFontSize: 11 }, sort: null },\n              x: { field: \"startDate\", type: \"temporal\", axis: { title: \"Timeline\", format: \"%b %d\", labelAngle: -45 } },\n              x2: { field: \"endDate\", type: \"temporal\" },\n              color: { field: \"level\", type: \"ordinal\", scale: { scheme: \"category10\" }, legend: { title: \"Level\" } },\n              tooltip: [\n                { field: \"name\", type: \"nominal\", title: \"Task\" },\n                { field: \"startDate\", type: \"temporal\", title: \"Start\", format: \"%Y-%m-%d\" },\n                { field: \"endDate\", type: \"temporal\", title: \"End\", format: \"%Y-%m-%d\" },\n                { field: \"progress\", type: \"quantitative\", title: \"Progress\", format: \".0%\" }\n              ]\n            }\n          },\n          {\n            mark: { type: \"bar\", opacity: 0.8, height: 20 },\n            encoding: {\n              y: { field: \"name\", type: \"nominal\", sort: null },\n              x: { field: \"startDate\", type: \"temporal\" },\n              x2: { field: \"progressEnd\", type: \"temporal\" },\n              color: { field: \"level\", type: \"ordinal\", scale: { scheme: \"category10\" } }\n            }\n          },\n          {\n            mark: { type: \"text\", align: \"left\", baseline: \"middle\", dx: 5, fontSize: 10 },\n            encoding: {\n              y: { field: \"name\", type: \"nominal\", sort: null },\n              x: { field: \"endDate\", type: \"temporal\" },\n              text: { field: \"progress\", type: \"quantitative\", format: \".0%\" },\n              color: { value: \"#666\" }\n            }\n          },\n          {\n            mark: { type: \"rule\", strokeDash: [4, 4], opacity: 0.5 },\n            data: { values: [{ date: new Date().toISOString() }] },\n            encoding: {\n              x: { field: \"date\", type: \"temporal\" },\n              color: { value: \"red\" },\n              size: { value: 1 }\n            }\n          }\n        ],\n        config: { view: { stroke: null }, axis: { grid: true, gridColor: \"#f0f0f0\" } }\n      };\n\n      createChart(spec, \"gantt\", headers, rows)\n        .then(() => resolve(\"\"))\n        .catch((error) => resolve(`Error: ${error.message}`));\n\n    } catch (error) {\n      resolve(`Error: ${error.message}`);\n    }\n  });\n}\n\n/**\n * SANKEY custom function using the exact same specification as taskpane.js\n * Creates a Sankey diagram from Excel data range\n * \n * @customfunction\n * @param {any[][]} data The data range including headers\n * @returns {string} Status message\n */\nfunction SANKEY(data) {\n  return new Promise((resolve) => {\n    try {\n      if (!data || data.length < 2) {\n        resolve(\"Error: Need at least header row + one data row\");\n        return;\n      }\n\n      const headers = data[0];\n      const rows = data.slice(1);\n\n      if (headers.length < 3) {\n        resolve(\"Error: Sankey chart requires 3 columns (Source Category, Destination Category, Values)\");\n        return;\n      }\n\n      // Filter and transform data (same as taskpane.js)\n      const processedData = rows\n        .filter(r => r[0] && r[1] && !isNaN(+r[2]))\n        .map(r => ({\n          key: { stk1: r[0], stk2: r[1] },\n          doc_count: +r[2]\n        }));\n\n      if (processedData.length === 0) {\n        resolve(\"Error: No valid data found for Sankey chart\");\n        return;\n      }\n\n      // Use EXACT specification from taskpane.js sankey chart\n      const spec = {\n        $schema: \"https://vega.github.io/schema/vega/v5.2.json\",\n        height: 300,\n        width: 600,\n        background: \"white\",\n        config: { view: { stroke: \"transparent\" }},\n        view: { stroke: null },\n        padding: { top: 60, bottom: 80, left: 60, right: 60 },\n        data: [\n          {\n            name: \"rawData\",\n            values: processedData,\n            transform: [\n              { type: \"formula\", expr: \"datum.key.stk1\", as: \"stk1\" },\n              { type: \"formula\", expr: \"datum.key.stk2\", as: \"stk2\" },\n              { type: \"formula\", expr: \"datum.doc_count\", as: \"size\" }\n            ]\n          },\n          {\n            name: \"nodes\",\n            source: \"rawData\",\n            transform: [\n              {\n                type: \"filter\",\n                expr:\n                  \"!groupSelector || groupSelector.stk1 == datum.stk1 || groupSelector.stk2 == datum.stk2\"\n              },\n              { type: \"formula\", expr: \"datum.stk1+datum.stk2\", as: \"key\" },\n              { type: \"fold\", fields: [\"stk1\", \"stk2\"], as: [\"stack\", \"grpId\"] },\n              {\n                type: \"formula\",\n                expr:\n                  \"datum.stack == 'stk1' ? datum.stk1+' '+datum.stk2 : datum.stk2+' '+datum.stk1\",\n                as: \"sortField\"\n              },\n              {\n                type: \"stack\",\n                groupby: [\"stack\"],\n                sort: { field: \"sortField\", order: \"descending\" },\n                field: \"size\"\n              },\n              { type: \"formula\", expr: \"(datum.y0+datum.y1)/2\", as: \"yc\" }\n            ]\n          },\n          {\n            name: \"groups\",\n            source: \"nodes\",\n            transform: [\n              {\n                type: \"aggregate\",\n                groupby: [\"stack\", \"grpId\"],\n                fields: [\"size\"],\n                ops: [\"sum\"],\n                as: [\"total\"]\n              },\n              {\n                type: \"stack\",\n                groupby: [\"stack\"],\n                sort: { field: \"grpId\", order: \"descending\" },\n                field: \"total\"\n              },\n              { type: \"formula\", expr: \"scale('y', datum.y0)\", as: \"scaledY0\" },\n              { type: \"formula\", expr: \"scale('y', datum.y1)\", as: \"scaledY1\" },\n              { type: \"formula\", expr: \"datum.stack == 'stk1'\", as: \"rightLabel\" },\n              { type: \"formula\", expr: \"datum.total/domain('y')[1]\", as: \"percentage\" }\n            ]\n          },\n          {\n            name: \"destinationNodes\",\n            source: \"nodes\",\n            transform: [{ type: \"filter\", expr: \"datum.stack == 'stk2'\" }]\n          },\n          {\n            name: \"edges\",\n            source: \"nodes\",\n            transform: [\n              { type: \"filter\", expr: \"datum.stack == 'stk1'\" },\n              {\n                type: \"lookup\",\n                from: \"destinationNodes\",\n                key: \"key\",\n                fields: [\"key\"],\n                as: [\"target\"]\n              },\n              {\n                type: \"linkpath\",\n                orient: \"horizontal\",\n                shape: \"diagonal\",\n                sourceY: { expr: \"scale('y', datum.yc)\" },\n                sourceX: { expr: \"scale('x', 'stk1') + bandwidth('x')\" },\n                targetY: { expr: \"scale('y', datum.target.yc)\" },\n                targetX: { expr: \"scale('x', 'stk2')\" }\n              },\n              { type: \"formula\", expr: \"range('y')[0]-scale('y', datum.size)\", as: \"strokeWidth\" },\n              { type: \"formula\", expr: \"datum.size/domain('y')[1]\", as: \"percentage\" }\n            ]\n          }\n        ],\n        scales: [\n          {\n            name: \"x\",\n            type: \"band\",\n            range: \"width\",\n            domain: [\"stk1\", \"stk2\"],\n            paddingOuter: 0.05,\n            paddingInner: 0.95\n          },\n          {\n            name: \"y\",\n            type: \"linear\",\n            range: \"height\",\n            domain: { data: \"nodes\", field: \"y1\" }\n          },\n          {\n            name: \"color\",\n            type: \"ordinal\",\n            range: \"category\",\n            domain: {\n              fields: [\n                { data: \"rawData\", field: \"stk1\" },\n                { data: \"rawData\", field: \"stk2\" }\n              ]\n            }\n          },\n          {\n            name: \"stackNames\",\n            type: \"ordinal\",\n            range: [\"Source\", \"Destination\"],\n            domain: [\"stk1\", \"stk2\"]\n          }\n        ],\n        axes: [\n          {\n            orient: \"bottom\",\n            scale: \"x\",\n            encode: {\n              labels: { update: { text: { scale: \"stackNames\", field: \"value\" } } }\n            }\n          },\n          { orient: \"left\", scale: \"y\" }\n        ],\n        marks: [\n          {\n            type: \"path\",\n            name: \"edgeMark\",\n            from: { data: \"edges\" },\n            clip: true,\n            encode: {\n              update: {\n                stroke: { scale: \"color\", field: \"stk1\" }, // links colored by source\n                strokeWidth: { field: \"strokeWidth\" },\n                path: { field: \"path\" },\n                strokeOpacity: {\n                  signal:\n                    \"!groupSelector && (groupHover.stk1 == datum.stk1 || groupHover.stk2 == datum.stk2) ? 0.9 : 0.3\"\n                },\n                zindex: {\n                  signal:\n                    \"!groupSelector && (groupHover.stk1 == datum.stk1 || groupHover.stk2 == datum.stk2) ? 1 : 0\"\n                },\n                tooltip: {\n                  signal:\n                    \"datum.stk1 + ' → ' + datum.stk2 + '    ' + format(datum.size, ',.0f') + '   (' + format(datum.percentage, '.1%') + ')'\"\n                }\n              },\n              hover: { strokeOpacity: { value: 1 } }\n            }\n          },\n          {\n            type: \"rect\",\n            name: \"groupMark\",\n            from: { data: \"groups\" },\n            encode: {\n              enter: {\n                fill: { scale: \"color\", field: \"grpId\" }, // both source & destination use union colors\n                width: { scale: \"x\", band: 1 }\n              },\n              update: {\n                x: { scale: \"x\", field: \"stack\" },\n                y: { field: \"scaledY0\" },\n                y2: { field: \"scaledY1\" },\n                fillOpacity: { value: 0.6 },\n                tooltip: {\n                  signal:\n                    \"datum.grpId + '   ' + format(datum.total, ',.0f') + '   (' + format(datum.percentage, '.1%') + ')'\"\n                }\n              },\n              hover: { fillOpacity: { value: 1 } }\n            }\n          },\n          {\n            type: \"text\",\n            from: { data: \"groups\" },\n            interactive: false,\n            encode: {\n              update: {\n                x: {\n                  signal:\n                    \"scale('x', datum.stack) + (datum.rightLabel ? bandwidth('x') + 8 : -8)\"\n                },\n                yc: { signal: \"(datum.scaledY0 + datum.scaledY1)/2\" },\n                align: { signal: \"datum.rightLabel ? 'left' : 'right'\" },\n                baseline: { value: \"middle\" },\n                fontWeight: { value: \"bold\" },\n                text: {\n                  signal: \"abs(datum.scaledY0-datum.scaledY1) > 13 ? datum.grpId : ''\"\n                }\n              }\n            }\n          }\n        ],\n        signals: [\n          {\n            name: \"groupHover\",\n            value: {},\n            on: [\n              {\n                events: \"@groupMark:mouseover\",\n                update:\n                  \"{stk1:datum.stack=='stk1' && datum.grpId, stk2:datum.stack=='stk2' && datum.grpId}\"\n              },\n              { events: \"mouseout\", update: \"{}\" }\n            ]\n          },\n          {\n            name: \"groupSelector\",\n            value: false,\n            on: [\n              {\n                events: \"@groupMark:click!\",\n                update:\n                  \"{stack:datum.stack, stk1:datum.stack=='stk1' && datum.grpId, stk2:datum.stack=='stk2' && datum.grpId}\"\n              },\n              {\n                events: [\n                  { type: \"click\", markname: \"groupReset\" },\n                  { type: \"dblclick\" }\n                ],\n                update: \"false\"\n              }\n            ]\n          }\n        ]\n      };\n\n      createChart(spec, \"sankey\", headers, rows)\n        .then(() => resolve(\"\"))\n        .catch((error) => resolve(`Error: ${error.message}`));\n\n    } catch (error) {\n      resolve(`Error: ${error.message}`);\n    }\n  });\n}\n\n/**\n * RIDGELINE custom function using the exact same specification as taskpane.js\n * Creates a ridgeline (joyplot) chart from Excel data range\n * \n * @customfunction\n * @param {any[][]} data The data range including headers\n * @returns {string} Status message\n */\nfunction RIDGELINE(data) {\n  return new Promise((resolve) => {\n    try {\n      if (!data || data.length < 2) {\n        resolve(\"Error: Need at least header row + one data row\");\n        return;\n      }\n\n      const headers = data[0];\n      const rows = data.slice(1);\n\n      if (headers.length < 3) {\n        resolve(\"Error: Ridgeline chart requires 3 columns (Time/X-axis, Categories, Values)\");\n        return;\n      }\n\n      // Convert rows -> objects (same as taskpane.js)\n      const processedData = rows.map(row => {\n        let obj = {};\n        headers.forEach((h, i) => {\n          obj[h] = row[i];\n        });\n        return obj;\n      });\n\n      // Use EXACT specification from taskpane.js ridgeline chart\n      const spec = {\n        $schema: \"https://vega.github.io/schema/vega-lite/v6.json\",\n        description: \"Ridgeline (Joyplot) chart from Excel selection\",\n        background: \"white\",\n        config: { view: { stroke: \"transparent\" }},\n        data: { values: processedData },\n        mark: {\n          type: \"area\",\n          fillOpacity: 0.7,\n          strokeOpacity: 1,\n          strokeWidth: 1,\n          interpolate: \"monotone\"\n        },\n        width: 400,\n        height: 20,\n        encoding: {\n          x: {\n            field: headers[0],       // date/time column\n            type: \"ordinal\",\n            title: headers[0]\n          },\n          y: {\n            aggregate: \"sum\",\n            field: headers[2],       // value column\n            type: \"quantitative\",\n            scale: { range: [20, -40] },\n            axis: {\n              title: null,\n              values: [0],\n              domain: false,\n              labels: false,\n              ticks: false\n            }\n          },\n          row: {\n            field: headers[1],       // category column\n            type: \"nominal\",\n            title: headers[1],\n            header: {\n              title: null,\n              labelAngle: 0,\n              labelOrient: \"left\",\n              labelAlign: \"left\",\n              labelPadding: 0\n            },\n            sort: { field: headers[0], op: \"max\", order: \"ascending\" }\n          },\n          fill: {\n            field: headers[1],\n            type: \"nominal\",\n            legend: null,\n            scale: { scheme: \"plasma\" }\n          }\n        },\n        resolve: { scale: { y: \"independent\" } },\n        config: {\n          view: { stroke: \"transparent\" },\n          facet: { spacing: 20 },\n          header: {\n            labelFontSize: 12,\n            labelFontWeight: 500,\n            labelAngle: 0,\n            labelAnchor: \"end\",\n            labelOrient: \"top\",\n            labelPadding: -19\n          },\n          axis: {\n            domain: false,\n            grid: false,\n            ticks: false,\n            tickCount: 5,\n            labelFontSize: 12,\n            titleFontSize: 12,\n            titleFontWeight: 400,\n            titleColor: \"#605E5C\"\n          }\n        }\n      };\n\n      createChart(spec, \"ridgeline\", headers, rows)\n        .then(() => resolve(\"\"))\n        .catch((error) => resolve(`Error: ${error.message}`));\n\n    } catch (error) {\n      resolve(`Error: ${error.message}`);\n    }\n  });\n}\n\n/**\n * DEVIATION custom function using the exact same specification as taskpane.js\n * Creates a deviation chart from Excel data range\n * \n * @customfunction\n * @param {any[][]} data The data range including headers\n * @returns {string} Status message\n */\nfunction DEVIATION(data) {\n  return new Promise((resolve) => {\n    try {\n      if (!data || data.length < 2) {\n        resolve(\"Error: Need at least header row + one data row\");\n        return;\n      }\n\n      const headers = data[0];\n      const rows = data.slice(1);\n\n      if (headers.length < 3) {\n        resolve(\"Error: Deviation chart requires 3 columns (Date/Period, Actual Values, Target/Baseline Values)\");\n        return;\n      }\n\n      // Convert rows -> objects (same as taskpane.js)\n      const processedData = rows.map(row => {\n        let obj = {};\n        headers.forEach((h, i) => {\n          obj[h] = row[i];\n        });\n        return obj;\n      });\n\n      // Use EXACT specification from taskpane.js deviation chart\n      const spec = {\n        $schema: \"https://vega.github.io/schema/vega-lite/v6.json\",\n        description: \"Deviation chart from Excel selection\",\n        background: \"white\",\n        config: { view: { stroke: \"transparent\" }},\n        data: { values: processedData },\n        layer: [\n          {\n            mark: { type: \"line\", tooltip: true, color: \"grey\" },\n            encoding: {\n              x: { field: headers[0], type: \"ordinal\" },\n              y: { field: headers[1], type: \"quantitative\" }\n            }\n          },\n          {\n            mark: { type: \"circle\", size: 80, color: \"grey\", tooltip: true },\n            encoding: {\n              x: { field: headers[0], type: \"ordinal\" },\n              y: { field: headers[1], type: \"quantitative\" }\n            }\n          },\n          {\n            mark: { type: \"rule\", strokeWidth: 2, tooltip: true },\n            encoding: {\n              x: { field: headers[0], type: \"ordinal\" },\n              y: { field: headers[1], type: \"quantitative\" },\n              y2: { field: headers[2] },\n              color: {\n                condition: { test: `datum[\"${headers[1]}\"] < datum[\"${headers[2]}\"]`, value: \"red\" },\n                value: \"green\"\n              }\n            }\n          },\n          {\n            mark: { type: \"circle\", size: 60, tooltip: true },\n            encoding: {\n              x: { field: headers[0], type: \"ordinal\" },\n              y: { field: headers[2], type: \"quantitative\" },\n              color: {\n                condition: { test: `datum[\"${headers[1]}\"] < datum[\"${headers[2]}\"]`, value: \"red\" },\n                value: \"green\"\n              }\n            }\n          }\n        ],\n        encoding: {\n          x: { \n            field: headers[0], \n            type: \"ordinal\", \n            axis: { \n              title: null,\n              labelAngle: 0\n            } \n          },\n          y: { type: \"quantitative\", axis: { title: \"\" } }\n        },\n        config: {\n          view: { stroke: \"transparent\" },\n          line: { strokeWidth: 3, strokeCap: \"round\", strokeJoin: \"round\" },\n          axis: {\n            ticks: false,\n            grid: false,\n            domain: false,\n            labelColor: \"#605E5C\",\n            labelFontSize: 12\n          }\n        }\n      };\n\n      createChart(spec, \"deviation\", headers, rows)\n        .then(() => resolve(\"\"))\n        .catch((error) => resolve(`Error: ${error.message}`));\n\n    } catch (error) {\n      resolve(`Error: ${error.message}`);\n    }\n  });\n}\n\n/**\n * RIBBON custom function using the exact same specification as taskpane.js\n * Creates a ribbon chart from Excel data range\n * \n * @customfunction\n * @param {any[][]} data The data range including headers\n * @returns {string} Status message\n */\nfunction RIBBON(data) {\n  return new Promise((resolve) => {\n    try {\n      if (!data || data.length < 2) {\n        resolve(\"Error: Need at least header row + one data row\");\n        return;\n      }\n\n      const headers = data[0];\n      const rows = data.slice(1);\n\n      if (headers.length < 3) {\n        resolve(\"Error: Ribbon chart requires 3 columns (Time periods, Categories, Values)\");\n        return;\n      }\n\n      // Convert rows -> objects (same as taskpane.js)\n      const processedData = rows.map(row => {\n        let obj = {};\n        headers.forEach((h, i) => {\n          obj[h] = row[i];\n        });\n        return obj;\n      });\n\n      // Calculate dynamic dimensions based on data\n      const uniquePeriods = [...new Set(processedData.map(d => d[headers[0]]))];\n      const dynamicWidth = Math.max(600, uniquePeriods.length * 100);\n      const dynamicHeight = 400;\n\n      // Use EXACT specification from taskpane.js ribbon chart\n      const spec = {\n        $schema: \"https://vega.github.io/schema/vega-lite/v6.json\",\n        description: \"Ribbon chart from Excel selection\",\n        background: \"white\",\n        width: dynamicWidth,\n        height: dynamicHeight,\n        config: { view: { stroke: \"transparent\" }},\n        data: { values: processedData },\n        layer: [\n          {\n            mark: { \n              type: \"area\", \n              interpolate: \"monotone\", \n              tooltip: true,\n              opacity: 0.8\n            },\n            encoding: {\n              x: {\n                field: headers[0],\n                type: \"ordinal\",\n                scale: {\n                  type: \"point\",\n                  padding: 0.3\n                },\n                axis: {\n                  title: headers[0],\n                  labelAngle: -45,\n                  labelFontSize: 12,\n                  titleFontSize: 14,\n                  labelPadding: 10,\n                  titlePadding: 20\n                }\n              },\n              y: {\n                aggregate: \"sum\",\n                field: headers[2],\n                type: \"quantitative\",\n                axis: {\n                  title: headers[2],\n                  labelFontSize: 12,\n                  titleFontSize: 14,\n                  grid: true,\n                  gridOpacity: 0.3\n                },\n                stack: \"center\"\n              },\n              color: {\n                field: headers[1],\n                type: \"nominal\",\n                legend: {\n                  title: headers[1],\n                  titleFontSize: 12,\n                  labelFontSize: 11,\n                  orient: \"right\"\n                }\n              },\n              order: {\n                aggregate: \"sum\",\n                field: headers[2],\n                type: \"quantitative\"\n              }\n            }\n          }\n        ],\n        config: {\n          view: { stroke: \"transparent\" },\n          font: \"Segoe UI\",\n          axis: {\n            ticks: false,\n            grid: true,\n            gridColor: \"#f0f0f0\",\n            gridOpacity: 0.5,\n            gridWidth: 1,\n            domain: false,\n            labelColor: \"#605e5c\",\n            titleColor: \"#323130\"\n          },\n          legend: {\n            titleFont: \"Segoe UI\",\n            titleFontWeight: \"bold\",\n            titleColor: \"#323130\",\n            labelFont: \"Segoe UI\",\n            labelColor: \"#605e5c\",\n            symbolType: \"circle\",\n            symbolSize: 75\n          }\n        }\n      };\n\n      createChart(spec, \"ribbon\", headers, rows)\n        .then(() => resolve(\"\"))\n        .catch((error) => resolve(`Error: ${error.message}`));\n\n    } catch (error) {\n      resolve(`Error: ${error.message}`);\n    }\n  });\n}\n\n/**\n * Generic chart creation function (same approach as taskpane.js)\n */\nasync function createChart(spec, chartType, headers, rows) {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const chartId = `${chartType}_${Date.now()}_${Math.random().toString(36).substr(2, 6)}`;\n      \n      // Render hidden chart (same as taskpane.js)\n      const hiddenDiv = document.createElement(\"div\");\n      hiddenDiv.style.display = \"none\";\n      hiddenDiv.id = chartId;\n      document.body.appendChild(hiddenDiv);\n\n      // Load Vega-Lite if not available\n      if (typeof vegaEmbed === 'undefined') {\n        await loadVegaLibraries();\n      }\n\n      const result = await vegaEmbed(hiddenDiv, spec, { actions: false });\n      const view = result.view;\n\n      // Export chart -> PNG (same as taskpane.js)\n      const pngUrl = await view.toImageURL(\"png\");\n      const response = await fetch(pngUrl);\n      const blob = await response.blob();\n\n      const reader = new FileReader();\n      reader.onloadend = async () => {\n        try {\n          const base64data = reader.result.split(\",\")[1];\n\n          // Insert into Excel (same approach as taskpane.js)\n          await insertChartIntoExcel(base64data, chartType, chartId);\n          \n          // Clean up hidden div\n          document.body.removeChild(hiddenDiv);\n          resolve();\n          \n        } catch (error) {\n          // Clean up on error\n          if (document.body.contains(hiddenDiv)) {\n            document.body.removeChild(hiddenDiv);\n          }\n          reject(error);\n        }\n      };\n      \n      reader.readAsDataURL(blob);\n\n    } catch (error) {\n      reject(error);\n    }\n  });\n}\n\n/**\n * Inserts chart into Excel using the same approach as taskpane.js\n */\nasync function insertChartIntoExcel(base64data, chartType, chartId) {\n  return Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getActiveWorksheet();\n\n    // Remove old chart and get its position\n    const oldPosition = await removeExistingCharts(context, sheet, chartType);\n\n    let left, top, targetWidth;\n\n    if (oldPosition) {\n      // Use old chart position and size\n      left = oldPosition.left;\n      top = oldPosition.top;\n      targetWidth = oldPosition.width;\n    } else {\n      // Fall back to current selection\n      const range = context.workbook.getSelectedRange();\n      range.load(\"left, top, width, height\");\n      await context.sync();\n      left = range.left;\n      top = range.top;\n      targetWidth = Math.max(400, range.width * 8); // Default chart width\n    }\n\n    // Insert the new image\n    const image = sheet.shapes.addImage(base64data);\n    image.left = left;\n    image.top = top;\n    image.lockAspectRatio = true; // Set this BEFORE setting dimensions\n    image.width = targetWidth; // Only set width, let Excel calculate height\n    image.name = `${chartType.charAt(0).toUpperCase() + chartType.slice(1)}Chart_${chartId}`;\n\n    await context.sync();\n  });\n}\n\n/**\n * Remove existing charts of the same type (prevents duplicates)\n */\nasync function removeExistingCharts(context, sheet, chartType) {\n  const shapes = sheet.shapes;\n  shapes.load(\"items\");\n  await context.sync();\n\n  const chartPrefix = `${chartType.charAt(0).toUpperCase() + chartType.slice(1)}Chart_`;\n  let oldPosition = null;\n\n  for (let i = shapes.items.length - 1; i >= 0; i--) {\n    const shape = shapes.items[i];\n    shape.load([\"name\", \"left\", \"top\", \"width\", \"height\"]);\n  }\n  await context.sync();\n\n  for (let i = shapes.items.length - 1; i >= 0; i--) {\n    const shape = shapes.items[i];\n    if (shape.name && shape.name.startsWith(chartPrefix)) {\n      // Save position before deleting\n      oldPosition = {\n        left: shape.left,\n        top: shape.top,\n        width: shape.width,\n        height: shape.height,\n      };\n      shape.delete();\n      await context.sync();\n    }\n  }\n\n  return oldPosition;\n}\n\n/**\n * Load Vega libraries (same CDN versions as taskpane.html)\n */\nfunction loadVegaLibraries() {\n  return new Promise((resolve, reject) => {\n    if (typeof vegaEmbed !== 'undefined') {\n      resolve();\n      return;\n    }\n\n    // Load libraries in sequence (same as taskpane.html)\n    const scripts = [\n      'https://cdn.jsdelivr.net/npm/vega@6',\n      'https://cdn.jsdelivr.net/npm/vega-lite@6', \n      'https://cdn.jsdelivr.net/npm/vega-embed@6'\n    ];\n\n    let loadedCount = 0;\n    \n    scripts.forEach((src, index) => {\n      const script = document.createElement('script');\n      script.src = src;\n      script.onload = () => {\n        loadedCount++;\n        if (loadedCount === scripts.length) {\n          resolve();\n        }\n      };\n      script.onerror = () => reject(new Error(`Failed to load ${src}`));\n      document.head.appendChild(script);\n    });\n  });\n}\n\n// Register all custom functions\nif (typeof CustomFunctions !== 'undefined') {\n  CustomFunctions.associate(\"LINE\", LINE);\n  CustomFunctions.associate(\"BAR\", BAR);\n  CustomFunctions.associate(\"PIE\", PIE);\n  CustomFunctions.associate(\"AREA\", AREA);\n  CustomFunctions.associate(\"SCATTER\", SCATTER);\n  CustomFunctions.associate(\"RADIAL\", RADIAL);\n  CustomFunctions.associate(\"BOX\", BOX);\n  CustomFunctions.associate(\"RADAR\", RADAR);\n  CustomFunctions.associate(\"WATERFALL\", WATERFALL);\n  CustomFunctions.associate(\"SUNBURST\", SUNBURST);\n  CustomFunctions.associate(\"TREEMAP\", TREEMAP);\n  CustomFunctions.associate(\"HISTOGRAM\", HISTOGRAM);\n  CustomFunctions.associate(\"CANDLESTICK\", CANDLESTICK);\n  CustomFunctions.associate(\"MAP\", MAP);\n  CustomFunctions.associate(\"ARC\", ARC);\n  CustomFunctions.associate(\"TREE\", TREE);\n  CustomFunctions.associate(\"WORDCLOUD\", WORDCLOUD);\n  CustomFunctions.associate(\"STRIP\", STRIP);\n  CustomFunctions.associate(\"HEATMAP\", HEATMAP);\n  CustomFunctions.associate(\"BULLET\", BULLET);\n  CustomFunctions.associate(\"HORIZON\", HORIZON);\n  CustomFunctions.associate(\"SLOPE\", SLOPE);\n  CustomFunctions.associate(\"MEKKO\", MEKKO);\n  CustomFunctions.associate(\"MARIMEKKO\", MARIMEKKO);\n  CustomFunctions.associate(\"BUMP\", BUMP);\n  CustomFunctions.associate(\"WAFFLE\", WAFFLE);\n  CustomFunctions.associate(\"LOLLIPOP\", LOLLIPOP);\n  CustomFunctions.associate(\"VIOLIN\", VIOLIN);\n  CustomFunctions.associate(\"GANTT\", GANTT);\n  CustomFunctions.associate(\"SANKEY\", SANKEY);\n  CustomFunctions.associate(\"RIBBON\", RIBBON);\n  CustomFunctions.associate(\"RIDGELINE\", RIDGELINE);\n  CustomFunctions.associate(\"DEVIATION\", DEVIATION);\n}\nCustomFunctions.associate(\"LINE\", LINE);\nCustomFunctions.associate(\"BAR\", BAR);\nCustomFunctions.associate(\"PIE\", PIE);\nCustomFunctions.associate(\"AREA\", AREA);\nCustomFunctions.associate(\"SCATTER\", SCATTER);\nCustomFunctions.associate(\"RADIAL\", RADIAL);\nCustomFunctions.associate(\"BOX\", BOX);\nCustomFunctions.associate(\"RADAR\", RADAR);\nCustomFunctions.associate(\"WATERFALL\", WATERFALL);\nCustomFunctions.associate(\"SUNBURST\", SUNBURST);\nCustomFunctions.associate(\"TREEMAP\", TREEMAP);\nCustomFunctions.associate(\"HISTOGRAM\", HISTOGRAM);\nCustomFunctions.associate(\"MAP\", MAP);\nCustomFunctions.associate(\"CANDLESTICK\", CANDLESTICK);\nCustomFunctions.associate(\"ARC\", ARC);\nCustomFunctions.associate(\"TREE\", TREE);\nCustomFunctions.associate(\"WORDCLOUD\", WORDCLOUD);\nCustomFunctions.associate(\"STRIP\", STRIP);\nCustomFunctions.associate(\"HEATMAP\", HEATMAP);\nCustomFunctions.associate(\"BULLET\", BULLET);\nCustomFunctions.associate(\"HORIZON\", HORIZON);\nCustomFunctions.associate(\"SLOPE\", SLOPE);\nCustomFunctions.associate(\"MEKKO\", MEKKO);\nCustomFunctions.associate(\"MARIMEKKO\", MARIMEKKO);\nCustomFunctions.associate(\"BUMP\", BUMP);\nCustomFunctions.associate(\"WAFFLE\", WAFFLE);\nCustomFunctions.associate(\"LOLLIPOP\", LOLLIPOP);\nCustomFunctions.associate(\"VIOLIN\", VIOLIN);\nCustomFunctions.associate(\"GANTT\", GANTT);\nCustomFunctions.associate(\"SANKEY\", SANKEY);\nCustomFunctions.associate(\"RIDGELINE\", RIDGELINE);\nCustomFunctions.associate(\"DEVIATION\", DEVIATION);\nCustomFunctions.associate(\"RIBBON\", RIBBON);"],"names":["e","t","r","Symbol","n","iterator","o","toStringTag","i","c","prototype","Generator","u","Object","create","_regeneratorDefine2","f","p","y","G","v","a","d","bind","length","l","TypeError","call","done","value","return","GeneratorFunction","GeneratorFunctionPrototype","getPrototypeOf","setPrototypeOf","__proto__","displayName","_regenerator","w","m","defineProperty","_invoke","enumerable","configurable","writable","_typeof","constructor","asyncGeneratorStep","Promise","resolve","then","_asyncToGenerator","arguments","apply","_next","_throw","_slicedToArray","Array","isArray","_arrayWithHoles","next","push","_iterableToArrayLimit","_unsupportedIterableToArray","_nonIterableRest","_createForOfIteratorHelper","_n","F","s","_toConsumableArray","_arrayLikeToArray","_arrayWithoutHoles","from","_iterableToArray","_nonIterableSpread","toString","slice","name","test","ownKeys","keys","getOwnPropertySymbols","filter","getOwnPropertyDescriptor","_objectSpread","forEach","_defineProperty","getOwnPropertyDescriptors","defineProperties","toPrimitive","String","_toPrimitive","_toPropertyKey","LINE","data","headers","rows","processedData","map","row","obj","h","transformedData","valueColumns","colName","undefined","parseFloat","createChart","$schema","description","background","config","view","stroke","values","mark","type","point","tooltip","strokeWidth","encoding","x","field","axis","title","labelFontSize","titleFontSize","labelAngle","color","scale","scheme","legend","font","labelColor","titleColor","gridColor","size","filled","catch","error","concat","message","BAR","PIE","some","isNaN","outerRadius","theta","AREA","opacity","SCATTER","zero","shape","RADIAL","layer","innerRadius","radiusOffset","text","stack","radius","rangeMin","BOX","category","extent","RADAR","radarData","dimensions","seriesIndex","seriesName","dimension","indexOf","series","uniqueDimensions","Set","width","height","padding","autosize","signals","scales","range","domain","nice","domainMin","encode","enter","marks","zindex","facet","interpolate","fill","fillOpacity","strokeOpacity","x2","y2","align","baseline","fontWeight","fontSize","WATERFALL","processedDataRaw","numDataPoints","dynamicWidth","Math","max","min","maxAmount","abs","transform","sort","paddingInner","paddingOuter","condition","SUNBURST","nodes","Map","parent","child","has","set","id","existingNode","get","hierarchicalData","allIds","node","nodeCount","chartSize","TREEMAP","treeData","find","key","parentKey","round","method","ratio","signal","source","expr","interactive","update","hover","HISTOGRAM","numericData","minVal","maxVal","binWidth","niceMin","floor","niceMax","ceil","MAP","isoToId","worldData","iso","toUpperCase","trim","rate","url","format","feature","lookup","fields","projection","CANDLESTICK","candlestickData","index","serial","date","Date","open","high","low","close","getTime","toISOString","Boolean","dataPoints","availableWidth","barWidth","ARC","edges","target","group","nodeMap","edge","edgesWithIndices","top","bottom","left","right","groupby","as","ops","default","count","mult","offset","sourceX","targetX","sourceY","targetY","angle","TREE","WORDCLOUD","case","pattern","stopwords","rotate","fontSizeRange","STRIP","thickness","grid","gridOpacity","orient","HEATMAP","spacing","bounds","vconcat","cornerRadiusEnd","aggregate","hconcat","ticks","labels","labelPadding","direction","gradientLength","contains","titleFont","titleFontWeight","labelFont","BULLET","ranges","measures","markers","HORIZON","horizonData","yValues","maxY","minY","bandHeight","toLowerCase","includes","SLOPE","timePeriods","categories","firstPeriod","lastPeriod","slopeData","formatString","every","labelFontWeight","strokeDash","datum","detail","dx","window","op","order","dy","fontStyle","MEKKO","axes","tickCount","tickSize","lineHeight","MARIMEKKO","BUMP","uniqueX","line","strokeCap","strokeJoin","WAFFLE","joinaggregate","calculate","spec","header","symbolType","symbolSize","LOLLIPOP","VIOLIN","continuousWidth","continuousHeight","column","labelOrient","titleOrient","impute","density","GANTT","excelDateToJSDate","buildHierarchy","_step2","parentId","level","ordered","_iterator2","childrenMap","task","err","ganttData","start","end","progress","startDate","endDate","dependencies","split","duration","progressEnd","_step","_iterator","entries","_step$value","b","orderedTasks","SANKEY","stk1","stk2","doc_count","clip","path","band","yc","on","events","markname","RIDGELINE","labelAlign","labelAnchor","DEVIATION","RIBBON","uniquePeriods","titlePadding","gridWidth","_x","_x2","_x3","_x4","_createChart","_callee3","chartType","_context3","_ref","_callee2","reject","chartId","hiddenDiv","result","pngUrl","response","blob","reader","_t2","_context2","now","random","substr","document","createElement","style","display","body","appendChild","vegaEmbed","loadVegaLibraries","actions","toImageURL","fetch","FileReader","onloadend","_callee","base64data","_t","_context","insertChartIntoExcel","removeChild","readAsDataURL","_x1","_x10","_x5","_x6","_x7","_insertChartIntoExcel","_callee5","_context5","Excel","run","_ref3","_callee4","context","sheet","oldPosition","targetWidth","image","_context4","workbook","worksheets","getActiveWorksheet","removeExistingCharts","getSelectedRange","load","sync","shapes","addImage","lockAspectRatio","charAt","_x11","_x8","_x9","_x0","_removeExistingCharts","_callee6","chartPrefix","_i","_shape","_context6","items","startsWith","delete","scripts","loadedCount","src","script","onload","onerror","Error","head","CustomFunctions","associate"],"sourceRoot":""}