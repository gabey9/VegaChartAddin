{"version":3,"file":"functions.js","mappings":"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","sources":["webpack://excel-custom-functions-js/./src/functions/functions.js"],"sourcesContent":["// Global chart position tracking\nconst chartPositions = new Map();\n\n/**\n * LINE custom function using the exact same specification as taskpane.js\n * Creates a multi-series line chart from Excel data range\n * \n * @customfunction\n * @param {any[][]} data The data range including headers\n * @returns {string} Status message\n */\nfunction LINE(data) {\n  return new Promise((resolve) => {\n    try {\n      if (!data || data.length < 2) {\n        resolve(\"Error: Need at least header row + one data row\");\n        return;\n      }\n\n      const headers = data[0];\n      const rows = data.slice(1);\n\n      // Convert rows -> objects (same as taskpane.js)\n      const processedData = rows.map(row => {\n        let obj = {};\n        headers.forEach((h, i) => {\n          obj[h] = row[i];\n        });\n        return obj;\n      });\n\n      // Transform data for multi-series line chart (exact copy from taskpane.js)\n      const transformedData = [];\n      const valueColumns = headers.slice(1);\n      processedData.forEach(row => {\n        valueColumns.forEach(colName => {\n          if (row[colName] !== null && row[colName] !== undefined && row[colName] !== \"\") {\n            transformedData.push({\n              [headers[0]]: row[headers[0]], // x-axis value (first column)\n              series: colName,               // series name (column header)\n              value: parseFloat(row[colName]) || 0  // y-axis value\n            });\n          }\n        });\n      });\n\n      // Use EXACT specification from taskpane.js line chart\n      const spec = {\n        $schema: \"https://vega.github.io/schema/vega-lite/v6.json\",\n        description: \"Multi-series line chart from Excel selection\",\n        background: \"white\",\n        config: { view: { stroke: \"transparent\" }},\n        data: { values: transformedData },\n        mark: { \n          type: \"line\", \n          point: false,\n          tooltip: true,\n          strokeWidth: 2\n        },\n        encoding: {\n          x: { \n            field: headers[0], \n            type: \"ordinal\",\n            axis: {\n              title: headers[0],\n              labelFontSize: 12,\n              titleFontSize: 14,\n              labelAngle: 0\n            }\n          },\n          y: { \n            field: \"value\", \n            type: \"quantitative\",\n            axis: {\n              title: \"Value\",\n              labelFontSize: 12,\n              titleFontSize: 14\n            }\n          },\n          color: { \n            field: \"series\", \n            type: \"nominal\",\n            scale: {\n              scheme: \"category10\"\n            },\n            legend: {\n              title: \"Series\",\n              titleFontSize: 12,\n              labelFontSize: 11\n            }\n          }\n        },\n        config: {\n          font: \"Segoe UI\",\n          axis: {\n            labelColor: \"#605e5c\",\n            titleColor: \"#323130\",\n            gridColor: \"#f3f2f1\"\n          },\n          legend: {\n            titleColor: \"#323130\",\n            labelColor: \"#605e5c\"\n          },\n          point: {\n            size: 60,\n            filled: true\n          }\n        }\n      };\n\n      createChart(spec, \"line\", headers, rows)\n        .then(() => resolve(\"\"))\n        .catch((error) => resolve(`Error: ${error.message}`));\n\n    } catch (error) {\n      resolve(`Error: ${error.message}`);\n    }\n  });\n}\n\n/**\n * BAR custom function using the exact same specification as taskpane.js\n * Creates a bar chart from Excel data range\n * \n * @customfunction\n * @param {any[][]} data The data range including headers\n * @returns {string} Status message\n */\nfunction BAR(data) {\n  return new Promise((resolve) => {\n    try {\n      if (!data || data.length < 2) {\n        resolve(\"Error: Need at least header row + one data row\");\n        return;\n      }\n\n      const headers = data[0];\n      const rows = data.slice(1);\n\n      // Convert rows -> objects (same as taskpane.js)\n      const processedData = rows.map(row => {\n        let obj = {};\n        headers.forEach((h, i) => {\n          obj[h] = row[i];\n        });\n        return obj;\n      });\n\n      // Use EXACT specification from taskpane.js bar chart\n      const spec = {\n        $schema: \"https://vega.github.io/schema/vega-lite/v6.json\",\n        description: \"Bar chart from Excel selection\",\n        background: \"white\",\n        config: { view: { stroke: \"transparent\" }},\n        data: { values: processedData },\n        mark: { \n          type: \"bar\", \n          tooltip: true\n        },\n        encoding: {\n          x: { \n            field: headers[0], \n            type: \"nominal\",\n            axis: {\n              title: headers[0],\n              labelFontSize: 12,\n              titleFontSize: 14\n            }\n          },\n          y: { \n            field: headers[1], \n            type: \"quantitative\",\n            axis: {\n              title: headers[1],\n              labelFontSize: 12,\n              titleFontSize: 14\n            }\n          },\n          // Add color encoding for grouped bars if 3rd column exists\n          ...(headers.length >= 3 && {\n            color: { \n              field: headers[2], \n              type: \"nominal\",\n              legend: {\n                title: headers[2],\n                titleFontSize: 12,\n                labelFontSize: 11\n              }\n            }\n          })\n        },\n        config: {\n          font: \"Segoe UI\",\n          axis: {\n            labelColor: \"#605e5c\",\n            titleColor: \"#323130\",\n            gridColor: \"#f3f2f1\"\n          },\n          legend: {\n            titleColor: \"#323130\",\n            labelColor: \"#605e5c\"\n          }\n        }\n      };\n\n      createChart(spec, \"bar\", headers, rows)\n        .then(() => resolve(\"\"))\n        .catch((error) => resolve(`Error: ${error.message}`));\n\n    } catch (error) {\n      resolve(`Error: ${error.message}`);\n    }\n  });\n}\n\n/**\n * PIE custom function using the exact same specification as taskpane.js\n * Creates a pie chart from Excel data range\n * \n * @customfunction\n * @param {any[][]} data The data range including headers\n * @returns {string} Status message\n */\nfunction PIE(data) {\n  return new Promise((resolve) => {\n    try {\n      if (!data || data.length < 2) {\n        resolve(\"Error: Need at least header row + one data row\");\n        return;\n      }\n\n      const headers = data[0];\n      const rows = data.slice(1);\n\n      if (headers.length < 2) {\n        resolve(\"Error: Pie chart requires 2 columns (Category, Value)\");\n        return;\n      }\n\n      // Validate that all values are positive numbers\n      const hasInvalidValues = rows.some(row => isNaN(row[1]) || row[1] <= 0);\n      if (hasInvalidValues) {\n        resolve(\"Error: Pie chart values must be positive numbers\");\n        return;\n      }\n\n      // Convert rows -> objects (same as taskpane.js)\n      const processedData = rows.map(row => {\n        let obj = {};\n        headers.forEach((h, i) => {\n          obj[h] = row[i];\n        });\n        return obj;\n      });\n\n      // Use EXACT specification from taskpane.js pie chart\n      const spec = {\n        $schema: \"https://vega.github.io/schema/vega-lite/v6.json\",\n        background: \"white\",\n        config: { view: { stroke: \"transparent\" }},\n        description: \"Pie chart from Excel selection\",\n        data: { values: processedData },\n        mark: { type: \"arc\", outerRadius: 120 },\n        encoding: {\n          theta: { field: headers[1], type: \"quantitative\" },\n          color: { field: headers[0], type: \"nominal\" }\n        }\n      };\n\n      createChart(spec, \"pie\", headers, rows)\n        .then(() => resolve(\"\"))\n        .catch((error) => resolve(`Error: ${error.message}`));\n\n    } catch (error) {\n      resolve(`Error: ${error.message}`);\n    }\n  });\n}\n\n/**\n * AREA custom function using the exact same specification as taskpane.js\n * Creates an area chart from Excel data range\n * \n * @customfunction\n * @param {any[][]} data The data range including headers\n * @returns {string} Status message\n */\nfunction AREA(data) {\n  return new Promise((resolve) => {\n    try {\n      if (!data || data.length < 2) {\n        resolve(\"Error: Need at least header row + one data row\");\n        return;\n      }\n\n      const headers = data[0];\n      const rows = data.slice(1);\n\n      // Convert rows -> objects (same as taskpane.js)\n      const processedData = rows.map(row => {\n        let obj = {};\n        headers.forEach((h, i) => {\n          obj[h] = row[i];\n        });\n        return obj;\n      });\n\n      // Use EXACT specification from taskpane.js area chart\n      const spec = {\n        $schema: \"https://vega.github.io/schema/vega-lite/v6.json\",\n        description: \"Area chart from Excel selection\",\n        background: \"white\",\n        config: { view: { stroke: \"transparent\" }},\n        data: { values: processedData },\n        mark: { \n          type: \"area\", \n          tooltip: true,\n          opacity: 0.7\n        },\n        encoding: {\n          x: { \n            field: headers[0], \n            type: \"ordinal\",\n            axis: {\n              title: headers[0],\n              labelFontSize: 12,\n              titleFontSize: 14\n            }\n          },\n          y: { \n            field: headers[1], \n            type: \"quantitative\",\n            axis: {\n              title: headers[1],\n              labelFontSize: 12,\n              titleFontSize: 14\n            }\n          },\n          // Add color encoding for multiple areas if 3rd column exists\n          ...(headers.length >= 3 && {\n            color: { \n              field: headers[2], \n              type: \"nominal\",\n              legend: {\n                title: headers[2],\n                titleFontSize: 12,\n                labelFontSize: 11\n              }\n            }\n          })\n        },\n        config: {\n          font: \"Segoe UI\",\n          axis: {\n            labelColor: \"#605e5c\",\n            titleColor: \"#323130\",\n            gridColor: \"#f3f2f1\"\n          },\n          legend: {\n            titleColor: \"#323130\",\n            labelColor: \"#605e5c\"\n          }\n        }\n      };\n\n      createChart(spec, \"area\", headers, rows)\n        .then(() => resolve(\"\"))\n        .catch((error) => resolve(`Error: ${error.message}`));\n\n    } catch (error) {\n      resolve(`Error: ${error.message}`);\n    }\n  });\n}\n\n/**\n * SCATTER custom function using the exact same specification as taskpane.js\n * Creates a scatter plot from Excel data range\n * \n * @customfunction\n * @param {any[][]} data The data range including headers\n * @returns {string} Status message\n */\nfunction SCATTER(data) {\n  return new Promise((resolve) => {\n    try {\n      if (!data || data.length < 2) {\n        resolve(\"Error: Need at least header row + one data row\");\n        return;\n      }\n\n      const headers = data[0];\n      const rows = data.slice(1);\n\n      if (headers.length < 2) {\n        resolve(\"Error: Scatter plot requires at least 2 columns (X, Y values)\");\n        return;\n      }\n\n      // Convert rows -> objects (same as taskpane.js)\n      const processedData = rows.map(row => {\n        let obj = {};\n        headers.forEach((h, i) => {\n          obj[h] = row[i];\n        });\n        return obj;\n      });\n\n      // Use EXACT specification from taskpane.js point chart\n      const spec = {\n        $schema: \"https://vega.github.io/schema/vega-lite/v6.json\",\n        description: \"Colored scatter plot from Excel selection\",\n        background: \"white\",\n        config: { view: { stroke: \"transparent\" }},\n        data: { values: processedData },\n        mark: { type: \"point\", size: 100, tooltip: true },\n        encoding: {\n          x: { \n            field: headers[0], \n            type: \"quantitative\",\n            scale: { zero: false },\n            axis: {\n              title: headers[0],\n              labelFontSize: 12,\n              titleFontSize: 14\n            }\n          },\n          y: { \n            field: headers[1], \n            type: \"quantitative\",\n            scale: { zero: false },\n            axis: {\n              title: headers[1],\n              labelFontSize: 12,\n              titleFontSize: 14\n            }\n          },\n          // Add color encoding if 3rd column exists\n          ...(headers.length >= 3 && {\n            color: { \n              field: headers[2], \n              type: \"nominal\",\n              legend: {\n                title: headers[2],\n                titleFontSize: 12,\n                labelFontSize: 11\n              }\n            }\n          }),\n          // Add shape encoding if 4th column exists\n          ...(headers.length >= 4 && {\n            shape: { \n              field: headers[3], \n              type: \"nominal\",\n              legend: {\n                title: headers[3],\n                titleFontSize: 12,\n                labelFontSize: 11\n              }\n            }\n          })\n        },\n        config: {\n          font: \"Segoe UI\",\n          axis: {\n            labelColor: \"#605e5c\",\n            titleColor: \"#323130\",\n            gridColor: \"#f3f2f1\"\n          },\n          legend: {\n            titleColor: \"#323130\",\n            labelColor: \"#605e5c\"\n          }\n        }\n      };\n\n      createChart(spec, \"scatter\", headers, rows)\n        .then(() => resolve(\"\"))\n        .catch((error) => resolve(`Error: ${error.message}`));\n\n    } catch (error) {\n      resolve(`Error: ${error.message}`);\n    }\n  });\n}\n\n/**\n * RADIAL custom function using the exact same specification as taskpane.js\n * Creates a radial chart from Excel data range\n * \n * @customfunction\n * @param {any[][]} data The data range including headers\n * @returns {string} Status message\n */\nfunction RADIAL(data) {\n  return new Promise((resolve) => {\n    try {\n      if (!data || data.length < 2) {\n        resolve(\"Error: Need at least header row + one data row\");\n        return;\n      }\n\n      const headers = data[0];\n      const rows = data.slice(1);\n\n      if (headers.length < 2) {\n        resolve(\"Error: Radial chart requires 2 columns (Category, Value)\");\n        return;\n      }\n\n      // Convert rows -> objects (same as taskpane.js)\n      const processedData = rows.map(row => {\n        let obj = {};\n        headers.forEach((h, i) => {\n          obj[h] = row[i];\n        });\n        return obj;\n      });\n\n      // Use EXACT specification from taskpane.js radial chart\n      const spec = {\n        $schema: \"https://vega.github.io/schema/vega-lite/v6.json\",\n        description: \"Radial chart from Excel selection\",\n        background: \"white\",\n        config: { view: { stroke: \"transparent\" }},\n        data: { values: processedData },\n        layer: [{\n          mark: { type: \"arc\", innerRadius: 20, stroke: \"#fff\" }\n        }, {\n          mark: { type: \"text\", radiusOffset: 10 },\n          encoding: {\n            text: { field: headers[1], type: \"quantitative\" }\n          }\n        }],\n        encoding: {\n          theta: { field: headers[1], type: \"quantitative\", stack: true },\n          radius: { \n            field: headers[1], \n            scale: { type: \"sqrt\", zero: true, rangeMin: 20 }\n          },\n          color: { field: headers[0], type: \"nominal\", legend: null }\n        }\n      };\n\n      createChart(spec, \"radial\", headers, rows)\n        .then(() => resolve(\"\"))\n        .catch((error) => resolve(`Error: ${error.message}`));\n\n    } catch (error) {\n      resolve(`Error: ${error.message}`);\n    }\n  });\n}\n\n/**\n * BOX custom function using the exact same specification as taskpane.js\n * Creates a box plot from Excel data range\n * \n * @customfunction\n * @param {any[][]} data The data range including headers\n * @returns {string} Status message\n */\nfunction BOX(data) {\n  return new Promise((resolve) => {\n    try {\n      if (!data || data.length < 2) {\n        resolve(\"Error: Need at least header row + one data row\");\n        return;\n      }\n\n      const headers = data[0];\n      const rows = data.slice(1);\n\n      if (headers.length < 2) {\n        resolve(\"Error: Box plot requires 2 columns (Category, Values)\");\n        return;\n      }\n\n      // Expect headers: Category | Value (same as taskpane.js)\n      const processedData = rows\n        .filter(r => r[0] && !isNaN(+r[1]))\n        .map(r => ({\n          category: r[0],\n          value: +r[1]\n        }));\n\n      if (processedData.length === 0) {\n        resolve(\"Error: No valid numeric data found for box plot\");\n        return;\n      }\n\n      // Use EXACT specification from taskpane.js box chart\n      const spec = {\n        $schema: \"https://vega.github.io/schema/vega-lite/v6.json\",\n        description: \"Box plot from Excel selection\",\n        data: { values: processedData },\n        mark: {\n          type: \"boxplot\",\n          extent: \"min-max\"   // show whiskers from min to max\n        },\n        encoding: {\n          x: { field: \"category\", type: \"nominal\" },\n          y: {\n            field: \"value\",\n            type: \"quantitative\",\n            scale: { zero: false }\n          },\n          color: {\n            field: \"category\",\n            type: \"nominal\",\n            legend: null\n          }\n        }\n      };\n\n      createChart(spec, \"box\", headers, rows)\n        .then(() => resolve(\"\"))\n        .catch((error) => resolve(`Error: ${error.message}`));\n\n    } catch (error) {\n      resolve(`Error: ${error.message}`);\n    }\n  });\n}\n\n/**\n * RADAR custom function using the exact same specification as taskpane.js\n * Creates a radar chart from Excel data range\n * \n * @customfunction\n * @param {any[][]} data The data range including headers\n * @returns {string} Status message\n */\nfunction RADAR(data) {\n  return new Promise((resolve) => {\n    try {\n      if (!data || data.length < 2) {\n        resolve(\"Error: Need at least header row + one data row\");\n        return;\n      }\n\n      const headers = data[0];\n      const rows = data.slice(1);\n\n      if (headers.length < 3) {\n        resolve(\"Error: Radar chart requires at least 3 columns (Series, Dimension1, Dimension2, ...)\");\n        return;\n      }\n\n      const radarData = [];\n      const dimensions = headers.slice(1); // All columns except first are dimensions\n      \n      rows.forEach((row, seriesIndex) => {\n        const seriesName = row[headers[0]] || `Series ${seriesIndex + 1}`;\n        \n        dimensions.forEach(dimension => {\n          const value = parseFloat(row[headers.indexOf(dimension)]) || 0;\n          radarData.push({\n            series: seriesName,\n            dimension: dimension,\n            value: value,\n            category: seriesIndex\n          });\n        });\n      });\n\n      // Get unique dimensions for grid\n      const uniqueDimensions = [...new Set(radarData.map(d => d.dimension))];\n\n      // Use EXACT specification from taskpane.js radar chart\n      const spec = {\n        $schema: \"https://vega.github.io/schema/vega/v6.json\",\n        description: \"Radar chart from Excel selection\",\n        width: 400,\n        height: 400,\n        padding: 60,\n        autosize: {\"type\": \"none\", \"contains\": \"padding\"},\n        background: \"white\",\n        config: { view: { stroke: \"transparent\" }},\n\n        signals: [\n          {\"name\": \"radius\", \"update\": \"width / 2\"}\n        ],\n\n        data: [\n          {\n            name: \"table\",\n            values: radarData\n          },\n          {\n            name: \"dimensions\",\n            values: uniqueDimensions.map(d => ({dimension: d}))\n          }\n        ],\n\n        scales: [\n          {\n            name: \"angular\",\n            type: \"point\",\n            range: {\"signal\": \"[-PI, PI]\"},\n            padding: 0.5,\n            domain: uniqueDimensions\n          },\n          {\n            name: \"radial\",\n            type: \"linear\",\n            range: {\"signal\": \"[0, radius]\"},\n            zero: true,\n            nice: true,\n            domain: {\"data\": \"table\", \"field\": \"value\"},\n            domainMin: 0\n          },\n          {\n            name: \"color\",\n            type: \"ordinal\",\n            domain: {\"data\": \"table\", \"field\": \"category\"},\n            range: [\n              \"#0078d4\", \"#00bcf2\", \"#40e0d0\", \"#00cc6a\", \"#10893e\",\n              \"#107c10\", \"#bad80a\", \"#ffb900\", \"#ff8c00\", \"#d13438\"\n            ]\n          }\n        ],\n\n        encode: {\n          enter: {\n            x: {\"signal\": \"radius\"},\n            y: {\"signal\": \"radius\"}\n          }\n        },\n\n        marks: [\n          {\n            type: \"group\",\n            name: \"categories\",\n            zindex: 1,\n            from: {\n              facet: {\"data\": \"table\", \"name\": \"facet\", \"groupby\": [\"category\", \"series\"]}\n            },\n            marks: [\n              {\n                type: \"line\",\n                name: \"category-line\",\n                from: {\"data\": \"facet\"},\n                encode: {\n                  enter: {\n                    interpolate: {\"value\": \"linear-closed\"},\n                    x: {\"signal\": \"scale('radial', datum.value) * cos(scale('angular', datum.dimension))\"},\n                    y: {\"signal\": \"scale('radial', datum.value) * sin(scale('angular', datum.dimension))\"},\n                    stroke: {\"scale\": \"color\", \"field\": \"category\"},\n                    strokeWidth: {\"value\": 2},\n                    fill: {\"scale\": \"color\", \"field\": \"category\"},\n                    fillOpacity: {\"value\": 0.1},\n                    strokeOpacity: {\"value\": 0.8}\n                  }\n                }\n              },\n              {\n                type: \"symbol\",\n                name: \"category-points\",\n                from: {\"data\": \"facet\"},\n                encode: {\n                  enter: {\n                    x: {\"signal\": \"scale('radial', datum.value) * cos(scale('angular', datum.dimension))\"},\n                    y: {\"signal\": \"scale('radial', datum.value) * sin(scale('angular', datum.dimension))\"},\n                    size: {\"value\": 50},\n                    fill: {\"scale\": \"color\", \"field\": \"category\"},\n                    stroke: {\"value\": \"white\"},\n                    strokeWidth: {\"value\": 1}\n                  }\n                }\n              }\n            ]\n          },\n          {\n            type: \"rule\",\n            name: \"radial-grid\",\n            from: {\"data\": \"dimensions\"},\n            zindex: 0,\n            encode: {\n              enter: {\n                x: {\"value\": 0},\n                y: {\"value\": 0},\n                x2: {\"signal\": \"radius * cos(scale('angular', datum.dimension))\"},\n                y2: {\"signal\": \"radius * sin(scale('angular', datum.dimension))\"},\n                stroke: {\"value\": \"#e1e4e8\"},\n                strokeWidth: {\"value\": 1}\n              }\n            }\n          },\n          {\n            type: \"text\",\n            name: \"dimension-label\",\n            from: {\"data\": \"dimensions\"},\n            zindex: 1,\n            encode: {\n              enter: {\n                x: {\"signal\": \"(radius + 20) * cos(scale('angular', datum.dimension))\"},\n                y: {\"signal\": \"(radius + 20) * sin(scale('angular', datum.dimension))\"},\n                text: {\"field\": \"dimension\"},\n                align: [\n                  {\n                    test: \"abs(scale('angular', datum.dimension)) > PI / 2\",\n                    value: \"right\"\n                  },\n                  {\n                    value: \"left\"\n                  }\n                ],\n                baseline: [\n                  {\n                    test: \"scale('angular', datum.dimension) > 0\", \n                    value: \"top\"\n                  },\n                  {\n                    test: \"scale('angular', datum.dimension) == 0\", \n                    value: \"middle\"\n                  },\n                  {\n                    value: \"bottom\"\n                  }\n                ],\n                fill: {\"value\": \"#323130\"},\n                fontWeight: {\"value\": \"bold\"},\n                font: {\"value\": \"Segoe UI\"},\n                fontSize: {\"value\": 12}\n              }\n            }\n          },\n          {\n            type: \"line\",\n            name: \"outer-line\",\n            from: {\"data\": \"radial-grid\"},\n            encode: {\n              enter: {\n                interpolate: {\"value\": \"linear-closed\"},\n                x: {\"field\": \"x2\"},\n                y: {\"field\": \"y2\"},\n                stroke: {\"value\": \"#8a8886\"},\n                strokeWidth: {\"value\": 2},\n                strokeOpacity: {\"value\": 0.6}\n              }\n            }\n          }\n        ]\n      };\n\n      createChart(spec, \"radar\", headers, rows)\n        .then(() => resolve(\"\"))\n        .catch((error) => resolve(`Error: ${error.message}`));\n\n    } catch (error) {\n      resolve(`Error: ${error.message}`);\n    }\n  });\n}\n\n/**\n * Creates chart with position tracking based on formula cell address\n */\nasync function createChart(spec, chartType, formulaAddress) {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const chartId = `${chartType}_${Date.now()}_${Math.random().toString(36).substr(2, 6)}`;\n      \n      // Render hidden chart\n      const hiddenDiv = document.createElement(\"div\");\n      hiddenDiv.style.display = \"none\";\n      hiddenDiv.id = chartId;\n      document.body.appendChild(hiddenDiv);\n\n      // Load Vega-Lite if not available\n      if (typeof vegaEmbed === 'undefined') {\n        await loadVegaLibraries();\n      }\n\n      const result = await vegaEmbed(hiddenDiv, spec, { actions: false });\n      const view = result.view;\n\n      // Export chart -> PNG\n      const pngUrl = await view.toImageURL(\"png\");\n      const response = await fetch(pngUrl);\n      const blob = await response.blob();\n\n      const reader = new FileReader();\n      reader.onloadend = async () => {\n        try {\n          const base64data = reader.result.split(\",\")[1];\n\n          // Insert chart at tracked position\n          await insertChartBelowFormula(base64data, chartType, chartId, formulaAddress);\n          \n          // Clean up hidden div\n          document.body.removeChild(hiddenDiv);\n          resolve();\n          \n        } catch (error) {\n          if (document.body.contains(hiddenDiv)) {\n            document.body.removeChild(hiddenDiv);\n          }\n          reject(error);\n        }\n      };\n      \n      reader.readAsDataURL(blob);\n\n    } catch (error) {\n      reject(error);\n    }\n  });\n}\n\n/**\n * Inserts chart exactly one cell below the formula address\n */\nasync function insertChartBelowFormula(base64data, chartType, chartId, formulaAddress) {\n  return Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getActiveWorksheet();\n\n    // Parse the formula address (e.g., \"Sheet1!A5\" or \"A5\")\n    let cellAddress = formulaAddress;\n    if (cellAddress.includes('!')) {\n      cellAddress = cellAddress.split('!')[1];\n    }\n\n    // Get the formula cell\n    const formulaCell = sheet.getRange(cellAddress);\n    formulaCell.load(\"rowIndex, columnIndex\");\n    await context.sync();\n\n    // Calculate target cell (one row below)\n    const targetRow = formulaCell.rowIndex + 1;\n    const targetCol = formulaCell.columnIndex;\n    \n    // Get the target cell position\n    const targetCell = sheet.getCell(targetRow, targetCol);\n    targetCell.load(\"left, top\");\n    await context.sync();\n\n    // Remove existing charts for this formula position\n    await removeChartsForFormula(context, sheet, formulaAddress);\n\n    // Insert chart at target position\n    const image = sheet.shapes.addImage(base64data);\n    image.left = targetCell.left;\n    image.top = targetCell.top;\n    image.lockAspectRatio = true;\n    \n    // Name includes formula address for tracking\n    image.name = `${chartType.charAt(0).toUpperCase() + chartType.slice(1)}Chart_${cellAddress}_${chartId}`;\n\n    // Store position in our tracking system\n    chartPositions.set(formulaAddress, {\n      chartType: chartType,\n      targetRow: targetRow,\n      targetCol: targetCol,\n      chartName: image.name\n    });\n\n    await context.sync();\n  });\n}\n\n/**\n * Removes charts associated with a specific formula address\n */\nasync function removeChartsForFormula(context, sheet, formulaAddress) {\n  try {\n    const shapes = sheet.shapes;\n    shapes.load(\"items\");\n    await context.sync();\n\n    // Parse cell address for matching\n    let cellAddress = formulaAddress;\n    if (cellAddress.includes('!')) {\n      cellAddress = cellAddress.split('!')[1];\n    }\n\n    // Remove charts that belong to this formula cell\n    for (let i = shapes.items.length - 1; i >= 0; i--) {\n      const shape = shapes.items[i];\n      shape.load(\"name\");\n      await context.sync();\n      \n      if (shape.name && shape.name.includes(`_${cellAddress}_`)) {\n        shape.delete();\n        await context.sync();\n      }\n    }\n\n    // Clean up tracking\n    chartPositions.delete(formulaAddress);\n  } catch (error) {\n    console.warn('Error removing charts for formula:', error);\n  }\n}\n\n/**\n * Load Vega libraries (same CDN versions as taskpane.html)\n */\nfunction loadVegaLibraries() {\n  return new Promise((resolve, reject) => {\n    if (typeof vegaEmbed !== 'undefined') {\n      resolve();\n      return;\n    }\n\n    // Load libraries in sequence (same as taskpane.html)\n    const scripts = [\n      'https://cdn.jsdelivr.net/npm/vega@6',\n      'https://cdn.jsdelivr.net/npm/vega-lite@6', \n      'https://cdn.jsdelivr.net/npm/vega-embed@6'\n    ];\n\n    let loadedCount = 0;\n    \n    scripts.forEach((src, index) => {\n      const script = document.createElement('script');\n      script.src = src;\n      script.onload = () => {\n        loadedCount++;\n        if (loadedCount === scripts.length) {\n          resolve();\n        }\n      };\n      script.onerror = () => reject(new Error(`Failed to load ${src}`));\n      document.head.appendChild(script);\n    });\n  });\n}\n\n// Register all custom functions\nif (typeof CustomFunctions !== 'undefined') {\n  CustomFunctions.associate(\"LINE\", LINE);\n  CustomFunctions.associate(\"BAR\", BAR);\n  CustomFunctions.associate(\"PIE\", PIE);\n  CustomFunctions.associate(\"AREA\", AREA);\n  CustomFunctions.associate(\"SCATTER\", SCATTER);\n  CustomFunctions.associate(\"RADIAL\", RADIAL);\n  CustomFunctions.associate(\"BOX\", BOX);\n  CustomFunctions.associate(\"RADAR\", RADAR);\n}\nCustomFunctions.associate(\"LINE\", LINE);\nCustomFunctions.associate(\"BAR\", BAR);\nCustomFunctions.associate(\"PIE\", PIE);\nCustomFunctions.associate(\"AREA\", AREA);\nCustomFunctions.associate(\"SCATTER\", SCATTER);\nCustomFunctions.associate(\"RADIAL\", RADIAL);\nCustomFunctions.associate(\"BOX\", BOX);\nCustomFunctions.associate(\"RADAR\", RADAR);"],"names":["e","t","r","Symbol","n","iterator","o","toStringTag","i","c","prototype","Generator","u","Object","create","_regeneratorDefine2","f","p","y","G","v","a","d","bind","length","l","TypeError","call","done","value","return","GeneratorFunction","GeneratorFunctionPrototype","getPrototypeOf","setPrototypeOf","__proto__","displayName","_regenerator","w","m","defineProperty","_invoke","enumerable","configurable","writable","_typeof","constructor","asyncGeneratorStep","Promise","resolve","then","_asyncToGenerator","arguments","apply","_next","_throw","_arrayLikeToArray","Array","ownKeys","keys","getOwnPropertySymbols","filter","getOwnPropertyDescriptor","push","_objectSpread","forEach","_defineProperty","getOwnPropertyDescriptors","defineProperties","toPrimitive","String","_toPrimitive","_toPropertyKey","chartPositions","Map","LINE","data","headers","rows","slice","processedData","map","row","obj","h","transformedData","valueColumns","colName","undefined","parseFloat","createChart","$schema","description","background","config","view","stroke","values","mark","type","point","tooltip","strokeWidth","encoding","x","field","axis","title","labelFontSize","titleFontSize","labelAngle","color","scale","scheme","legend","font","labelColor","titleColor","gridColor","size","filled","catch","error","concat","message","BAR","PIE","some","isNaN","outerRadius","theta","AREA","opacity","SCATTER","zero","shape","RADIAL","layer","innerRadius","radiusOffset","text","stack","radius","rangeMin","BOX","category","extent","RADAR","radarData","dimensions","seriesIndex","seriesName","dimension","indexOf","series","uniqueDimensions","isArray","_arrayWithoutHoles","Set","from","_iterableToArray","toString","name","test","_unsupportedIterableToArray","_nonIterableSpread","width","height","padding","autosize","signals","scales","range","domain","nice","domainMin","encode","enter","marks","zindex","facet","interpolate","fill","fillOpacity","strokeOpacity","x2","y2","align","baseline","fontWeight","fontSize","_x","_x2","_x3","_createChart","_callee3","spec","chartType","formulaAddress","_context3","_ref","_callee2","reject","chartId","hiddenDiv","result","pngUrl","response","blob","reader","_t2","_context2","Date","now","Math","random","substr","document","createElement","style","display","id","body","appendChild","vegaEmbed","loadVegaLibraries","actions","toImageURL","fetch","FileReader","onloadend","_callee","base64data","_t","_context","split","insertChartBelowFormula","removeChild","contains","readAsDataURL","_x1","_x10","_x4","_x5","_x6","_x7","_insertChartBelowFormula","_callee5","_context5","Excel","run","_ref3","_callee4","context","sheet","cellAddress","formulaCell","targetRow","targetCol","targetCell","image","_context4","workbook","worksheets","getActiveWorksheet","includes","getRange","load","sync","rowIndex","columnIndex","getCell","removeChartsForFormula","shapes","addImage","left","top","lockAspectRatio","charAt","toUpperCase","set","chartName","_x11","_x8","_x9","_x0","_removeChartsForFormula","_callee6","_t3","_context6","items","delete","console","warn","scripts","loadedCount","src","index","script","onload","onerror","Error","head","CustomFunctions","associate"],"sourceRoot":""}