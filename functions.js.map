{"version":3,"file":"functions.js","mappings":"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","sources":["webpack://excel-custom-functions-js/./src/functions/functions.js"],"sourcesContent":["// Global chart position tracking\nconst chartPositions = new Map();\n\n/**\n * LINE custom function using the exact same specification as taskpane.js\n * Creates a multi-series line chart from Excel data range\n * \n * @customfunction\n * @param {any[][]} data The data range including headers\n * @returns {string} Status message\n */\nfunction LINE(data) {\n  return new Promise((resolve) => {\n    try {\n      if (!data || data.length < 2) {\n        resolve(\"Error: Need at least header row + one data row\");\n        return;\n      }\n\n      const headers = data[0];\n      const rows = data.slice(1);\n\n      // Convert rows -> objects (same as taskpane.js)\n      const processedData = rows.map(row => {\n        let obj = {};\n        headers.forEach((h, i) => {\n          obj[h] = row[i];\n        });\n        return obj;\n      });\n\n      // Transform data for multi-series line chart (exact copy from taskpane.js)\n      const transformedData = [];\n      const valueColumns = headers.slice(1);\n      processedData.forEach(row => {\n        valueColumns.forEach(colName => {\n          if (row[colName] !== null && row[colName] !== undefined && row[colName] !== \"\") {\n            transformedData.push({\n              [headers[0]]: row[headers[0]], // x-axis value (first column)\n              series: colName,               // series name (column header)\n              value: parseFloat(row[colName]) || 0  // y-axis value\n            });\n          }\n        });\n      });\n\n      // Use EXACT specification from taskpane.js line chart\n      const spec = {\n        $schema: \"https://vega.github.io/schema/vega-lite/v6.json\",\n        description: \"Multi-series line chart from Excel selection\",\n        background: \"white\",\n        config: { view: { stroke: \"transparent\" }},\n        data: { values: transformedData },\n        mark: { \n          type: \"line\", \n          point: false,\n          tooltip: true,\n          strokeWidth: 2\n        },\n        encoding: {\n          x: { \n            field: headers[0], \n            type: \"ordinal\",\n            axis: {\n              title: headers[0],\n              labelFontSize: 12,\n              titleFontSize: 14,\n              labelAngle: 0\n            }\n          },\n          y: { \n            field: \"value\", \n            type: \"quantitative\",\n            axis: {\n              title: \"Value\",\n              labelFontSize: 12,\n              titleFontSize: 14\n            }\n          },\n          color: { \n            field: \"series\", \n            type: \"nominal\",\n            scale: {\n              scheme: \"category10\"\n            },\n            legend: {\n              title: \"Series\",\n              titleFontSize: 12,\n              labelFontSize: 11\n            }\n          }\n        },\n        config: {\n          font: \"Segoe UI\",\n          axis: {\n            labelColor: \"#605e5c\",\n            titleColor: \"#323130\",\n            gridColor: \"#f3f2f1\"\n          },\n          legend: {\n            titleColor: \"#323130\",\n            labelColor: \"#605e5c\"\n          },\n          point: {\n            size: 60,\n            filled: true\n          }\n        }\n      };\n\n      createChart(spec, \"line\", headers, rows)\n        .then(() => resolve(\"\"))\n        .catch((error) => resolve(`Error: ${error.message}`));\n\n    } catch (error) {\n      resolve(`Error: ${error.message}`);\n    }\n  });\n}\n\n/**\n * BAR custom function using the exact same specification as taskpane.js\n * Creates a bar chart from Excel data range\n * \n * @customfunction\n * @param {any[][]} data The data range including headers\n * @returns {string} Status message\n */\nfunction BAR(data) {\n  return new Promise((resolve) => {\n    try {\n      if (!data || data.length < 2) {\n        resolve(\"Error: Need at least header row + one data row\");\n        return;\n      }\n\n      const headers = data[0];\n      const rows = data.slice(1);\n\n      // Convert rows -> objects (same as taskpane.js)\n      const processedData = rows.map(row => {\n        let obj = {};\n        headers.forEach((h, i) => {\n          obj[h] = row[i];\n        });\n        return obj;\n      });\n\n      // Use EXACT specification from taskpane.js bar chart\n      const spec = {\n        $schema: \"https://vega.github.io/schema/vega-lite/v6.json\",\n        description: \"Bar chart from Excel selection\",\n        background: \"white\",\n        config: { view: { stroke: \"transparent\" }},\n        data: { values: processedData },\n        mark: { \n          type: \"bar\", \n          tooltip: true\n        },\n        encoding: {\n          x: { \n            field: headers[0], \n            type: \"nominal\",\n            axis: {\n              title: headers[0],\n              labelFontSize: 12,\n              titleFontSize: 14\n            }\n          },\n          y: { \n            field: headers[1], \n            type: \"quantitative\",\n            axis: {\n              title: headers[1],\n              labelFontSize: 12,\n              titleFontSize: 14\n            }\n          },\n          // Add color encoding for grouped bars if 3rd column exists\n          ...(headers.length >= 3 && {\n            color: { \n              field: headers[2], \n              type: \"nominal\",\n              legend: {\n                title: headers[2],\n                titleFontSize: 12,\n                labelFontSize: 11\n              }\n            }\n          })\n        },\n        config: {\n          font: \"Segoe UI\",\n          axis: {\n            labelColor: \"#605e5c\",\n            titleColor: \"#323130\",\n            gridColor: \"#f3f2f1\"\n          },\n          legend: {\n            titleColor: \"#323130\",\n            labelColor: \"#605e5c\"\n          }\n        }\n      };\n\n      createChart(spec, \"bar\", headers, rows)\n        .then(() => resolve(\"\"))\n        .catch((error) => resolve(`Error: ${error.message}`));\n\n    } catch (error) {\n      resolve(`Error: ${error.message}`);\n    }\n  });\n}\n\n/**\n * PIE custom function using the exact same specification as taskpane.js\n * Creates a pie chart from Excel data range\n * \n * @customfunction\n * @param {any[][]} data The data range including headers\n * @returns {string} Status message\n */\nfunction PIE(data) {\n  return new Promise((resolve) => {\n    try {\n      if (!data || data.length < 2) {\n        resolve(\"Error: Need at least header row + one data row\");\n        return;\n      }\n\n      const headers = data[0];\n      const rows = data.slice(1);\n\n      if (headers.length < 2) {\n        resolve(\"Error: Pie chart requires 2 columns (Category, Value)\");\n        return;\n      }\n\n      // Validate that all values are positive numbers\n      const hasInvalidValues = rows.some(row => isNaN(row[1]) || row[1] <= 0);\n      if (hasInvalidValues) {\n        resolve(\"Error: Pie chart values must be positive numbers\");\n        return;\n      }\n\n      // Convert rows -> objects (same as taskpane.js)\n      const processedData = rows.map(row => {\n        let obj = {};\n        headers.forEach((h, i) => {\n          obj[h] = row[i];\n        });\n        return obj;\n      });\n\n      // Use EXACT specification from taskpane.js pie chart\n      const spec = {\n        $schema: \"https://vega.github.io/schema/vega-lite/v6.json\",\n        background: \"white\",\n        config: { view: { stroke: \"transparent\" }},\n        description: \"Pie chart from Excel selection\",\n        data: { values: processedData },\n        mark: { type: \"arc\", outerRadius: 120 },\n        encoding: {\n          theta: { field: headers[1], type: \"quantitative\" },\n          color: { field: headers[0], type: \"nominal\" }\n        }\n      };\n\n      createChart(spec, \"pie\", headers, rows)\n        .then(() => resolve(\"\"))\n        .catch((error) => resolve(`Error: ${error.message}`));\n\n    } catch (error) {\n      resolve(`Error: ${error.message}`);\n    }\n  });\n}\n\n/**\n * AREA custom function using the exact same specification as taskpane.js\n * Creates an area chart from Excel data range\n * \n * @customfunction\n * @param {any[][]} data The data range including headers\n * @returns {string} Status message\n */\nfunction AREA(data) {\n  return new Promise((resolve) => {\n    try {\n      if (!data || data.length < 2) {\n        resolve(\"Error: Need at least header row + one data row\");\n        return;\n      }\n\n      const headers = data[0];\n      const rows = data.slice(1);\n\n      // Convert rows -> objects (same as taskpane.js)\n      const processedData = rows.map(row => {\n        let obj = {};\n        headers.forEach((h, i) => {\n          obj[h] = row[i];\n        });\n        return obj;\n      });\n\n      // Use EXACT specification from taskpane.js area chart\n      const spec = {\n        $schema: \"https://vega.github.io/schema/vega-lite/v6.json\",\n        description: \"Area chart from Excel selection\",\n        background: \"white\",\n        config: { view: { stroke: \"transparent\" }},\n        data: { values: processedData },\n        mark: { \n          type: \"area\", \n          tooltip: true,\n          opacity: 0.7\n        },\n        encoding: {\n          x: { \n            field: headers[0], \n            type: \"ordinal\",\n            axis: {\n              title: headers[0],\n              labelFontSize: 12,\n              titleFontSize: 14\n            }\n          },\n          y: { \n            field: headers[1], \n            type: \"quantitative\",\n            axis: {\n              title: headers[1],\n              labelFontSize: 12,\n              titleFontSize: 14\n            }\n          },\n          // Add color encoding for multiple areas if 3rd column exists\n          ...(headers.length >= 3 && {\n            color: { \n              field: headers[2], \n              type: \"nominal\",\n              legend: {\n                title: headers[2],\n                titleFontSize: 12,\n                labelFontSize: 11\n              }\n            }\n          })\n        },\n        config: {\n          font: \"Segoe UI\",\n          axis: {\n            labelColor: \"#605e5c\",\n            titleColor: \"#323130\",\n            gridColor: \"#f3f2f1\"\n          },\n          legend: {\n            titleColor: \"#323130\",\n            labelColor: \"#605e5c\"\n          }\n        }\n      };\n\n      createChart(spec, \"area\", headers, rows)\n        .then(() => resolve(\"\"))\n        .catch((error) => resolve(`Error: ${error.message}`));\n\n    } catch (error) {\n      resolve(`Error: ${error.message}`);\n    }\n  });\n}\n\n/**\n * SCATTER custom function using the exact same specification as taskpane.js\n * Creates a scatter plot from Excel data range\n * \n * @customfunction\n * @param {any[][]} data The data range including headers\n * @returns {string} Status message\n */\nfunction SCATTER(data) {\n  return new Promise((resolve) => {\n    try {\n      if (!data || data.length < 2) {\n        resolve(\"Error: Need at least header row + one data row\");\n        return;\n      }\n\n      const headers = data[0];\n      const rows = data.slice(1);\n\n      if (headers.length < 2) {\n        resolve(\"Error: Scatter plot requires at least 2 columns (X, Y values)\");\n        return;\n      }\n\n      // Convert rows -> objects (same as taskpane.js)\n      const processedData = rows.map(row => {\n        let obj = {};\n        headers.forEach((h, i) => {\n          obj[h] = row[i];\n        });\n        return obj;\n      });\n\n      // Use EXACT specification from taskpane.js point chart\n      const spec = {\n        $schema: \"https://vega.github.io/schema/vega-lite/v6.json\",\n        description: \"Colored scatter plot from Excel selection\",\n        background: \"white\",\n        config: { view: { stroke: \"transparent\" }},\n        data: { values: processedData },\n        mark: { type: \"point\", size: 100, tooltip: true },\n        encoding: {\n          x: { \n            field: headers[0], \n            type: \"quantitative\",\n            scale: { zero: false },\n            axis: {\n              title: headers[0],\n              labelFontSize: 12,\n              titleFontSize: 14\n            }\n          },\n          y: { \n            field: headers[1], \n            type: \"quantitative\",\n            scale: { zero: false },\n            axis: {\n              title: headers[1],\n              labelFontSize: 12,\n              titleFontSize: 14\n            }\n          },\n          // Add color encoding if 3rd column exists\n          ...(headers.length >= 3 && {\n            color: { \n              field: headers[2], \n              type: \"nominal\",\n              legend: {\n                title: headers[2],\n                titleFontSize: 12,\n                labelFontSize: 11\n              }\n            }\n          }),\n          // Add shape encoding if 4th column exists\n          ...(headers.length >= 4 && {\n            shape: { \n              field: headers[3], \n              type: \"nominal\",\n              legend: {\n                title: headers[3],\n                titleFontSize: 12,\n                labelFontSize: 11\n              }\n            }\n          })\n        },\n        config: {\n          font: \"Segoe UI\",\n          axis: {\n            labelColor: \"#605e5c\",\n            titleColor: \"#323130\",\n            gridColor: \"#f3f2f1\"\n          },\n          legend: {\n            titleColor: \"#323130\",\n            labelColor: \"#605e5c\"\n          }\n        }\n      };\n\n      createChart(spec, \"scatter\", headers, rows)\n        .then(() => resolve(\"\"))\n        .catch((error) => resolve(`Error: ${error.message}`));\n\n    } catch (error) {\n      resolve(`Error: ${error.message}`);\n    }\n  });\n}\n\n/**\n * RADIAL custom function using the exact same specification as taskpane.js\n * Creates a radial chart from Excel data range\n * \n * @customfunction\n * @param {any[][]} data The data range including headers\n * @returns {string} Status message\n */\nfunction RADIAL(data) {\n  return new Promise((resolve) => {\n    try {\n      if (!data || data.length < 2) {\n        resolve(\"Error: Need at least header row + one data row\");\n        return;\n      }\n\n      const headers = data[0];\n      const rows = data.slice(1);\n\n      if (headers.length < 2) {\n        resolve(\"Error: Radial chart requires 2 columns (Category, Value)\");\n        return;\n      }\n\n      // Convert rows -> objects (same as taskpane.js)\n      const processedData = rows.map(row => {\n        let obj = {};\n        headers.forEach((h, i) => {\n          obj[h] = row[i];\n        });\n        return obj;\n      });\n\n      // Use EXACT specification from taskpane.js radial chart\n      const spec = {\n        $schema: \"https://vega.github.io/schema/vega-lite/v6.json\",\n        description: \"Radial chart from Excel selection\",\n        background: \"white\",\n        config: { view: { stroke: \"transparent\" }},\n        data: { values: processedData },\n        layer: [{\n          mark: { type: \"arc\", innerRadius: 20, stroke: \"#fff\" }\n        }, {\n          mark: { type: \"text\", radiusOffset: 10 },\n          encoding: {\n            text: { field: headers[1], type: \"quantitative\" }\n          }\n        }],\n        encoding: {\n          theta: { field: headers[1], type: \"quantitative\", stack: true },\n          radius: { \n            field: headers[1], \n            scale: { type: \"sqrt\", zero: true, rangeMin: 20 }\n          },\n          color: { field: headers[0], type: \"nominal\", legend: null }\n        }\n      };\n\n      createChart(spec, \"radial\", headers, rows)\n        .then(() => resolve(\"\"))\n        .catch((error) => resolve(`Error: ${error.message}`));\n\n    } catch (error) {\n      resolve(`Error: ${error.message}`);\n    }\n  });\n}\n\n/**\n * BOX custom function using the exact same specification as taskpane.js\n * Creates a box plot from Excel data range\n * \n * @customfunction\n * @param {any[][]} data The data range including headers\n * @returns {string} Status message\n */\nfunction BOX(data) {\n  return new Promise((resolve) => {\n    try {\n      if (!data || data.length < 2) {\n        resolve(\"Error: Need at least header row + one data row\");\n        return;\n      }\n\n      const headers = data[0];\n      const rows = data.slice(1);\n\n      if (headers.length < 2) {\n        resolve(\"Error: Box plot requires 2 columns (Category, Values)\");\n        return;\n      }\n\n      // Expect headers: Category | Value (same as taskpane.js)\n      const processedData = rows\n        .filter(r => r[0] && !isNaN(+r[1]))\n        .map(r => ({\n          category: r[0],\n          value: +r[1]\n        }));\n\n      if (processedData.length === 0) {\n        resolve(\"Error: No valid numeric data found for box plot\");\n        return;\n      }\n\n      // Use EXACT specification from taskpane.js box chart\n      const spec = {\n        $schema: \"https://vega.github.io/schema/vega-lite/v6.json\",\n        description: \"Box plot from Excel selection\",\n        data: { values: processedData },\n        mark: {\n          type: \"boxplot\",\n          extent: \"min-max\"   // show whiskers from min to max\n        },\n        encoding: {\n          x: { field: \"category\", type: \"nominal\" },\n          y: {\n            field: \"value\",\n            type: \"quantitative\",\n            scale: { zero: false }\n          },\n          color: {\n            field: \"category\",\n            type: \"nominal\",\n            legend: null\n          }\n        }\n      };\n\n      createChart(spec, \"box\", headers, rows)\n        .then(() => resolve(\"\"))\n        .catch((error) => resolve(`Error: ${error.message}`));\n\n    } catch (error) {\n      resolve(`Error: ${error.message}`);\n    }\n  });\n}\n\n/**\n * RADAR custom function using the exact same specification as taskpane.js\n * Creates a radar chart from Excel data range\n * \n * @customfunction\n * @param {any[][]} data The data range including headers\n * @returns {string} Status message\n */\nfunction RADAR(data) {\n  return new Promise((resolve) => {\n    try {\n      if (!data || data.length < 2) {\n        resolve(\"Error: Need at least header row + one data row\");\n        return;\n      }\n\n      const headers = data[0];\n      const rows = data.slice(1);\n\n      if (headers.length < 3) {\n        resolve(\"Error: Radar chart requires at least 3 columns (Series, Dimension1, Dimension2, ...)\");\n        return;\n      }\n\n      const radarData = [];\n      const dimensions = headers.slice(1); // All columns except first are dimensions\n      \n      rows.forEach((row, seriesIndex) => {\n        const seriesName = row[headers[0]] || `Series ${seriesIndex + 1}`;\n        \n        dimensions.forEach(dimension => {\n          const value = parseFloat(row[headers.indexOf(dimension)]) || 0;\n          radarData.push({\n            series: seriesName,\n            dimension: dimension,\n            value: value,\n            category: seriesIndex\n          });\n        });\n      });\n\n      // Get unique dimensions for grid\n      const uniqueDimensions = [...new Set(radarData.map(d => d.dimension))];\n\n      // Use EXACT specification from taskpane.js radar chart\n      const spec = {\n        $schema: \"https://vega.github.io/schema/vega/v6.json\",\n        description: \"Radar chart from Excel selection\",\n        width: 400,\n        height: 400,\n        padding: 60,\n        autosize: {\"type\": \"none\", \"contains\": \"padding\"},\n        background: \"white\",\n        config: { view: { stroke: \"transparent\" }},\n\n        signals: [\n          {\"name\": \"radius\", \"update\": \"width / 2\"}\n        ],\n\n        data: [\n          {\n            name: \"table\",\n            values: radarData\n          },\n          {\n            name: \"dimensions\",\n            values: uniqueDimensions.map(d => ({dimension: d}))\n          }\n        ],\n\n        scales: [\n          {\n            name: \"angular\",\n            type: \"point\",\n            range: {\"signal\": \"[-PI, PI]\"},\n            padding: 0.5,\n            domain: uniqueDimensions\n          },\n          {\n            name: \"radial\",\n            type: \"linear\",\n            range: {\"signal\": \"[0, radius]\"},\n            zero: true,\n            nice: true,\n            domain: {\"data\": \"table\", \"field\": \"value\"},\n            domainMin: 0\n          },\n          {\n            name: \"color\",\n            type: \"ordinal\",\n            domain: {\"data\": \"table\", \"field\": \"category\"},\n            range: [\n              \"#0078d4\", \"#00bcf2\", \"#40e0d0\", \"#00cc6a\", \"#10893e\",\n              \"#107c10\", \"#bad80a\", \"#ffb900\", \"#ff8c00\", \"#d13438\"\n            ]\n          }\n        ],\n\n        encode: {\n          enter: {\n            x: {\"signal\": \"radius\"},\n            y: {\"signal\": \"radius\"}\n          }\n        },\n\n        marks: [\n          {\n            type: \"group\",\n            name: \"categories\",\n            zindex: 1,\n            from: {\n              facet: {\"data\": \"table\", \"name\": \"facet\", \"groupby\": [\"category\", \"series\"]}\n            },\n            marks: [\n              {\n                type: \"line\",\n                name: \"category-line\",\n                from: {\"data\": \"facet\"},\n                encode: {\n                  enter: {\n                    interpolate: {\"value\": \"linear-closed\"},\n                    x: {\"signal\": \"scale('radial', datum.value) * cos(scale('angular', datum.dimension))\"},\n                    y: {\"signal\": \"scale('radial', datum.value) * sin(scale('angular', datum.dimension))\"},\n                    stroke: {\"scale\": \"color\", \"field\": \"category\"},\n                    strokeWidth: {\"value\": 2},\n                    fill: {\"scale\": \"color\", \"field\": \"category\"},\n                    fillOpacity: {\"value\": 0.1},\n                    strokeOpacity: {\"value\": 0.8}\n                  }\n                }\n              },\n              {\n                type: \"symbol\",\n                name: \"category-points\",\n                from: {\"data\": \"facet\"},\n                encode: {\n                  enter: {\n                    x: {\"signal\": \"scale('radial', datum.value) * cos(scale('angular', datum.dimension))\"},\n                    y: {\"signal\": \"scale('radial', datum.value) * sin(scale('angular', datum.dimension))\"},\n                    size: {\"value\": 50},\n                    fill: {\"scale\": \"color\", \"field\": \"category\"},\n                    stroke: {\"value\": \"white\"},\n                    strokeWidth: {\"value\": 1}\n                  }\n                }\n              }\n            ]\n          },\n          {\n            type: \"rule\",\n            name: \"radial-grid\",\n            from: {\"data\": \"dimensions\"},\n            zindex: 0,\n            encode: {\n              enter: {\n                x: {\"value\": 0},\n                y: {\"value\": 0},\n                x2: {\"signal\": \"radius * cos(scale('angular', datum.dimension))\"},\n                y2: {\"signal\": \"radius * sin(scale('angular', datum.dimension))\"},\n                stroke: {\"value\": \"#e1e4e8\"},\n                strokeWidth: {\"value\": 1}\n              }\n            }\n          },\n          {\n            type: \"text\",\n            name: \"dimension-label\",\n            from: {\"data\": \"dimensions\"},\n            zindex: 1,\n            encode: {\n              enter: {\n                x: {\"signal\": \"(radius + 20) * cos(scale('angular', datum.dimension))\"},\n                y: {\"signal\": \"(radius + 20) * sin(scale('angular', datum.dimension))\"},\n                text: {\"field\": \"dimension\"},\n                align: [\n                  {\n                    test: \"abs(scale('angular', datum.dimension)) > PI / 2\",\n                    value: \"right\"\n                  },\n                  {\n                    value: \"left\"\n                  }\n                ],\n                baseline: [\n                  {\n                    test: \"scale('angular', datum.dimension) > 0\", \n                    value: \"top\"\n                  },\n                  {\n                    test: \"scale('angular', datum.dimension) == 0\", \n                    value: \"middle\"\n                  },\n                  {\n                    value: \"bottom\"\n                  }\n                ],\n                fill: {\"value\": \"#323130\"},\n                fontWeight: {\"value\": \"bold\"},\n                font: {\"value\": \"Segoe UI\"},\n                fontSize: {\"value\": 12}\n              }\n            }\n          },\n          {\n            type: \"line\",\n            name: \"outer-line\",\n            from: {\"data\": \"radial-grid\"},\n            encode: {\n              enter: {\n                interpolate: {\"value\": \"linear-closed\"},\n                x: {\"field\": \"x2\"},\n                y: {\"field\": \"y2\"},\n                stroke: {\"value\": \"#8a8886\"},\n                strokeWidth: {\"value\": 2},\n                strokeOpacity: {\"value\": 0.6}\n              }\n            }\n          }\n        ]\n      };\n\n      createChart(spec, \"radar\", headers, rows)\n        .then(() => resolve(\"\"))\n        .catch((error) => resolve(`Error: ${error.message}`));\n\n    } catch (error) {\n      resolve(`Error: ${error.message}`);\n    }\n  });\n}\n\n/**\n * Creates chart with position tracking based on formula cell address\n */\nasync function createChartWithTracking(spec, chartType, formulaAddress) {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const chartId = `${chartType}_${Date.now()}_${Math.random().toString(36).substr(2, 6)}`;\n      \n      // Render hidden chart\n      const hiddenDiv = document.createElement(\"div\");\n      hiddenDiv.style.display = \"none\";\n      hiddenDiv.id = chartId;\n      document.body.appendChild(hiddenDiv);\n\n      // Load Vega-Lite if not available\n      if (typeof vegaEmbed === 'undefined') {\n        await loadVegaLibraries();\n      }\n\n      const result = await vegaEmbed(hiddenDiv, spec, { actions: false });\n      const view = result.view;\n\n      // Export chart -> PNG\n      const pngUrl = await view.toImageURL(\"png\");\n      const response = await fetch(pngUrl);\n      const blob = await response.blob();\n\n      const reader = new FileReader();\n      reader.onloadend = async () => {\n        try {\n          const base64data = reader.result.split(\",\")[1];\n\n          // Insert chart at tracked position\n          await insertChartBelowFormula(base64data, chartType, chartId, formulaAddress);\n          \n          // Clean up hidden div\n          document.body.removeChild(hiddenDiv);\n          resolve();\n          \n        } catch (error) {\n          if (document.body.contains(hiddenDiv)) {\n            document.body.removeChild(hiddenDiv);\n          }\n          reject(error);\n        }\n      };\n      \n      reader.readAsDataURL(blob);\n\n    } catch (error) {\n      reject(error);\n    }\n  });\n}\n\n/**\n * Inserts chart exactly one cell below the formula address\n */\nasync function insertChartBelowFormula(base64data, chartType, chartId, formulaAddress) {\n  return Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getActiveWorksheet();\n\n    // Parse the formula address (e.g., \"Sheet1!A5\" or \"A5\")\n    let cellAddress = formulaAddress;\n    if (cellAddress.includes('!')) {\n      cellAddress = cellAddress.split('!')[1];\n    }\n\n    // Get the formula cell\n    const formulaCell = sheet.getRange(cellAddress);\n    formulaCell.load(\"rowIndex, columnIndex\");\n    await context.sync();\n\n    // Calculate target cell (one row below)\n    const targetRow = formulaCell.rowIndex + 1;\n    const targetCol = formulaCell.columnIndex;\n    \n    // Get the target cell position\n    const targetCell = sheet.getCell(targetRow, targetCol);\n    targetCell.load(\"left, top\");\n    await context.sync();\n\n    // Remove existing charts for this formula position\n    await removeChartsForFormula(context, sheet, formulaAddress);\n\n    // Insert chart at target position\n    const image = sheet.shapes.addImage(base64data);\n    image.left = targetCell.left;\n    image.top = targetCell.top;\n    image.lockAspectRatio = true;\n    \n    // Name includes formula address for tracking\n    image.name = `${chartType.charAt(0).toUpperCase() + chartType.slice(1)}Chart_${cellAddress}_${chartId}`;\n\n    // Store position in our tracking system\n    chartPositions.set(formulaAddress, {\n      chartType: chartType,\n      targetRow: targetRow,\n      targetCol: targetCol,\n      chartName: image.name\n    });\n\n    await context.sync();\n  });\n}\n\n/**\n * Removes charts associated with a specific formula address\n */\nasync function removeChartsForFormula(context, sheet, formulaAddress) {\n  try {\n    const shapes = sheet.shapes;\n    shapes.load(\"items\");\n    await context.sync();\n\n    // Parse cell address for matching\n    let cellAddress = formulaAddress;\n    if (cellAddress.includes('!')) {\n      cellAddress = cellAddress.split('!')[1];\n    }\n\n    // Remove charts that belong to this formula cell\n    for (let i = shapes.items.length - 1; i >= 0; i--) {\n      const shape = shapes.items[i];\n      shape.load(\"name\");\n      await context.sync();\n      \n      if (shape.name && shape.name.includes(`_${cellAddress}_`)) {\n        shape.delete();\n        await context.sync();\n      }\n    }\n\n    // Clean up tracking\n    chartPositions.delete(formulaAddress);\n  } catch (error) {\n    console.warn('Error removing charts for formula:', error);\n  }\n}\n\n/**\n * Load Vega libraries (same CDN versions as taskpane.html)\n */\nfunction loadVegaLibraries() {\n  return new Promise((resolve, reject) => {\n    if (typeof vegaEmbed !== 'undefined') {\n      resolve();\n      return;\n    }\n\n    // Load libraries in sequence (same as taskpane.html)\n    const scripts = [\n      'https://cdn.jsdelivr.net/npm/vega@6',\n      'https://cdn.jsdelivr.net/npm/vega-lite@6', \n      'https://cdn.jsdelivr.net/npm/vega-embed@6'\n    ];\n\n    let loadedCount = 0;\n    \n    scripts.forEach((src, index) => {\n      const script = document.createElement('script');\n      script.src = src;\n      script.onload = () => {\n        loadedCount++;\n        if (loadedCount === scripts.length) {\n          resolve();\n        }\n      };\n      script.onerror = () => reject(new Error(`Failed to load ${src}`));\n      document.head.appendChild(script);\n    });\n  });\n}\n\n// Register all custom functions\nif (typeof CustomFunctions !== 'undefined') {\n  CustomFunctions.associate(\"LINE\", LINE);\n  CustomFunctions.associate(\"BAR\", BAR);\n  CustomFunctions.associate(\"PIE\", PIE);\n  CustomFunctions.associate(\"AREA\", AREA);\n  CustomFunctions.associate(\"SCATTER\", SCATTER);\n  CustomFunctions.associate(\"RADIAL\", RADIAL);\n  CustomFunctions.associate(\"BOX\", BOX);\n  CustomFunctions.associate(\"RADAR\", RADAR);\n}\nCustomFunctions.associate(\"LINE\", LINE);\nCustomFunctions.associate(\"BAR\", BAR);\nCustomFunctions.associate(\"PIE\", PIE);\nCustomFunctions.associate(\"AREA\", AREA);\nCustomFunctions.associate(\"SCATTER\", SCATTER);\nCustomFunctions.associate(\"RADIAL\", RADIAL);\nCustomFunctions.associate(\"BOX\", BOX);\nCustomFunctions.associate(\"RADAR\", RADAR);"],"names":["_typeof","o","Symbol","iterator","constructor","prototype","_arrayLikeToArray","r","a","length","e","n","Array","ownKeys","t","Object","keys","getOwnPropertySymbols","filter","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","arguments","forEach","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","i","toPrimitive","call","TypeError","String","_toPrimitive","_toPropertyKey","value","configurable","writable","LINE","data","Promise","resolve","headers","rows","slice","processedData","map","row","obj","h","transformedData","valueColumns","colName","undefined","parseFloat","spec","$schema","description","background","config","view","stroke","values","mark","type","point","tooltip","strokeWidth","encoding","x","field","axis","title","labelFontSize","titleFontSize","labelAngle","y","color","scale","scheme","legend","font","labelColor","titleColor","gridColor","size","filled","createChart","then","catch","error","concat","message","BAR","PIE","some","isNaN","outerRadius","theta","AREA","opacity","SCATTER","zero","shape","RADIAL","layer","innerRadius","radiusOffset","text","stack","radius","rangeMin","BOX","category","extent","RADAR","radarData","dimensions","seriesIndex","seriesName","dimension","indexOf","series","uniqueDimensions","isArray","_arrayWithoutHoles","Set","d","from","_iterableToArray","toString","name","test","_unsupportedIterableToArray","_nonIterableSpread","width","height","padding","autosize","signals","scales","range","domain","nice","domainMin","encode","enter","marks","zindex","facet","interpolate","fill","fillOpacity","strokeOpacity","x2","y2","align","baseline","fontWeight","fontSize","Map","CustomFunctions","associate"],"sourceRoot":""}