{"version":3,"file":"functions.js","mappings":"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","sources":["webpack://excel-custom-functions-js/./src/functions/functions.js"],"sourcesContent":["/**\n * LINE custom function using the exact same specification as taskpane.js\n * Creates a multi-series line chart from Excel data range\n * \n * @customfunction\n * @param {any[][]} data The data range including headers\n * @returns {string} Status message\n */\nfunction LINE(data) {\n  return new Promise((resolve) => {\n    try {\n      if (!data || data.length < 2) {\n        resolve(\"Error: Need at least header row + one data row\");\n        return;\n      }\n\n      const headers = data[0];\n      const rows = data.slice(1);\n\n      // Convert rows -> objects (same as taskpane.js)\n      const processedData = rows.map(row => {\n        let obj = {};\n        headers.forEach((h, i) => {\n          obj[h] = row[i];\n        });\n        return obj;\n      });\n\n      // Transform data for multi-series line chart (exact copy from taskpane.js)\n      const transformedData = [];\n      const valueColumns = headers.slice(1);\n      processedData.forEach(row => {\n        valueColumns.forEach(colName => {\n          if (row[colName] !== null && row[colName] !== undefined && row[colName] !== \"\") {\n            transformedData.push({\n              [headers[0]]: row[headers[0]], // x-axis value (first column)\n              series: colName,               // series name (column header)\n              value: parseFloat(row[colName]) || 0  // y-axis value\n            });\n          }\n        });\n      });\n\n      // Use EXACT specification from taskpane.js line chart\n      const spec = {\n        $schema: \"https://vega.github.io/schema/vega-lite/v6.json\",\n        description: \"Multi-series line chart from Excel selection\",\n        background: \"white\",\n        config: { view: { stroke: \"transparent\" }},\n        data: { values: transformedData },\n        mark: { \n          type: \"line\", \n          point: false,\n          tooltip: true,\n          strokeWidth: 2\n        },\n        encoding: {\n          x: { \n            field: headers[0], \n            type: \"ordinal\",\n            axis: {\n              title: headers[0],\n              labelFontSize: 12,\n              titleFontSize: 14,\n              labelAngle: 0\n            }\n          },\n          y: { \n            field: \"value\", \n            type: \"quantitative\",\n            axis: {\n              title: \"Value\",\n              labelFontSize: 12,\n              titleFontSize: 14\n            }\n          },\n          color: { \n            field: \"series\", \n            type: \"nominal\",\n            scale: {\n              scheme: \"category10\"\n            },\n            legend: {\n              title: \"Series\",\n              titleFontSize: 12,\n              labelFontSize: 11\n            }\n          }\n        },\n        config: {\n          font: \"Segoe UI\",\n          axis: {\n            labelColor: \"#605e5c\",\n            titleColor: \"#323130\",\n            gridColor: \"#f3f2f1\"\n          },\n          legend: {\n            titleColor: \"#323130\",\n            labelColor: \"#605e5c\"\n          },\n          point: {\n            size: 60,\n            filled: true\n          }\n        }\n      };\n\n      createChart(spec, \"line\", headers, rows)\n        .then(() => resolve(\"\"))\n        .catch((error) => resolve(`Error: ${error.message}`));\n\n    } catch (error) {\n      resolve(`Error: ${error.message}`);\n    }\n  });\n}\n\n/**\n * BAR custom function using the exact same specification as taskpane.js\n * Creates a bar chart from Excel data range\n * \n * @customfunction\n * @param {any[][]} data The data range including headers\n * @returns {string} Status message\n */\nfunction BAR(data) {\n  return new Promise((resolve) => {\n    try {\n      if (!data || data.length < 2) {\n        resolve(\"Error: Need at least header row + one data row\");\n        return;\n      }\n\n      const headers = data[0];\n      const rows = data.slice(1);\n\n      // Convert rows -> objects (same as taskpane.js)\n      const processedData = rows.map(row => {\n        let obj = {};\n        headers.forEach((h, i) => {\n          obj[h] = row[i];\n        });\n        return obj;\n      });\n\n      // Use EXACT specification from taskpane.js bar chart\n      const spec = {\n        $schema: \"https://vega.github.io/schema/vega-lite/v6.json\",\n        description: \"Bar chart from Excel selection\",\n        background: \"white\",\n        config: { view: { stroke: \"transparent\" }},\n        data: { values: processedData },\n        mark: { \n          type: \"bar\", \n          tooltip: true\n        },\n        encoding: {\n          x: { \n            field: headers[0], \n            type: \"nominal\",\n            axis: {\n              title: headers[0],\n              labelFontSize: 12,\n              titleFontSize: 14\n            }\n          },\n          y: { \n            field: headers[1], \n            type: \"quantitative\",\n            axis: {\n              title: headers[1],\n              labelFontSize: 12,\n              titleFontSize: 14\n            }\n          },\n          // Add color encoding for grouped bars if 3rd column exists\n          ...(headers.length >= 3 && {\n            color: { \n              field: headers[2], \n              type: \"nominal\",\n              legend: {\n                title: headers[2],\n                titleFontSize: 12,\n                labelFontSize: 11\n              }\n            }\n          })\n        },\n        config: {\n          font: \"Segoe UI\",\n          axis: {\n            labelColor: \"#605e5c\",\n            titleColor: \"#323130\",\n            gridColor: \"#f3f2f1\"\n          },\n          legend: {\n            titleColor: \"#323130\",\n            labelColor: \"#605e5c\"\n          }\n        }\n      };\n\n      createChart(spec, \"bar\", headers, rows)\n        .then(() => resolve(\"\"))\n        .catch((error) => resolve(`Error: ${error.message}`));\n\n    } catch (error) {\n      resolve(`Error: ${error.message}`);\n    }\n  });\n}\n\n/**\n * PIE custom function using the exact same specification as taskpane.js\n * Creates a pie chart from Excel data range\n * \n * @customfunction\n * @param {any[][]} data The data range including headers\n * @returns {string} Status message\n */\nfunction PIE(data) {\n  return new Promise((resolve) => {\n    try {\n      if (!data || data.length < 2) {\n        resolve(\"Error: Need at least header row + one data row\");\n        return;\n      }\n\n      const headers = data[0];\n      const rows = data.slice(1);\n\n      if (headers.length < 2) {\n        resolve(\"Error: Pie chart requires 2 columns (Category, Value)\");\n        return;\n      }\n\n      // Validate that all values are positive numbers\n      const hasInvalidValues = rows.some(row => isNaN(row[1]) || row[1] <= 0);\n      if (hasInvalidValues) {\n        resolve(\"Error: Pie chart values must be positive numbers\");\n        return;\n      }\n\n      // Convert rows -> objects (same as taskpane.js)\n      const processedData = rows.map(row => {\n        let obj = {};\n        headers.forEach((h, i) => {\n          obj[h] = row[i];\n        });\n        return obj;\n      });\n\n      // Use EXACT specification from taskpane.js pie chart\n      const spec = {\n        $schema: \"https://vega.github.io/schema/vega-lite/v6.json\",\n        background: \"white\",\n        config: { view: { stroke: \"transparent\" }},\n        description: \"Pie chart from Excel selection\",\n        data: { values: processedData },\n        mark: { type: \"arc\", outerRadius: 120 },\n        encoding: {\n          theta: { field: headers[1], type: \"quantitative\" },\n          color: { field: headers[0], type: \"nominal\" }\n        }\n      };\n\n      createChart(spec, \"pie\", headers, rows)\n        .then(() => resolve(\"\"))\n        .catch((error) => resolve(`Error: ${error.message}`));\n\n    } catch (error) {\n      resolve(`Error: ${error.message}`);\n    }\n  });\n}\n\n/**\n * AREA custom function using the exact same specification as taskpane.js\n * Creates an area chart from Excel data range\n * \n * @customfunction\n * @param {any[][]} data The data range including headers\n * @returns {string} Status message\n */\nfunction AREA(data) {\n  return new Promise((resolve) => {\n    try {\n      if (!data || data.length < 2) {\n        resolve(\"Error: Need at least header row + one data row\");\n        return;\n      }\n\n      const headers = data[0];\n      const rows = data.slice(1);\n\n      // Convert rows -> objects (same as taskpane.js)\n      const processedData = rows.map(row => {\n        let obj = {};\n        headers.forEach((h, i) => {\n          obj[h] = row[i];\n        });\n        return obj;\n      });\n\n      // Use EXACT specification from taskpane.js area chart\n      const spec = {\n        $schema: \"https://vega.github.io/schema/vega-lite/v6.json\",\n        description: \"Area chart from Excel selection\",\n        background: \"white\",\n        config: { view: { stroke: \"transparent\" }},\n        data: { values: processedData },\n        mark: { \n          type: \"area\", \n          tooltip: true,\n          opacity: 0.7\n        },\n        encoding: {\n          x: { \n            field: headers[0], \n            type: \"ordinal\",\n            axis: {\n              title: headers[0],\n              labelFontSize: 12,\n              titleFontSize: 14\n            }\n          },\n          y: { \n            field: headers[1], \n            type: \"quantitative\",\n            axis: {\n              title: headers[1],\n              labelFontSize: 12,\n              titleFontSize: 14\n            }\n          },\n          // Add color encoding for multiple areas if 3rd column exists\n          ...(headers.length >= 3 && {\n            color: { \n              field: headers[2], \n              type: \"nominal\",\n              legend: {\n                title: headers[2],\n                titleFontSize: 12,\n                labelFontSize: 11\n              }\n            }\n          })\n        },\n        config: {\n          font: \"Segoe UI\",\n          axis: {\n            labelColor: \"#605e5c\",\n            titleColor: \"#323130\",\n            gridColor: \"#f3f2f1\"\n          },\n          legend: {\n            titleColor: \"#323130\",\n            labelColor: \"#605e5c\"\n          }\n        }\n      };\n\n      createChart(spec, \"area\", headers, rows)\n        .then(() => resolve(\"\"))\n        .catch((error) => resolve(`Error: ${error.message}`));\n\n    } catch (error) {\n      resolve(`Error: ${error.message}`);\n    }\n  });\n}\n\n/**\n * SCATTER custom function using the exact same specification as taskpane.js\n * Creates a scatter plot from Excel data range\n * \n * @customfunction\n * @param {any[][]} data The data range including headers\n * @returns {string} Status message\n */\nfunction SCATTER(data) {\n  return new Promise((resolve) => {\n    try {\n      if (!data || data.length < 2) {\n        resolve(\"Error: Need at least header row + one data row\");\n        return;\n      }\n\n      const headers = data[0];\n      const rows = data.slice(1);\n\n      if (headers.length < 2) {\n        resolve(\"Error: Scatter plot requires at least 2 columns (X, Y values)\");\n        return;\n      }\n\n      // Convert rows -> objects (same as taskpane.js)\n      const processedData = rows.map(row => {\n        let obj = {};\n        headers.forEach((h, i) => {\n          obj[h] = row[i];\n        });\n        return obj;\n      });\n\n      // Use EXACT specification from taskpane.js point chart\n      const spec = {\n        $schema: \"https://vega.github.io/schema/vega-lite/v6.json\",\n        description: \"Colored scatter plot from Excel selection\",\n        background: \"white\",\n        config: { view: { stroke: \"transparent\" }},\n        data: { values: processedData },\n        mark: { type: \"point\", size: 100, tooltip: true },\n        encoding: {\n          x: { \n            field: headers[0], \n            type: \"quantitative\",\n            scale: { zero: false },\n            axis: {\n              title: headers[0],\n              labelFontSize: 12,\n              titleFontSize: 14\n            }\n          },\n          y: { \n            field: headers[1], \n            type: \"quantitative\",\n            scale: { zero: false },\n            axis: {\n              title: headers[1],\n              labelFontSize: 12,\n              titleFontSize: 14\n            }\n          },\n          // Add color encoding if 3rd column exists\n          ...(headers.length >= 3 && {\n            color: { \n              field: headers[2], \n              type: \"nominal\",\n              legend: {\n                title: headers[2],\n                titleFontSize: 12,\n                labelFontSize: 11\n              }\n            }\n          }),\n          // Add shape encoding if 4th column exists\n          ...(headers.length >= 4 && {\n            shape: { \n              field: headers[3], \n              type: \"nominal\",\n              legend: {\n                title: headers[3],\n                titleFontSize: 12,\n                labelFontSize: 11\n              }\n            }\n          })\n        },\n        config: {\n          font: \"Segoe UI\",\n          axis: {\n            labelColor: \"#605e5c\",\n            titleColor: \"#323130\",\n            gridColor: \"#f3f2f1\"\n          },\n          legend: {\n            titleColor: \"#323130\",\n            labelColor: \"#605e5c\"\n          }\n        }\n      };\n\n      createChart(spec, \"scatter\", headers, rows)\n        .then(() => resolve(\"\"))\n        .catch((error) => resolve(`Error: ${error.message}`));\n\n    } catch (error) {\n      resolve(`Error: ${error.message}`);\n    }\n  });\n}\n\n/**\n * RADIAL custom function using the exact same specification as taskpane.js\n * Creates a radial chart from Excel data range\n * \n * @customfunction\n * @param {any[][]} data The data range including headers\n * @returns {string} Status message\n */\nfunction RADIAL(data) {\n  return new Promise((resolve) => {\n    try {\n      if (!data || data.length < 2) {\n        resolve(\"Error: Need at least header row + one data row\");\n        return;\n      }\n\n      const headers = data[0];\n      const rows = data.slice(1);\n\n      if (headers.length < 2) {\n        resolve(\"Error: Radial chart requires 2 columns (Category, Value)\");\n        return;\n      }\n\n      // Convert rows -> objects (same as taskpane.js)\n      const processedData = rows.map(row => {\n        let obj = {};\n        headers.forEach((h, i) => {\n          obj[h] = row[i];\n        });\n        return obj;\n      });\n\n      // Use EXACT specification from taskpane.js radial chart\n      const spec = {\n        $schema: \"https://vega.github.io/schema/vega-lite/v6.json\",\n        description: \"Radial chart from Excel selection\",\n        background: \"white\",\n        config: { view: { stroke: \"transparent\" }},\n        data: { values: processedData },\n        layer: [{\n          mark: { type: \"arc\", innerRadius: 20, stroke: \"#fff\" }\n        }, {\n          mark: { type: \"text\", radiusOffset: 10 },\n          encoding: {\n            text: { field: headers[1], type: \"quantitative\" }\n          }\n        }],\n        encoding: {\n          theta: { field: headers[1], type: \"quantitative\", stack: true },\n          radius: { \n            field: headers[1], \n            scale: { type: \"sqrt\", zero: true, rangeMin: 20 }\n          },\n          color: { field: headers[0], type: \"nominal\", legend: null }\n        }\n      };\n\n      createChart(spec, \"radial\", headers, rows)\n        .then(() => resolve(\"\"))\n        .catch((error) => resolve(`Error: ${error.message}`));\n\n    } catch (error) {\n      resolve(`Error: ${error.message}`);\n    }\n  });\n}\n\n/**\n * BOX custom function using the exact same specification as taskpane.js\n * Creates a box plot from Excel data range\n * \n * @customfunction\n * @param {any[][]} data The data range including headers\n * @returns {string} Status message\n */\nfunction BOX(data) {\n  return new Promise((resolve) => {\n    try {\n      if (!data || data.length < 2) {\n        resolve(\"Error: Need at least header row + one data row\");\n        return;\n      }\n\n      const headers = data[0];\n      const rows = data.slice(1);\n\n      if (headers.length < 2) {\n        resolve(\"Error: Box plot requires 2 columns (Category, Values)\");\n        return;\n      }\n\n      // Expect headers: Category | Value (same as taskpane.js)\n      const processedData = rows\n        .filter(r => r[0] && !isNaN(+r[1]))\n        .map(r => ({\n          category: r[0],\n          value: +r[1]\n        }));\n\n      if (processedData.length === 0) {\n        resolve(\"Error: No valid numeric data found for box plot\");\n        return;\n      }\n\n      // Use EXACT specification from taskpane.js box chart\n      const spec = {\n        $schema: \"https://vega.github.io/schema/vega-lite/v6.json\",\n        description: \"Box plot from Excel selection\",\n        data: { values: processedData },\n        mark: {\n          type: \"boxplot\",\n          extent: \"min-max\"   // show whiskers from min to max\n        },\n        encoding: {\n          x: { field: \"category\", type: \"nominal\" },\n          y: {\n            field: \"value\",\n            type: \"quantitative\",\n            scale: { zero: false }\n          },\n          color: {\n            field: \"category\",\n            type: \"nominal\",\n            legend: null\n          }\n        }\n      };\n\n      createChart(spec, \"box\", headers, rows)\n        .then(() => resolve(\"\"))\n        .catch((error) => resolve(`Error: ${error.message}`));\n\n    } catch (error) {\n      resolve(`Error: ${error.message}`);\n    }\n  });\n}\n\n/**\n * RADAR custom function using the exact same specification as taskpane.js\n * Creates a radar chart from Excel data range\n * \n * @customfunction\n * @param {any[][]} data The data range including headers\n * @returns {string} Status message\n */\nfunction RADAR(data) {\n  return new Promise((resolve) => {\n    try {\n      if (!data || data.length < 2) {\n        resolve(\"Error: Need at least header row + one data row\");\n        return;\n      }\n\n      const headers = data[0];\n      const rows = data.slice(1);\n\n      if (headers.length < 3) {\n        resolve(\"Error: Radar chart requires at least 3 columns (Series, Dimension1, Dimension2, ...)\");\n        return;\n      }\n\n      const radarData = [];\n      const dimensions = headers.slice(1); // All columns except first are dimensions\n      \n      rows.forEach((row, seriesIndex) => {\n        const seriesName = row[headers[0]] || `Series ${seriesIndex + 1}`;\n        \n        dimensions.forEach(dimension => {\n          const value = parseFloat(row[headers.indexOf(dimension)]) || 0;\n          radarData.push({\n            series: seriesName,\n            dimension: dimension,\n            value: value,\n            category: seriesIndex\n          });\n        });\n      });\n\n      // Get unique dimensions for grid\n      const uniqueDimensions = [...new Set(radarData.map(d => d.dimension))];\n\n      // Use EXACT specification from taskpane.js radar chart\n      const spec = {\n        $schema: \"https://vega.github.io/schema/vega/v6.json\",\n        description: \"Radar chart from Excel selection\",\n        width: 400,\n        height: 400,\n        padding: 60,\n        autosize: {\"type\": \"none\", \"contains\": \"padding\"},\n        background: \"white\",\n        config: { view: { stroke: \"transparent\" }},\n\n        signals: [\n          {\"name\": \"radius\", \"update\": \"width / 2\"}\n        ],\n\n        data: [\n          {\n            name: \"table\",\n            values: radarData\n          },\n          {\n            name: \"dimensions\",\n            values: uniqueDimensions.map(d => ({dimension: d}))\n          }\n        ],\n\n        scales: [\n          {\n            name: \"angular\",\n            type: \"point\",\n            range: {\"signal\": \"[-PI, PI]\"},\n            padding: 0.5,\n            domain: uniqueDimensions\n          },\n          {\n            name: \"radial\",\n            type: \"linear\",\n            range: {\"signal\": \"[0, radius]\"},\n            zero: true,\n            nice: true,\n            domain: {\"data\": \"table\", \"field\": \"value\"},\n            domainMin: 0\n          },\n          {\n            name: \"color\",\n            type: \"ordinal\",\n            domain: {\"data\": \"table\", \"field\": \"category\"},\n            range: [\n              \"#0078d4\", \"#00bcf2\", \"#40e0d0\", \"#00cc6a\", \"#10893e\",\n              \"#107c10\", \"#bad80a\", \"#ffb900\", \"#ff8c00\", \"#d13438\"\n            ]\n          }\n        ],\n\n        encode: {\n          enter: {\n            x: {\"signal\": \"radius\"},\n            y: {\"signal\": \"radius\"}\n          }\n        },\n\n        marks: [\n          {\n            type: \"group\",\n            name: \"categories\",\n            zindex: 1,\n            from: {\n              facet: {\"data\": \"table\", \"name\": \"facet\", \"groupby\": [\"category\", \"series\"]}\n            },\n            marks: [\n              {\n                type: \"line\",\n                name: \"category-line\",\n                from: {\"data\": \"facet\"},\n                encode: {\n                  enter: {\n                    interpolate: {\"value\": \"linear-closed\"},\n                    x: {\"signal\": \"scale('radial', datum.value) * cos(scale('angular', datum.dimension))\"},\n                    y: {\"signal\": \"scale('radial', datum.value) * sin(scale('angular', datum.dimension))\"},\n                    stroke: {\"scale\": \"color\", \"field\": \"category\"},\n                    strokeWidth: {\"value\": 2},\n                    fill: {\"scale\": \"color\", \"field\": \"category\"},\n                    fillOpacity: {\"value\": 0.1},\n                    strokeOpacity: {\"value\": 0.8}\n                  }\n                }\n              },\n              {\n                type: \"symbol\",\n                name: \"category-points\",\n                from: {\"data\": \"facet\"},\n                encode: {\n                  enter: {\n                    x: {\"signal\": \"scale('radial', datum.value) * cos(scale('angular', datum.dimension))\"},\n                    y: {\"signal\": \"scale('radial', datum.value) * sin(scale('angular', datum.dimension))\"},\n                    size: {\"value\": 50},\n                    fill: {\"scale\": \"color\", \"field\": \"category\"},\n                    stroke: {\"value\": \"white\"},\n                    strokeWidth: {\"value\": 1}\n                  }\n                }\n              }\n            ]\n          },\n          {\n            type: \"rule\",\n            name: \"radial-grid\",\n            from: {\"data\": \"dimensions\"},\n            zindex: 0,\n            encode: {\n              enter: {\n                x: {\"value\": 0},\n                y: {\"value\": 0},\n                x2: {\"signal\": \"radius * cos(scale('angular', datum.dimension))\"},\n                y2: {\"signal\": \"radius * sin(scale('angular', datum.dimension))\"},\n                stroke: {\"value\": \"#e1e4e8\"},\n                strokeWidth: {\"value\": 1}\n              }\n            }\n          },\n          {\n            type: \"text\",\n            name: \"dimension-label\",\n            from: {\"data\": \"dimensions\"},\n            zindex: 1,\n            encode: {\n              enter: {\n                x: {\"signal\": \"(radius + 20) * cos(scale('angular', datum.dimension))\"},\n                y: {\"signal\": \"(radius + 20) * sin(scale('angular', datum.dimension))\"},\n                text: {\"field\": \"dimension\"},\n                align: [\n                  {\n                    test: \"abs(scale('angular', datum.dimension)) > PI / 2\",\n                    value: \"right\"\n                  },\n                  {\n                    value: \"left\"\n                  }\n                ],\n                baseline: [\n                  {\n                    test: \"scale('angular', datum.dimension) > 0\", \n                    value: \"top\"\n                  },\n                  {\n                    test: \"scale('angular', datum.dimension) == 0\", \n                    value: \"middle\"\n                  },\n                  {\n                    value: \"bottom\"\n                  }\n                ],\n                fill: {\"value\": \"#323130\"},\n                fontWeight: {\"value\": \"bold\"},\n                font: {\"value\": \"Segoe UI\"},\n                fontSize: {\"value\": 12}\n              }\n            }\n          },\n          {\n            type: \"line\",\n            name: \"outer-line\",\n            from: {\"data\": \"radial-grid\"},\n            encode: {\n              enter: {\n                interpolate: {\"value\": \"linear-closed\"},\n                x: {\"field\": \"x2\"},\n                y: {\"field\": \"y2\"},\n                stroke: {\"value\": \"#8a8886\"},\n                strokeWidth: {\"value\": 2},\n                strokeOpacity: {\"value\": 0.6}\n              }\n            }\n          }\n        ]\n      };\n\n      createChart(spec, \"radar\", headers, rows)\n        .then(() => resolve(\"\"))\n        .catch((error) => resolve(`Error: ${error.message}`));\n\n    } catch (error) {\n      resolve(`Error: ${error.message}`);\n    }\n  });\n}\n\n/**\n * WATERFALL custom function using the exact same specification as taskpane.js\n * Creates a waterfall chart from Excel data range\n * \n * @customfunction\n * @param {any[][]} data The data range including headers\n * @returns {string} Status message\n */\nfunction WATERFALL(data) {\n  return new Promise((resolve) => {\n    try {\n      if (!data || data.length < 2) {\n        resolve(\"Error: Need at least header row + one data row\");\n        return;\n      }\n\n      const headers = data[0];\n      const rows = data.slice(1);\n\n      if (headers.length < 3) {\n        resolve(\"Error: Waterfall chart requires 3 columns (Category, Amount, Type)\");\n        return;\n      }\n\n      // Convert rows -> objects (same as taskpane.js)\n      const processedDataRaw = rows.map(row => {\n        let obj = {};\n        headers.forEach((h, i) => {\n          obj[h] = row[i];\n        });\n        return obj;\n      });\n\n      // Process waterfall data inline - set last entry's amount to 0 (same as taskpane.js)\n      const processedData = [...processedDataRaw];\n      if (processedData.length > 0) {\n        processedData[processedData.length - 1] = {\n          ...processedData[processedData.length - 1],\n          [headers[1]]: 0\n        };\n      }\n\n      // Calculate dynamic dimensions\n      const numDataPoints = processedDataRaw.length;\n      const dynamicWidth = Math.max(400, Math.min(1600, numDataPoints * 50));\n      const maxAmount = Math.max(...processedDataRaw.map(d => Math.abs(d[headers[1]])));\n      const dynamicHeight = Math.max(300, Math.min(600, maxAmount / 100 + 200));\n\n      // Use EXACT specification from taskpane.js waterfall chart\n      const spec = {\n        $schema: \"https://vega.github.io/schema/vega-lite/v6.json\",\n        description: \"Waterfall chart with multiple subtotals\",\n        background: \"white\",\n        data: { values: processedData },\n        config: { view: { stroke: \"transparent\" }},\n        width: dynamicWidth,\n        height: dynamicHeight,\n        transform: [\n          { \"window\": [{ \"op\": \"sum\", \"field\": headers[1], \"as\": \"sum\" }] },\n          { \"window\": [{ \"op\": \"lead\", \"field\": headers[0], \"as\": \"lead\" }] },\n          {\n            \"calculate\": `datum.lead === null ? datum.${headers[0]} : datum.lead`,\n            \"as\": \"lead\"\n          },\n          {\n            // If total → reset, else → running sum step\n            \"calculate\": `datum.${headers[2]} == 'total' ? 0 : datum.sum - datum.${headers[1]}`,\n            \"as\": \"previous_sum\"\n          },\n          {\n            \"calculate\": `datum.${headers[2]} == 'total' ? datum.sum : datum.${headers[1]}`,\n            \"as\": \"amount\"\n          },\n          {\n            \"calculate\": `datum.${headers[2]} == 'total' ? datum.${headers[1]} / 2 : (datum.sum + datum.previous_sum) / 2`,\n            \"as\": \"center\"\n          },\n          {\n            \"calculate\": `datum.${headers[2]} == 'total' ? datum.sum : (datum.${headers[1]} > 0 ? '+' : '') + datum.${headers[1]}`,\n            \"as\": \"text_amount\"\n          },\n          { \"calculate\": \"(datum.sum + datum.previous_sum) / 2\", \"as\": \"center\" },\n\n          // Add group index for stacked handling\n          {\n            \"window\": [{ \"op\": \"rank\", \"as\": \"group_index\" }],\n            \"frame\": [null, null],\n            \"groupby\": [headers[0]]\n          },\n\n          // Precompute color shades\n          {\n            \"calculate\": `\n            datum.${headers[2]} == 'total'\n                ? '#00B0F0'\n                : datum.amount >= 0\n                ? (datum.group_index == 1 ? '#70AD47'\n                    : (datum.group_index == 2 ? '#8BC97A'\n                    : (datum.group_index == 3 ? '#A7DA9D'\n                    : '#C3EBC0')))\n                : (datum.group_index == 1 ? '#E15759'\n                    : (datum.group_index == 2 ? '#EC7A7C'\n                    : (datum.group_index == 3 ? '#F29C9D'\n                    : '#F8BEBF')))\n            `,\n            \"as\": \"bar_color\"\n          }\n        ],\n        encoding: {\n          x: {\n            field: headers[0],\n            type: \"ordinal\",\n            sort: null,\n            axis: { labelAngle: -45, title: null },\n            scale: { paddingInner: 0.05, paddingOuter: 0.025 }\n          }\n        },\n        layer: [\n          {\n            mark: { type: \"bar\", size: 60},\n            encoding: {\n              y: { field: \"previous_sum\", type: \"quantitative\", title: null },\n              y2: { field: \"sum\" },\n              color: { field: \"bar_color\", type: \"nominal\", scale: null }\n            }\n          },\n          {\n            mark: { type: \"text\", fontWeight: \"bold\", baseline: \"middle\" },\n            encoding: {\n              y: { field: \"center\", type: \"quantitative\" },\n              text: { field: \"text_amount\", type: \"nominal\" },\n              color: {\n                condition: [\n                  { test: `datum.${headers[2]} == 'total'`, value: \"#725a30\" }\n                ],\n                value: \"white\"\n              }\n            }\n          }\n        ],\n        config: { text: { fontWeight: \"bold\", color: \"#D9D9D9\" } }\n      };\n\n      createChart(spec, \"waterfall\", headers, rows)\n        .then(() => resolve(\"\"))\n        .catch((error) => resolve(`Error: ${error.message}`));\n\n    } catch (error) {\n      resolve(`Error: ${error.message}`);\n    }\n  });\n}\n\n/**\n * SUNBURST custom function using the exact same specification as taskpane.js\n * Creates a sunburst chart from Excel data range\n * \n * @customfunction\n * @param {any[][]} data The data range including headers\n * @returns {string} Status message\n */\nfunction SUNBURST(data) {\n  return new Promise((resolve) => {\n    try {\n      if (!data || data.length < 2) {\n        resolve(\"Error: Need at least header row + one data row\");\n        return;\n      }\n\n      const headers = data[0];\n      const rows = data.slice(1);\n\n      if (headers.length < 2) {\n        resolve(\"Error: Sunburst chart requires at least 2 columns (Parent, Child, Value optional)\");\n        return;\n      }\n\n      const nodes = new Map();\n      rows.forEach((row, i) => {\n        const parent = row[headers[0]] || \"\";\n        const child = row[headers[1]] || `node_${i}`;\n        const value = headers.length >= 3 ? (parseFloat(row[headers[2]]) || 1) : 1;\n        \n        // Add parent node if it doesn't exist and is not empty\n        if (parent && !nodes.has(parent)) {\n          nodes.set(parent, {\n            id: parent,\n            parent: \"\",\n            name: parent,\n            size: 0 // Will be calculated later\n          });\n        }\n        \n        // Add child node\n        if (!nodes.has(child)) {\n          nodes.set(child, {\n            id: child,\n            parent: parent,\n            name: child,\n            size: value\n          });\n        } else {\n          // Update parent and value if child already exists\n          const existingNode = nodes.get(child);\n          existingNode.parent = parent;\n          existingNode.size = value;\n        }\n      });\n      \n      // Convert Map to array\n      const hierarchicalData = Array.from(nodes.values());\n      \n      // Find root nodes (nodes with no parent or parent not in dataset)\n      const allIds = new Set(hierarchicalData.map(d => d.id));\n      hierarchicalData.forEach(node => {\n        if (node.parent && !allIds.has(node.parent)) {\n          node.parent = \"\"; // Make it a root node if parent doesn't exist\n        }\n      });\n\n      // Calculate chart size based on data complexity\n      const nodeCount = hierarchicalData.length;\n      const chartSize = Math.max(400, Math.min(600, nodeCount * 15 + 300));\n\n      // Use EXACT specification from taskpane.js sunburst chart\n      const spec = {\n        \"$schema\": \"https://vega.github.io/schema/vega/v6.json\",\n        \"description\": \"Sunburst chart from Excel selection\",\n        \"width\": chartSize,\n        \"height\": chartSize,\n        \"padding\": 10,\n        \"autosize\": \"none\",\n        \"background\": \"white\",\n        \"config\": { \"view\": { \"stroke\": \"transparent\" }},\n\n        \"signals\": [\n          {\n            \"name\": \"centerX\",\n            \"update\": \"width / 2\"\n          },\n          {\n            \"name\": \"centerY\", \n            \"update\": \"height / 2\"\n          },\n          {\n            \"name\": \"outerRadius\",\n            \"update\": \"min(width, height) / 2 - 10\"\n          }\n        ],\n\n        \"data\": [\n          {\n            \"name\": \"tree\",\n            \"values\": hierarchicalData,\n            \"transform\": [\n              {\n                \"type\": \"stratify\",\n                \"key\": \"id\",\n                \"parentKey\": \"parent\"\n              },\n              {\n                \"type\": \"partition\",\n                \"field\": \"size\",\n                \"sort\": {\"field\": \"size\", \"order\": \"descending\"},\n                \"size\": [{\"signal\": \"2 * PI\"}, {\"signal\": \"outerRadius\"}],\n                \"as\": [\"a0\", \"r0\", \"a1\", \"r1\", \"depth\", \"children\"]\n              }\n            ]\n          }\n        ],\n\n        \"scales\": [\n          {\n            \"name\": \"color\",\n            \"type\": \"ordinal\",\n            \"domain\": {\"data\": \"tree\", \"field\": \"depth\"},\n            \"range\": [\n              \"#0078d4\", \"#00bcf2\", \"#40e0d0\", \"#00cc6a\", \"#10893e\", \n              \"#107c10\", \"#bad80a\", \"#ffb900\", \"#ff8c00\", \"#d13438\",\n              \"#8764b8\", \"#e3008c\", \"#00b7c3\", \"#038387\", \"#486991\"\n            ]\n          },\n          {\n            \"name\": \"opacity\",\n            \"type\": \"linear\",\n            \"domain\": {\"data\": \"tree\", \"field\": \"depth\"},\n            \"range\": [0.8, 0.4]\n          }\n        ],\n\n        \"marks\": [\n          {\n            \"type\": \"arc\",\n            \"from\": {\"data\": \"tree\"},\n            \"encode\": {\n              \"enter\": {\n                \"x\": {\"signal\": \"centerX\"},\n                \"y\": {\"signal\": \"centerY\"},\n                \"stroke\": {\"value\": \"white\"},\n                \"strokeWidth\": {\"value\": 1}\n              },\n              \"update\": {\n                \"startAngle\": {\"field\": \"a0\"},\n                \"endAngle\": {\"field\": \"a1\"},\n                \"innerRadius\": {\"field\": \"r0\"},\n                \"outerRadius\": {\"field\": \"r1\"},\n                \"fill\": {\"scale\": \"color\", \"field\": \"depth\"},\n                \"fillOpacity\": {\"scale\": \"opacity\", \"field\": \"depth\"}\n              }\n            }\n          },\n          {\n            \"type\": \"text\",\n            \"from\": {\"data\": \"tree\"},\n            \"encode\": {\n              \"enter\": {\n                \"x\": {\"signal\": \"centerX\"},\n                \"y\": {\"signal\": \"centerY\"},\n                \"radius\": {\"signal\": \"(datum.r0 + datum.r1) / 2\"},\n                \"theta\": {\"signal\": \"(datum.a0 + datum.a1) / 2\"},\n                \"fill\": {\"value\": \"#323130\"},\n                \"font\": {\"value\": \"Segoe UI\"},\n                \"fontSize\": {\"value\": 10},\n                \"fontWeight\": {\"value\": \"bold\"},\n                \"align\": {\"value\": \"center\"},\n                \"baseline\": {\"value\": \"middle\"}\n              },\n              \"update\": {\n                \"text\": {\n                  \"signal\": \"(datum.r1 - datum.r0) > 20 && (datum.a1 - datum.a0) > 0.3 ? datum.name : ''\"\n                },\n                \"opacity\": {\n                  \"signal\": \"(datum.r1 - datum.r0) > 20 && (datum.a1 - datum.a0) > 0.3 ? 1 : 0\"\n                }\n              }\n            }\n          }\n        ]\n      };\n\n      createChart(spec, \"sunburst\", headers, rows)\n        .then(() => resolve(\"\"))\n        .catch((error) => resolve(`Error: ${error.message}`));\n\n    } catch (error) {\n      resolve(`Error: ${error.message}`);\n    }\n  });\n}\n\n/**\n * TREEMAP custom function using the exact same specification as taskpane.js\n * Creates a treemap chart from Excel data range\n * \n * @customfunction\n * @param {any[][]} data The data range including headers\n * @returns {string} Status message\n */\nfunction TREEMAP(data) {\n  return new Promise((resolve) => {\n    try {\n      if (!data || data.length < 2) {\n        resolve(\"Error: Need at least header row + one data row\");\n        return;\n      }\n\n      const headers = data[0];\n      const rows = data.slice(1);\n\n      if (headers.length < 3) {\n        resolve(\"Error: Treemap chart requires 3 columns (Parent, Category, Value)\");\n        return;\n      }\n\n      let treeData;\n      \n      if (headers.length >= 3) {\n        // Hierarchical data with parent column\n        treeData = rows.map((d, i) => ({\n          id: `${d[headers[1]]}_${i}`,\n          name: d[headers[1]],\n          parent: d[headers[0]] || \"root\",\n          size: parseFloat(d[headers[2]]) || 0\n        }));\n        \n        // Add root and parent nodes\n        const parents = [...new Set(treeData.map(d => d.parent))];\n        parents.forEach(parent => {\n          if (parent !== \"root\" && !treeData.find(d => d.id === parent)) {\n            treeData.push({\n              id: parent,\n              name: parent,\n              parent: \"root\",\n              size: 0\n            });\n          }\n        });\n        \n        // Add root node\n        treeData.push({\n          id: \"root\",\n          name: \"Root\",\n          parent: \"\",\n          size: 0\n        });\n      } else {\n        // Simple flat data - create single level hierarchy\n        treeData = [\n          {\n            id: \"root\",\n            name: \"Root\", \n            parent: \"\",\n            size: 0\n          },\n          ...rows.map((d, i) => ({\n            id: `item_${i}`,\n            name: d[headers[1]],\n            parent: \"root\",\n            size: parseFloat(d[headers[2]]) || 0\n          }))\n        ];\n      }\n\n      // Use EXACT specification from taskpane.js treemap chart\n      const spec = {\n        $schema: \"https://vega.github.io/schema/vega/v5.json\",\n        description: \"Treemap visualization from Excel data\",\n        background: \"white\",\n        width: 600,\n        height: 400,\n        padding: 5,\n        autosize: \"fit\",\n        \n        data: [\n          {\n            name: \"tree\",\n            values: treeData,\n            transform: [\n              {\n                type: \"stratify\",\n                key: \"id\",\n                parentKey: \"parent\"\n              },\n              {\n                type: \"treemap\",\n                field: \"size\",\n                sort: { field: \"value\" },\n                round: true,\n                method: \"squarify\",\n                ratio: 1.6,\n                size: [{ signal: \"width\" }, { signal: \"height\" }]\n              }\n            ]\n          },\n          {\n            name: \"nodes\",\n            source: \"tree\",\n            transform: [\n              { type: \"filter\", expr: \"datum.children\" }\n            ]\n          },\n          {\n            name: \"leaves\", \n            source: \"tree\",\n            transform: [\n              { type: \"filter\", expr: \"!datum.children\" }\n            ]\n          }\n        ],\n        \n        scales: [\n          {\n            name: \"color\",\n            type: \"ordinal\",\n            domain: { data: \"nodes\", field: \"name\" },\n            range: [\n              \"#0078d4\", \"#00bcf2\", \"#40e0d0\", \"#00cc6a\", \"#10893e\",\n              \"#107c10\", \"#bad80a\", \"#ffb900\", \"#ff8c00\", \"#d13438\"\n            ]\n          },\n          {\n            name: \"fontSize\",\n            type: \"ordinal\", \n            domain: [0, 1, 2, 3],\n            range: [20, 16, 12, 10]\n          },\n          {\n            name: \"opacity\",\n            type: \"ordinal\",\n            domain: [0, 1, 2, 3], \n            range: [0.3, 0.6, 0.8, 1.0]\n          }\n        ],\n        \n        marks: [\n          {\n            type: \"rect\",\n            from: { data: \"nodes\" },\n            interactive: false,\n            encode: {\n              enter: {\n                fill: { scale: \"color\", field: \"name\" },\n                fillOpacity: { scale: \"opacity\", field: \"depth\" }\n              },\n              update: {\n                x: { field: \"x0\" },\n                y: { field: \"y0\" },\n                x2: { field: \"x1\" },\n                y2: { field: \"y1\" },\n                stroke: { value: \"#ffffff\" },\n                strokeWidth: { value: 1 }\n              }\n            }\n          },\n          {\n            type: \"rect\",\n            from: { data: \"leaves\" },\n            encode: {\n              enter: {\n                stroke: { value: \"#ffffff\" },\n                strokeWidth: { value: 2 }\n              },\n              update: {\n                x: { field: \"x0\" },\n                y: { field: \"y0\" },\n                x2: { field: \"x1\" },\n                y2: { field: \"y1\" },\n                fill: { value: \"transparent\" },\n                tooltip: {\n                  signal: `{'Category': datum.name, 'Value': datum.size, 'Parent': datum.parent}`\n                }\n              },\n              hover: {\n                fill: { value: \"#323130\" },\n                fillOpacity: { value: 0.1 }\n              }\n            }\n          },\n          {\n            type: \"text\",\n            from: { data: \"leaves\" },\n            interactive: false,\n            encode: {\n              enter: {\n                font: { value: \"Segoe UI, Arial, sans-serif\" },\n                align: { value: \"center\" },\n                baseline: { value: \"middle\" },\n                fill: { value: \"#323130\" },\n                fontWeight: { value: \"bold\" },\n                text: { field: \"name\" },\n                fontSize: { scale: \"fontSize\", field: \"depth\" }\n              },\n              update: {\n                x: { signal: \"0.5 * (datum.x0 + datum.x1)\" },\n                y: { signal: \"0.5 * (datum.y0 + datum.y1)\" },\n                opacity: {\n                  signal: \"(datum.x1 - datum.x0) > 50 && (datum.y1 - datum.y0) > 20 ? 1 : 0\"\n                }\n              }\n            }\n          }\n        ]\n      };\n\n      createChart(spec, \"treemap\", headers, rows)\n        .then(() => resolve(\"\"))\n        .catch((error) => resolve(`Error: ${error.message}`));\n\n    } catch (error) {\n      resolve(`Error: ${error.message}`);\n    }\n  });\n}\n\n/**\n * HISTOGRAM custom function using the exact same specification as taskpane.js\n * Creates a histogram from Excel data range\n * \n * @customfunction\n * @param {any[][]} data The data range including headers\n * @returns {string} Status message\n */\nfunction HISTOGRAM(data) {\n  return new Promise((resolve) => {\n    try {\n      if (!data || data.length < 2) {\n        resolve(\"Error: Need at least header row + one data row\");\n        return;\n      }\n\n      const headers = data[0];\n      const rows = data.slice(1);\n\n      if (headers.length < 1) {\n        resolve(\"Error: Histogram requires at least 1 column of numeric values\");\n        return;\n      }\n\n      // Expect a single numeric column (same as taskpane.js)\n      const processedData = rows\n        .filter(r => !isNaN(+r[0]))\n        .map(r => ({ value: +r[0] }));\n\n      if (processedData.length === 0) {\n        resolve(\"Error: No valid numeric data found for histogram\");\n        return;\n      }\n\n      // Use EXACT specification from taskpane.js histogram chart\n      const spec = {\n        \"$schema\": \"https://vega.github.io/schema/vega-lite/v6.json\",\n        \"description\": \"Histogram from Excel selection\",\n        \"data\": { \"values\": processedData },\n        \"mark\": \"bar\",\n        \"encoding\": {\n          \"x\": {\n            \"field\": \"value\",\n            \"bin\": { \"maxbins\": 20 },   // adjust bin count here\n            \"type\": \"quantitative\",\n            \"axis\": { \"title\": \"Value\" }\n          },\n          \"y\": {\n            \"aggregate\": \"count\",\n            \"type\": \"quantitative\",\n            \"axis\": { \"title\": \"Count\" }\n          }\n        }\n      };\n\n      createChart(spec, \"histogram\", headers, rows)\n        .then(() => resolve(\"\"))\n        .catch((error) => resolve(`Error: ${error.message}`));\n\n    } catch (error) {\n      resolve(`Error: ${error.message}`);\n    }\n  });\n}\n\n/**\n * ARC custom function using the exact same specification as taskpane.js\n * Creates an arc diagram from Excel data range\n * \n * @customfunction\n * @param {any[][]} data The data range including headers\n * @returns {string} Status message\n */\nfunction ARC(data) {\n  return new Promise((resolve) => {\n    try {\n      if (!data || data.length < 2) {\n        resolve(\"Error: Need at least header row + one data row\");\n        return;\n      }\n\n      const headers = data[0];\n      const rows = data.slice(1);\n\n      if (headers.length < 2) {\n        resolve(\"Error: Arc chart requires at least 2 columns (Source, Target, Weight optional)\");\n        return;\n      }\n\n      // Convert rows -> objects (same as taskpane.js)\n      const processedData = rows.map(row => {\n        let obj = {};\n        headers.forEach((h, i) => {\n          obj[h] = row[i];\n        });\n        return obj;\n      });\n\n      // EXACT data processing from taskpane.js - Transform Excel data for arc chart\n      const edges = processedData.map((row, index) => ({\n        source: row[headers[0]],\n        target: row[headers[1]],\n        value: headers.length >= 3 && row[headers[2]] ? row[headers[2]] : 1,\n        group: headers.length >= 4 && row[headers[3]] ? row[headers[3]] : \"default\"\n      }));\n\n      // Get unique nodes from edges\n      const nodeMap = new Map();\n      edges.forEach(edge => {\n        if (!nodeMap.has(edge.source)) {\n          nodeMap.set(edge.source, { \n            name: edge.source, \n            group: edge.group,\n            index: nodeMap.size\n          });\n        }\n        if (!nodeMap.has(edge.target)) {\n          nodeMap.set(edge.target, { \n            name: edge.target, \n            group: edge.group,\n            index: nodeMap.size\n          });\n        }\n      });\n\n      const nodes = Array.from(nodeMap.values());\n\n      // Transform edges to use node indices\n      const edgesWithIndices = edges.map(edge => ({\n        source: nodeMap.get(edge.source).index,\n        target: nodeMap.get(edge.target).index,\n        value: edge.value\n      }));\n\n      // Use EXACT specification from taskpane.js arc chart\n      const spec = {\n        $schema: \"https://vega.github.io/schema/vega/v5.json\",\n        description: \"Arc diagram from Excel selection\",\n        width: Math.max(600, nodes.length * 40),\n        height: 300,\n        padding: { top: 20, bottom: 80, left: 20, right: 20 },\n        background: \"white\",\n        config: { view: { stroke: \"transparent\" }},\n        data: [\n          {\n            name: \"edges\",\n            values: edgesWithIndices\n          },\n          {\n            name: \"sourceDegree\",\n            source: \"edges\",\n            transform: [\n              { type: \"aggregate\", groupby: [\"source\"], as: [\"count\"] }\n            ]\n          },\n          {\n            name: \"targetDegree\", \n            source: \"edges\",\n            transform: [\n              { type: \"aggregate\", groupby: [\"target\"], as: [\"count\"] }\n            ]\n          },\n          {\n            name: \"nodes\",\n            values: nodes,\n            transform: [\n              { type: \"window\", ops: [\"rank\"], as: [\"order\"] },\n              {\n                type: \"lookup\", from: \"sourceDegree\", key: \"source\",\n                fields: [\"index\"], as: [\"sourceDegree\"],\n                default: { count: 0 }\n              },\n              {\n                type: \"lookup\", from: \"targetDegree\", key: \"target\", \n                fields: [\"index\"], as: [\"targetDegree\"],\n                default: { count: 0 }\n              },\n              {\n                type: \"formula\", as: \"degree\",\n                expr: \"(datum.sourceDegree.count || 0) + (datum.targetDegree.count || 0)\"\n              }\n            ]\n          }\n        ],\n\n        scales: [\n          {\n            name: \"position\",\n            type: \"band\",\n            domain: { data: \"nodes\", field: \"order\", sort: true },\n            range: \"width\"\n          },\n          {\n            name: \"color\",\n            type: \"ordinal\",\n            range: { scheme: \"category20\" },\n            domain: { data: \"nodes\", field: \"group\" }\n          }\n        ],\n\n        marks: [\n          {\n            type: \"symbol\",\n            name: \"layout\",\n            interactive: false,\n            from: { data: \"nodes\" },\n            encode: {\n              enter: { opacity: { value: 0 } },\n              update: {\n                x: { scale: \"position\", field: \"order\" },\n                y: { value: 0 },\n                size: { field: \"degree\", mult: 8, offset: 50 },\n                fill: { scale: \"color\", field: \"group\" }\n              }\n            }\n          },\n          {\n            type: \"path\",\n            from: { data: \"edges\" },\n            encode: {\n              update: {\n                stroke: { value: \"#0078d4\" },\n                strokeOpacity: { value: 0.4 },\n                strokeWidth: { field: \"value\", mult: 2, offset: 1 }\n              }\n            },\n            transform: [\n              {\n                type: \"lookup\", from: \"layout\", key: \"datum.index\",\n                fields: [\"datum.source\", \"datum.target\"],\n                as: [\"sourceNode\", \"targetNode\"]\n              },\n              {\n                type: \"linkpath\",\n                sourceX: { expr: \"min(datum.sourceNode.x, datum.targetNode.x)\" },\n                targetX: { expr: \"max(datum.sourceNode.x, datum.targetNode.x)\" },\n                sourceY: { expr: \"0\" },\n                targetY: { expr: \"0\" },\n                shape: \"arc\"\n              }\n            ]\n          },\n          {\n            type: \"symbol\",\n            from: { data: \"layout\" },\n            encode: {\n              update: {\n                x: { field: \"x\" },\n                y: { field: \"y\" },\n                fill: { field: \"fill\" },\n                size: { field: \"size\" },\n                stroke: { value: \"white\" },\n                strokeWidth: { value: 1 },\n                tooltip: { \n                  signal: \"{'Node': datum.datum.name, 'Group': datum.datum.group, 'Connections': datum.datum.degree}\" \n                }\n              }\n            }\n          },\n          {\n            type: \"text\",\n            from: { data: \"nodes\" },\n            encode: {\n              update: {\n                x: { scale: \"position\", field: \"order\" },\n                y: { value: 25 },\n                fontSize: { value: 10 },\n                align: { value: \"center\" },\n                baseline: { value: \"top\" },\n                angle: { value: -45 },\n                text: { field: \"name\" },\n                fill: { value: \"#323130\" },\n                font: { value: \"Segoe UI\" }\n              }\n            }\n          }\n        ],\n        \n        config: {\n          view: { stroke: \"transparent\" },\n          font: \"Segoe UI\",\n          text: { font: \"Segoe UI\", fontSize: 10, fill: \"#605e5c\" }\n        }\n      };\n\n      createChart(spec, \"arc\", headers, rows)\n        .then(() => resolve(\"\"))\n        .catch((error) => resolve(`Error: ${error.message}`));\n\n    } catch (error) {\n      resolve(`Error: ${error.message}`);\n    }\n  });\n}\n\n// Register all custom functions\nif (typeof CustomFunctions !== 'undefined') {\n  CustomFunctions.associate(\"LINE\", LINE);\n  CustomFunctions.associate(\"BAR\", BAR);\n  CustomFunctions.associate(\"PIE\", PIE);\n  CustomFunctions.associate(\"AREA\", AREA);\n  CustomFunctions.associate(\"SCATTER\", SCATTER);\n  CustomFunctions.associate(\"RADIAL\", RADIAL);\n  CustomFunctions.associate(\"BOX\", BOX);\n  CustomFunctions.associate(\"RADAR\", RADAR);\n  CustomFunctions.associate(\"WATERFALL\", WATERFALL);\n  CustomFunctions.associate(\"SUNBURST\", SUNBURST);\n  CustomFunctions.associate(\"TREEMAP\", TREEMAP);\n  CustomFunctions.associate(\"HISTOGRAM\", HISTOGRAM);\n  CustomFunctions.associate(\"ARC\", ARC);\n}\nCustomFunctions.associate(\"LINE\", LINE);\nCustomFunctions.associate(\"BAR\", BAR);\nCustomFunctions.associate(\"PIE\", PIE);\nCustomFunctions.associate(\"AREA\", AREA);\nCustomFunctions.associate(\"SCATTER\", SCATTER);\nCustomFunctions.associate(\"RADIAL\", RADIAL);\nCustomFunctions.associate(\"BOX\", BOX);\nCustomFunctions.associate(\"RADAR\", RADAR);\nCustomFunctions.associate(\"WATERFALL\", WATERFALL);\nCustomFunctions.associate(\"SUNBURST\", SUNBURST);\nCustomFunctions.associate(\"TREEMAP\", TREEMAP);\nCustomFunctions.associate(\"HISTOGRAM\", HISTOGRAM);\nCustomFunctions.associate(\"ARC\", ARC);"],"names":["LINE","data","Promise","resolve","length","headers","rows","slice","processedData","map","row","obj","forEach","h","i","transformedData","valueColumns","colName","undefined","push","_defineProperty","parseFloat","spec","$schema","description","background","config","view","stroke","values","mark","type","point","tooltip","strokeWidth","encoding","x","field","axis","title","labelFontSize","titleFontSize","labelAngle","y","color","scale","scheme","legend","font","labelColor","titleColor","gridColor","size","filled","createChart","then","catch","error","concat","message","BAR","_objectSpread","PIE","some","isNaN","outerRadius","theta","AREA","opacity","SCATTER","zero","shape","RADIAL","layer","innerRadius","radiusOffset","text","stack","radius","rangeMin","BOX","filter","r","category","value","extent","RADAR","radarData","dimensions","seriesIndex","seriesName","dimension","indexOf","series","uniqueDimensions","_toConsumableArray","Set","d","width","height","padding","autosize","signals","name","scales","range","domain","nice","domainMin","encode","enter","marks","zindex","from","facet","interpolate","fill","fillOpacity","strokeOpacity","x2","y2","align","test","baseline","fontWeight","fontSize","WATERFALL","processedDataRaw","numDataPoints","dynamicWidth","Math","max","min","maxAmount","apply","abs","transform","sort","paddingInner","paddingOuter","condition","SUNBURST","nodes","Map","parent","child","has","set","id","existingNode","get","hierarchicalData","Array","allIds","node","nodeCount","chartSize","TREEMAP","treeData","find","key","parentKey","round","method","ratio","signal","source","expr","interactive","update","hover","HISTOGRAM","ARC","edges","index","target","group","nodeMap","edge","edgesWithIndices","top","bottom","left","right","groupby","as","ops","fields","default","count","mult","offset","sourceX","targetX","sourceY","targetY","angle","CustomFunctions","associate"],"sourceRoot":""}