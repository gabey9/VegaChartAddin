{"version":3,"file":"functions.js","mappings":";uvCACA,IAAAA,EAAAC,EAAAC,EAAA,mBAAAC,OAAAA,OAAA,GAAAC,EAAAF,EAAAG,UAAA,aAAAC,EAAAJ,EAAAK,aAAA,yBAAAC,EAAAN,EAAAE,EAAAE,EAAAE,GAAA,IAAAC,EAAAL,GAAAA,EAAAM,qBAAAC,EAAAP,EAAAO,EAAAC,EAAAC,OAAAC,OAAAL,EAAAC,WAAA,OAAAK,EAAAH,EAAA,mBAAAV,EAAAE,EAAAE,GAAA,IAAAE,EAAAC,EAAAG,EAAAI,EAAA,EAAAC,EAAAX,GAAA,GAAAY,GAAA,EAAAC,EAAA,CAAAF,EAAA,EAAAb,EAAA,EAAAgB,EAAApB,EAAAqB,EAAAC,EAAAN,EAAAM,EAAAC,KAAAvB,EAAA,GAAAsB,EAAA,SAAArB,EAAAC,GAAA,OAAAM,EAAAP,EAAAQ,EAAA,EAAAG,EAAAZ,EAAAmB,EAAAf,EAAAF,EAAAmB,CAAA,YAAAC,EAAApB,EAAAE,GAAA,IAAAK,EAAAP,EAAAU,EAAAR,EAAAH,EAAA,GAAAiB,GAAAF,IAAAV,GAAAL,EAAAgB,EAAAO,OAAAvB,IAAA,KAAAK,EAAAE,EAAAS,EAAAhB,GAAAqB,EAAAH,EAAAF,EAAAQ,EAAAjB,EAAA,GAAAN,EAAA,GAAAI,EAAAmB,IAAArB,KAAAQ,EAAAJ,GAAAC,EAAAD,EAAA,OAAAC,EAAA,MAAAD,EAAA,GAAAA,EAAA,GAAAR,GAAAQ,EAAA,IAAAc,KAAAhB,EAAAJ,EAAA,GAAAoB,EAAAd,EAAA,KAAAC,EAAA,EAAAU,EAAAC,EAAAhB,EAAAe,EAAAf,EAAAI,EAAA,IAAAc,EAAAG,IAAAnB,EAAAJ,EAAA,GAAAM,EAAA,GAAAJ,GAAAA,EAAAqB,KAAAjB,EAAA,GAAAN,EAAAM,EAAA,GAAAJ,EAAAe,EAAAf,EAAAqB,EAAAhB,EAAA,OAAAH,GAAAJ,EAAA,SAAAmB,EAAA,MAAAH,GAAA,EAAAd,CAAA,iBAAAE,EAAAW,EAAAQ,GAAA,GAAAT,EAAA,QAAAU,UAAA,oCAAAR,GAAA,IAAAD,GAAAK,EAAAL,EAAAQ,GAAAhB,EAAAQ,EAAAL,EAAAa,GAAAxB,EAAAQ,EAAA,EAAAT,EAAAY,KAAAM,GAAA,CAAAV,IAAAC,EAAAA,EAAA,GAAAA,EAAA,IAAAU,EAAAf,GAAA,GAAAkB,EAAAb,EAAAG,IAAAO,EAAAf,EAAAQ,EAAAO,EAAAC,EAAAR,GAAA,OAAAI,EAAA,EAAAR,EAAA,IAAAC,IAAAH,EAAA,QAAAL,EAAAO,EAAAF,GAAA,MAAAL,EAAAA,EAAA0B,KAAAnB,EAAAI,IAAA,MAAAc,UAAA,wCAAAzB,EAAA2B,KAAA,OAAA3B,EAAAW,EAAAX,EAAA4B,MAAApB,EAAA,IAAAA,EAAA,YAAAA,IAAAR,EAAAO,EAAAsB,SAAA7B,EAAA0B,KAAAnB,GAAAC,EAAA,IAAAG,EAAAc,UAAA,oCAAApB,EAAA,YAAAG,EAAA,GAAAD,EAAAR,CAAA,UAAAC,GAAAiB,EAAAC,EAAAf,EAAA,GAAAQ,EAAAV,EAAAyB,KAAAvB,EAAAe,MAAAE,EAAA,YAAApB,GAAAO,EAAAR,EAAAS,EAAA,EAAAG,EAAAX,CAAA,SAAAe,EAAA,UAAAa,MAAA5B,EAAA2B,KAAAV,EAAA,GAAAhB,EAAAI,EAAAE,IAAA,GAAAI,CAAA,KAAAS,EAAA,YAAAV,IAAA,UAAAoB,IAAA,UAAAC,IAAA,CAAA/B,EAAAY,OAAAoB,eAAA,IAAAxB,EAAA,GAAAL,GAAAH,EAAAA,EAAA,GAAAG,QAAAW,EAAAd,EAAA,GAAAG,EAAA,yBAAAH,GAAAW,EAAAoB,EAAAtB,UAAAC,EAAAD,UAAAG,OAAAC,OAAAL,GAAA,SAAAO,EAAAhB,GAAA,OAAAa,OAAAqB,eAAArB,OAAAqB,eAAAlC,EAAAgC,IAAAhC,EAAAmC,UAAAH,EAAAjB,EAAAf,EAAAM,EAAA,sBAAAN,EAAAU,UAAAG,OAAAC,OAAAF,GAAAZ,CAAA,QAAA+B,EAAArB,UAAAsB,EAAAjB,EAAAH,EAAA,cAAAoB,GAAAjB,EAAAiB,EAAA,cAAAD,GAAAA,EAAAK,YAAA,oBAAArB,EAAAiB,EAAA1B,EAAA,qBAAAS,EAAAH,GAAAG,EAAAH,EAAAN,EAAA,aAAAS,EAAAH,EAAAR,EAAA,yBAAAW,EAAAH,EAAA,oDAAAyB,EAAA,kBAAAC,EAAA9B,EAAA+B,EAAAvB,EAAA,cAAAD,EAAAf,EAAAE,EAAAE,EAAAH,GAAA,IAAAO,EAAAK,OAAA2B,eAAA,IAAAhC,EAAA,gBAAAR,GAAAQ,EAAA,EAAAO,EAAA,SAAAf,EAAAE,EAAAE,EAAAH,GAAA,SAAAK,EAAAJ,EAAAE,GAAAW,EAAAf,EAAAE,EAAA,SAAAF,GAAA,YAAAyC,QAAAvC,EAAAE,EAAAJ,EAAA,GAAAE,EAAAM,EAAAA,EAAAR,EAAAE,EAAA,CAAA2B,MAAAzB,EAAAsC,YAAAzC,EAAA0C,cAAA1C,EAAA2C,UAAA3C,IAAAD,EAAAE,GAAAE,GAAAE,EAAA,UAAAA,EAAA,WAAAA,EAAA,cAAAS,EAAAf,EAAAE,EAAAE,EAAAH,EAAA,UAAA4C,EAAA3C,EAAAF,GAAA,IAAAC,EAAA,oBAAAE,QAAAD,EAAAC,OAAAE,WAAAH,EAAA,kBAAAD,EAAA,IAAA6C,MAAAC,QAAA7C,KAAAD,EAAA+C,EAAA9C,KAAAF,GAAAE,GAAA,iBAAAA,EAAAsB,OAAA,CAAAvB,IAAAC,EAAAD,GAAA,IAAAgD,EAAA,EAAAC,EAAA,oBAAAC,EAAAD,EAAA9C,EAAA,kBAAA6C,GAAA/C,EAAAsB,OAAA,CAAAI,MAAA,IAAAA,MAAA,EAAAC,MAAA3B,EAAA+C,KAAA,EAAAjD,EAAA,SAAAE,GAAA,MAAAA,CAAA,EAAAc,EAAAkC,EAAA,WAAAxB,UAAA,6IAAApB,EAAAe,GAAA,EAAAT,GAAA,SAAAuC,EAAA,WAAAlD,EAAAA,EAAA0B,KAAAzB,EAAA,EAAAE,EAAA,eAAAF,EAAAD,EAAAmD,OAAA,OAAA/B,EAAAnB,EAAA0B,KAAA1B,CAAA,EAAAF,EAAA,SAAAE,GAAAU,GAAA,EAAAN,EAAAJ,CAAA,EAAAc,EAAA,eAAAK,GAAA,MAAApB,EAAA6B,QAAA7B,EAAA6B,QAAA,YAAAlB,EAAA,MAAAN,CAAA,aAAA0C,EAAA9C,EAAAmB,GAAA,GAAAnB,EAAA,qBAAAA,EAAA,OAAAmD,EAAAnD,EAAAmB,GAAA,IAAApB,EAAA,GAAAqD,SAAA3B,KAAAzB,GAAAqD,MAAA,uBAAAtD,GAAAC,EAAAsD,cAAAvD,EAAAC,EAAAsD,YAAAC,MAAA,QAAAxD,GAAA,QAAAA,EAAA6C,MAAAY,KAAAxD,GAAA,cAAAD,GAAA,2CAAA0D,KAAA1D,GAAAoD,EAAAnD,EAAAmB,QAAA,YAAAgC,EAAAnD,EAAAmB,IAAA,MAAAA,GAAAA,EAAAnB,EAAAsB,UAAAH,EAAAnB,EAAAsB,QAAA,QAAAxB,EAAA,EAAAI,EAAA0C,MAAAzB,GAAArB,EAAAqB,EAAArB,IAAAI,EAAAJ,GAAAE,EAAAF,GAAA,OAAAI,CAAA,UAAAwD,EAAAxD,EAAAH,EAAAD,EAAAE,EAAAI,EAAAe,EAAAZ,GAAA,QAAAD,EAAAJ,EAAAiB,GAAAZ,GAAAG,EAAAJ,EAAAqB,KAAA,OAAAzB,GAAA,YAAAJ,EAAAI,EAAA,CAAAI,EAAAoB,KAAA3B,EAAAW,GAAAiD,QAAAC,QAAAlD,GAAAmD,KAAA7D,EAAAI,EAAA,UAAA0D,EAAA5D,GAAA,sBAAAH,EAAA,KAAAD,EAAAiE,UAAA,WAAAJ,QAAA,SAAA3D,EAAAI,GAAA,IAAAe,EAAAjB,EAAA8D,MAAAjE,EAAAD,GAAA,SAAAmE,EAAA/D,GAAAwD,EAAAvC,EAAAnB,EAAAI,EAAA6D,EAAAC,EAAA,OAAAhE,EAAA,UAAAgE,EAAAhE,GAAAwD,EAAAvC,EAAAnB,EAAAI,EAAA6D,EAAAC,EAAA,QAAAhE,EAAA,CAAA+D,OAAA,eAAAE,EAAArE,EAAAE,GAAA,IAAAD,EAAAY,OAAAyD,KAAAtE,GAAA,GAAAa,OAAA0D,sBAAA,KAAAjE,EAAAO,OAAA0D,sBAAAvE,GAAAE,IAAAI,EAAAA,EAAAkE,OAAA,SAAAtE,GAAA,OAAAW,OAAA4D,yBAAAzE,EAAAE,GAAAwC,UAAA,IAAAzC,EAAAyE,KAAAR,MAAAjE,EAAAK,EAAA,QAAAL,CAAA,UAAA0E,EAAA3E,GAAA,QAAAE,EAAA,EAAAA,EAAA+D,UAAAzC,OAAAtB,IAAA,KAAAD,EAAA,MAAAgE,UAAA/D,GAAA+D,UAAA/D,GAAA,GAAAA,EAAA,EAAAmE,EAAAxD,OAAAZ,IAAA,GAAA2E,QAAA,SAAA1E,GAAA2E,EAAA7E,EAAAE,EAAAD,EAAAC,GAAA,GAAAW,OAAAiE,0BAAAjE,OAAAkE,iBAAA/E,EAAAa,OAAAiE,0BAAA7E,IAAAoE,EAAAxD,OAAAZ,IAAA2E,QAAA,SAAA1E,GAAAW,OAAA2B,eAAAxC,EAAAE,EAAAW,OAAA4D,yBAAAxE,EAAAC,GAAA,UAAAF,CAAA,UAAA6E,EAAA7E,EAAAE,EAAAD,GAAA,OAAAC,EAAA,SAAAD,GAAA,IAAAO,EAAA,SAAAP,GAAA,aAAA+E,EAAA/E,KAAAA,EAAA,OAAAA,EAAA,IAAAD,EAAAC,EAAAE,OAAA8E,aAAA,YAAAjF,EAAA,KAAAQ,EAAAR,EAAA2B,KAAA1B,EAAAC,UAAA,aAAA8E,EAAAxE,GAAA,OAAAA,EAAA,UAAAkB,UAAA,uDAAAwD,OAAAjF,EAAA,CAAAkF,CAAAlF,GAAA,gBAAA+E,EAAAxE,GAAAA,EAAAA,EAAA,GAAA4E,CAAAlF,MAAAF,EAAAa,OAAA2B,eAAAxC,EAAAE,EAAA,CAAA2B,MAAA5B,EAAAyC,YAAA,EAAAC,cAAA,EAAAC,UAAA,IAAA5C,EAAAE,GAAAD,EAAAD,CAAA,CASA,SAASqF,EAAKC,EAAMC,GAClB,OAAO,IAAI1B,QAAQ,SAACC,GAClB,IACE,IAAKwB,GAAQA,EAAK9D,OAAS,EAEzB,YADAsC,EAAQ,kDAIV,IAAM0B,EAAUF,EAAK,GAIfG,EAHOH,EAAK/B,MAAM,GAGGmC,IAAI,SAAAC,GAC7B,IAAIC,EAAM,CAAC,EAIX,OAHAJ,EAAQZ,QAAQ,SAACiB,EAAGrF,GAClBoF,EAAIC,GAAKF,EAAInF,EACf,GACOoF,CACT,GAGME,EAAkB,GAClBC,EAAeP,EAAQjC,MAAM,GACnCkC,EAAcb,QAAQ,SAAAe,GACpBI,EAAanB,QAAQ,SAAAoB,GACE,OAAjBL,EAAIK,SAAsCC,IAAjBN,EAAIK,IAA2C,KAAjBL,EAAIK,IAC7DF,EAAgBpB,KAAIG,EAAAA,EAAAA,EAAC,CAAC,EACnBW,EAAQ,GAAKG,EAAIH,EAAQ,KAAG,SACrBQ,GAAO,QACRE,WAAWP,EAAIK,KAAa,GAGzC,EACF,GAkEAG,GA/DUtB,EAAA,CACRuB,QAAS,kDACTC,YAAa,+CACbC,WAAY,QACZC,OAAQ,CAAEC,KAAM,CAAEC,OAAQ,gBAC1BnB,KAAM,CAAEoB,OAAQZ,GAChBa,KAAM,CACJC,KAAM,OACNC,OAAO,EACPC,SAAS,EACTC,YAAa,GAEfC,SAAU,CACRC,EAAG,CACDC,MAAO1B,EAAQ,GACfoB,KAAM,UACNO,KAAM,CACJC,MAAO5B,EAAQ,GACf6B,cAAe,GACfC,cAAe,GACfC,WAAY,IAGhBrG,EAAG,CACDgG,MAAO,QACPN,KAAM,eACNO,KAAM,CACJC,MAAO,QACPC,cAAe,GACfC,cAAe,KAGnBE,MAAO,CACLN,MAAO,SACPN,KAAM,UACNa,MAAO,CACLC,OAAQ,cAEVC,OAAQ,CACNP,MAAO,SACPE,cAAe,GACfD,cAAe,OAGpB,SACO,CACNO,KAAM,WACNT,KAAM,CACJU,WAAY,UACZC,WAAY,UACZC,UAAW,WAEbJ,OAAQ,CACNG,WAAY,UACZD,WAAY,WAEdhB,MAAO,CACLmB,KAAM,GACNC,QAAQ,KAKI,OADF,QAAHC,OAAW3C,EAAW4C,QAAQC,QAAQ,gBAAiB,OAEjErE,KAAK,kBAAMD,EAAQ,OAAO,GAC1BuE,MAAM,SAACC,GAAK,OAAKxE,EAAQ,UAADoE,OAAWI,EAAMC,SAAU,EAExD,CAAE,MAAOD,GACPxE,EAAQ,UAADoE,OAAWI,EAAMC,SAC1B,CACF,EACF,CAYA,SAASC,EAAIlD,EAAMC,GACjB,OAAO,IAAI1B,QAAQ,SAACC,GAClB,IACE,IAAKwB,GAAQA,EAAK9D,OAAS,EAEzB,YADAsC,EAAQ,kDAIV,IAAM0B,EAAUF,EAAK,GAqErBa,GAxDUtB,EAAA,CACRuB,QAAS,kDACTC,YAAa,iCACbC,WAAY,QACZC,OAAQ,CAAEC,KAAM,CAAEC,OAAQ,gBAC1BnB,KAAM,CAAEoB,OAjBGpB,EAAK/B,MAAM,GAGGmC,IAAI,SAAAC,GAC7B,IAAIC,EAAM,CAAC,EAIX,OAHAJ,EAAQZ,QAAQ,SAACiB,EAAGrF,GAClBoF,EAAIC,GAAKF,EAAInF,EACf,GACOoF,CACT,IASEe,KAAM,CACJC,KAAM,MACNE,SAAS,GAEXE,SAAQrC,EAAA,CACNsC,EAAG,CACDC,MAAO1B,EAAQ,GACfoB,KAAM,UACNO,KAAM,CACJC,MAAO5B,EAAQ,GACf6B,cAAe,GACfC,cAAe,KAGnBpG,EAAG,CACDgG,MAAO1B,EAAQ,GACfoB,KAAM,eACNO,KAAM,CACJC,MAAO5B,EAAQ,GACf6B,cAAe,GACfC,cAAe,MAIf9B,EAAQhE,QAAU,GAAK,CACzBgG,MAAO,CACLN,MAAO1B,EAAQ,GACfoB,KAAM,UACNe,OAAQ,CACNP,MAAO5B,EAAQ,GACf8B,cAAe,GACfD,cAAe,QAItB,SACO,CACNO,KAAM,WACNT,KAAM,CACJU,WAAY,UACZC,WAAY,UACZC,UAAW,WAEbJ,OAAQ,CACNG,WAAY,UACZD,WAAY,aAKA,MADF,OAAHK,OAAU3C,EAAW4C,QAAQC,QAAQ,gBAAiB,OAEhErE,KAAK,kBAAMD,EAAQ,MAAM,GACzBuE,MAAM,SAACC,GAAK,OAAKxE,EAAQ,UAADoE,OAAWI,EAAMC,SAAU,EAExD,CAAE,MAAOD,GACPxE,EAAQ,UAADoE,OAAWI,EAAMC,SAC1B,CACF,EACF,CAYA,SAASE,EAAMnD,EAAMC,GACnB,OAAO,IAAI1B,QAAQ,SAACC,GAClB,IACE,IAAKwB,GAAQA,EAAK9D,OAAS,EAEzB,YADAsC,EAAQ,kDAIV,IAAM0B,EAAUF,EAAK,GACfoD,EAAOpD,EAAK/B,MAAM,GAExB,GAAIiC,EAAQhE,OAAS,EAEnB,YADAsC,EAAQ,oEAKV,IAAM6E,EAAWD,EAAK,GA+HtBvC,GA1Ha,CACX,QAAW,6CACX,YAAe,mCACf,MAAS,IACT,OAAU,IACV,WAAc,QACd,OAAU,CAAE,KAAQ,CAAE,OAAU,gBAEhC,QAAW,CACT,CAAC,KAAQ,UAAW,OAAU,aAC9B,CAAC,KAAQ,UAAW,OAAU,cAC9B,CAAC,KAAQ,cAAe,OAAU,+BAClC,CAAC,KAAQ,cAAe,OAAU,oCAClC,CAAC,KAAQ,YAAa,MAjBRD,WAAWyC,EAAS,KAAO,GAkBzC,CAAC,KAAQ,WAAY,MAhBR,GAiBb,CAAC,KAAQ,WAAY,MAlBRzC,WAAWyC,EAAS,KAAO,KAmBxC,CAAC,KAAQ,YAAa,OAAU,2CAChC,CAAC,KAAQ,aAAc,OAAU,6BACjC,CAAC,KAAQ,kBAAmB,MAAS,WACrC,CAAC,KAAQ,YAAa,MAAS,WAC/B,CAAC,KAAQ,cAAe,MAAS,WACjC,CAAC,KAAQ,aAAc,OAAU,gBAGnC,OAAU,CACR,CACE,KAAQ,aACR,KAAQ,SACR,OAAU,CAAC,CAAC,OAAU,YAAa,CAAC,OAAU,aAC9C,MAAS,CAAC,CAAC,OAAU,SAAU,CAAC,OAAU,UAE5C,CACE,KAAQ,cACR,KAAQ,SACR,OAAU,CAAC,CAAC,OAAU,YAAa,CAAC,OAAU,aAC9C,MAAS,EAAE,GAAI,MAInB,MAAS,CACP,CACE,KAAQ,MACR,KAAQ,QACR,OAAU,CACR,MAAS,CACP,EAAK,CAAC,OAAU,WAChB,EAAK,CAAC,OAAU,WAChB,WAAc,CAAC,OAAU,SACzB,SAAY,CAAC,OAAU,QACvB,YAAe,CAAC,OAAU,eAC1B,YAAe,CAAC,OAAU,eAC1B,KAAQ,CAAC,OAAU,sBAIzB,CACE,KAAQ,MACR,OAAU,CACR,MAAS,CAAC,WAAc,CAAC,OAAU,UACnC,OAAU,CACR,EAAK,CAAC,OAAU,WAChB,EAAK,CAAC,OAAU,WAChB,YAAe,CAAC,OAAU,eAC1B,YAAe,CAAC,OAAU,eAC1B,SAAY,CAAC,MAAS,aAAc,OAAU,aAC9C,KAAQ,CAAC,OAAU,gBAIzB,CACE,KAAQ,OACR,YAAe,qCACf,OAAU,CACR,MAAS,CACP,EAAK,CAAC,OAAU,WAChB,EAAK,CAAC,OAAU,6BAChB,SAAY,CAAC,MAAS,UACtB,MAAS,CAAC,MAAS,UACnB,SAAY,CAAC,OAAU,kBACvB,KAAQ,CAAC,MAAS,YAClB,WAAc,CAAC,MAAS,SAE1B,OAAU,CACR,KAAQ,CAAC,OAAU,wEACnB,KAAQ,CAAC,OAAU,gBAIzB,CACE,KAAQ,SACR,KAAQ,SACR,OAAU,CACR,MAAS,CAAC,EAAK,CAAC,OAAU,WAAY,EAAK,CAAC,OAAU,YACtD,OAAU,CACR,MAAS,CACP,OAAU,oEAEZ,MAAS,CAAC,OAAU,YAAa,MAAS,eAC1C,KAAQ,CAAC,OAAU,KACnB,OAAU,CAAC,OAAU,eACrB,KAAQ,CAAC,OAAU,kBAIzB,CACE,KAAQ,SACR,YAAe,gBACf,OAAU,CACR,MAAS,CACP,EAAK,CAAC,OAAU,WAChB,EAAK,CAAC,OAAU,WAChB,MAAS,CAAC,MAAS,UACnB,KAAQ,CAAC,OAAU,0BACnB,KAAQ,CAAC,OAAU,eACnB,OAAU,CAAC,MAAS,SACpB,YAAe,CAAC,MAAS,QAOjB,QADF,SAAHT,OAAY3C,EAAW4C,QAAQC,QAAQ,gBAAiB,OAElErE,KAAK,kBAAMD,EAAQ,QAAQ,GAC3BuE,MAAM,SAACC,GAAK,OAAKxE,EAAQ,UAADoE,OAAWI,EAAMC,SAAU,EAExD,CAAE,MAAOD,GACPxE,EAAQ,UAADoE,OAAWI,EAAMC,SAC1B,CACF,EACF,CAYA,SAASK,EAAItD,EAAMC,GACjB,OAAO,IAAI1B,QAAQ,SAACC,GAClB,IACE,IAAKwB,GAAQA,EAAK9D,OAAS,EAEzB,YADAsC,EAAQ,kDAIV,IAAM0B,EAAUF,EAAK,GACfoD,EAAOpD,EAAK/B,MAAM,GAExB,GAAIiC,EAAQhE,OAAS,EAEnB,YADAsC,EAAQ,yDAMV,GADyB4E,EAAKG,KAAK,SAAAlD,GAAG,OAAImD,MAAMnD,EAAI,KAAOA,EAAI,IAAM,CAAC,GAGpE,YADA7B,EAAQ,oDA2BVqC,GAba,CACXC,QAAS,kDACTE,WAAY,QACZC,OAAQ,CAAEC,KAAM,CAAEC,OAAQ,gBAC1BJ,YAAa,iCACbf,KAAM,CAAEoB,OAdYgC,EAAKhD,IAAI,SAAAC,GAC7B,IAAIC,EAAM,CAAC,EAIX,OAHAJ,EAAQZ,QAAQ,SAACiB,EAAGrF,GAClBoF,EAAIC,GAAKF,EAAInF,EACf,GACOoF,CACT,IASEe,KAAM,CAAEC,KAAM,MAAOmC,YAAa,KAClC/B,SAAU,CACRgC,MAAO,CAAE9B,MAAO1B,EAAQ,GAAIoB,KAAM,gBAClCY,MAAO,CAAEN,MAAO1B,EAAQ,GAAIoB,KAAM,aAIpB,MADF,OAAHsB,OAAU3C,EAAW4C,QAAQC,QAAQ,gBAAiB,OAEhErE,KAAK,kBAAMD,EAAQ,MAAM,GACzBuE,MAAM,SAACC,GAAK,OAAKxE,EAAQ,UAADoE,OAAWI,EAAMC,SAAU,EAExD,CAAE,MAAOD,GACPxE,EAAQ,UAADoE,OAAWI,EAAMC,SAC1B,CACF,EACF,CAYA,SAASU,EAAM3D,EAAMC,GACnB,OAAO,IAAI1B,QAAQ,SAACC,GAClB,IACE,IAAKwB,GAAQA,EAAK9D,OAAS,EAEzB,YADAsC,EAAQ,kDAIV,IAAM0B,EAAUF,EAAK,GACfoD,EAAOpD,EAAK/B,MAAM,GAExB,GAAIiC,EAAQhE,OAAS,EAEnB,YADAsC,EAAQ,2DAMV,GADyB4E,EAAKG,KAAK,SAAAlD,GAAG,OAAImD,MAAMnD,EAAI,KAAOA,EAAI,IAAM,CAAC,GAGpE,YADA7B,EAAQ,sDA4DVqC,GA9CUtB,EAAA,CACRuB,QAAS,kDACTE,WAAY,QACZC,OAAQ,CAAEC,KAAM,CAAEC,OAAQ,gBAC1BJ,YAAa,mCACbf,KAAM,CAAEoB,OAdYgC,EAAKhD,IAAI,SAAAC,GAC7B,IAAIC,EAAM,CAAC,EAIX,OAHAJ,EAAQZ,QAAQ,SAACiB,EAAGrF,GAClBoF,EAAIC,GAAKF,EAAInF,EACf,GACOoF,CACT,IASEe,KAAM,CACJC,KAAM,MACNsC,YAAa,GACbH,YAAa,IACbjC,SAAS,EACTL,OAAQ,QACRM,YAAa,GAEfC,SAAU,CACRgC,MAAO,CACL9B,MAAO1B,EAAQ,GACfoB,KAAM,eACNa,MAAO,CAAEb,KAAM,SAAUuC,MAAO,CAAC,EAAG,QAEtC3B,MAAO,CACLN,MAAO1B,EAAQ,GACfoB,KAAM,UACNa,MAAO,CAAEC,OAAQ,cACjBC,OAAQ,CACNP,MAAO5B,EAAQ,GACf8B,cAAe,GACfD,cAAe,GACf+B,OAAQ,UAGZtC,QAAS,CACP,CAAEI,MAAO1B,EAAQ,GAAIoB,KAAM,UAAWQ,MAAO,YAC7C,CAAEF,MAAO1B,EAAQ,GAAIoB,KAAM,eAAgBQ,MAAO,QAASiC,OAAQ,WAEtE,SACO,CACNzB,KAAM,WACND,OAAQ,CACNG,WAAY,UACZD,WAAY,aAMA,QADF,SAAHK,OAAY3C,EAAW4C,QAAQC,QAAQ,gBAAiB,OAElErE,KAAK,kBAAMD,EAAQ,QAAQ,GAC3BuE,MAAM,SAACC,GAAK,OAAKxE,EAAQ,UAADoE,OAAWI,EAAMC,SAAU,EAExD,CAAE,MAAOD,GACPxE,EAAQ,UAADoE,OAAWI,EAAMC,SAC1B,CACF,EACF,CAYA,SAASe,EAAMhE,EAAMC,GACnB,OAAO,IAAI1B,QAAQ,SAACC,GAClB,IACE,IAAKwB,GAAQA,EAAK9D,OAAS,EAEzB,YADAsC,EAAQ,kDAIV,IAGIyF,EAAQC,EAAYpJ,EAHlBoF,EAAUF,EAAK,GACfoD,EAAOpD,EAAK/B,MAAM,GAIxB,GAAuB,IAAnBiC,EAAQhE,OAAc,CAIxB,IAAMiI,EAAU,IAAIC,IACpBhB,EAAK9D,QAAQ,SAAAe,GACX8D,EAAQE,IAAIhE,EAAI,IAChB8D,EAAQE,IAAIhE,EAAI,GAClB,GACA6D,EAAa1G,MAAMY,KAAK+F,GACxBrJ,EAAIoJ,EAAWhI,OAGf,IAAMoI,EAAY,CAAC,EACnBJ,EAAW5E,QAAQ,SAACiF,EAAOrJ,GACzBoJ,EAAUC,GAASrJ,CACrB,GAGA+I,EAASzG,MAAM1C,GAAG0J,KAAK,GAAGpE,IAAI,kBAAM5C,MAAM1C,GAAG0J,KAAK,EAAE,GACpDpB,EAAK9D,QAAQ,SAAAe,GACX,IAAMoE,EAASpE,EAAI,GACbqE,EAAOrE,EAAI,GACX9D,EAAQqE,WAAWP,EAAI,KAAO,EAE9BsE,EAAYL,EAAUG,GACtBG,EAAUN,EAAUI,QAER/D,IAAdgE,QAAuChE,IAAZiE,IAC7BX,EAAOU,GAAWC,GAAWrI,EAEjC,EAEF,KAAO,MAAI2D,EAAQhE,QAAU,GAsB3B,YADAsC,EAAQ,2EALR,GAZAyF,EAASb,EAAKhD,IAAI,SAAAC,GAChB,OAAOH,EAAQjC,MAAM,GAAGmC,IAAI,SAACyE,EAAGC,GAC9B,IAAMvI,EAAQqE,WAAWP,EAAIyE,EAAW,IACxC,OAAOtB,MAAMjH,GAAS,EAAIA,CAC5B,EACF,GAGA2H,EAAahE,EAAQjC,MAAM,GAC3BnD,EAAIoJ,EAAWhI,OAGX+H,EAAO/H,SAAWpB,EAEpB,YADA0D,EAAQ,gDAMZ,CAIA,IADA,IAAMuG,EAAa,IAAIvH,MAAM1C,GAAG0J,KAAK,GAC5BtJ,EAAI,EAAGA,EAAIJ,EAAGI,IACrB,IAAK,IAAI8J,EAAI,EAAGA,EAAIlK,EAAGkK,IACrBD,EAAW7J,IAAM+I,EAAO/I,GAAG8J,GAC3BD,EAAW7J,IAAM+I,EAAOe,GAAG9J,GAI/B,IAAM+J,EAAWF,EAAWG,OAAO,SAACC,EAAKC,GAAG,OAAKD,EAAMC,CAAG,EAAE,GAE5D,GAAiB,IAAbH,EAEF,YADAzG,EAAQ,8BASV,IAJA,IAAM6G,EAAS,GACXC,EAAe,EAGVpK,EAAI,EAAGA,EAAIJ,EAAGI,IAAK,CAC1B,IAAMqK,EAAaR,EAAW7J,GAAK+J,EAAY,EAAIO,KAAKC,GACxDJ,EAAOjG,KAAK,CACVsG,MAAOxK,EACPqJ,MAAOL,EAAWhJ,GAClByK,WAAYL,EACZM,SAAUN,EAAeC,EACzBhJ,MAAOwI,EAAW7J,KAEpBoK,GAAgBC,EAXF,GAYhB,CAaA,IAVA,IAAMM,EAAaR,EAAOjF,IAAI,SAAAjF,GAAC,MAAK,CAClC2K,MAAO3K,EAAEwK,WACTI,IAAK5K,EAAEwK,WACR,GAGKK,EAAe,GACfpC,EAAc,IAGX1I,EAAI,EAAGA,EAAIJ,EAAGI,IACrB,IAAK,IAAI8J,EAAI,EAAGA,EAAIlK,EAAGkK,IAAK,CAC1B,IAAMzI,EAAQ0H,EAAO/I,GAAG8J,GACxB,GAAIzI,EAAQ,EAAG,CACb,IAAM0J,EAAcZ,EAAOnK,GACrBgL,EAAcb,EAAOL,GAGrBmB,EAAmB5J,EAAQwI,EAAW7J,IAAO+K,EAAYL,SAAWK,EAAYN,YAChFS,EAAcP,EAAW3K,GAAG6K,IAC5BM,EAAYD,EAAcD,EAChCN,EAAW3K,GAAG6K,IAAMM,EAGpB,IAAMC,EAAmB/J,EAAQwI,EAAWC,IAAOkB,EAAYN,SAAWM,EAAYP,YAChFY,EAAcV,EAAWb,GAAGe,IAC5BS,EAAYD,EAAcD,EAChCT,EAAWb,GAAGe,IAAMS,EAGpB,IAAMC,EAAM7C,EAAc4B,KAAKkB,IAAIN,EAAcZ,KAAKC,GAAK,GACrDkB,EAAM/C,EAAc4B,KAAKoB,IAAIR,EAAcZ,KAAKC,GAAK,GACrDoB,EAAMjD,EAAc4B,KAAKkB,IAAIL,EAAYb,KAAKC,GAAK,GACnDqB,EAAMlD,EAAc4B,KAAKoB,IAAIP,EAAYb,KAAKC,GAAK,GACnDsB,EAAMnD,EAAc4B,KAAKkB,IAAIH,EAAcf,KAAKC,GAAK,GACrDuB,EAAMpD,EAAc4B,KAAKoB,IAAIL,EAAcf,KAAKC,GAAK,GACrDwB,EAAMrD,EAAc4B,KAAKkB,IAAIF,EAAYhB,KAAKC,GAAK,GACnDyB,EAAMtD,EAAc4B,KAAKoB,IAAIJ,EAAYhB,KAAKC,GAAK,GAEnD0B,EAAkBd,EAAYD,EAAeZ,KAAKC,GAAK,EAAI,EAC3D2B,EAAkBZ,EAAYD,EAAef,KAAKC,GAAK,EAAI,EAE3D4B,EAAO,IAAHzE,OAAO6D,EAAG,KAAA7D,OAAI+D,EAAG,KAAA/D,OAAIgB,EAAW,KAAAhB,OAAIgB,EAAW,OAAAhB,OAAMuE,EAAc,OAAAvE,OAAMiE,EAAG,KAAAjE,OAAIkE,EAAG,SAAAlE,OAAQmE,EAAG,KAAAnE,OAAIoE,EAAG,KAAApE,OAAIgB,EAAW,KAAAhB,OAAIgB,EAAW,OAAAhB,OAAMwE,EAAc,OAAAxE,OAAMqE,EAAG,KAAArE,OAAIsE,EAAG,SAAAtE,OAAQ6D,EAAG,KAAA7D,OAAI+D,EAAG,KAEnMX,EAAa5G,KAAK,CAChBiI,KAAMA,EACN5C,OAAQvJ,EACRoM,OAAQtC,EACRuC,YAAarD,EAAWhJ,GACxBsM,YAAatD,EAAWc,GACxBzI,MAAOA,GAEX,CACF,CAIF,IAAMkL,EAAO,CACX,QAAW,6CACX,YAAe,gCACf,MAAS,IACT,OAAU,IACV,QAAW,EACX,WAAc,QACd,QAAW,CACT,CAAE,KAAQ,UAAW,MAAS,GAC9B,CAAE,KAAQ,UAAW,MAAS,GAC9B,CAAE,KAAQ,eAAgB,MAAS,KACnC,CAAE,KAAQ,eAAgB,MAAS,MAErC,OAAU,CACR,CACE,KAAQ,QACR,KAAQ,UACR,OAAU,CAAE,KAAQ,SAAU,MAAS,SACvC,MAAS,CAAE,OAAU,gBAGzB,KAAQ,CACN,CACE,KAAQ,SACR,OAAUpC,EACV,UAAa,CACX,CACE,KAAQ,UACR,KAAQ,8DACR,GAAM,iBAER,CACE,KAAQ,UACR,KAAQ,iCACR,GAAM,WAER,CACE,KAAQ,UACR,KAAQ,0CACR,GAAM,YAER,CACE,KAAQ,UACR,KAAQ,8CACR,GAAM,KAER,CACE,KAAQ,UACR,KAAQ,8CACR,GAAM,OAIZ,CACE,KAAQ,eACR,OAAUW,IAGd,MAAS,CACP,CACE,KAAQ,MACR,KAAQ,CAAE,KAAQ,UAClB,OAAU,CACR,MAAS,CACP,KAAQ,CAAE,MAAS,QAAS,MAAS,SACrC,EAAK,CAAE,OAAU,aACjB,EAAK,CAAE,OAAU,eAEnB,OAAU,CACR,WAAc,CAAE,MAAS,cACzB,SAAY,CAAE,MAAS,YACvB,SAAY,CAAE,MAAS,GACvB,YAAe,CAAE,OAAU,gBAC3B,YAAe,CAAE,OAAU,gBAC3B,QAAW,CAAE,MAAS,IACtB,QAAW,CACT,OAAU,iDAGd,MAAS,CACP,QAAW,CAAE,MAAS,MAI5B,CACE,KAAQ,OACR,KAAQ,CAAE,KAAQ,UAClB,OAAU,CACR,MAAS,CACP,KAAQ,CAAE,MAAS,SACnB,SAAY,CAAE,MAAS,IACvB,KAAQ,CAAE,MAAS,YACnB,KAAQ,CAAE,MAAS,YAErB,OAAU,CACR,EAAK,CAAE,OAAU,uBACjB,EAAK,CAAE,OAAU,uBACjB,GAAM,CAAE,OAAU,iCAClB,MAAS,CAAE,OAAU,oEACrB,MAAS,CAAE,OAAU,qCACrB,SAAY,CAAE,MAAS,aAI7B,CACE,KAAQ,OACR,KAAQ,CAAE,KAAQ,gBAClB,OAAU,CACR,MAAS,CACP,EAAK,CAAE,OAAU,aACjB,EAAK,CAAE,OAAU,eAEnB,OAAU,CACR,KAAQ,CAAE,MAAS,QACnB,KAAQ,CAAE,MAAS,QAAS,MAAS,UACrC,QAAW,CAAE,MAAS,IACtB,OAAU,CAAE,MAAS,SACrB,YAAe,CAAE,MAAS,IAC1B,QAAW,CACT,OAAU,+FAGd,MAAS,CACP,QAAW,CAAE,MAAS,SAQ1B0B,EAAU,SAAH9E,OAAY3C,EAAW4C,QAAQC,QAAQ,gBAAiB,WAG1C,IAAhBjC,GACTA,GAAY4G,EAAM,QAASC,GACxBjJ,KAAK,kBAAMD,EAAQ,QAAQ,GAC3BuE,MAAM,SAACC,GAAK,OAAKxE,EAAQ,UAADoE,OAAWI,EAAMC,SAAU,GAGtD0E,KACGlJ,KAAK,WACJ,IAAMmJ,EAAYC,SAASC,cAAc,OAMzC,OALAF,EAAUG,GAAK,sBACfH,EAAUI,MAAMC,SAAW,WAC3BL,EAAUI,MAAME,KAAO,UACvBL,SAASM,KAAKC,YAAYR,GAEnBS,UAAUT,EAAWH,EAAM,CAAEa,SAAS,EAAOC,SAAU,UAChE,GACC9J,KAAK,SAAA+J,GACJ,OAAOA,EAAOtH,KAAKuH,UACrB,GACChK,KAAK,SAAAiK,GACJ,OAAOA,EAAOC,OAAO,SAAAC,GACnB,IAAMC,EAAS,IAAIC,WACnBD,EAAOE,UAAY,WACjB,IAAMC,EAAaH,EAAOL,OAAOS,MAAM,KAAK,GAE5CC,MAAMC,IAAG,eAAAC,EAAA1K,EAAA3B,IAAAE,EAAC,SAAAoM,EAAOC,GAAO,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA/F,EAAAgG,EAAAC,EAAAC,EAAA,OAAAhN,IAAAC,EAAA,SAAAgN,GAAA,cAAAA,EAAArO,EAAAqO,EAAAlP,GAAA,OAGD,OAFfyO,EAAQD,EAAQW,SAASC,WAAWC,sBACpCX,EAASD,EAAMC,QACdY,KAAK,SAASJ,EAAAlP,EAAA,EACfwO,EAAQe,OAAM,OAEdZ,EAAY,cAAH7G,OAAiB8E,GAAOgC,EAAAnM,EACrBiM,EAAOc,OAAKN,EAAArO,EAAA,EAAA+N,EAAA7L,IAAA,WAAA8L,EAAAD,EAAA5O,KAAAwB,KAAE,CAAF0N,EAAAlP,EAAA,QACT,OADZ8O,EAAKD,EAAApN,OACN6N,KAAK,QAAQJ,EAAAlP,EAAA,EACbwO,EAAQe,OAAM,OAChBT,EAAMzL,OAASsL,GACjBG,EAAMW,SACP,OAAAP,EAAAlP,EAAA,eAAAkP,EAAAlP,EAAA,eAAAkP,EAAArO,EAAA,EAAAoO,EAAAC,EAAAlO,EAAA4N,EAAAhP,EAAAqP,GAAA,cAAAC,EAAArO,EAAA,EAAA+N,EAAAhO,IAAAsO,EAAAtO,EAAA,iBAAAsO,EAAAlP,EAAA,GAEGwO,EAAQe,OAAM,QAGI,OADlBxG,EAAQyF,EAAQW,SAASO,oBACzBJ,KAAK,aAAaJ,EAAAlP,EAAA,GAClBwO,EAAQe,OAAM,QAMG,OAJjBR,EAAQN,EAAMC,OAAOiB,SAASzB,IAC9Bd,KAAOrE,EAAMqE,KACnB2B,EAAMa,IAAM7G,EAAM6G,IAClBb,EAAMc,iBAAkB,EACxBd,EAAM1L,KAAOsL,EAAUO,EAAAlP,EAAA,GAEjBwO,EAAQe,OAAM,SAEdP,EAAUjC,SAAS+C,eAAe,yBAC3B/C,SAASM,KAAK0C,YAAYf,GAEvCtL,EAAQ,SAAS,eAAAwL,EAAAjO,EAAA,KAAAsN,EAAA,qBAClB,gBAAAyB,GAAA,OAAA1B,EAAAxK,MAAA,KAAAD,UAAA,EAhCQ,IAgCNoE,MAAM,SAAAC,GACP,IAAM8G,EAAUjC,SAAS+C,eAAe,uBACpCd,GAASjC,SAASM,KAAK0C,YAAYf,GACvCtL,EAAQ,UAADoE,OAAWI,EAAMC,SAC1B,EACF,EACA4F,EAAOkC,cAAcnC,EACvB,EACF,GACC7F,MAAM,SAAAC,GACL,IAAM8G,EAAUjC,SAAS+C,eAAe,uBACpCd,GAASjC,SAASM,KAAK0C,YAAYf,GACvCtL,EAAQ,UAADoE,OAAWI,EAAMC,SAC1B,EAGN,CAAE,MAAOD,GACPxE,EAAQ,UAADoE,OAAWI,EAAMC,SAC1B,CACF,EACF,CAYA,SAAS+H,EAAKhL,EAAMC,GAClB,OAAO,IAAI1B,QAAQ,SAACC,GAClB,IACE,IAAKwB,GAAQA,EAAK9D,OAAS,EAEzB,YADAsC,EAAQ,kDAIV,IAAM0B,EAAUF,EAAK,GAsErBa,GAzDUtB,EAAA,CACRuB,QAAS,kDACTC,YAAa,kCACbC,WAAY,QACZC,OAAQ,CAAEC,KAAM,CAAEC,OAAQ,gBAC1BnB,KAAM,CAAEoB,OAjBGpB,EAAK/B,MAAM,GAGGmC,IAAI,SAAAC,GAC7B,IAAIC,EAAM,CAAC,EAIX,OAHAJ,EAAQZ,QAAQ,SAACiB,EAAGrF,GAClBoF,EAAIC,GAAKF,EAAInF,EACf,GACOoF,CACT,IASEe,KAAM,CACJC,KAAM,OACNE,SAAS,EACTyJ,QAAS,IAEXvJ,SAAQrC,EAAA,CACNsC,EAAG,CACDC,MAAO1B,EAAQ,GACfoB,KAAM,UACNO,KAAM,CACJC,MAAO5B,EAAQ,GACf6B,cAAe,GACfC,cAAe,KAGnBpG,EAAG,CACDgG,MAAO1B,EAAQ,GACfoB,KAAM,eACNO,KAAM,CACJC,MAAO5B,EAAQ,GACf6B,cAAe,GACfC,cAAe,MAIf9B,EAAQhE,QAAU,GAAK,CACzBgG,MAAO,CACLN,MAAO1B,EAAQ,GACfoB,KAAM,UACNe,OAAQ,CACNP,MAAO5B,EAAQ,GACf8B,cAAe,GACfD,cAAe,QAItB,SACO,CACNO,KAAM,WACNT,KAAM,CACJU,WAAY,UACZC,WAAY,UACZC,UAAW,WAEbJ,OAAQ,CACNG,WAAY,UACZD,WAAY,aAKA,OADF,QAAHK,OAAW3C,EAAW4C,QAAQC,QAAQ,gBAAiB,OAEjErE,KAAK,kBAAMD,EAAQ,OAAO,GAC1BuE,MAAM,SAACC,GAAK,OAAKxE,EAAQ,UAADoE,OAAWI,EAAMC,SAAU,EAExD,CAAE,MAAOD,GACPxE,EAAQ,UAADoE,OAAWI,EAAMC,SAC1B,CACF,EACF,CAYA,SAASiI,EAAYlL,EAAMC,GACzB,OAAO,IAAI1B,QAAQ,SAACC,GAClB,IACE,IAAKwB,GAAQA,EAAK9D,OAAS,EAEzB,YADAsC,EAAQ,kDAIV,IAAM0B,EAAUF,EAAK,GACfoD,EAAOpD,EAAK/B,MAAM,GAExB,GAAIiC,EAAQhE,OAAS,EAEnB,YADAsC,EAAQ,8EAKV,IAAI2M,EAAY,UA+GhBtK,GAvDUtB,EAAA,CACRuB,QAAS,kDACTsK,MAAO,IACPC,OAAQ,IACRrK,WAAY,QACZC,OAAQ,CAAEC,KAAM,CAAEC,OAAQ,gBAC1BJ,YAAa,mCACbf,KAAM,CAAEoB,OA9DYgC,EAAKhD,IAAI,SAAAC,GAC7B,IAAIC,EAAM,CAAC,EACXJ,EAAQZ,QAAQ,SAACiB,EAAGrF,GAClBoF,EAAIC,GAAKF,EAAInF,EACf,GAGA,IAAMoQ,EAAgBhL,EAAIJ,EAAQ,IAClC,GAA6B,iBAAlBoL,GAA8BA,EAAgB,MAEvDhL,EAAIJ,EAAQ,IAAM,IAAIqL,KAA+B,OAAzBD,EAAgB,OAAiB,KAC7DH,EAAY,gBACP,GAA6B,iBAAlBG,GAA8BA,EAAcE,SAAS,KAAM,CAE3E,IAAMC,EAAa,IAAIF,KAAKD,GACvB9H,MAAMiI,EAAWC,aACpBpL,EAAIJ,EAAQ,IAAMuL,EAClBN,EAAY,WAEhB,CAGA,OAAO7K,CACT,IAwCEe,KAAM,CACJC,KAAM,OACNE,SAAS,EACTmK,YAAa,QACbV,QAAS,IAEXvJ,SAAU,CACRC,EA5C8B,aAAdwJ,EAA2B,CAC7CvJ,MAAO1B,EAAQ,GACfoB,KAAM,WACNO,KAAM,CACJ+J,QAAQ,EACR7H,OAAQ,QACR8H,SAAU,EACV/J,MAAO5B,EAAQ,GACf6B,cAAe,GACfC,cAAe,GACfO,WAAY,UACZC,WAAY,UACZP,YAAa,KAEb,CACFL,MAAO1B,EAAQ,GACfoB,KAAM,UACNO,KAAM,CACJ+J,QAAQ,EACRC,SAAU,EACV/J,MAAO5B,EAAQ,GACf6B,cAAe,GACfC,cAAe,GACfO,WAAY,UACZC,WAAY,YAqBZ5G,EAAG,CACDkQ,UAAW,MACXlK,MAAO1B,EAAQ,GACfoB,KAAM,eACNO,KAAM,KACNkK,MAAO,UAET7J,MAAO,CACLN,MAAO1B,EAAQ,GACfoB,KAAM,UACNa,MAAO,CAAEC,OAAQ,eACjBC,OAAQ,CACNP,MAAO5B,EAAQ,GACf8B,cAAe,GACfD,cAAe,GACf+B,OAAQ,UAGZtC,QAAS,CACP,CACEI,MAAO1B,EAAQ,GACfoB,KAAoB,aAAd6J,EAA2B,WAAa,UAC9CrJ,MAAO,SACPiC,OAAsB,aAAdoH,EAA2B,gBAAaxK,GAElD,CAAEiB,MAAO1B,EAAQ,GAAIoB,KAAM,UAAWQ,MAAO,UAC7C,CAAEF,MAAO1B,EAAQ,GAAIoB,KAAM,eAAgBQ,MAAO,QAASiC,OAAQ,WAEtE,SACO,CACNzB,KAAM,WACND,OAAQ,CACNG,WAAY,UACZD,WAAY,aAMA,cADF,eAAHK,OAAkB3C,EAAW4C,QAAQC,QAAQ,gBAAiB,OAExErE,KAAK,kBAAMD,EAAQ,cAAc,GACjCuE,MAAM,SAACC,GAAK,OAAKxE,EAAQ,UAADoE,OAAWI,EAAMC,SAAU,EAExD,CAAE,MAAOD,GACPxE,EAAQ,UAADoE,OAAWI,EAAMC,SAC1B,CACF,EACF,CAYA,SAAS+I,EAAQhM,EAAMC,GACrB,OAAO,IAAI1B,QAAQ,SAACC,GAClB,IACE,IAAKwB,GAAQA,EAAK9D,OAAS,EAEzB,YADAsC,EAAQ,kDAIV,IAAM0B,EAAUF,EAAK,GACfoD,EAAOpD,EAAK/B,MAAM,GAExB,GAAIiC,EAAQhE,OAAS,EAEnB,YADAsC,EAAQ,iEAiFVqC,GAnEUtB,EAAA,CACRuB,QAAS,kDACTC,YAAa,4CACbC,WAAY,QACZC,OAAQ,CAAEC,KAAM,CAAEC,OAAQ,gBAC1BnB,KAAM,CAAEoB,OAdYgC,EAAKhD,IAAI,SAAAC,GAC7B,IAAIC,EAAM,CAAC,EAIX,OAHAJ,EAAQZ,QAAQ,SAACiB,EAAGrF,GAClBoF,EAAIC,GAAKF,EAAInF,EACf,GACOoF,CACT,IASEe,KAAM,CAAEC,KAAM,QAASoB,KAAM,IAAKlB,SAAS,GAC3CE,SAAQrC,EAAAA,EAAA,CACNsC,EAAG,CACDC,MAAO1B,EAAQ,GACfoB,KAAM,eACNa,MAAO,CAAE8J,MAAM,GACfpK,KAAM,CACJC,MAAO5B,EAAQ,GACf6B,cAAe,GACfC,cAAe,KAGnBpG,EAAG,CACDgG,MAAO1B,EAAQ,GACfoB,KAAM,eACNa,MAAO,CAAE8J,MAAM,GACfpK,KAAM,CACJC,MAAO5B,EAAQ,GACf6B,cAAe,GACfC,cAAe,MAIf9B,EAAQhE,QAAU,GAAK,CACzBgG,MAAO,CACLN,MAAO1B,EAAQ,GACfoB,KAAM,UACNe,OAAQ,CACNP,MAAO5B,EAAQ,GACf8B,cAAe,GACfD,cAAe,OAKjB7B,EAAQhE,QAAU,GAAK,CACzB0N,MAAO,CACLhI,MAAO1B,EAAQ,GACfoB,KAAM,UACNe,OAAQ,CACNP,MAAO5B,EAAQ,GACf8B,cAAe,GACfD,cAAe,QAItB,SACO,CACNO,KAAM,WACNT,KAAM,CACJU,WAAY,UACZC,WAAY,UACZC,UAAW,WAEbJ,OAAQ,CACNG,WAAY,UACZD,WAAY,aAKA,UADF,WAAHK,OAAc3C,EAAW4C,QAAQC,QAAQ,gBAAiB,OAEpErE,KAAK,kBAAMD,EAAQ,UAAU,GAC7BuE,MAAM,SAACC,GAAK,OAAKxE,EAAQ,UAADoE,OAAWI,EAAMC,SAAU,EAExD,CAAE,MAAOD,GACPxE,EAAQ,UAADoE,OAAWI,EAAMC,SAC1B,CACF,EACF,CAYA,SAASiJ,EAAOlM,EAAMC,GACpB,OAAO,IAAI1B,QAAQ,SAACC,GAClB,IACE,IAAKwB,GAAQA,EAAK9D,OAAS,EAEzB,YADAsC,EAAQ,kDAIV,IAAM0B,EAAUF,EAAK,GACfoD,EAAOpD,EAAK/B,MAAM,GAExB,GAAIiC,EAAQhE,OAAS,EAEnB,YADAsC,EAAQ,qFAkFVqC,GApEUtB,EAAA,CACRuB,QAAS,kDACTC,YAAa,oCACbC,WAAY,QACZC,OAAQ,CAAEC,KAAM,CAAEC,OAAQ,gBAC1BnB,KAAM,CAAEoB,OAdYgC,EAAKhD,IAAI,SAAAC,GAC7B,IAAIC,EAAM,CAAC,EAIX,OAHAJ,EAAQZ,QAAQ,SAACiB,EAAGrF,GAClBoF,EAAIC,GAAKF,EAAInF,EACf,GACOoF,CACT,IASEe,KAAM,CAAEC,KAAM,SAAUE,SAAS,EAAMyJ,QAAS,IAChDvJ,SAAQrC,EAAA,CACNsC,EAAG,CACDC,MAAO1B,EAAQ,GACfoB,KAAM,eACNa,MAAO,CAAE8J,MAAM,GACfpK,KAAM,CACJC,MAAO5B,EAAQ,GACf6B,cAAe,GACfC,cAAe,KAGnBpG,EAAG,CACDgG,MAAO1B,EAAQ,GACfoB,KAAM,eACNa,MAAO,CAAE8J,MAAM,GACfpK,KAAM,CACJC,MAAO5B,EAAQ,GACf6B,cAAe,GACfC,cAAe,KAGnBU,KAAM,CACJd,MAAO1B,EAAQ,GACfoB,KAAM,eACNa,MAAO,CACLb,KAAM,SACNuC,MAAO,CAAC,IAAK,MAEfxB,OAAQ,CACNP,MAAO5B,EAAQ,GACf8B,cAAe,GACfD,cAAe,MAIf7B,EAAQhE,QAAU,GAAK,CACzBgG,MAAO,CACLN,MAAO1B,EAAQ,GACfoB,KAAM,UACNe,OAAQ,CACNP,MAAO5B,EAAQ,GACf8B,cAAe,GACfD,cAAe,QAItB,SACO,CACNO,KAAM,WACNT,KAAM,CACJU,WAAY,UACZC,WAAY,UACZC,UAAW,WAEbJ,OAAQ,CACNG,WAAY,UACZD,WAAY,aAKA,SADF,UAAHK,OAAa3C,EAAW4C,QAAQC,QAAQ,gBAAiB,OAEnErE,KAAK,kBAAMD,EAAQ,SAAS,GAC5BuE,MAAM,SAACC,GAAK,OAAKxE,EAAQ,UAADoE,OAAWI,EAAMC,SAAU,EAExD,CAAE,MAAOD,GACPxE,EAAQ,UAADoE,OAAWI,EAAMC,SAC1B,CACF,EACF,CAYA,SAASkJ,EAAKnM,EAAMC,GAClB,OAAO,IAAI1B,QAAQ,SAACC,GAClB,IACE,IAAKwB,GAAQA,EAAK9D,OAAS,EAEzB,YADAsC,EAAQ,kDAIV,IAAM0B,EAAUF,EAAK,GACfoD,EAAOpD,EAAK/B,MAAM,GAExB,GAAIiC,EAAQhE,OAAS,EAEnB,YADAsC,EAAQ,yDAKV,IAAM2B,EAAgBiD,EAAKhD,IAAI,SAAAC,GAC7B,IAAIC,EAAM,CAAC,EAIX,OAHAJ,EAAQZ,QAAQ,SAACiB,EAAGrF,GAClBoF,EAAIC,GAAKF,EAAInF,EACf,GACOoF,CACT,GAEM8L,EAAWjM,EAAcjE,OAC/B,GAAiB,IAAbkQ,EAEF,YADA5N,EAAQ,oDA+BV,IA1BA,IAAM6N,EAAY7G,KAAK8G,IAAI,GAAI9G,KAAK+G,IAAI,GAAI,IAAMH,IAC5CI,EAAUhH,KAAK8G,IAAI,EAAG9G,KAAK+G,IAAI,EAAG,GAAKH,IACvCK,EAAY,IAAkB,EAAXL,EAGnBM,EAAoB,SAAChH,EAAOiH,GAChC,IACMC,EAAapH,KAAK8G,IAAI,GAAI,GAAc,EAAR5G,GAChCmH,EAAYrH,KAAK8G,IAAI,GAAI,GAAc,EAAR5G,GACrC,MAAO,OAAP9C,OAHgB,IAGK,MAAAA,OAAKgK,EAAU,OAAAhK,OAAMiK,EAAS,KACrD,EAGMrM,EAAkBL,EAAcC,IAAI,SAACpE,EAAG0J,GAAK,OAAAnG,EAAAA,EAAAA,EAAAA,EAAA,QAAAqD,OAC3C8C,EAAK,MAAO1J,EAAEkE,EAAQ,KAAG,KAAA0C,OACzB8C,EAAQ,IAAG,MAAO1J,EAAEkE,EAAQ,KAAG,OAAA0C,OAC7B8C,EAAQ,EAAC,WAAY,EAAIF,KAAKC,GAAKzJ,EAAEkE,EAAQ,IAAM,KAAG,OAAA0C,OACtD8C,EAAQ,EAAC,kBAAmB1J,EAAEkE,EAAQ,IAAM,IAAG,GAInD4M,EAAY,CAACvR,OAAOwR,OAAMnO,MAAbrD,OAAM,CAAQ,CAAC,GAACqH,OAAAoK,EAAKxM,MAGlCyM,EAAgB,GAClBC,EAAeT,EACVvR,EAAI,EAAGA,EAAIkR,EAAUlR,IAAK,CACjC,IAAMiS,EAAQD,EACRE,EAAQD,EAAQd,EAChBgB,GAAUF,EAAQC,GAAS,EACjCH,EAAc7N,KAAK,CAAE+N,MAAAA,EAAOC,MAAAA,EAAOC,OAAAA,IACnCH,EAAeE,EAAQZ,CACzB,CAGA,IAIMc,EADeb,EAAY,GAFR,GACCL,EAE+B,EA6HzDvL,GA1Ha,CACX,QAAW,kDACX,OAAU,CACR,SAAY,CACV,KAAQ,MACR,QAAU,GAEZ,OAAU,CAAC,QAAW,KAExB,YAAe,2BAAF+B,OAA6BwJ,EAAQ,qBAClD,WAAc,QACd,KAAQ,CAAC,OAAUU,GACnB,QAAW,CACT,CACE,YAAe,qBACf,MAA4B,GAAlBL,EAAY,IACtB,OAA6B,GAAlBA,EAAY,IACvB,KAAQ,CAAC,OAAU,MACnB,MAAS,GAAF7J,OAAAoK,EAEF7M,EAAcC,IAAI,SAACpE,EAAG0J,GAAK,MAAM,CAClC,YAAe,QAAF9C,OAAU8C,EAAQ,EAAC,eAChC,KAAQ,CACN,KAAQ,MACR,OAAUuH,EAAcvH,GAAOyH,MAC/B,QAAWF,EAAcvH,GAAO0H,MAChC,MAAS,EACT,OAAU,kBACV,QAAW,IACX,EAAKX,EAAY,GACjB,EAAKA,EAAY,IAEnB,SAAY,CACV,MAAS,CAAC,MAASC,EAAkBhH,KAExC,IAAEsH,EAEA7M,EAAcC,IAAI,SAACpE,EAAG0J,GAAK,MAAM,CAClC,YAAe,QAAF9C,OAAU8C,EAAQ,EAAC,aAChC,KAAQ,CACN,KAAQ,MACR,OAAUuH,EAAcvH,GAAOyH,MAC/B,QAAWF,EAAcvH,GAAO0H,MAChC,MAAS,EACT,OAAU,CAAC,KAAQ,cAAFxK,OAAgB8C,EAAQ,EAAC,cAC1C,aAAgBF,KAAK+G,IAAI,EAAGF,EAAY,GACxC,SAAW,EACX,EAAKI,EAAY,GACjB,EAAKA,EAAY,IAEnB,SAAY,CACV,MAAS,CAAC,MAASC,EAAkBhH,IACrC,QAAW,CACT,CAAC,MAAS1J,EAAEkE,EAAQ,IAAK,MAAS,YAClC,CAAC,MAASlE,EAAEkE,EAAQ,IAAM,IAAK,MAAS,cAG7C,IAAE8M,EAEA7M,EAAcC,IAAI,SAACpE,EAAG0J,GAAK,MAAM,CAClC,YAAe,QAAF9C,OAAU8C,EAAQ,EAAC,UAChC,KAAQ,CACN,KAAQ,OACR,MAAS,SACT,SAAY,SACZ,EAAK+G,EAAY,GAAK,GACtB,EAAKA,EAAY,GAAKQ,EAAcvH,GAAO2H,OAC3C,SAAY7H,KAAK8G,IAAI,GAAI9G,KAAK+G,IAAI,GAAI,IAAMH,IAC5C,KAAQ,WACR,WAAc,OACd,MAAS,SAEX,SAAY,CACV,KAAQ,CAAC,MAASpQ,EAAEkE,EAAQ,IAAM,KAClC,QAAW,CACT,UAAa,CACX,KAAQ,cAAF0C,OAAgB8C,EAAQ,EAAC,iBAC/B,MAAS,GAEX,MAAS,IAGd,MAGL,CACE,YAAe,sBACf,MA9Fc,IA+Fd,OAA6B,GAAlB+G,EAAY,IACvB,KAAQ,CAAC,OAAU,MACnB,MAAStM,EAAcC,IAAI,SAACpE,EAAG0J,GAAK,MAAK,CACvC,CACE,YAAe,iBAAF9C,OAAmB8C,EAAQ,GACxC,KAAQ,CACN,KAAQ,SACR,KAAQ,IACR,EAAK,GACL,EAAK4H,EAvGQ,GAuGQ5H,EACrB,MAASgH,EAAkBhH,KAG/B,CACE,YAAe,gBAAF9C,OAAkB8C,EAAQ,GACvC,KAAQ,CACN,KAAQ,OACR,EAAK,GACL,EAAK4H,EAhHQ,GAgHQ5H,EACrB,MAAS,OACT,SAAY,SACZ,SAAY,GACZ,KAAQ,YAEV,SAAY,CACV,KAAQ,CAAC,MAAS1J,EAAEkE,EAAQ,OAGjC,GAAEqN,SAGP,KAAQ,CAAC,OAAU,OAGH,OADF,QAAH3K,OAAW3C,EAAW4C,QAAQC,QAAQ,gBAAiB,OAEjErE,KAAK,kBAAMD,EAAQ,OAAO,GAC1BuE,MAAM,SAACC,GAAK,OAAKxE,EAAQ,UAADoE,OAAWI,EAAMC,SAAU,EAExD,CAAE,MAAOD,GACPxE,EAAQ,UAADoE,OAAWI,EAAMC,SAC1B,CACF,EACF,CAYA,SAASuK,EAAOxN,EAAMC,GACpB,OAAO,IAAI1B,QAAQ,SAACC,GAClB,IACE,IAAKwB,GAAQA,EAAK9D,OAAS,EAEzB,YADAsC,EAAQ,kDAIV,IAAM0B,EAAUF,EAAK,GACfoD,EAAOpD,EAAK/B,MAAM,GAExB,GAAIiC,EAAQhE,OAAS,EAEnB,YADAsC,EAAQ,4DA6CVqC,GA/Ba,CACXC,QAAS,kDACTC,YAAa,oCACbC,WAAY,QACZC,OAAQ,CAAEC,KAAM,CAAEC,OAAQ,gBAC1BnB,KAAM,CAAEoB,OAdYgC,EAAKhD,IAAI,SAAAC,GAC7B,IAAIC,EAAM,CAAC,EAIX,OAHAJ,EAAQZ,QAAQ,SAACiB,EAAGrF,GAClBoF,EAAIC,GAAKF,EAAInF,EACf,GACOoF,CACT,IASEmN,UAAW,CACP,CACIC,OAAQ,CAAC,CAAEC,GAAI,OAAQC,GAAI,cAC3BC,KAAM,CAAC,CAAEjM,MAAO1B,EAAQ,GAAI4N,MAAO,iBAG3CC,MAAO,CAAC,CACN1M,KAAM,CAAEC,KAAM,MAAOsC,YAAa,GAAIzC,OAAQ,SAC7C,CACDE,KAAM,CAAEC,KAAM,OAAQ0M,aAAc,IACpCtM,SAAU,CACRuM,KAAM,CAAErM,MAAO1B,EAAQ,GAAIoB,KAAM,mBAGrCI,SAAU,CACRgC,MAAO,CAAE9B,MAAO1B,EAAQ,GAAIoB,KAAM,eAAgByK,OAAO,GACzDmC,OAAQ,CACNtM,MAAO1B,EAAQ,GACfiC,MAAO,CAAEb,KAAM,OAAQ2K,MAAM,EAAMkC,SAAU,KAE/CjM,MAAO,CAAEN,MAAO1B,EAAQ,GAAIoB,KAAM,UAAWe,OAAQ,CAAEP,MAAO5B,EAAQ,GAAI8B,cAAe,GAAID,cAAe,GAAI+B,OAAQ,UAC3HgK,MAAO,CAAElM,MAAO,YAAaN,KAAM,kBAIlB,SADF,UAAHsB,OAAa3C,EAAW4C,QAAQC,QAAQ,gBAAiB,OAEnErE,KAAK,kBAAMD,EAAQ,SAAS,GAC5BuE,MAAM,SAACC,GAAK,OAAKxE,EAAQ,UAADoE,OAAWI,EAAMC,SAAU,EAExD,CAAE,MAAOD,GACPxE,EAAQ,UAADoE,OAAWI,EAAMC,SAC1B,CACF,EACF,CAYA,SAASmL,EAAIpO,EAAMC,GACjB,OAAO,IAAI1B,QAAQ,SAACC,GAClB,IACE,IAAKwB,GAAQA,EAAK9D,OAAS,EAEzB,YADAsC,EAAQ,kDAIV,IAAM0B,EAAUF,EAAK,GACfoD,EAAOpD,EAAK/B,MAAM,GAExB,GAAIiC,EAAQhE,OAAS,EAEnB,YADAsC,EAAQ,yDAKV,IAAM2B,EAAgBiD,EACnBlE,OAAO,SAAAtE,GAAC,OAAIA,EAAE,KAAO4I,OAAO5I,EAAE,GAAG,GACjCwF,IAAI,SAAAxF,GAAC,MAAK,CACTyT,SAAUzT,EAAE,GACZ2B,OAAQ3B,EAAE,GACX,GAEH,GAA6B,IAAzBuF,EAAcjE,OAEhB,YADAsC,EAAQ,mDA4BVqC,GAvBa,CACXC,QAAS,kDACTC,YAAa,gCACbf,KAAM,CAAEoB,OAAQjB,GAChBkB,KAAM,CACJC,KAAM,UACNgN,OAAQ,WAEV5M,SAAU,CACRC,EAAG,CAAEC,MAAO,WAAYN,KAAM,WAC9B1F,EAAG,CACDgG,MAAO,QACPN,KAAM,eACNa,MAAO,CAAE8J,MAAM,IAEjB/J,MAAO,CACLN,MAAO,WACPN,KAAM,UACNe,OAAQ,QAKI,MADF,OAAHO,OAAU3C,EAAW4C,QAAQC,QAAQ,gBAAiB,OAEhErE,KAAK,kBAAMD,EAAQ,MAAM,GACzBuE,MAAM,SAACC,GAAK,OAAKxE,EAAQ,UAADoE,OAAWI,EAAMC,SAAU,EAExD,CAAE,MAAOD,GACPxE,EAAQ,UAADoE,OAAWI,EAAMC,SAC1B,CACF,EACF,CAYA,SAASsL,EAAMvO,EAAMC,GACnB,OAAO,IAAI1B,QAAQ,SAACC,GAClB,IACE,IAAKwB,GAAQA,EAAK9D,OAAS,EAEzB,YADAsC,EAAQ,kDAIV,IAAM0B,EAAUF,EAAK,GACfoD,EAAOpD,EAAK/B,MAAM,GAExB,GAAIiC,EAAQhE,OAAS,EAEnB,YADAsC,EAAQ,wFAIV,IAAMgQ,EAAY,GACZC,EAAavO,EAAQjC,MAAM,GAEjCmF,EAAK9D,QAAQ,SAACe,EAAKqO,GACjB,IAAMC,EAAatO,EAAIH,EAAQ,KAAO,UAAJ0C,OAAc8L,EAAc,GAE9DD,EAAWnP,QAAQ,SAAAsP,GACjB,IAAMrS,EAAQqE,WAAWP,EAAIH,EAAQ2O,QAAQD,MAAgB,EAC7DJ,EAAUpP,KAAK,CACb0P,OAAQH,EACRC,UAAWA,EACXrS,MAAOA,EACP8R,SAAUK,GAEd,EACF,GAGA,IAAMK,EAAgB/B,EAAO,IAAI5I,IAAIoK,EAAUpO,IAAI,SAAApE,GAAC,OAAIA,EAAE4S,SAAS,KAmLnE/N,GAhLa,CACXC,QAAS,6CACTC,YAAa,mCACbqK,MAAO,IACPC,OAAQ,IACR2D,QAAS,GACTC,SAAU,CAAC,KAAQ,OAAQ,SAAY,WACvCjO,WAAY,QACZC,OAAQ,CAAEC,KAAM,CAAEC,OAAQ,gBAE1B+N,QAAS,CACP,CAAC,KAAQ,SAAU,OAAU,cAG/BlP,KAAM,CACJ,CACE7B,KAAM,QACNiD,OAAQoN,GAEV,CACErQ,KAAM,aACNiD,OAAQ2N,EAAiB3O,IAAI,SAAApE,GAAC,MAAK,CAAC4S,UAAW5S,EAAE,KAIrDmT,OAAQ,CACN,CACEhR,KAAM,UACNmD,KAAM,QACNuC,MAAO,CAAC,OAAU,aAClBmL,QAAS,GACTpD,OAAQmD,GAEV,CACE5Q,KAAM,SACNmD,KAAM,SACNuC,MAAO,CAAC,OAAU,eAClBoI,MAAM,EACNmD,MAAM,EACNxD,OAAQ,CAAC,KAAQ,QAAS,MAAS,SACnCyD,UAAW,GAEb,CACElR,KAAM,QACNmD,KAAM,UACNsK,OAAQ,CAAC,KAAQ,QAAS,MAAS,YACnC/H,MAAO,CACL,UAAW,UAAW,UAAW,UAAW,UAC5C,UAAW,UAAW,UAAW,UAAW,aAKlDyL,OAAQ,CACNC,MAAO,CACL5N,EAAG,CAAC,OAAU,UACd/F,EAAG,CAAC,OAAU,YAIlB4T,MAAO,CACL,CACElO,KAAM,QACNnD,KAAM,aACNsR,OAAQ,EACRrR,KAAM,CACJsR,MAAO,CAAC,KAAQ,QAAS,KAAQ,QAAS,QAAW,CAAC,WAAY,YAEpEF,MAAO,CACL,CACElO,KAAM,OACNnD,KAAM,gBACNC,KAAM,CAAC,KAAQ,SACfkR,OAAQ,CACNC,MAAO,CACL5D,YAAa,CAAC,MAAS,iBACvBhK,EAAG,CAAC,OAAU,yEACd/F,EAAG,CAAC,OAAU,yEACduF,OAAQ,CAAC,MAAS,QAAS,MAAS,YACpCM,YAAa,CAAC,MAAS,GACvB+C,KAAM,CAAC,MAAS,QAAS,MAAS,YAClCmL,YAAa,CAAC,MAAS,IACvBC,cAAe,CAAC,MAAS,OAI/B,CACEtO,KAAM,SACNnD,KAAM,kBACNC,KAAM,CAAC,KAAQ,SACfkR,OAAQ,CACNC,MAAO,CACL5N,EAAG,CAAC,OAAU,yEACd/F,EAAG,CAAC,OAAU,yEACd8G,KAAM,CAAC,MAAS,IAChB8B,KAAM,CAAC,MAAS,QAAS,MAAS,YAClCrD,OAAQ,CAAC,MAAS,SAClBM,YAAa,CAAC,MAAS,QAMjC,CACEH,KAAM,OACNnD,KAAM,cACNC,KAAM,CAAC,KAAQ,cACfqR,OAAQ,EACRH,OAAQ,CACNC,MAAO,CACL5N,EAAG,CAAC,MAAS,GACb/F,EAAG,CAAC,MAAS,GACbiU,GAAI,CAAC,OAAU,mDACfC,GAAI,CAAC,OAAU,mDACf3O,OAAQ,CAAC,MAAS,WAClBM,YAAa,CAAC,MAAS,MAI7B,CACEH,KAAM,OACNnD,KAAM,kBACNC,KAAM,CAAC,KAAQ,cACfqR,OAAQ,EACRH,OAAQ,CACNC,MAAO,CACL5N,EAAG,CAAC,OAAU,0DACd/F,EAAG,CAAC,OAAU,0DACdqS,KAAM,CAAC,MAAS,aAChB8B,MAAO,CACL,CACE1R,KAAM,kDACN9B,MAAO,SAET,CACEA,MAAO,SAGXyT,SAAU,CACR,CACE3R,KAAM,wCACN9B,MAAO,OAET,CACE8B,KAAM,yCACN9B,MAAO,UAET,CACEA,MAAO,WAGXiI,KAAM,CAAC,MAAS,WAChByL,WAAY,CAAC,MAAS,QACtB3N,KAAM,CAAC,MAAS,YAChB4N,SAAU,CAAC,MAAS,OAI1B,CACE5O,KAAM,OACNnD,KAAM,aACNC,KAAM,CAAC,KAAQ,eACfkR,OAAQ,CACNC,MAAO,CACL5D,YAAa,CAAC,MAAS,iBACvBhK,EAAG,CAAC,MAAS,MACb/F,EAAG,CAAC,MAAS,MACbuF,OAAQ,CAAC,MAAS,WAClBM,YAAa,CAAC,MAAS,GACvBmO,cAAe,CAAC,MAAS,SAOjB,QADF,SAAHhN,OAAY3C,EAAW4C,QAAQC,QAAQ,gBAAiB,OAElErE,KAAK,kBAAMD,EAAQ,QAAQ,GAC3BuE,MAAM,SAACC,GAAK,OAAKxE,EAAQ,UAADoE,OAAWI,EAAMC,SAAU,EAExD,CAAE,MAAOD,GACPxE,EAAQ,UAADoE,OAAWI,EAAMC,SAC1B,CACF,EACF,CAYA,SAASkN,EAAUnQ,EAAMC,GACvB,OAAO,IAAI1B,QAAQ,SAACC,GAClB,IACE,IAAKwB,GAAQA,EAAK9D,OAAS,EAEzB,YADAsC,EAAQ,kDAIV,IAAM0B,EAAUF,EAAK,GACfoD,EAAOpD,EAAK/B,MAAM,GAExB,GAAIiC,EAAQhE,OAAS,EAEnB,YADAsC,EAAQ,sEAKV,IAAM4R,EAAmBhN,EAAKhD,IAAI,SAAAC,GAChC,IAAIC,EAAM,CAAC,EAIX,OAHAJ,EAAQZ,QAAQ,SAACiB,EAAGrF,GAClBoF,EAAIC,GAAKF,EAAInF,EACf,GACOoF,CACT,GAGMH,EAAa6M,EAAOoD,GACtBjQ,EAAcjE,OAAS,IACzBiE,EAAcA,EAAcjE,OAAS,GAAEmD,EAAAA,EAAA,GAClCc,EAAcA,EAAcjE,OAAS,IAAE,GAAAqD,EAAA,GACzCW,EAAQ,GAAK,KAKlB,IAAMmQ,EAAgBD,EAAiBlU,OACjCoU,EAAe9K,KAAK8G,IAAI,IAAK9G,KAAK+G,IAAI,KAAsB,GAAhB8D,IAC5CE,EAAY/K,KAAK8G,IAAG1N,MAAR4G,KAAIwH,EAAQoD,EAAiBhQ,IAAI,SAAApE,GAAC,OAAIwJ,KAAKgL,IAAIxU,EAAEkE,EAAQ,IAAI,KAkG/EW,GA9FUtB,EAAA,CACRuB,QAAS,kDACTC,YAAa,0CACbC,WAAY,QACZhB,KAAM,CAAEoB,OAAQjB,GAChBc,OAAQ,CAAEC,KAAM,CAAEC,OAAQ,gBAC1BiK,MAAOkF,EACPjF,OAVoB7F,KAAK8G,IAAI,IAAK9G,KAAK+G,IAAI,IAAKgE,EAAY,IAAM,MAWlE9C,UAAW,CACT,CAAE,OAAU,CAAC,CAAE,GAAM,MAAO,MAASvN,EAAQ,GAAI,GAAM,SACvD,CAAE,OAAU,CAAC,CAAE,GAAM,OAAQ,MAASA,EAAQ,GAAI,GAAM,UACxD,CACE,UAAa,+BAAF0C,OAAiC1C,EAAQ,GAAE,iBACtD,GAAM,QAER,CAEE,UAAa,SAAF0C,OAAW1C,EAAQ,GAAE,wCAAA0C,OAAuC1C,EAAQ,IAC/E,GAAM,gBAER,CACE,UAAa,SAAF0C,OAAW1C,EAAQ,GAAE,oCAAA0C,OAAmC1C,EAAQ,IAC3E,GAAM,UAER,CACE,UAAa,SAAF0C,OAAW1C,EAAQ,GAAE,wBAAA0C,OAAuB1C,EAAQ,GAAE,+CACjE,GAAM,UAER,CACE,UAAa,SAAF0C,OAAW1C,EAAQ,GAAE,qCAAA0C,OAAoC1C,EAAQ,GAAE,6BAAA0C,OAA4B1C,EAAQ,IAClH,GAAM,eAER,CAAE,UAAa,uCAAwC,GAAM,UAG7D,CACE,OAAU,CAAC,CAAE,GAAM,OAAQ,GAAM,gBACjC,MAAS,CAAC,KAAM,MAChB,QAAW,CAACA,EAAQ,KAItB,CACE,UAAa,uBAAF0C,OACH1C,EAAQ,GAAE,igBAYlB,GAAM,cAGVwB,SAAU,CACRC,EAAG,CACDC,MAAO1B,EAAQ,GACfoB,KAAM,UACNuM,KAAM,KACNhM,KAAM,CAAEI,YAAa,GAAIH,MAAO,MAChCK,MAAO,CAAEsO,aAAc,IAAMC,aAAc,QAG/C3C,MAAO,CACL,CACE1M,KAAM,CAAEC,KAAM,MAAOoB,KAAM,IAC3BhB,SAAU,CACR9F,EAAG,CAAEgG,MAAO,eAAgBN,KAAM,eAAgBQ,MAAO,MACzDgO,GAAI,CAAElO,MAAO,OACbM,MAAO,CAAEN,MAAO,YAAaN,KAAM,UAAWa,MAAO,QAGzD,CACEd,KAAM,CAAEC,KAAM,OAAQ2O,WAAY,OAAQD,SAAU,UACpDtO,SAAU,CACR9F,EAAG,CAAEgG,MAAO,SAAUN,KAAM,gBAC5B2M,KAAM,CAAErM,MAAO,cAAeN,KAAM,WACpCY,MAAO,CACLyO,UAAW,CACT,CAAEtS,KAAM,SAAFuE,OAAW1C,EAAQ,GAAE,eAAe3D,MAAO,YAEnDA,MAAO,aAId,SACO,CAAE0R,KAAM,CAAEgC,WAAY,OAAQ/N,MAAO,aAG7B,YADF,aAAHU,OAAgB3C,EAAW4C,QAAQC,QAAQ,gBAAiB,OAEtErE,KAAK,kBAAMD,EAAQ,YAAY,GAC/BuE,MAAM,SAACC,GAAK,OAAKxE,EAAQ,UAADoE,OAAWI,EAAMC,SAAU,EAExD,CAAE,MAAOD,GACPxE,EAAQ,UAADoE,OAAWI,EAAMC,SAC1B,CACF,EACF,CAYA,SAAS2N,EAAS5Q,EAAMC,GACtB,OAAO,IAAI1B,QAAQ,SAACC,GAClB,IACE,IAAKwB,GAAQA,EAAK9D,OAAS,EAEzB,YADAsC,EAAQ,kDAIV,IAAM0B,EAAUF,EAAK,GACfoD,EAAOpD,EAAK/B,MAAM,GAExB,GAAIiC,EAAQhE,OAAS,EAEnB,YADAsC,EAAQ,qFAKV,IAAMqS,EAAQ,IAAIC,IAClB1N,EAAK9D,QAAQ,SAACe,EAAKnF,GACjB,IAAM6V,EAAS1Q,EAAI,IAAM,GACnB2Q,EAAQ3Q,EAAI,IAAM,QAAJuC,OAAY1H,GAC1BqB,EAAQ2D,EAAQhE,QAAU,GAAK0E,WAAWP,EAAI,KAAY,EAahE,GAVI0Q,IAAWF,EAAMI,IAAIF,IACvBF,EAAMK,IAAIH,EAAQ,CAChBhJ,GAAIgJ,EACJA,OAAQ,GACR5S,KAAM4S,EACNrO,KAAM,IAKLmO,EAAMI,IAAID,GAOR,CAEL,IAAMG,EAAeN,EAAMO,IAAIJ,GAC/BG,EAAaJ,OAASA,EACtBI,EAAazO,KAAOnG,CACtB,MAXEsU,EAAMK,IAAIF,EAAO,CACfjJ,GAAIiJ,EACJD,OAAQA,EACR5S,KAAM6S,EACNtO,KAAMnG,GAQZ,GAGA,IAAM8U,EAAmB7T,MAAMY,KAAKyS,EAAMzP,UAGpCkQ,EAAS,IAAIlN,IAAIiN,EAAiBjR,IAAI,SAAApE,GAAC,OAAIA,EAAE+L,EAAE,IACrDsJ,EAAiB/R,QAAQ,SAAAiS,GACnBA,EAAKR,SAAWO,EAAOL,IAAIM,EAAKR,UAClCQ,EAAKR,OAAS,GAElB,GAGA,IAAMS,EAAYH,EAAiBnV,OAC7BuV,EAAYjM,KAAK8G,IAAI,IAAK9G,KAAK+G,IAAI,IAAiB,GAAZiF,EAAiB,MAsH/D3Q,GAnHa,CACX,QAAW,6CACX,YAAe,sCACf,MAAS4Q,EACT,OAAUA,EACV,QAAW,GACX,SAAY,OACZ,WAAc,QACd,OAAU,CAAE,KAAQ,CAAE,OAAU,gBAEhC,QAAW,CACT,CACE,KAAQ,UACR,OAAU,aAEZ,CACE,KAAQ,UACR,OAAU,cAEZ,CACE,KAAQ,cACR,OAAU,gCAId,KAAQ,CACN,CACE,KAAQ,OACR,OAAUJ,EACV,UAAa,CACX,CACE,KAAQ,WACR,IAAO,KACP,UAAa,UAEf,CACE,KAAQ,YACR,MAAS,OACT,KAAQ,CAAC,MAAS,OAAQ,MAAS,cACnC,KAAQ,CAAC,CAAC,OAAU,UAAW,CAAC,OAAU,gBAC1C,GAAM,CAAC,KAAM,KAAM,KAAM,KAAM,QAAS,gBAMhD,OAAU,CACR,CACE,KAAQ,QACR,KAAQ,UACR,OAAU,CAAC,KAAQ,OAAQ,MAAS,SACpC,MAAS,CACP,UAAW,UAAW,UAAW,UAAW,UAC5C,UAAW,UAAW,UAAW,UAAW,UAC5C,UAAW,UAAW,UAAW,UAAW,YAGhD,CACE,KAAQ,UACR,KAAQ,SACR,OAAU,CAAC,KAAQ,OAAQ,MAAS,SACpC,MAAS,CAAC,GAAK,MAInB,MAAS,CACP,CACE,KAAQ,MACR,KAAQ,CAAC,KAAQ,QACjB,OAAU,CACR,MAAS,CACP,EAAK,CAAC,OAAU,WAChB,EAAK,CAAC,OAAU,WAChB,OAAU,CAAC,MAAS,SACpB,YAAe,CAAC,MAAS,IAE3B,OAAU,CACR,WAAc,CAAC,MAAS,MACxB,SAAY,CAAC,MAAS,MACtB,YAAe,CAAC,MAAS,MACzB,YAAe,CAAC,MAAS,MACzB,KAAQ,CAAC,MAAS,QAAS,MAAS,SACpC,YAAe,CAAC,MAAS,UAAW,MAAS,YAInD,CACE,KAAQ,OACR,KAAQ,CAAC,KAAQ,QACjB,OAAU,CACR,MAAS,CACP,EAAK,CAAC,OAAU,WAChB,EAAK,CAAC,OAAU,WAChB,OAAU,CAAC,OAAU,6BACrB,MAAS,CAAC,OAAU,6BACpB,KAAQ,CAAC,MAAS,WAClB,KAAQ,CAAC,MAAS,YAClB,SAAY,CAAC,MAAS,IACtB,WAAc,CAAC,MAAS,QACxB,MAAS,CAAC,MAAS,UACnB,SAAY,CAAC,MAAS,WAExB,OAAU,CACR,KAAQ,CACN,OAAU,+EAEZ,QAAW,CACT,OAAU,0EAQJ,WADF,YAAHzO,OAAe3C,EAAW4C,QAAQC,QAAQ,gBAAiB,OAErErE,KAAK,kBAAMD,EAAQ,WAAW,GAC9BuE,MAAM,SAACC,GAAK,OAAKxE,EAAQ,UAADoE,OAAWI,EAAMC,SAAU,EAExD,CAAE,MAAOD,GACPxE,EAAQ,UAADoE,OAAWI,EAAMC,SAC1B,CACF,EACF,CAYA,SAASyO,EAAQ1R,EAAMC,GACrB,OAAO,IAAI1B,QAAQ,SAACC,GAClB,IACE,IAAKwB,GAAQA,EAAK9D,OAAS,EAEzB,YADAsC,EAAQ,kDAIV,IAAM0B,EAAUF,EAAK,GACfoD,EAAOpD,EAAK/B,MAAM,GAExB,GAAIiC,EAAQhE,OAAS,EAEnB,YADAsC,EAAQ,qEAKV,IASImT,EATExR,EAAgBiD,EAAKhD,IAAI,SAAAC,GAC7B,IAAIC,EAAM,CAAC,EAIX,OAHAJ,EAAQZ,QAAQ,SAACiB,EAAGrF,GAClBoF,EAAIC,GAAKF,EAAInF,EACf,GACOoF,CACT,GAKIJ,EAAQhE,QAAU,GAEpByV,EAAWxR,EAAcC,IAAI,SAACpE,EAAGd,GAAC,MAAM,CACtC6M,GAAI,GAAFnF,OAAK5G,EAAEkE,EAAQ,IAAG,KAAA0C,OAAI1H,GACxBiD,KAAMnC,EAAEkE,EAAQ,IAChB6Q,OAAQ/U,EAAEkE,EAAQ,KAAO,OACzBwC,KAAM9B,WAAW5E,EAAEkE,EAAQ,MAAQ,EACpC,GAGY8M,EAAO,IAAI5I,IAAIuN,EAASvR,IAAI,SAAApE,GAAC,OAAIA,EAAE+U,MAAM,KAC9CzR,QAAQ,SAAAyR,GACC,SAAXA,GAAsBY,EAASC,KAAK,SAAA5V,GAAC,OAAIA,EAAE+L,KAAOgJ,CAAM,IAC1DY,EAASvS,KAAK,CACZ2I,GAAIgJ,EACJ5S,KAAM4S,EACNA,OAAQ,OACRrO,KAAM,GAGZ,GAGAiP,EAASvS,KAAK,CACZ2I,GAAI,OACJ5J,KAAM,OACN4S,OAAQ,GACRrO,KAAM,KAIRiP,EAAW,CACT,CACE5J,GAAI,OACJ5J,KAAM,OACN4S,OAAQ,GACRrO,KAAM,IACPE,OAAAoK,EACE7M,EAAcC,IAAI,SAACpE,EAAGd,GAAC,MAAM,CAC9B6M,GAAI,QAAFnF,OAAU1H,GACZiD,KAAMnC,EAAEkE,EAAQ,IAChB6Q,OAAQ,OACRrO,KAAM9B,WAAW5E,EAAEkE,EAAQ,MAAQ,EACpC,KAiJLW,GA5Ia,CACXC,QAAS,6CACTC,YAAa,wCACbC,WAAY,QACZoK,MAAO,IACPC,OAAQ,IACR2D,QAAS,EACTC,SAAU,MAEVjP,KAAM,CACJ,CACE7B,KAAM,OACNiD,OAAQuQ,EACRlE,UAAW,CACT,CACEnM,KAAM,WACNuQ,IAAK,KACLC,UAAW,UAEb,CACExQ,KAAM,UACNM,MAAO,OACPiM,KAAM,CAAEjM,MAAO,SACfmQ,OAAO,EACPC,OAAQ,WACRC,MAAO,IACPvP,KAAM,CAAC,CAAEwP,OAAQ,SAAW,CAAEA,OAAQ,cAI5C,CACE/T,KAAM,QACNsG,OAAQ,OACRgJ,UAAW,CACT,CAAEnM,KAAM,SAAU6Q,KAAM,oBAG5B,CACEhU,KAAM,SACNsG,OAAQ,OACRgJ,UAAW,CACT,CAAEnM,KAAM,SAAU6Q,KAAM,sBAK9BhD,OAAQ,CACN,CACEhR,KAAM,QACNmD,KAAM,UACNsK,OAAQ,CAAE5L,KAAM,QAAS4B,MAAO,QAChCiC,MAAO,CACL,UAAW,UAAW,UAAW,UAAW,UAC5C,UAAW,UAAW,UAAW,UAAW,YAGhD,CACE1F,KAAM,WACNmD,KAAM,UACNsK,OAAQ,CAAC,EAAG,EAAG,EAAG,GAClB/H,MAAO,CAAC,GAAI,GAAI,GAAI,KAEtB,CACE1F,KAAM,UACNmD,KAAM,UACNsK,OAAQ,CAAC,EAAG,EAAG,EAAG,GAClB/H,MAAO,CAAC,GAAK,GAAK,GAAK,KAI3B2L,MAAO,CACL,CACElO,KAAM,OACNlD,KAAM,CAAE4B,KAAM,SACdoS,aAAa,EACb9C,OAAQ,CACNC,MAAO,CACL/K,KAAM,CAAErC,MAAO,QAASP,MAAO,QAC/B+N,YAAa,CAAExN,MAAO,UAAWP,MAAO,UAE1CyQ,OAAQ,CACN1Q,EAAG,CAAEC,MAAO,MACZhG,EAAG,CAAEgG,MAAO,MACZiO,GAAI,CAAEjO,MAAO,MACbkO,GAAI,CAAElO,MAAO,MACbT,OAAQ,CAAE5E,MAAO,WACjBkF,YAAa,CAAElF,MAAO,MAI5B,CACE+E,KAAM,OACNlD,KAAM,CAAE4B,KAAM,UACdsP,OAAQ,CACNC,MAAO,CACLpO,OAAQ,CAAE5E,MAAO,WACjBkF,YAAa,CAAElF,MAAO,IAExB8V,OAAQ,CACN1Q,EAAG,CAAEC,MAAO,MACZhG,EAAG,CAAEgG,MAAO,MACZiO,GAAI,CAAEjO,MAAO,MACbkO,GAAI,CAAElO,MAAO,MACb4C,KAAM,CAAEjI,MAAO,eACfiF,QAAS,CACP0Q,OAAQ,0EAGZI,MAAO,CACL9N,KAAM,CAAEjI,MAAO,WACfoT,YAAa,CAAEpT,MAAO,OAI5B,CACE+E,KAAM,OACNlD,KAAM,CAAE4B,KAAM,UACdoS,aAAa,EACb9C,OAAQ,CACNC,MAAO,CACLjN,KAAM,CAAE/F,MAAO,+BACfwT,MAAO,CAAExT,MAAO,UAChByT,SAAU,CAAEzT,MAAO,UACnBiI,KAAM,CAAEjI,MAAO,WACf0T,WAAY,CAAE1T,MAAO,QACrB0R,KAAM,CAAErM,MAAO,QACfsO,SAAU,CAAE/N,MAAO,WAAYP,MAAO,UAExCyQ,OAAQ,CACN1Q,EAAG,CAAEuQ,OAAQ,+BACbtW,EAAG,CAAEsW,OAAQ,+BACbjH,QAAS,CACPiH,OAAQ,yEAQF,UADF,WAAHtP,OAAc3C,EAAW4C,QAAQC,QAAQ,gBAAiB,OAEpErE,KAAK,kBAAMD,EAAQ,UAAU,GAC7BuE,MAAM,SAACC,GAAK,OAAKxE,EAAQ,UAADoE,OAAWI,EAAMC,SAAU,EAExD,CAAE,MAAOD,GACPxE,EAAQ,UAADoE,OAAWI,EAAMC,SAC1B,CACF,EACF,CAYA,SAASsP,EAAUvS,EAAMC,GACvB,OAAO,IAAI1B,QAAQ,SAACC,GAClB,IACE,IAAKwB,GAAQA,EAAK9D,OAAS,EAEzB,YADAsC,EAAQ,kDAIMwB,EAAK,GAArB,IAIMwS,EAHOxS,EAAK/B,MAAM,GAIrBiB,OAAO,SAAAtE,GAAC,OAAK4I,OAAO5I,EAAE,GAAG,GACzBwF,IAAI,SAAAxF,GAAC,MAAK,CAAE2B,OAAQ3B,EAAE,GAAI,GAE7B,GAA2B,IAAvB4X,EAAYtW,OAEd,YADAsC,EAAQ,oDAKV,IAAM4C,EAASoR,EAAYpS,IAAI,SAAApE,GAAC,OAAIA,EAAEO,KAAK,GACrCkW,EAASjN,KAAK+G,IAAG3N,MAAR4G,KAAIwH,EAAQ5L,IACrBsR,EAASlN,KAAK8G,IAAG1N,MAAR4G,KAAIwH,EAAQ5L,IAKrBuR,GAJQD,EAASD,GAGN,GAEXG,EAAUpN,KAAKqN,MAAMJ,EAASE,GAAYA,EAC1CG,EAAUtN,KAAKuN,KAAKL,EAASC,GAAYA,EAgE/C9R,GA7DUtB,EAAA,CACR,QAAW,kDACX,YAAe,iCACf,WAAc,QACd,OAAU,CAAE,KAAQ,CAAE,OAAU,gBAChC,KAAQ,CAAE,OAAUiT,GACpB,KAAQ,CACN,KAAQ,MACR,SAAW,EACX,OAAU,QACV,YAAe,GAEjB,SAAY,CACV,EAAK,CACH,MAAS,QACT,IAAO,CACL,OAAU,CAACI,EAASE,GACpB,KAAQH,EACR,MAAQ,GAEV,KAAQ,eACR,KAAQ,CACN,MAAS,QACT,cAAiB,GACjB,cAAiB,GACjB,WAAc,UACd,WAAc,WAEhB,MAAS,CACP,OAAU,CAACC,EAASE,GACpB,MAAS,QACT,aAAgB,IAChB,aAAgB,MAGpB,EAAK,CACH,UAAa,QACb,KAAQ,eACR,KAAQ,CACN,MAAS,QACT,cAAiB,GACjB,cAAiB,GACjB,WAAc,UACd,WAAc,UACd,UAAa,YAGjB,MAAS,CACP,MAAS,aAEZ,SACS,CACR,KAAQ,WACR,KAAQ,CACN,WAAc,UACd,WAAc,UACd,UAAa,aAKD,YADF,aAAHlQ,OAAgB3C,EAAW4C,QAAQC,QAAQ,gBAAiB,OAEtErE,KAAK,kBAAMD,EAAQ,YAAY,GAC/BuE,MAAM,SAACC,GAAK,OAAKxE,EAAQ,UAADoE,OAAWI,EAAMC,SAAU,EAExD,CAAE,MAAOD,GACPxE,EAAQ,UAADoE,OAAWI,EAAMC,SAC1B,CACF,EACF,CAYA,SAAS+P,EAAIhT,EAAMC,GACjB,OAAO,IAAI1B,QAAQ,SAACC,GAClB,IACE,IAAKwB,GAAQA,EAAK9D,OAAS,EAEzB,YADAsC,EAAQ,kDAIV,IAAM0B,EAAUF,EAAK,GACfoD,EAAOpD,EAAK/B,MAAM,GAExB,GAAIiC,EAAQhE,OAAS,EAEnB,YADAsC,EAAQ,6DAKV,IAAMyU,EAAU,CACdflE,OAAO,SAAAtE,GAAC,OAAIA,EAAE,KAAO4I,OAAO5I,EAAE,GAAG,GACjCwF,IAAI,SAAAxF,GACH,IAAMuY,GAAOvY,EAAE,IAAM,IAAIwY,cAAcC,OAEvC,MAAO,CACLtL,GAFYkL,EAAQE,GAGpBA,IAAKA,EACLG,MAAO1Y,EAAE,GAEb,GACCsE,OAAO,SAAAlD,GAAC,OAAIA,EAAE+L,EAAE,GAEnB,GAAyB,IAArBmL,EAAUhX,OAEZ,YADAsC,EAAQ,2FAsCVqC,GAjCa,CACXC,QAAS,kDACTsK,MAAO,IACPC,OAAQ,IACRrL,KAAM,CACJuT,IAAK,iEACLxP,OAAQ,CAAEzC,KAAM,WAAYkS,QAAS,cAEvC/F,UAAW,CACT,CACEgG,OAAQ,KACRrV,KAAM,CACJ4B,KAAM,CAAEoB,OAAQ8R,GAChBrB,IAAK,KACL6B,OAAQ,CAAC,OAAQ,UAIvBC,WAAY,CAAErS,KAAM,cACpBD,KAAM,CAAEC,KAAM,WAAYH,OAAQ,QAASM,YAAa,IACxDC,SAAU,CACRQ,MAAO,CACLN,MAAO,OACPN,KAAM,eACNa,MAAO,CAAEC,OAAQ,UAEnBZ,QAAS,CACP,CAAEI,MAAO,MAAON,KAAM,UAAWQ,MAAO,kBACxC,CAAEF,MAAO,OAAQN,KAAM,eAAgBQ,MAAO,YAKlC,MADF,OAAHc,OAAU3C,EAAW4C,QAAQC,QAAQ,gBAAiB,OAEhErE,KAAK,kBAAMD,EAAQ,MAAM,GACzBuE,MAAM,SAACC,GAAK,OAAKxE,EAAQ,UAADoE,OAAWI,EAAMC,SAAU,EAExD,CAAE,MAAOD,GACPxE,EAAQ,UAADoE,OAAWI,EAAMC,SAC1B,CACF,EACF,CAYA,SAAS2Q,EAAY5T,EAAMC,GACzB,OAAO,IAAI1B,QAAQ,SAACC,GAClB,IACE,IAAKwB,GAAQA,EAAK9D,OAAS,EAEzB,YADAsC,EAAQ,kDAIV,IAAM0B,EAAUF,EAAK,GACfoD,EAAOpD,EAAK/B,MAAM,GAExB,GAAIiC,EAAQhE,OAAS,EAEnB,YADAsC,EAAQ,8EAKV,IAiBMqV,EAjBgBzQ,EAAKhD,IAAI,SAAAC,GAC7B,IAAIC,EAAM,CAAC,EAIX,OAHAJ,EAAQZ,QAAQ,SAACiB,EAAGrF,GAClBoF,EAAIC,GAAKF,EAAInF,EACf,GACOoF,CACT,GAWsCF,IAAI,SAACC,EAAKqF,GAC9C,IATyBoO,EASnBC,EARgB,iBADGD,EASMzT,EAAIH,EAAQ,KAPlC,IAAIqL,KAAK/F,KAAKuM,MAAyB,OAAlB+B,EAAS,OAAiB,MAEjD,IAAIvI,KAAKuI,GAMVE,EAAOpT,WAAWP,EAAIH,EAAQ,MAAQ,EACtC+T,EAAOrT,WAAWP,EAAIH,EAAQ,MAAQ,EACtCgU,EAAMtT,WAAWP,EAAIH,EAAQ,MAAQ,EACrCiU,EAAQvT,WAAWP,EAAIH,EAAQ,MAAQ,EAE7C,OAAIsD,MAAMuQ,EAAKrI,YAAclI,MAAMwQ,IAASxQ,MAAMyQ,IAASzQ,MAAM0Q,IAAQ1Q,MAAM2Q,GACtE,KAGF,CACLJ,KAAMA,EAAKK,cACXJ,KAAMA,EACNC,KAAMA,EACNC,IAAKA,EACLC,MAAOA,EAEX,GAAGjV,OAAOmV,SAEV,GAA+B,IAA3BR,EAAgB3X,OAElB,YADAsC,EAAQ,0CA+FVqC,GA1FUtB,EAAA,CACR,QAAW,kDACX,MAAS,IACT,YAAe,yCACf,WAAc,QACd,OAAU,CAAE,KAAQ,CAAE,OAAU,gBAChC,KAAQ,CAAE,OAAUsU,GACpB,SAAY,CACV,EAAK,CACH,MAAS,OACT,KAAQ,WACR,MAAS,OACT,KAAQ,CACN,OAAU,QACV,YAAe,GACf,cAAiB,GACjB,cAAiB,GACjB,WAAc,UACd,WAAc,UACd,KAAQ,aAGZ,EAAK,CACH,KAAQ,eACR,MAAS,CAAE,MAAQ,GACnB,KAAQ,CACN,MAAS,QACT,cAAiB,GACjB,cAAiB,GACjB,WAAc,UACd,WAAc,UACd,KAAQ,WACR,MAAQ,EACR,UAAa,YAGjB,MAAS,CACP,UAAa,CACX,KAAQ,2BACR,MAAS,WAEX,MAAS,YAGb,MAAS,CACP,CACE,KAAQ,CACN,KAAQ,OACR,SAAW,GAEb,SAAY,CACV,EAAK,CAAE,MAAS,OAChB,GAAM,CAAE,MAAS,QACjB,QAAW,CACT,CAAE,MAAS,OAAQ,KAAQ,WAAY,MAAS,OAAQ,OAAU,YAClE,CAAE,MAAS,OAAQ,KAAQ,eAAgB,MAAS,OAAQ,OAAU,OACtE,CAAE,MAAS,OAAQ,KAAQ,eAAgB,MAAS,OAAQ,OAAU,OACtE,CAAE,MAAS,MAAO,KAAQ,eAAgB,MAAS,MAAO,OAAU,OACpE,CAAE,MAAS,QAAS,KAAQ,eAAgB,MAAS,QAAS,OAAU,UAI9E,CACE,KAAQ,CACN,KAAQ,MACR,SAAW,GAEb,SAAY,CACV,EAAK,CAAE,MAAS,QAChB,GAAM,CAAE,MAAS,SACjB,QAAW,CACT,CAAE,MAAS,OAAQ,KAAQ,WAAY,MAAS,OAAQ,OAAU,YAClE,CAAE,MAAS,OAAQ,KAAQ,eAAgB,MAAS,OAAQ,OAAU,OACtE,CAAE,MAAS,OAAQ,KAAQ,eAAgB,MAAS,OAAQ,OAAU,OACtE,CAAE,MAAS,MAAO,KAAQ,eAAgB,MAAS,MAAO,OAAU,OACpE,CAAE,MAAS,QAAS,KAAQ,eAAgB,MAAS,QAAS,OAAU,YAI/E,SACS,CACR,KAAQ,WACR,KAAQ,CACN,WAAc,UACd,WAAc,UACd,UAAa,aAKD,cADF,eAAHjR,OAAkB3C,EAAW4C,QAAQC,QAAQ,gBAAiB,OAExErE,KAAK,kBAAMD,EAAQ,cAAc,GACjCuE,MAAM,SAACC,GAAK,OAAKxE,EAAQ,UAADoE,OAAWI,EAAMC,SAAU,EAExD,CAAE,MAAOD,GACPxE,EAAQ,UAADoE,OAAWI,EAAMC,SAC1B,CACF,EACF,CAYA,SAASqR,EAAItU,EAAMC,GACjB,OAAO,IAAI1B,QAAQ,SAACC,GAClB,IACE,IAAKwB,GAAQA,EAAK9D,OAAS,EAEzB,YADAsC,EAAQ,kDAIV,IAAM0B,EAAUF,EAAK,GACfoD,EAAOpD,EAAK/B,MAAM,GAExB,GAAIiC,EAAQhE,OAAS,EAEnB,YADAsC,EAAQ,kFAKV,IASM+V,EATgBnR,EAAKhD,IAAI,SAAAC,GAC7B,IAAIC,EAAM,CAAC,EAIX,OAHAJ,EAAQZ,QAAQ,SAACiB,EAAGrF,GAClBoF,EAAIC,GAAKF,EAAInF,EACf,GACOoF,CACT,GAG4BF,IAAI,SAACC,EAAKqF,GAAK,MAAM,CAC/CjB,OAAQpE,EAAIH,EAAQ,IACpBoH,OAAQjH,EAAIH,EAAQ,IACpB3D,MAAO2D,EAAQhE,QAAU,GAAKmE,EAAIH,EAAQ,IAAMG,EAAIH,EAAQ,IAAM,EAClEsU,MAAOtU,EAAQhE,QAAU,GAAKmE,EAAIH,EAAQ,IAAMG,EAAIH,EAAQ,IAAM,UACnE,GAGKuU,EAAU,IAAI3D,IACpByD,EAAMjV,QAAQ,SAAAoV,GACPD,EAAQxD,IAAIyD,EAAKjQ,SACpBgQ,EAAQvD,IAAIwD,EAAKjQ,OAAQ,CACvBtG,KAAMuW,EAAKjQ,OACX+P,MAAOE,EAAKF,MACZ9O,MAAO+O,EAAQ/R,OAGd+R,EAAQxD,IAAIyD,EAAKpN,SACpBmN,EAAQvD,IAAIwD,EAAKpN,OAAQ,CACvBnJ,KAAMuW,EAAKpN,OACXkN,MAAOE,EAAKF,MACZ9O,MAAO+O,EAAQ/R,MAGrB,GAEA,IAAMmO,EAAQrT,MAAMY,KAAKqW,EAAQrT,UAG3BuT,EAAmBJ,EAAMnU,IAAI,SAAAsU,GAAI,MAAK,CAC1CjQ,OAAQgQ,EAAQrD,IAAIsD,EAAKjQ,QAAQiB,MACjC4B,OAAQmN,EAAQrD,IAAIsD,EAAKpN,QAAQ5B,MACjCnJ,MAAOmY,EAAKnY,MACb,GAyJDsE,GAtJUtB,EAAA,CACRuB,QAAS,6CACTC,YAAa,mCACbqK,MAAO5F,KAAK8G,IAAI,IAAoB,GAAfuE,EAAM3U,QAC3BmP,OAAQ,IACR2D,QAAS,CAAEtE,IAAK,GAAIkK,OAAQ,GAAI1M,KAAM,GAAI2M,MAAO,IACjD7T,WAAY,QACZC,OAAQ,CAAEC,KAAM,CAAEC,OAAQ,gBAC1BnB,KAAM,CACJ,CACE7B,KAAM,QACNiD,OAAQuT,GAEV,CACExW,KAAM,eACNsG,OAAQ,QACRgJ,UAAW,CACT,CAAEnM,KAAM,YAAawT,QAAS,CAAC,UAAWlH,GAAI,CAAC,YAGnD,CACEzP,KAAM,eACNsG,OAAQ,QACRgJ,UAAW,CACT,CAAEnM,KAAM,YAAawT,QAAS,CAAC,UAAWlH,GAAI,CAAC,YAGnD,CACEzP,KAAM,QACNiD,OAAQyP,EACRpD,UAAW,CACT,CAAEnM,KAAM,SAAUyT,IAAK,CAAC,QAASnH,GAAI,CAAC,UACtC,CACEtM,KAAM,SAAUlD,KAAM,eAAgByT,IAAK,SAC3C6B,OAAQ,CAAC,SAAU9F,GAAI,CAAC,gBACxBoH,QAAS,CAAEC,MAAO,IAEpB,CACE3T,KAAM,SAAUlD,KAAM,eAAgByT,IAAK,SAC3C6B,OAAQ,CAAC,SAAU9F,GAAI,CAAC,gBACxBoH,QAAS,CAAEC,MAAO,IAEpB,CACE3T,KAAM,UAAWsM,GAAI,SACrBuE,KAAM,wEAMdhD,OAAQ,CACN,CACEhR,KAAM,WACNmD,KAAM,OACNsK,OAAQ,CAAE5L,KAAM,QAAS4B,MAAO,QAASiM,MAAM,GAC/ChK,MAAO,SAET,CACE1F,KAAM,QACNmD,KAAM,UACNuC,MAAO,CAAEzB,OAAQ,cACjBwJ,OAAQ,CAAE5L,KAAM,QAAS4B,MAAO,WAIpC4N,MAAO,CACL,CACElO,KAAM,SACNnD,KAAM,SACNiU,aAAa,EACbhU,KAAM,CAAE4B,KAAM,SACdsP,OAAQ,CACNC,MAAO,CAAEtE,QAAS,CAAE1O,MAAO,IAC3B8V,OAAQ,CACN1Q,EAAG,CAAEQ,MAAO,WAAYP,MAAO,SAC/BhG,EAAG,CAAEW,MAAO,GACZmG,KAAM,CAAEd,MAAO,SAAUsT,KAAM,EAAGC,OAAQ,IAC1C3Q,KAAM,CAAErC,MAAO,QAASP,MAAO,YAIrC,CACEN,KAAM,OACNlD,KAAM,CAAE4B,KAAM,SACdsP,OAAQ,CACN+C,OAAQ,CACNlR,OAAQ,CAAE5E,MAAO,WACjBqT,cAAe,CAAErT,MAAO,IACxBkF,YAAa,CAAEG,MAAO,QAASsT,KAAM,EAAGC,OAAQ,KAGpD1H,UAAW,CACT,CACEnM,KAAM,SAAUlD,KAAM,SAAUyT,IAAK,cACrC6B,OAAQ,CAAC,eAAgB,gBACzB9F,GAAI,CAAC,aAAc,eAErB,CACEtM,KAAM,WACN8T,QAAS,CAAEjD,KAAM,+CACjBkD,QAAS,CAAElD,KAAM,+CACjBmD,QAAS,CAAEnD,KAAM,KACjBoD,QAAS,CAAEpD,KAAM,KACjBvI,MAAO,SAIb,CACEtI,KAAM,SACNlD,KAAM,CAAE4B,KAAM,UACdsP,OAAQ,CACN+C,OAAQ,CACN1Q,EAAG,CAAEC,MAAO,KACZhG,EAAG,CAAEgG,MAAO,KACZ4C,KAAM,CAAE5C,MAAO,QACfc,KAAM,CAAEd,MAAO,QACfT,OAAQ,CAAE5E,MAAO,SACjBkF,YAAa,CAAElF,MAAO,GACtBiF,QAAS,CACP0Q,OAAQ,gGAKhB,CACE5Q,KAAM,OACNlD,KAAM,CAAE4B,KAAM,SACdsP,OAAQ,CACN+C,OAAQ,CACN1Q,EAAG,CAAEQ,MAAO,WAAYP,MAAO,SAC/BhG,EAAG,CAAEW,MAAO,IACZ2T,SAAU,CAAE3T,MAAO,IACnBwT,MAAO,CAAExT,MAAO,UAChByT,SAAU,CAAEzT,MAAO,OACnBiZ,MAAO,CAAEjZ,OAAQ,IACjB0R,KAAM,CAAErM,MAAO,QACf4C,KAAM,CAAEjI,MAAO,WACf+F,KAAM,CAAE/F,MAAO,iBAItB,SAEO,CACN2E,KAAM,CAAEC,OAAQ,eAChBmB,KAAM,WACN2L,KAAM,CAAE3L,KAAM,WAAY4N,SAAU,GAAI1L,KAAM,aAIhC,MADF,OAAH5B,OAAU3C,EAAW4C,QAAQC,QAAQ,gBAAiB,OAEhErE,KAAK,kBAAMD,EAAQ,MAAM,GACzBuE,MAAM,SAACC,GAAK,OAAKxE,EAAQ,UAADoE,OAAWI,EAAMC,SAAU,EAExD,CAAE,MAAOD,GACPxE,EAAQ,UAADoE,OAAWI,EAAMC,SAC1B,CACF,EACF,CAYA,SAASwS,EAAKzV,EAAMC,GAClB,OAAO,IAAI1B,QAAQ,SAACC,GAClB,IACE,IAAKwB,GAAQA,EAAK9D,OAAS,EAEzB,YADAsC,EAAQ,kDAIV,IAAM0B,EAAUF,EAAK,GACfoD,EAAOpD,EAAK/B,MAAM,GAExB,GAAIiC,EAAQhE,OAAS,EAEnB,YADAsC,EAAQ,iFAKV,IAAMqS,EAAQ,IAAIC,IAElB1N,EAAK9D,QAAQ,SAACe,EAAKnF,GACjB,IAAM6V,EAAS1Q,EAAI,IAAM,GACnB2Q,EAAQ3Q,EAAI,IAAM,QAAJuC,OAAY1H,GAC1BqB,EAAQ2D,EAAQhE,QAAU,GAAK0E,WAAWP,EAAI,KAAY,EAahE,GAVI0Q,IAAWF,EAAMI,IAAIF,IACvBF,EAAMK,IAAIH,EAAQ,CAChBhJ,GAAIgJ,EACJA,OAAQ,GACR5S,KAAM4S,EACNxU,MAAO,IAKNsU,EAAMI,IAAID,GAOR,CAEL,IAAMG,EAAeN,EAAMO,IAAIJ,GAC/BG,EAAaJ,OAASA,EACtBI,EAAa5U,MAAQA,CACvB,MAXEsU,EAAMK,IAAIF,EAAO,CACfjJ,GAAIiJ,EACJD,OAAQA,EACR5S,KAAM6S,EACNzU,MAAOA,GAQb,GAGA,IAAMoV,EAAWnU,MAAMY,KAAKyS,EAAMzP,UAG5BkQ,EAAS,IAAIlN,IAAIuN,EAASvR,IAAI,SAAApE,GAAC,OAAIA,EAAE+L,EAAE,IAC7C4J,EAASrS,QAAQ,SAAAiS,GACXA,EAAKR,SAAWO,EAAOL,IAAIM,EAAKR,UAClCQ,EAAKR,OAAS,GAElB,GAGA,IAAMS,EAAYG,EAASzV,OAoI3B2E,GA/Ha,CACX,QAAW,6CACX,YAAe,oCACf,MAPmB2E,KAAK8G,IAAI,IAAK9G,KAAK+G,IAAI,KAAkB,GAAZiF,IAQhD,OAPoBhM,KAAK8G,IAAI,IAAK9G,KAAK+G,IAAI,KAAkB,GAAZiF,IAQjD,QAAW,GACX,WAAc,QACd,OAAU,CAAE,KAAQ,CAAE,OAAU,gBAEhC,QAAW,CACT,CACE,KAAQ,SACR,MAAS,QAEX,CACE,KAAQ,QACR,MAAS,aAIb,KAAQ,CACN,CACE,KAAQ,OACR,OAAUG,EACV,UAAa,CACX,CACE,KAAQ,WACR,IAAO,KACP,UAAa,UAEf,CACE,KAAQ,OACR,OAAU,CAAC,OAAU,UACrB,KAAQ,CAAC,CAAC,OAAU,eAAgB,CAAC,OAAU,gBAC/C,GAAM,CAAC,IAAK,IAAK,QAAS,eAIhC,CACE,KAAQ,QACR,OAAU,OACV,UAAa,CACX,CAAE,KAAQ,aACV,CACE,KAAQ,WACR,OAAU,aACV,MAAS,CAAC,OAAU,aAM5B,OAAU,CACR,CACE,KAAQ,QACR,KAAQ,UACR,MAAS,CAAC,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,WAC7G,OAAU,CAAC,KAAQ,OAAQ,MAAS,UAEtC,CACE,KAAQ,OACR,KAAQ,SACR,MAAS,CAAC,IAAK,KACf,OAAU,CAAC,KAAQ,OAAQ,MAAS,WAIxC,MAAS,CACP,CACE,KAAQ,OACR,KAAQ,CAAC,KAAQ,SACjB,OAAU,CACR,OAAU,CACR,KAAQ,CAAC,MAAS,QAClB,OAAU,CAAC,MAAS,WACpB,YAAe,CAAC,MAAS,GACzB,cAAiB,CAAC,MAAS,OAIjC,CACE,KAAQ,SACR,KAAQ,CAAC,KAAQ,QACjB,OAAU,CACR,MAAS,CACP,OAAU,CAAC,MAAS,WACpB,YAAe,CAAC,MAAS,IAE3B,OAAU,CACR,EAAK,CAAC,MAAS,KACf,EAAK,CAAC,MAAS,KACf,KAAQ,CAAC,MAAS,OAAQ,MAAS,SACnC,KAAQ,CAAC,MAAS,QAAS,MAAS,SACpC,YAAe,CAAC,MAAS,IACzB,QAAW,CACT,OAAU,6GAGd,MAAS,CACP,YAAe,CAAC,MAAS,GACzB,YAAe,CAAC,MAAS,MAI/B,CACE,KAAQ,OACR,KAAQ,CAAC,KAAQ,QACjB,OAAU,CACR,MAAS,CACP,SAAY,CAAC,MAAS,IACtB,SAAY,CAAC,MAAS,UACtB,KAAQ,CAAC,MAAS,YAClB,WAAc,CAAC,MAAS,SAE1B,OAAU,CACR,EAAK,CAAC,MAAS,KACf,EAAK,CAAC,MAAS,KACf,KAAQ,CAAC,MAAS,QAClB,GAAM,CAAC,OAAU,6BACjB,MAAS,CAAC,OAAU,qCACpB,KAAQ,CAAC,MAAS,gBAOV,OADF,QAAH/O,OAAW3C,EAAW4C,QAAQC,QAAQ,gBAAiB,OAEjErE,KAAK,kBAAMD,EAAQ,OAAO,GAC1BuE,MAAM,SAACC,GAAK,OAAKxE,EAAQ,UAADoE,OAAWI,EAAMC,SAAU,EAExD,CAAE,MAAOD,GACPxE,EAAQ,UAADoE,OAAWI,EAAMC,SAC1B,CACF,EACF,CAYA,SAASyS,EAAU1V,EAAMC,GACvB,OAAO,IAAI1B,QAAQ,SAACC,GAClB,IACE,IAAKwB,GAAQA,EAAK9D,OAAS,EAEzB,YADAsC,EAAQ,kDAIV,IAAM0B,EAAUF,EAAK,GACfoD,EAAOpD,EAAK/B,MAAM,GAExB,GAAIiC,EAAQhE,OAAS,EAEnB,YADAsC,EAAQ,2DA4FVqC,GA9Ea,CACXC,QAAS,6CACTC,YAAa,kCACbqK,MAAO,IACPC,OAAQ,IACR2D,QAAS,EACThO,WAAY,QACZC,OAAQ,CAAEC,KAAM,CAAEC,OAAQ,gBAC1BnB,KAAM,CACJ,CACE7B,KAAM,QACNiD,OApBgBgC,EAAKhD,IAAI,SAAAC,GAC7B,IAAIC,EAAM,CAAC,EAIX,OAHAJ,EAAQZ,QAAQ,SAACiB,EAAGrF,GAClBoF,EAAIC,GAAKF,EAAInF,EACf,GACOoF,CACT,GAeMmN,UAAW,CACT,CACEnM,KAAM,eACNM,MAAO1B,EAAQ,GACfyV,KAAM,QACNC,QAAS,aACTC,UAAW,0+BAEb,CACEvU,KAAM,UACNsM,GAAI,QACJuE,KAAM,kCAER,CACE7Q,KAAM,UACNsM,GAAI,SACJuE,KAAM,qCAMdhD,OAAQ,CACN,CACEhR,KAAM,QACNmD,KAAM,UACNsK,OAAQ,CAAE5L,KAAM,QAAS4B,MAAO,QAChCiC,MAAO,CAAC,UAAW,UAAW,UAAW,UAAW,UAAW,aAInE2L,MAAO,CACL,CACElO,KAAM,OACNlD,KAAM,CAAE4B,KAAM,SACdsP,OAAQ,CACNC,MAAO,CACLtB,KAAM,CAAErM,MAAO,QACfmO,MAAO,CAAExT,MAAO,UAChByT,SAAU,CAAEzT,MAAO,cACnBiI,KAAM,CAAErC,MAAO,QAASP,MAAO,SAEjCyQ,OAAQ,CACN1C,YAAa,CAAEpT,MAAO,IAExB+V,MAAO,CACL3C,YAAa,CAAEpT,MAAO,MAG1BkR,UAAW,CACT,CACEnM,KAAM,YACNoB,KAAM,CAAC,IAAK,KACZuL,KAAM,CAAErM,MAAO,QACfkU,OAAQ,CAAElU,MAAO,eACjBU,KAAM,wBACN4N,SAAU,CAAEtO,MAAO,eACnBqO,WAAY,CAAErO,MAAO,gBACrBmU,cAAe,CAAC,GAAI,IACpB/G,QAAS,OAOD,YADF,aAAHpM,OAAgB3C,EAAW4C,QAAQC,QAAQ,gBAAiB,OAEtErE,KAAK,kBAAMD,EAAQ,YAAY,GAC/BuE,MAAM,SAACC,GAAK,OAAKxE,EAAQ,UAADoE,OAAWI,EAAMC,SAAU,EAExD,CAAE,MAAOD,GACPxE,EAAQ,UAADoE,OAAWI,EAAMC,SAC1B,CACF,EACF,CAYA,SAAS+S,EAAMhW,EAAMC,GACnB,OAAO,IAAI1B,QAAQ,SAACC,GAClB,IACE,IAAKwB,GAAQA,EAAK9D,OAAS,EAEzB,YADAsC,EAAQ,kDAIV,IAAM0B,EAAUF,EAAK,GACfoD,EAAOpD,EAAK/B,MAAM,GAExB,GAAIiC,EAAQhE,OAAS,EAEnB,YADAsC,EAAQ,sEAyEVqC,GA3Da,CACXC,QAAS,kDACTC,YAAa,mDACbC,WAAY,QACZC,OAAQ,CACNC,KAAM,CAAEC,OAAQ,eAChBU,KAAM,CACJE,cAAe,GACfC,cAAe,GACfO,WAAY,UACZC,WAAY,YAGhBxC,KAAM,CAAEoB,OAtBYgC,EAAKhD,IAAI,SAAAC,GAC7B,IAAIC,EAAM,CAAC,EAIX,OAHAJ,EAAQZ,QAAQ,SAACiB,EAAGrF,GAClBoF,EAAIC,GAAKF,EAAInF,EACf,GACOoF,CACT,IAiBEe,KAAM,CACJC,KAAM,OACN2U,UAAW,EACXvT,KAAM,GACNR,MAAO,UACP+I,QAAS,GACTzJ,SAAS,GAEXE,SAAQrC,EAAAA,EAAA,CACNzD,EAAG,CACDgG,MAAO1B,EAAQ,GACfoB,KAAM,UACNO,KAAM,CACJC,MAAO5B,EAAQ,GACf+B,WAAY,IAGhBN,EAAG,CACDC,MAAO1B,EAAQ,GACfoB,KAAM,eACNO,KAAM,CACJC,MAAO5B,EAAQ,GACfgW,MAAM,EACNzT,UAAW,UACX0T,YAAa,MAIbjW,EAAQhE,OAAS,GAAK,CACxBgG,MAAO,CACLN,MAAO1B,EAAQ,GACfoB,KAAM,UACNa,MAAO,CAAEC,OAAQ,cACjBC,OAAQ,CACNP,MAAO5B,EAAQ,GACf4D,OAAQ,QACR9B,cAAe,GACfD,cAAe,OAGpB,IACDP,QAAStB,EAAQE,IAAI,SAAAG,GAAC,MAAK,CAAEqB,MAAOrB,EAAGe,KAAM,UAAW,MAI1C,QADF,SAAHsB,OAAY3C,EAAW4C,QAAQC,QAAQ,gBAAiB,OAElErE,KAAK,kBAAMD,EAAQ,QAAQ,GAC3BuE,MAAM,SAACC,GAAK,OAAKxE,EAAQ,UAADoE,OAAWI,EAAMC,SAAU,EAExD,CAAE,MAAOD,GACPxE,EAAQ,UAADoE,OAAWI,EAAMC,SAC1B,CACF,EACF,CAYA,SAASmT,EAAQpW,EAAMC,GACrB,OAAO,IAAI1B,QAAQ,SAACC,GAClB,IACE,IAAKwB,GAAQA,EAAK9D,OAAS,EAEzB,YADAsC,EAAQ,kDAIV,IAAM0B,EAAUF,EAAK,GACfoD,EAAOpD,EAAK/B,MAAM,GAExB,GAAIiC,EAAQhE,OAAS,EAEnB,YADAsC,EAAQ,0EAqJVqC,GAvIUtB,EAAA,CACRuB,QAAS,kDACTC,YAAa,kDACbC,WAAY,QACZC,OAAQ,CAAEC,KAAM,CAAEC,OAAQ,gBAC1BnB,KAAM,CAAEoB,OAdYgC,EAAKhD,IAAI,SAAAC,GAC7B,IAAIC,EAAM,CAAC,EAIX,OAHAJ,EAAQZ,QAAQ,SAACiB,EAAGrF,GAClBoF,EAAIC,GAAKF,EAAInF,EACf,GACOoF,CACT,IASE+V,QAAS,GACTC,OAAQ,QACRC,QAAS,CACP,CACElL,OAAQ,GACRhK,KAAM,CACJC,KAAM,MACNH,OAAQ,KACRqV,gBAAiB,EACjBhV,SAAS,EACTU,MAAO,aAETR,SAAU,CACRC,EAAG,CACDC,MAAO1B,EAAQ,GACfoB,KAAM,UACNO,KAAM,MAERjG,EAAG,CACDgG,MAAO1B,EAAQ,GACf4L,UAAW,OACXxK,KAAM,eACNO,KAAM,QAIZ,CACEwU,QAAS,GACTC,OAAQ,QACRG,QAAS,CACP,CACEpV,KAAM,CACJC,KAAM,OACNH,OAAQ,QACRK,SAAS,GAEXE,SAAU,CACR9F,EAAG,CACDgG,MAAO1B,EAAQ,GACfoB,KAAM,UACNQ,MAAO5B,EAAQ,GACf2B,KAAM,CACJ+J,QAAQ,EACR8K,OAAO,EACPC,QAAQ,EACR1U,WAAY,EACZ2U,aAAc,IAGlBjV,EAAG,CACDC,MAAO1B,EAAQ,GACfoB,KAAM,UACNQ,MAAO5B,EAAQ,GACf2B,KAAM,CACJ+J,QAAQ,EACR8K,OAAO,EACPC,QAAQ,EACR1U,WAAY,IAGhBC,MAAO,CACL4J,UAAW,OACXlK,MAAO1B,EAAQ,GACfoB,KAAM,eACNQ,MAAO5B,EAAQ,GACfiC,MAAO,CACLC,OAAQ,SAEVC,OAAQ,CACNwU,UAAW,WACXC,eAAgB,QAKxB,CACEzV,KAAM,CACJC,KAAM,MACNH,OAAQ,KACRqV,gBAAiB,EACjBhV,SAAS,EACTU,MAAO,aAETkJ,MAAO,GACP1J,SAAU,CACR9F,EAAG,CACDgG,MAAO1B,EAAQ,GACfoB,KAAM,UACNO,KAAM,MAERF,EAAG,CACDC,MAAO1B,EAAQ,GACfoB,KAAM,eACNwK,UAAW,OACXjK,KAAM,YAMjB,SACO,CACNoN,SAAU,CACR3N,KAAM,MACNyV,SAAU,WAEZ7V,KAAM,CAAEC,OAAQ,eAChBmB,KAAM,WACN2L,KAAM,CAAE3L,KAAM,WAAY4N,SAAU,GAAI1L,KAAM,WAC9C3C,KAAM,CACJ6U,OAAO,EACPR,MAAM,EACNtK,QAAQ,EACRrJ,WAAY,UACZR,cAAe,GACfC,cAAe,GACfQ,WAAY,WAEdH,OAAQ,CACN2U,UAAW,WACXC,gBAAiB,OACjBzU,WAAY,UACZ0U,UAAW,WACXnV,cAAe,GACfQ,WAAY,aAKA,UADF,WAAHK,OAAc3C,EAAW4C,QAAQC,QAAQ,gBAAiB,OAEpErE,KAAK,kBAAMD,EAAQ,UAAU,GAC7BuE,MAAM,SAACC,GAAK,OAAKxE,EAAQ,UAADoE,OAAWI,EAAMC,SAAU,EAExD,CAAE,MAAOD,GACPxE,EAAQ,UAADoE,OAAWI,EAAMC,SAC1B,CACF,EACF,CAYA,SAASkU,EAAOnX,EAAMC,GACpB,OAAO,IAAI1B,QAAQ,SAACC,GAClB,IACE,IAAKwB,GAAQA,EAAK9D,OAAS,EAEzB,YADAsC,EAAQ,kDAIV,IAAM0B,EAAUF,EAAK,GACfoD,EAAOpD,EAAK/B,MAAM,GAExB,GAAIiC,EAAQhE,OAAS,EAEnB,YADAsC,EAAQ,kHA8CVqC,GAjCUtB,EAAA,CACR,QAAW,kDACXyB,WAAY,QACZC,OAAQ,CAAEC,KAAM,CAAEC,OAAQ,gBAC1B,KAAQ,CAAE,OAZUiC,EAAKhD,IAAI,SAAAxF,GAAC,MAAK,CACnCkH,MAAOlH,EAAE,GACTwc,OAAQ,EAAExc,EAAE,IAAKA,EAAE,IAAKA,EAAE,IAC1Byc,SAAU,EAAEzc,EAAE,IAAKA,EAAE,IACrB0c,QAAS,EAAE1c,EAAE,IACd,IAQC,MAAS,CACP,IAAO,CACL,MAAS,QAAS,KAAQ,UAC1B,OAAU,CAAE,WAAc,EAAG,MAAS,GAAI,WAAc,UAG5D,QAAW,GACX,KAAQ,CACN,SAAY,CACV,EAAK,CACH,KAAQ,eACR,MAAS,CAAE,MAAQ,GACnB,MAAS,OAGb,MAAS,CACP,CAAE,KAAQ,CAAE,KAAQ,MAAO,MAAS,QAAU,SAAY,CAAE,EAAK,CAAE,MAAS,eAC5E,CAAE,KAAQ,CAAE,KAAQ,MAAO,MAAS,QAAU,SAAY,CAAE,EAAK,CAAE,MAAS,eAC5E,CAAE,KAAQ,CAAE,KAAQ,MAAO,MAAS,QAAU,SAAY,CAAE,EAAK,CAAE,MAAS,eAC5E,CAAE,KAAQ,CAAE,KAAQ,MAAO,MAAS,iBAAkB,KAAQ,IAAM,SAAY,CAAE,EAAK,CAAE,MAAS,iBAClG,CAAE,KAAQ,CAAE,KAAQ,MAAO,MAAS,YAAa,KAAQ,IAAM,SAAY,CAAE,EAAK,CAAE,MAAS,iBAC7F,CAAE,KAAQ,CAAE,KAAQ,OAAQ,MAAS,SAAW,SAAY,CAAE,EAAK,CAAE,MAAS,kBAGlF,QAAW,CAAE,MAAS,CAAE,EAAK,iBAAiB,SACpC,CAAE,KAAQ,CAAE,UAAa,GAAK,MAAS,CAAE,oBAAuB,KAG1D,SADF,UAAHgI,OAAa3C,EAAW4C,QAAQC,QAAQ,gBAAiB,OAEnErE,KAAK,kBAAMD,EAAQ,SAAS,GAC5BuE,MAAM,SAACC,GAAK,OAAKxE,EAAQ,UAADoE,OAAWI,EAAMC,SAAU,EAExD,CAAE,MAAOD,GACPxE,EAAQ,UAADoE,OAAWI,EAAMC,SAC1B,CACF,EACF,CAYA,SAASsU,EAAQvX,EAAMC,GACrB,OAAO,IAAI1B,QAAQ,SAACC,GAClB,IACE,IAAKwB,GAAQA,EAAK9D,OAAS,EAEzB,YADAsC,EAAQ,kDAIV,IAAM0B,EAAUF,EAAK,GACfoD,EAAOpD,EAAK/B,MAAM,GAExB,GAAIiC,EAAQhE,OAAS,EAEnB,YADAsC,EAAQ,gEAKV,IAAMgZ,EAAcpU,EAAKhD,IAAI,SAACC,EAAKqF,GAAK,MAAM,CAC5C/D,EAAGtB,EAAI,IAAMqF,EAAQ,EACrB9J,EAAGgF,WAAWP,EAAI,KAAO,EAC1B,GAGKoX,EAAUD,EAAYpX,IAAI,SAAApE,GAAC,OAAIA,EAAEJ,CAAC,GAClC8b,EAAOlS,KAAK8G,IAAG1N,MAAR4G,KAAIwH,EAAQyK,IACnBE,EAAOnS,KAAK+G,IAAG3N,MAAR4G,KAAIwH,EAAQyK,IACnB5T,EAAQ6T,EAAOC,EAIfC,EAAa/T,EAAQ,EACrBmM,EAAW2H,EAAO9T,EAAQ,EAG1BgU,EAAaL,EAAYtb,OAgJ/B2E,GA5Ia,CACX,QAAW,kDACX,YAAe,uDACf,MANmB2E,KAAK8G,IAAI,IAAK9G,KAAK+G,IAAI,IAAkB,GAAbsL,IAO/C,OAAU,GACV,WAAc,QACd,OAAU,CACR,KAAQ,CAAE,OAAU,eACpB,KAAQ,CAAC,YAAe,aAE1B,KAAQ,CAAE,OAAUL,GACpB,SAAY,CACV,EAAK,CACH,MAAS,IACT,KAAQtX,EAAQ,GAAG4X,cAActM,SAAS,QAAU,WAAa,eACjE,MAAS,CAAC,MAAQ,EAAO,MAAQ,GACjC,KAAQ,CACN,MAAStL,EAAQ,GACjB,cAAiB,GACjB,cAAiB,GACjB,WAAc,UACd,WAAc,UACd,KAAQ,aAGZ,EAAK,CACH,KAAQ,eACR,MAAS,CAAC,OAAU,CAAC,EAAG0X,IACxB,KAAQ,CACN,MAAS1X,EAAQ,GACjB,OAAU,OACV,cAAiB,GACjB,cAAiB,GACjB,WAAc,UACd,WAAc,UACd,KAAQ,WACR,UAAa,KAInB,MAAS,CAEP,CACE,UAAa,CACX,CAAC,UAAa,wBAAF0C,OAA0BoN,EAAQ,MAAApN,OAAKgV,EAAU,MAAM,GAAM,UAE3E,KAAQ,CACN,KAAQ,OACR,MAAQ,EACR,QAAW,GACX,MAAS,UACT,YAAe,YAEjB,SAAY,CACV,EAAK,CAAC,MAAS,WAInB,CACE,UAAa,CACX,CAAC,UAAa,wBAAFhV,OAA0BoN,EAAQ,OAAApN,OAAMgV,EAAU,MAAAhV,OAAKgV,EAAU,MAAM,GAAM,UAE3F,KAAQ,CACN,KAAQ,OACR,MAAQ,EACR,QAAW,GACX,MAAS,UACT,YAAe,YAEjB,SAAY,CACV,EAAK,CAAC,MAAS,WAInB,CACE,UAAa,CACX,CAAC,UAAa,oBAAFhV,OAAsBoN,EAAQ,OAAApN,OAAmB,EAAbgV,EAAc,KAAK,GAAM,UAE3E,KAAQ,CACN,KAAQ,OACR,MAAQ,EACR,QAAW,GACX,MAAS,UACT,YAAe,YAEjB,SAAY,CACV,EAAK,CAAC,MAAS,WAInB,CACE,UAAa,CACX,CAAC,UAAa,cAAFhV,OAAgBoN,EAAQ,gBAAApN,OAAegV,EAAU,MAAM,GAAM,WAE3E,KAAQ,CACN,KAAQ,OACR,MAAQ,EACR,QAAW,GACX,MAAS,UACT,YAAe,YAEjB,SAAY,CACV,EAAK,CAAC,MAAS,YAInB,CACE,UAAa,CACX,CAAC,UAAa,cAAFhV,OAAgBoN,EAAQ,iBAAApN,OAAgBgV,EAAU,MAAAhV,OAAKgV,EAAU,MAAM,GAAM,WAE3F,KAAQ,CACN,KAAQ,OACR,MAAQ,EACR,QAAW,GACX,MAAS,UACT,YAAe,YAEjB,SAAY,CACV,EAAK,CAAC,MAAS,YAInB,CACE,UAAa,CACX,CAAC,UAAa,UAAFhV,OAAYoN,EAAQ,iBAAApN,OAA6B,EAAbgV,EAAc,KAAK,GAAM,WAE3E,KAAQ,CACN,KAAQ,OACR,MAAQ,EACR,QAAW,GACX,MAAS,UACT,YAAe,YAEjB,SAAY,CACV,EAAK,CAAC,MAAS,cAML,UADF,WAAHhV,OAAc3C,EAAW4C,QAAQC,QAAQ,gBAAiB,OAEpErE,KAAK,kBAAMD,EAAQ,UAAU,GAC7BuE,MAAM,SAACC,GAAK,OAAKxE,EAAQ,UAADoE,OAAWI,EAAMC,SAAU,EAExD,CAAE,MAAOD,GACPxE,EAAQ,UAADoE,OAAWI,EAAMC,SAC1B,CACF,EACF,CAYA,SAAS8U,EAAS/X,EAAMC,GACtB,OAAO,IAAI1B,QAAQ,SAACC,GAClB,IACE,IAAKwB,GAAQA,EAAK9D,OAAS,EAEzB,YADAsC,EAAQ,kDAIV,IAAM0B,EAAUF,EAAK,GACfoD,EAAOpD,EAAK/B,MAAM,GAExB,GAAIiC,EAAQhE,OAAS,EAEnB,YADAsC,EAAQ,wEAKV,IAAM2B,EAAgBiD,EAAKhD,IAAI,SAAAC,GAC7B,IAAIC,EAAM,CAAC,EAIX,OAHAJ,EAAQZ,QAAQ,SAACiB,EAAGrF,GAClBoF,EAAIC,GAAKF,EAAInF,EACf,GACOoF,CACT,GAGM0X,EAAc,GAEpB7X,EAAcb,QAAQ,SAAAe,GACpB,IAAMgO,EAAWhO,EAAIH,EAAQ,IACvB+X,EAASrX,WAAWP,EAAIH,EAAQ,MAAQ,EACxCgY,EAAStX,WAAWP,EAAIH,EAAQ,MAAQ,EAG9C8X,EAAY5Y,KAAK,CACfiP,SAAUA,EACV8J,OAAQjY,EAAQ,GAChB3D,MAAO0b,IAGTD,EAAY5Y,KAAK,CACfiP,SAAUA,EACV8J,OAAQjY,EAAQ,GAChB3D,MAAO2b,GAEX,GAGA,IAIIE,EAAe3H,EAAcC,EAH3B2H,EADUrL,EAAO,IAAI5I,IAAIjE,EAAcC,IAAI,SAAApE,GAAC,OAAIA,EAAEkE,EAAQ,GAAG,KAClChE,OAK7Bmc,GAAiB,GAEnBD,EAAgB5S,KAAK8G,IAAI,IAAqB,GAAhB+L,GAC9B5H,EAAe,GACfC,EAAe,IACN2H,GAAiB,GAE1BD,EAAgB5S,KAAK8G,IAAI,IAAqB,GAAhB+L,GAC9B5H,EAAe,GACfC,EAAe,KAGf0H,EAAgB5S,KAAK8G,IAAI,IAAK9G,KAAK+G,IAAI,IAAqB,GAAhB8L,IAC5C5H,EAAe,GACfC,EAAe,KA+FjB7P,GA3FUtB,EAAA,CACRuB,QAAS,kDACTC,YAAa,sCACbC,WAAY,QACZC,OAAQ,CAAEC,KAAM,CAAEC,OAAQ,gBAC1BiK,MAAO,IACPC,OAAQ+M,EACRpY,KAAM,CAAEoB,OAAQ4W,GAChBtW,SAAU,CACRC,EAAG,CACDC,MAAO,QACPN,KAAM,eACNQ,MAAO,KACPK,MAAO,CAAE8J,MAAM,GACfpK,KAAM,CACJE,cAAe,GACfQ,WAAY,UACZ2T,MAAM,EACNzT,UAAW,UACX6V,WAAY,WAGhB1c,EAAG,CACDgG,MAAO,WACPN,KAAM,UACNQ,MAAO,KACPK,MAAO,CAAEsO,aAAcA,EAAcC,aAAcA,GACnD7O,KAAM,CACJsT,OAAQ,EACRuB,OAAO,EACP6B,UAAW,GACX3M,QAAQ,EACR7J,cAAe,GACfQ,WAAY,aAIlBwL,MAAO,CACL,CACE1M,KAAM,OACNK,SAAU,CACR8W,OAAQ,CAAE5W,MAAO,WAAYN,KAAM,WACnCY,MAAO,CAAE3F,MAAO,aAGpB,CACE8E,KAAM,CACJC,KAAM,QACNqB,QAAQ,EACRnB,SAAS,GAEXE,SAAU,CACRQ,MAAO,CACLN,MAAO,SACPN,KAAM,UACNa,MAAO,CACLyJ,OAAQ,CAAC1L,EAAQ,GAAIA,EAAQ,IAC7B2D,MAAO,CAAC,UAAW,YAErB/B,MAAO,UACPO,OAAQ,CACNL,cAAe,GACfD,cAAe,GACfS,WAAY,UACZD,WAAY,YAGhBG,KAAM,CAAEnG,MAAO,KACf0O,QAAS,CAAE1O,MAAO,GAClBiF,QAAS,CACP,CAAEI,MAAO,WAAYN,KAAM,UAAWQ,MAAO,YAC7C,CAAEF,MAAO,SAAUN,KAAM,UAAWQ,MAAO,WAC3C,CAAEF,MAAO,QAASN,KAAM,eAAgBQ,MAAO,QAASiC,OAAQ,aAIvE,SACO,CACNzB,KAAM,WACNT,KAAM,CACJU,WAAY,UACZC,WAAY,UACZC,UAAW,WAEbJ,OAAQ,CACNG,WAAY,UACZD,WAAY,aAKA,WADF,YAAHK,OAAe3C,EAAW4C,QAAQC,QAAQ,gBAAiB,OAErErE,KAAK,kBAAMD,EAAQ,WAAW,GAC9BuE,MAAM,SAACC,GAAK,OAAKxE,EAAQ,UAADoE,OAAWI,EAAMC,SAAU,EAExD,CAAE,MAAOD,GACPxE,EAAQ,UAADoE,OAAWI,EAAMC,SAC1B,CACF,EACF,CAYA,SAASwV,EAAMzY,EAAMC,GACnB,OAAO,IAAI1B,QAAQ,SAACC,GAClB,IACE,IAAKwB,GAAQA,EAAK9D,OAAS,EAEzB,YADAsC,EAAQ,kDAIV,IAAM0B,EAAUF,EAAK,GACfoD,EAAOpD,EAAK/B,MAAM,GAExB,GAAIiC,EAAQhE,OAAS,EAEnB,YADAsC,EAAQ,wEAKV,IAAM2B,EAAgBiD,EAAKhD,IAAI,SAAAC,GAC7B,IAAIC,EAAM,CAAC,EAIX,OAHAJ,EAAQZ,QAAQ,SAACiB,EAAGrF,GAClBoF,EAAIC,GAAKF,EAAInF,EACf,GACOoF,CACT,GAEMoY,EAAW1L,EAAO,IAAI5I,IAAIjE,EAAcC,IAAI,SAAApE,GAAC,OAAIA,EAAEkE,EAAQ,GAAG,KAC9DyY,EAAU3L,EAAO,IAAI5I,IAAIjE,EAAcC,IAAI,SAAApE,GAAC,OAAIA,EAAEkE,EAAQ,GAAG,KAG7D0Y,EAAcF,EAAY,GAC1BG,EAAaH,EAAYA,EAAYxc,OAAS,GAE9C4c,EAAY3Y,EAAcjB,OAAO,SAAAlD,GAAC,OACtCA,EAAEkE,EAAQ,MAAQ0Y,GAAe5c,EAAEkE,EAAQ,MAAQ2Y,CAAU,GAMzDE,EAFYD,EAAU1Y,IAAI,SAAApE,GAAC,OAAIA,EAAEkE,EAAQ,GAAG,GACnB8Y,MAAM,SAAAld,GAAC,OAAIA,IAAM,GAAKA,GAAK,CAAC,GACvB,MAAQ,OA4L5C+E,GArLUtB,EAAA,CACRuB,QAAS,kDACTC,YAAa,mCACbC,WAAY,QACZC,OAAQ,CACNC,KAAM,CAAEC,OAAQ,eAChB8N,SAAU,CAAE3N,KAAM,MAAOyV,SAAU,YAErC3L,MAXmB,IAYnBC,OAboB7F,KAAK8G,IAAI,IAAK9G,KAAK+G,IAAI,IAAyB,GAApBoM,EAAWzc,SAc3D8D,KAAM,CAAEoB,OAAQ0X,GAChBpX,SAAU,CACRC,EAAG,CACDC,MAAO1B,EAAQ,GACfoB,KAAM,UACNO,KAAM,CACJC,MAAO,KACPC,cAAe,GACfkX,gBAAiB,OACjBrC,aAAc,GACdhL,QAAQ,EACR8K,OAAO,EACPnU,WAAY,WAEdJ,MAAO,CAAE6M,QAAS,KAEpBpT,EAAG,CACDgG,MAAO1B,EAAQ,GACfoB,KAAM,eACNO,KAAM,KACNM,MAAO,CAAE8J,MAAM,IAEjB/J,MAAO,CACLN,MAAO1B,EAAQ,GACfoB,KAAM,UACNe,OAAQ,KACRF,MAAO,CAAEC,OAAQ,gBAGrB2L,MAAO,CAEL,CACE1M,KAAM,CACJC,KAAM,OACN4X,WAAY,CAAC,EAAG,GAChBjO,QAAS,IAEXjL,KAAM,CAAEoB,OAAQ,CAAC,CAAC,IAClBM,SAAU,CACRC,EAAG,CAAEwX,MAAOP,GACZ/I,GAAI,CAAEsJ,MAAON,GACbjd,EAAG,CAAEW,MAAO,GACZ2F,MAAO,CAAE3F,MAAO,aAIpB,CACE8E,KAAM,CACJC,KAAM,OACNG,YAAa,EACbwJ,QAAS,GACTzJ,SAAS,GAEXE,SAAU,CACR8W,OAAQ,CAAE5W,MAAO1B,EAAQ,GAAIoB,KAAM,WACnCE,QAAS,CACP,CAAEI,MAAO1B,EAAQ,GAAIoB,KAAM,UAAWQ,MAAO,YAC7C,CAAEF,MAAO1B,EAAQ,GAAIoB,KAAM,UAAWQ,MAAO,UAC7C,CAAEF,MAAO1B,EAAQ,GAAIoB,KAAM,eAAgBQ,MAAO,QAASiC,OAAQgV,MAKzE,CACE1X,KAAM,CACJC,KAAM,SACNoB,KAAM,IACNuI,QAAS,EACTzJ,SAAS,IAIb,CACEiM,UAAW,CACT,CAAEvO,OAAQ,UAAF0D,OAAY1C,EAAQ,GAAE,WAAA0C,OAAUgW,EAAW,OAErDvX,KAAM,CACJC,KAAM,OACNyO,MAAO,QACPC,SAAU,SACVoJ,IAAK,EACLlJ,SAAU,GACVD,WAAY,UAEdvO,SAAU,CACRuM,KAAM,CACJrM,MAAO1B,EAAQ,GACfoB,KAAM,eACNyC,OAAQgV,KAKd,CACEtL,UAAW,CACT,CAAEvO,OAAQ,UAAF0D,OAAY1C,EAAQ,GAAE,WAAA0C,OAAUgW,EAAW,MACnD,CACElL,OAAQ,CAAC,CAAEC,GAAI,OAAQC,GAAI,SAC3BC,KAAM,CAAC,CAAEjM,MAAO1B,EAAQ,GAAI4N,MAAO,gBAErC,CAAE5O,OAAQ,oBAEZmC,KAAM,CACJC,KAAM,OACNyO,MAAO,QACPC,SAAU,SACVoJ,IAAK,EACLC,IAAK,GACLnJ,SAAU,GACVD,WAAY,OACZqJ,UAAW,UAEb5X,SAAU,CACRuM,KAAM,CAAErM,MAAO1B,EAAQ,GAAIoB,KAAM,aAIrC,CACEmM,UAAW,CACT,CAAEvO,OAAQ,UAAF0D,OAAY1C,EAAQ,GAAE,WAAA0C,OAAUiW,EAAU,OAEpDxX,KAAM,CACJC,KAAM,OACNyO,MAAO,OACPC,SAAU,SACVoJ,GAAI,EACJlJ,SAAU,GACVD,WAAY,UAEdvO,SAAU,CACRuM,KAAM,CACJrM,MAAO1B,EAAQ,GACfoB,KAAM,eACNyC,OAAQgV,KAKd,CACEtL,UAAW,CACT,CAAEvO,OAAQ,UAAF0D,OAAY1C,EAAQ,GAAE,WAAA0C,OAAUiW,EAAU,OAEpDxX,KAAM,CACJC,KAAM,OACNyO,MAAO,OACPC,SAAU,SACVoJ,GAAI,GACJlJ,SAAU,GACVD,WAAY,QAEdvO,SAAU,CACRuM,KAAM,CAAErM,MAAO1B,EAAQ,GAAIoB,KAAM,eAGtC,SACO,CACNJ,KAAM,CAAEC,OAAQ,eAChBmB,KAAM,WACN2L,KAAM,CACJ3L,KAAM,WACN4N,SAAU,GACV1L,KAAM,WAER3C,KAAM,CACJU,WAAY,UACZC,WAAY,UACZC,UAAW,aAKC,QADF,SAAHG,OAAY3C,EAAW4C,QAAQC,QAAQ,gBAAiB,OAElErE,KAAK,kBAAMD,EAAQ,QAAQ,GAC3BuE,MAAM,SAACC,GAAK,OAAKxE,EAAQ,UAADoE,OAAWI,EAAMC,SAAU,EAExD,CAAE,MAAOD,GACPxE,EAAQ,UAADoE,OAAWI,EAAMC,SAC1B,CACF,EACF,CAYA,SAASsW,EAAMvZ,EAAMC,GACnB,OAAO,IAAI1B,QAAQ,SAACC,GAClB,IACE,IAAKwB,GAAQA,EAAK9D,OAAS,EAEzB,YADAsC,EAAQ,kDAIV,IAAM0B,EAAUF,EAAK,GACfoD,EAAOpD,EAAK/B,MAAM,GAExB,GAAIiC,EAAQhE,OAAS,EAEnB,YADAsC,EAAQ,wEA6OVqC,GA/Na,CACXC,QAAS,6CACTC,YAAa,mCACbqK,MAAO,IACPC,OAAQ,IACRrK,WAAY,QACZC,OAAQ,CAAEC,KAAM,CAAEC,OAAQ,gBAC1BD,KAAM,CAAEC,OAAQ,MAChB6N,QAAS,CAAEtE,IAAK,GAAIkK,OAAQ,GAAI1M,KAAM,GAAI2M,MAAO,IACjD7U,KAAM,CACJ,CACE7B,KAAM,QACNiD,OArBgBgC,EAAKhD,IAAI,SAAAC,GAC7B,IAAIC,EAAM,CAAC,EAIX,OAHAJ,EAAQZ,QAAQ,SAACiB,EAAGrF,GAClBoF,EAAIC,GAAKF,EAAInF,EACf,GACOoF,CACT,IAiBI,CACEnC,KAAM,aACNsG,OAAQ,QACRgJ,UAAW,CACT,CACEnM,KAAM,YACNoS,OAAQ,CAACxT,EAAQ,IACjB6U,IAAK,CAAC,OACNnH,GAAI,CAAC,iBACLkH,QAAS,CAAC5U,EAAQ,KAEpB,CACEoB,KAAM,QACN6T,OAAQ,YACRtH,KAAM,CAAEjM,MAAO,gBAAiBkM,MAAO,cACvClM,MAAO,gBACPgM,GAAI,CAAC,KAAM,OAEb,CACEtM,KAAM,UACNsM,GAAI,UACJuE,KAAM,qBAER,CACE7Q,KAAM,UACNsM,GAAI,QACJuE,KAAM,SAAFvP,OAAW1C,EAAQ,GAAE,kDAI/B,CACE/B,KAAM,aACNsG,OAAQ,QACRgJ,UAAW,CACT,CACEnM,KAAM,QACN6T,OAAQ,YACRL,QAAS,CAAC5U,EAAQ,IAClB2N,KAAM,CAAEjM,MAAO1B,EAAQ,GAAI4N,MAAO,cAClClM,MAAO1B,EAAQ,GACf0N,GAAI,CAAC,KAAM,OAEb,CACEtM,KAAM,QACNwT,QAAS,CAAC5U,EAAQ,IAClB2N,KAAM,CAAEjM,MAAO1B,EAAQ,GAAI4N,MAAO,cAClClM,MAAO1B,EAAQ,GACf0N,GAAI,CAAC,KAAM,OAEb,CACEtM,KAAM,SACNlD,KAAM,aACNyT,IAAK3R,EAAQ,GACbkB,OAAQ,CAAC,KAAM,MACfsS,OAAQ,CAACxT,EAAQ,KAEnB,CACEoB,KAAM,UACNsM,GAAI,UACJuE,KAAM,qBAER,CACE7Q,KAAM,UACNsM,GAAI,QACJuE,KAAM,UAAFvP,OAAY1C,EAAQ,GAAE,mBAAA0C,OAAkB1C,EAAQ,GAAE,0DAExD,CACEoB,KAAM,SACNuM,KAAM,CAAEjM,MAAO,KAAMkM,MAAO,aAC5BiH,IAAK,CAAC,cACNrB,OAAQ,CAAC,MACT9F,GAAI,CAAC,QACLkH,QAAS,CAAC5U,EAAQ,QAK1BiP,OAAQ,CACN,CACEhR,KAAM,IACNmD,KAAM,SACNuC,MAAO,QACP+H,OAAQ,CAAE5L,KAAM,aAAc4B,MAAO,OAEvC,CACEzD,KAAM,IACNmD,KAAM,SACNuC,MAAO,SACPuL,MAAM,EACNnD,MAAM,EACNL,OAAQ,CAAE5L,KAAM,aAAc4B,MAAO,OAEvC,CACEzD,KAAM,UACNmD,KAAM,SACNuC,MAAO,CAAC,EAAG,IACX+H,OAAQ,CAAE5L,KAAM,aAAc4B,MAAO,SAEvC,CACEzD,KAAM,QACNmD,KAAM,UACNuC,MAAO,CAAEzB,OAAQ,cACjBwJ,OAAQ,CACN5L,KAAM,aACN4B,MAAO1B,EAAQ,GACf2N,KAAM,CAAEjM,MAAO,KAAMkM,MAAO,YAAaH,GAAI,UAInD6L,KAAM,CACJ,CACE1V,OAAQ,OACR3B,MAAO,IACPsN,OAAQ,EACR1L,OAAQ,GACR0V,UAAW,EACX5N,SAAU,GACVtJ,WAAY,CAAEhG,MAAO,WACrB0c,gBAAiB,CAAE1c,MAAO,UAC1BwF,cAAe,CAAExF,MAAO,IACxB2a,UAAW,CAAE3a,MAAO,YACpB4Y,OAAQ,EACRvJ,QAAQ,EACR0D,OAAQ,CACNqH,OAAQ,CACNtE,OAAQ,CACNpE,KAAM,CAAEiE,OAAQ,mCAM1B1C,MAAO,CACL,CACElO,KAAM,OACNnD,KAAM,OACNC,KAAM,CAAE4B,KAAM,cACdsP,OAAQ,CACN+C,OAAQ,CACN1Q,EAAG,CAAEQ,MAAO,IAAKP,MAAO,MACxBiO,GAAI,CAAE1N,MAAO,IAAKP,MAAO,MACzBhG,EAAG,CAAEuG,MAAO,IAAKP,MAAO,MACxBkO,GAAI,CAAE3N,MAAO,IAAKP,MAAO,MACzB4C,KAAM,CAAErC,MAAO,QAASP,MAAO1B,EAAQ,IACvCiB,OAAQ,CAAE5E,MAAO,SACjBkF,YAAa,CAAElF,MAAO,GACtBoT,YAAa,CAAExN,MAAO,UAAWP,MAAO,QACxCJ,QAAS,CAAE0Q,OAAQ,YAIzB,CACE5Q,KAAM,OACNnD,KAAM,SACNiU,aAAa,EACbhU,KAAM,CAAE4B,KAAM,QACdsP,OAAQ,CACN+C,OAAQ,CACN1Q,EAAG,CAAEuQ,OAAQ,sCACbnC,MAAO,CAAExT,MAAO,UAChB0R,KAAM,CAAErM,MAAO,eACfhG,EAAG,CAAEsW,OAAQ,sCACb1N,KAAM,CAAEjI,MAAO,SACf+F,KAAM,CAAE/F,MAAO,YACfmd,WAAY,CAAEnd,MAAO,IACrB2T,SAAU,CAAE3T,MAAO,IACnB0O,QAAS,CAAEiH,OAAQ,uEAIzB,CACE5Q,KAAM,OACNnD,KAAM,iBACNC,KAAM,CAAE4B,KAAM,cACdsP,OAAQ,CACN+C,OAAQ,CACN1Q,EAAG,CAAEQ,MAAO,IAAK+P,OAAQ,oCACzBtW,EAAG,CAAEsW,OAAQ,OACbjE,KAAM,CAAErM,MAAO1B,EAAQ,IACvB6P,MAAO,CAAExT,MAAO,UAChByT,SAAU,CAAEzT,MAAO,UACnBiI,KAAM,CAAEjI,MAAO,WACf0T,WAAY,CAAE1T,MAAO,QACrB2T,SAAU,CAAE3T,MAAO,IACnB+F,KAAM,CAAE/F,MAAO,eAIrB,CACE+E,KAAM,OACNnD,KAAM,sBACNC,KAAM,CAAE4B,KAAM,cACdsP,OAAQ,CACN+C,OAAQ,CACN1Q,EAAG,CAAEQ,MAAO,IAAK+P,OAAQ,oCACzBtW,EAAG,CAAEsW,OAAQ,eACbjE,KAAM,CAAErM,MAAO,SACfmO,MAAO,CAAExT,MAAO,UAChByT,SAAU,CAAEzT,MAAO,OACnBiI,KAAM,CAAEjI,MAAO,WACf0T,WAAY,CAAE1T,MAAO,UACrB2T,SAAU,CAAE3T,MAAO,IACnB+F,KAAM,CAAE/F,MAAO,iBAOP,QADF,SAAHqG,OAAY3C,EAAW4C,QAAQC,QAAQ,gBAAiB,OAElErE,KAAK,kBAAMD,EAAQ,QAAQ,GAC3BuE,MAAM,SAACC,GAAK,OAAKxE,EAAQ,UAADoE,OAAWI,EAAMC,SAAU,EAExD,CAAE,MAAOD,GACPxE,EAAQ,UAADoE,OAAWI,EAAMC,SAC1B,CACF,EACF,CAYA,SAAS0W,EAAU3Z,EAAMC,GACvB,OAAO,IAAI1B,QAAQ,SAACC,GAClB,IACE,IAAKwB,GAAQA,EAAK9D,OAAS,EAEzB,YADAsC,EAAQ,kDAIV,IAAM0B,EAAUF,EAAK,GACfoD,EAAOpD,EAAK/B,MAAM,GAExB,GAAIiC,EAAQhE,OAAS,EAEnB,YADAsC,EAAQ,oFA+LVqC,GAjLa,CACX,QAAW,6CACX,YAAe,uCACf,MAAS,IACT,OAAU,IACV,WAAc,QACd,OAAU,CAAE,KAAQ,CAAE,OAAU,gBAChC,QAAW,CAAE,IAAO,GAAI,OAAU,GAAI,KAAQ,GAAI,MAAS,IAC3D,KAAQ,CACN,CACE,KAAQ,QACR,OApBgBuC,EAAKhD,IAAI,SAAAC,GAC7B,IAAIC,EAAM,CAAC,EAIX,OAHAJ,EAAQZ,QAAQ,SAACiB,EAAGrF,GAClBoF,EAAIC,GAAKF,EAAInF,EACf,GACOoF,CACT,GAeM,UAAa,CACX,CACE,KAAQ,UACR,GAAM,WACN,KAAQ,UAAFsC,OAAY1C,EAAQ,GAAE,OAE9B,CACE,KAAQ,UACR,GAAM,cACN,KAAQ,UAAF0C,OAAY1C,EAAQ,GAAE,OAE9B,CACE,KAAQ,UACR,GAAM,QACN,KAAQ,UAAF0C,OAAY1C,EAAQ,GAAE,SAIlC,CACE,KAAQ,aACR,OAAU,QACV,UAAa,CACX,CACE,KAAQ,YACR,OAAU,CAAC,SACX,IAAO,CAAC,OACR,GAAM,CAAC,iBACP,QAAW,CAAC,aAEd,CACE,KAAQ,QACR,OAAU,YACV,KAAQ,CAAE,MAAS,gBAAiB,MAAS,cAC7C,MAAS,gBACT,GAAM,CAAC,KAAM,OAEf,CACE,KAAQ,UACR,GAAM,UACN,KAAQ,yBAId,CACE,KAAQ,aACR,OAAU,QACV,UAAa,CACX,CACE,KAAQ,QACR,OAAU,YACV,QAAW,CAAC,YACZ,KAAQ,CAAE,MAAS,QAAS,MAAS,cACrC,MAAS,QACT,GAAM,CAAC,KAAM,OAEf,CACE,KAAQ,SACR,KAAQ,aACR,IAAO,WACP,OAAU,CAAC,KAAM,MACjB,OAAU,CAAC,aAEb,CACE,KAAQ,UACR,GAAM,UACN,KAAQ,0BAKhB,OAAU,CACR,CACE,KAAQ,IACR,KAAQ,SACR,MAAS,QACT,OAAU,CAAE,KAAQ,aAAc,MAAS,OAE7C,CACE,KAAQ,IACR,KAAQ,SACR,MAAS,SACT,MAAQ,EACR,MAAQ,EACR,OAAU,CAAE,KAAQ,aAAc,MAAS,OAE7C,CACE,KAAQ,QACR,KAAQ,UACR,MAAS,CAAE,OAAU,cACrB,OAAU,CACR,KAAQ,aACR,MAAS,WACT,KAAQ,CAAE,MAAS,KAAM,MAAS,YAAa,GAAM,UAI3D,KAAQ,CACN,CACE,OAAU,OACV,MAAS,IACT,OAAU,IACV,UAAa,EACb,WAAc,UACd,cAAiB,GACjB,QAAU,GAEZ,CACE,OAAU,SACV,MAAS,IACT,OAAU,IACV,UAAa,EACb,WAAc,UACd,cAAiB,GACjB,QAAU,IAGd,MAAS,CACP,CACE,KAAQ,OACR,KAAQ,OACR,KAAQ,CAAE,KAAQ,cAClB,OAAU,CACR,OAAU,CACR,EAAK,CAAE,MAAS,IAAK,MAAS,MAC9B,GAAM,CAAE,MAAS,IAAK,MAAS,MAC/B,EAAK,CAAE,MAAS,IAAK,MAAS,MAC9B,GAAM,CAAE,MAAS,IAAK,MAAS,MAC/B,KAAQ,CAAE,MAAS,QAAS,MAAS,YACrC,OAAU,CAAE,MAAS,SACrB,YAAe,CAAE,MAAS,GAC1B,QAAW,CAAE,MAAS,IACtB,QAAW,CACT,OAAU,qIAGd,MAAS,CACP,QAAW,CAAE,MAAS,MAI5B,CACE,KAAQ,OACR,KAAQ,cACR,KAAQ,CAAE,KAAQ,cAClB,OAAU,CACR,OAAU,CACR,EAAK,CAAE,MAAS,IAAK,OAAU,sCAC/B,EAAK,CAAE,MAAS,IAAK,OAAU,sCAC/B,KAAQ,CACN,OAAU,6HAEZ,MAAS,CAAE,MAAS,UACpB,SAAY,CAAE,MAAS,UACvB,KAAQ,CAAE,MAAS,SACnB,SAAY,CAAE,MAAS,IACvB,WAAc,CAAE,MAAS,UACzB,KAAQ,CAAE,MAAS,YACnB,WAAc,CAAE,MAAS,IACzB,QAAW,CAAE,OAAU,sCAOf,YADF,aAAH0C,OAAgB3C,EAAW4C,QAAQC,QAAQ,gBAAiB,OAEtErE,KAAK,kBAAMD,EAAQ,YAAY,GAC/BuE,MAAM,SAACC,GAAK,OAAKxE,EAAQ,UAADoE,OAAWI,EAAMC,SAAU,EAExD,CAAE,MAAOD,GACPxE,EAAQ,UAADoE,OAAWI,EAAMC,SAC1B,CACF,EACF,CAYA,SAAS2W,EAAK5Z,EAAMC,GAClB,OAAO,IAAI1B,QAAQ,SAACC,GAClB,IACE,IAAKwB,GAAQA,EAAK9D,OAAS,EAEzB,YADAsC,EAAQ,kDAIV,IAAM0B,EAAUF,EAAK,GACfoD,EAAOpD,EAAK/B,MAAM,GAExB,GAAIiC,EAAQhE,OAAS,EAEnB,YADAsC,EAAQ,+EAKV,IAAM2B,EAAgBiD,EAAKhD,IAAI,SAAAC,GAC7B,IAAIC,EAAM,CAAC,EAIX,OAHAJ,EAAQZ,QAAQ,SAACiB,EAAGrF,GAClBoF,EAAIC,GAAKF,EAAInF,EACf,GACOoF,CACT,GAGMuZ,EAAO7M,EAAO,IAAI5I,IAAIjE,EAAcC,IAAI,SAAApE,GAAC,OAAIA,EAAEkE,EAAQ,GAAG,KAwGhEW,GApGUtB,EAAA,CACRuB,QAAS,kDACTC,YAAa,kCACbC,WAAY,QACZC,OAAQ,CAAEC,KAAM,CAAEC,OAAQ,gBAC1BnB,KAAM,CAAEoB,OAAQjB,GAChBiL,MATmB5F,KAAK8G,IAAI,IAAsB,GAAjBuN,EAAQ3d,QAUzCmP,OAAQ,IACR3J,SAAU,CACRC,EAAG,CACDC,MAAO1B,EAAQ,GACfoB,KAAM,UACNO,KAAM,CAAEC,MAAO,IACfK,MAAO,CAAEb,KAAM,QAAS0N,QAAS,IAEnCpT,EAAG,CACDgG,MAAO1B,EAAQ,GACfoB,KAAM,UACNO,MAAM,IAGVkM,MAAO,CACL,CACE1M,KAAM,CAAEC,KAAM,OAAQqK,YAAa,YACnCjK,SAAU,CACRQ,MAAO,CACLN,MAAO1B,EAAQ,GACfoB,KAAM,UACNe,QAAQ,KAId,CACEhB,KAAM,CAAEC,KAAM,SAAUoB,KAAM,IAAKlB,SAAS,GAC5CE,SAAU,CACRQ,MAAO,CACLN,MAAO1B,EAAQ,GACfoB,KAAM,UACNe,QAAQ,KAId,CACEhB,KAAM,CAAEC,KAAM,OAAQY,MAAO,SAC7BR,SAAU,CACRuM,KAAM,CAAErM,MAAO1B,EAAQ,MAG3B,CAEEuN,UAAW,CACT,CAAEC,OAAQ,CAAC,CAAEC,GAAI,OAAQC,GAAI,SAAWC,KAAM,CAAC,CAAEjM,MAAO1B,EAAQ,GAAI4N,MAAO,gBAC3E,CAAE5O,OAAQ,qBAEZmC,KAAM,CACJC,KAAM,OACNyO,MAAO,OACPC,SAAU,SACVoJ,GAAI,GACJnJ,WAAY,OACZC,SAAU,IAEZxO,SAAU,CACRuM,KAAM,CAAErM,MAAO1B,EAAQ,GAAIoB,KAAM,WACjCY,MAAO,CAAEN,MAAO1B,EAAQ,GAAIoB,KAAM,UAAWe,QAAQ,KAGzD,CAEEoL,UAAW,CACT,CAAEC,OAAQ,CAAC,CAAEC,GAAI,OAAQC,GAAI,SAAWC,KAAM,CAAC,CAAEjM,MAAO1B,EAAQ,GAAI4N,MAAO,eAC3E,CAAE5O,OAAQ,qBAEZmC,KAAM,CACJC,KAAM,OACNyO,MAAO,QACPC,SAAU,SACVoJ,IAAK,GACLnJ,WAAY,OACZC,SAAU,IAEZxO,SAAU,CACRuM,KAAM,CAAErM,MAAO1B,EAAQ,GAAIoB,KAAM,WACjCY,MAAO,CAAEN,MAAO1B,EAAQ,GAAIoB,KAAM,UAAWe,QAAQ,OAG1D,SACO,CACNnB,KAAM,CAAEC,OAAQ,eAChB2Y,KAAM,CAAErY,YAAa,EAAGsY,UAAW,QAASC,WAAY,SACxDnY,KAAM,CACJ6U,OAAO,EACPR,MAAM,EACNtK,QAAQ,EACRrJ,WAAY,UACZR,cAAe,MAKH,OADF,QAAHa,OAAW3C,EAAW4C,QAAQC,QAAQ,gBAAiB,OAEjErE,KAAK,kBAAMD,EAAQ,OAAO,GAC1BuE,MAAM,SAACC,GAAK,OAAKxE,EAAQ,UAADoE,OAAWI,EAAMC,SAAU,EAExD,CAAE,MAAOD,GACPxE,EAAQ,UAADoE,OAAWI,EAAMC,SAC1B,CACF,EACF,CAYA,SAASgX,EAAOja,EAAMC,GACpB,OAAO,IAAI1B,QAAQ,SAACC,GAClB,IACE,IAAKwB,GAAQA,EAAK9D,OAAS,EAEzB,YADAsC,EAAQ,kDAIV,IAAM0B,EAAUF,EAAK,GACfoD,EAAOpD,EAAK/B,MAAM,GAExB,GAAIiC,EAAQhE,OAAS,EAEnB,YADAsC,EAAQ,kEAiHVqC,GAnGUtB,EAAA,CACRuB,QAAS,kDACTC,YAAa,oCACbC,WAAY,QACZC,OAAQ,CAAEC,KAAM,CAAEC,OAAQ,gBAC1BnB,KAAM,CAAEoB,OAdYgC,EAAKhD,IAAI,SAAAC,GAC7B,IAAIC,EAAM,CAAC,EAIX,OAHAJ,EAAQZ,QAAQ,SAACiB,EAAGrF,GAClBoF,EAAIC,GAAKF,EAAInF,EACf,GACOoF,CACT,IASEmN,UAAW,CACT,CACEyM,cAAe,CAAC,CAAC,GAAM,MAAO,MAASha,EAAQ,GAAI,GAAM,gBAE3D,CACEia,UAAW,eAAFvX,OAAiB1C,EAAQ,GAAE,4BACpC0N,GAAI,kBAEN,CACE9B,UAAW,CAAC,CAAC,GAAM,MAAO,MAAS,iBAAkB,GAAM,YAC3DgJ,QAAS,CAAC5U,EAAQ,KAEpB,CAAC,UAAa,kBAAmB,GAAM,YACvC,CAAC,QAAW,CAAC,aACb,CACEia,UAAW,6CAAFvX,OAA+C1C,EAAQ,GAAE,cAClE0N,GAAI,QAEN,CAAC,UAAa,6BAA8B,GAAM,OAClD,CAAC,UAAa,kCAAmC,GAAM,QAEzD8B,MAAO,CAAC,OAAU,CAAC,MAASxP,EAAQ,GAAI,OAAU,CAAC,YAAe,YAClEuH,KAAM,CACJsG,MAAO,CACL,CACE1M,KAAM,CACJC,KAAM,SACNqB,QAAQ,EACRnB,SAAS,EACTL,OAAQ,UACRM,YAAa,IAEfC,SAAU,CACRC,EAAG,CAAC,MAAS,MAAO,KAAQ,UAAW,KAAQ,MAC/C/F,EAAG,CAAC,MAAS,MAAO,KAAQ,UAAW,KAAQ,KAAM,KAAQ,MAC7DsG,MAAO,CACLyO,UAAW,CAAC,KAAQ,yBAA0B,MAAS,WACvDxO,MAAO,CAAC,OAAU,QAClBP,MAAO,OACPN,KAAM,UACNe,OAAQ,MAEVK,KAAM,CAAC,MAAS,KAChBlB,QAAS,CAAC,CAAC,MAAStB,EAAQ,GAAI,KAAQ,cAG5C,CACEmB,KAAM,CAAC,KAAQ,OAAQ,SAAY,GAAI,WAAc,QACrDK,SAAU,CACR9F,EAAG,CAAC,MAAS,IACbqS,KAAM,CACJ0C,UAAW,CACTtS,KAAM,sBACN9B,MAAO,CAAC,KAAQ,yBAGpB2F,MAAO,CAAC,MAAS,CAAC,OAAU,QAAS,MAAS,aAIrD,SACO,CACNhB,KAAM,CAAC,OAAU,eACjBoB,KAAM,WACN2L,KAAM,CAAC,KAAQ,WAAY,SAAY,GAAI,KAAQ,WACnDpM,KAAM,CACJ6U,OAAO,EACPR,MAAM,EACNtK,QAAQ,EACRrJ,WAAY,UACZR,cAAe,IAEjBqY,OAAQ,CACNpD,UAAW,WACXhV,cAAe,GACfQ,WAAY,UACZ0U,UAAW,WACXnV,cAAe,GACfQ,WAAY,WAEdF,OAAQ,CACN2U,UAAW,WACXC,gBAAiB,OACjBzU,WAAY,UACZ0U,UAAW,WACXnV,cAAe,GACfQ,WAAY,UACZ8X,WAAY,SACZC,WAAY,MAKA,SADF,UAAH1X,OAAa3C,EAAW4C,QAAQC,QAAQ,gBAAiB,OAEnErE,KAAK,kBAAMD,EAAQ,SAAS,GAC5BuE,MAAM,SAACC,GAAK,OAAKxE,EAAQ,UAADoE,OAAWI,EAAMC,SAAU,EAExD,CAAE,MAAOD,GACPxE,EAAQ,UAADoE,OAAWI,EAAMC,SAC1B,CACF,EACF,CAYA,SAASsX,EAASva,EAAMC,GACtB,OAAO,IAAI1B,QAAQ,SAACC,GAClB,IACE,IAAKwB,GAAQA,EAAK9D,OAAS,EAEzB,YADAsC,EAAQ,kDAIV,IAAM0B,EAAUF,EAAK,GACfoD,EAAOpD,EAAK/B,MAAM,GAExB,GAAIiC,EAAQhE,OAAS,EAEnB,YADAsC,EAAQ,oEA6FVqC,GA/EUtB,EAAA,CACRuB,QAAS,kDACTC,YAAa,sCACbC,WAAY,QACZC,OAAQ,CAAEC,KAAM,CAAEC,OAAQ,gBAC1BnB,KAAM,CAAEoB,OAdYgC,EAAKhD,IAAI,SAAAC,GAC7B,IAAIC,EAAM,CAAC,EAIX,OAHAJ,EAAQZ,QAAQ,SAACiB,EAAGrF,GAClBoF,EAAIC,GAAKF,EAAInF,EACf,GACOoF,CACT,IASEoB,SAAU,CACR9F,EAAG,CACDgG,MAAO1B,EAAQ,GACfoB,KAAM,UACNuM,KAAM,KACNhM,KAAM,CACJ+J,QAAQ,EACR9J,MAAO,KACP4U,OAAO,EACPQ,UAAW,WACXnV,cAAe,GACf6U,aAAc,GACdrU,WAAY,YAGhBZ,EAAG,CACDC,MAAO1B,EAAQ,GACfoB,KAAM,eACNO,KAAM,CACJ+J,QAAQ,EACR8K,OAAO,EACPR,MAAM,EACNzT,UAAW,UACXyU,UAAW,WACXnV,cAAe,GACfQ,WAAY,UACZT,MAAO5B,EAAQ,GACf8W,UAAW,WACXhV,cAAe,GACfQ,WAAY,YAGhBN,MAAO,CAAE3F,MAAO,YAElBwR,MAAO,CACL,CACE1M,KAAM,CACJC,KAAM,OACNE,SAAS,EACTC,YAAa,EACbwJ,QAAS,KAGb,CACE5J,KAAM,CACJC,KAAM,SACNE,SAAS,EACTkB,KAAM,IACNuI,QAAS,IAEXvJ,SAAU,CACRgB,KAAM,CACJd,MAAO1B,EAAQ,GACfoB,KAAM,eACNa,MAAO,CACL0B,MAAO,CAAC,IAAK,MAEfxB,OAAQ,UAIf,SACO,CACN4M,SAAU,CACR3N,KAAM,MACNyV,SAAU,WAEZ7V,KAAM,CAAEC,OAAQ,eAChBmB,KAAM,WACN2L,KAAM,CAAE3L,KAAM,WAAY4N,SAAU,GAAI1L,KAAM,aAIhC,WADF,YAAH5B,OAAe3C,EAAW4C,QAAQC,QAAQ,gBAAiB,OAErErE,KAAK,kBAAMD,EAAQ,WAAW,GAC9BuE,MAAM,SAACC,GAAK,OAAKxE,EAAQ,UAADoE,OAAWI,EAAMC,SAAU,EAExD,CAAE,MAAOD,GACPxE,EAAQ,UAADoE,OAAWI,EAAMC,SAC1B,CACF,EACF,CAYA,SAASuX,EAAOxa,EAAMC,GACpB,OAAO,IAAI1B,QAAQ,SAACC,GAClB,IACE,IAAKwB,GAAQA,EAAK9D,OAAS,EAEzB,YADAsC,EAAQ,kDAIV,IAAM0B,EAAUF,EAAK,GACfoD,EAAOpD,EAAK/B,MAAM,GAExB,GAAIiC,EAAQhE,OAAS,EAEnB,YADAsC,EAAQ,gFAuDVqC,GAzCa,CACXC,QAAS,uDACTC,YAAa,oCACbC,WAAY,QACZC,OAAQ,CACNC,KAAM,CAAEuZ,gBAAiB,IAAKC,iBAAkB,IAAKvZ,OAAQ,MAC7DuO,MAAO,CAAE2G,QAAS,IAEpBrW,KAAM,CAAEoB,OAjBYgC,EAAKhD,IAAI,SAAAC,GAC7B,IAAIC,EAAM,CAAC,EAIX,OAHAJ,EAAQZ,QAAQ,SAACiB,EAAGrF,GAClBoF,EAAIC,GAAKF,EAAInF,EACf,GACOoF,CACT,IAYEe,KAAM,CAAEC,KAAM,OAAQwC,OAAQ,cAC9BpC,SAAU,CACRQ,MAAO,CAAEN,MAAO1B,EAAQ,GAAIoB,KAAM,WAClCqZ,OAAQ,CACN/Y,MAAO1B,EAAQ,GACfka,OAAQ,CACNQ,YAAa,SACbhE,aAAc,EACdiE,YAAa,UAEfvZ,KAAM,WAERK,EAAG,CACDE,KAAM,CAAEqU,MAAM,EAAOS,QAAQ,EAAOD,OAAO,EAAMtV,OAAQ,CAAC,IAC1DQ,MAAO,UACPkZ,OAAQ,KACR/O,MAAO,SACPjK,MAAO,KACPR,KAAM,gBAER1F,EAAG,CAAEgG,MAAO1B,EAAQ,GAAIoB,KAAM,iBAEhCmM,UAAW,CACT,CACEsN,QAAS7a,EAAQ,GACjB4U,QAAS,CAAC5U,EAAQ,IAClB0N,GAAI,CAAC1N,EAAQ,GAAI,aAGrBkL,MAAO,KAGS,SADF,UAAHxI,OAAa3C,EAAW4C,QAAQC,QAAQ,gBAAiB,OAEnErE,KAAK,kBAAMD,EAAQ,SAAS,GAC5BuE,MAAM,SAACC,GAAK,OAAKxE,EAAQ,UAADoE,OAAWI,EAAMC,SAAU,EAExD,CAAE,MAAOD,GACPxE,EAAQ,UAADoE,OAAWI,EAAMC,SAC1B,CACF,EACF,CAYA,SAAS+X,EAAMhb,EAAMC,GACnB,OAAO,IAAI1B,QAAQ,SAACC,GAClB,IAcE,IACSyc,EAAT,SAA2BnH,GACzB,OAAO,IAAIvI,KAAK/F,KAAKuM,MAAyB,OAAlB+B,EAAS,OAAiB,KACxD,EAiDSoH,EAAT,WAAoD,IAG1BC,EAHFC,EAAQzc,UAAAzC,OAAA,QAAAyE,IAAAhC,UAAA,GAAAA,UAAA,GAAG,KAAM0c,EAAK1c,UAAAzC,OAAA,QAAAyE,IAAAhC,UAAA,GAAAA,UAAA,GAAG,EACzC2c,EAAU,GAC8BC,EAAAhe,EAAhCie,EAAYpK,IAAIgK,IAAa,IACnB,IAAxB,IAAAG,EAAA1d,MAAAsd,EAAAI,EAAAzgB,KAAAwB,MAA0B,KAAfmf,EAAIN,EAAA5e,MACbkf,EAAKJ,MAAQA,EACbC,EAAQlc,KAAKqc,GACbH,EAAQlc,KAAIR,MAAZ0c,EAAOtO,EAASkO,EAAeO,EAAK1T,GAAIsT,EAAQ,IAClD,CAAC,OAAAK,GAAAH,EAAA7gB,EAAAghB,EAAA,SAAAH,EAAA7f,GAAA,CACD,OAAO4f,CACT,EA1EA,IAAKtb,GAAQA,EAAK9D,OAAS,EAEzB,YADAsC,EAAQ,kDAIV,IAAM0B,EAAUF,EAAK,GACfoD,EAAOpD,EAAK/B,MAAM,GAExB,GAAIiC,EAAQhE,OAAS,EAEnB,YADAsC,EAAQ,yGASV,IAAMmd,EAAYvY,EAAKhD,IAAI,SAAAC,GACzB,IAAM+a,EAAW/a,EAAI,IAAM,KACrB0H,EAAK1H,EAAI,GACTlC,EAAOkC,EAAI,IAAM,QAAJuC,OAAYmF,GAC/B,IAAKA,EAAI,OAAO,KAEhB,IAAMjC,EAA0B,iBAAXzF,EAAI,GAAkB4a,EAAkB5a,EAAI,IAAM,IAAIkL,KAAKlL,EAAI,IAC9E0F,EAAwB,iBAAX1F,EAAI,GAAkB4a,EAAkB5a,EAAI,IAAM,IAAIkL,KAAKlL,EAAI,IAClF,KAAMyF,aAAiByF,OAAS/H,MAAMsC,MAAYC,aAAewF,OAAS/H,MAAMuC,GAAM,OAAO,KAE7F,IAAI6V,EAAW,EAaf,OAZIvb,EAAI,KAEJub,EADoB,iBAAXvb,EAAI,IAAmBA,EAAI,GAAGmL,SAAS,KACrC5K,WAAWP,EAAI,IAAM,IACvBA,EAAI,GAAK,EACPA,EAAI,GAAK,IAETA,EAAI,IAMZ,CAAE0H,GAAAA,EAAIqT,SAAAA,EAAUjd,KAAAA,EAAM0d,UAAW/V,EAAOgW,QAAS/V,EAAK6V,SAAAA,EAAUG,aAFlD1b,EAAI,GAAKT,OAAOS,EAAI,IAAI4I,MAAM,KAAK7I,IAAI,SAAApE,GAAC,OAAIA,EAAEqX,MAAM,GAAI,GAG/E,GAAGnU,OAAOmV,SAGVsH,EAAUrc,QAAQ,SAAAmc,GAChB,IAAMO,EAAWP,EAAKK,QAAUL,EAAKI,UACrCJ,EAAKQ,YAAc,IAAI1Q,KAAKkQ,EAAKI,UAAUnQ,UAAYsQ,EAAWP,EAAKG,SACzE,GAGA,IAAMJ,EAAc,IAAI1K,IACxB6K,EAAUrc,QAAQ,SAAAmc,GACXD,EAAYvK,IAAIwK,EAAKL,WACxBI,EAAYtK,IAAIuK,EAAKL,SAAU,IAEjCI,EAAYpK,IAAIqK,EAAKL,UAAUhc,KAAKqc,EACtC,GAEA,IACkDS,EADlDC,EAAA5e,EAC6Bie,EAAYY,WAAS,IAAlD,IAAAD,EAAAte,MAAAqe,EAAAC,EAAArhB,KAAAwB,MAAoD,KAAA+f,EAAAC,EAAAJ,EAAA3f,MAAA,GAAvC8f,EAAA,GAAWA,EAAA,GACZxO,KAAK,SAAC9R,EAAGwgB,GAAC,OAAKxgB,EAAE8f,UAAYU,EAAEV,SAAS,EACpD,CAAC,OAAAH,GAAAS,EAAAzhB,EAAAghB,EAAA,SAAAS,EAAAzgB,GAAA,CAcD,IAAM8gB,EAAetB,EAAe,MAwDpCra,GArDa,CACXC,QAAS,kDACTC,YAAa,8BACbqK,MAAO,IACPC,OAAQ7F,KAAK8G,IAAI,IAA2B,GAAtBkQ,EAAatgB,QACnC8D,KAAM,CAAEoB,OAAQob,GAChBzO,MAAO,CACL,CACE1M,KAAM,CAAEC,KAAM,MAAO2J,QAAS,GAAKI,OAAQ,IAC3C3J,SAAU,CACR9F,EAAG,CAAEgG,MAAO,OAAQN,KAAM,UAAWO,KAAM,CAAEC,MAAO,KAAMC,cAAe,IAAM8L,KAAM,MACrFlM,EAAG,CAAEC,MAAO,YAAaN,KAAM,WAAYO,KAAM,CAAEC,MAAO,WAAYiC,OAAQ,QAAS9B,YAAa,KACpG4N,GAAI,CAAEjO,MAAO,UAAWN,KAAM,YAC9BY,MAAO,CAAEN,MAAO,QAASN,KAAM,UAAWa,MAAO,CAAEC,OAAQ,cAAgBC,OAAQ,CAAEP,MAAO,UAC5FN,QAAS,CACP,CAAEI,MAAO,OAAQN,KAAM,UAAWQ,MAAO,QACzC,CAAEF,MAAO,YAAaN,KAAM,WAAYQ,MAAO,QAASiC,OAAQ,YAChE,CAAEnC,MAAO,UAAWN,KAAM,WAAYQ,MAAO,MAAOiC,OAAQ,YAC5D,CAAEnC,MAAO,WAAYN,KAAM,eAAgBQ,MAAO,WAAYiC,OAAQ,UAI5E,CACE1C,KAAM,CAAEC,KAAM,MAAO2J,QAAS,GAAKI,OAAQ,IAC3C3J,SAAU,CACR9F,EAAG,CAAEgG,MAAO,OAAQN,KAAM,UAAWuM,KAAM,MAC3ClM,EAAG,CAAEC,MAAO,YAAaN,KAAM,YAC/BuO,GAAI,CAAEjO,MAAO,cAAeN,KAAM,YAClCY,MAAO,CAAEN,MAAO,QAASN,KAAM,UAAWa,MAAO,CAAEC,OAAQ,iBAG/D,CACEf,KAAM,CAAEC,KAAM,OAAQyO,MAAO,OAAQC,SAAU,SAAUoJ,GAAI,EAAGlJ,SAAU,IAC1ExO,SAAU,CACR9F,EAAG,CAAEgG,MAAO,OAAQN,KAAM,UAAWuM,KAAM,MAC3ClM,EAAG,CAAEC,MAAO,UAAWN,KAAM,YAC7B2M,KAAM,CAAErM,MAAO,WAAYN,KAAM,eAAgByC,OAAQ,OACzD7B,MAAO,CAAE3F,MAAO,UAGpB,CACE8E,KAAM,CAAEC,KAAM,OAAQ4X,WAAY,CAAC,EAAG,GAAIjO,QAAS,IACnDjL,KAAM,CAAEoB,OAAQ,CAAC,CAAE2S,MAAM,IAAIxI,MAAO6I,iBACpC1S,SAAU,CACRC,EAAG,CAAEC,MAAO,OAAQN,KAAM,YAC1BY,MAAO,CAAE3F,MAAO,OAChBmG,KAAM,CAAEnG,MAAO,MAIrB0E,OAAQ,CAAEC,KAAM,CAAEC,OAAQ,MAAQU,KAAM,CAAEqU,MAAM,EAAMzT,UAAW,aAGjD,QADF,SAAHG,OAAY3C,EAAW4C,QAAQC,QAAQ,gBAAiB,OAElErE,KAAK,kBAAMD,EAAQ,QAAQ,GAC3BuE,MAAM,SAACC,GAAK,OAAKxE,EAAQ,UAADoE,OAAWI,EAAMC,SAAU,EAExD,CAAE,MAAOD,GACPxE,EAAQ,UAADoE,OAAWI,EAAMC,SAC1B,CACF,EACF,CAYA,SAASwZ,EAAOzc,EAAMC,GACpB,OAAO,IAAI1B,QAAQ,SAACC,GAClB,IACE,IAAKwB,GAAQA,EAAK9D,OAAS,EAEzB,YADAsC,EAAQ,kDAIV,IAAM0B,EAAUF,EAAK,GACfoD,EAAOpD,EAAK/B,MAAM,GAExB,GAAIiC,EAAQhE,OAAS,EAEnB,YADAsC,EAAQ,kEAKV,IAAMke,EAAQtZ,EACXlE,OAAO,SAAAtE,GAAC,OAAIA,EAAE,IAAMA,EAAE,KAAO4I,OAAO5I,EAAE,GAAG,GACzCwF,IAAI,SAAAxF,GAAC,MAAK,CACT6J,OAAQ7E,OAAOhF,EAAE,IAAIyY,OACrBsJ,YAAa/c,OAAOhF,EAAE,IAAIyY,OAC1B9W,OAAQ3B,EAAE,GACX,GAEH,GAAqB,IAAjB8hB,EAAMxgB,OAER,YADAsC,EAAQ,+CAKV,IAsEMoe,EAtEmB,SAACF,GACxB,IAAME,EAAa,IAAI9L,IACjB+L,EAAW,IAAI/L,IACfgM,EAAW,IAAIhM,IAGfiM,EAAW,IAAI3Y,IACrBsY,EAAMpd,QAAQ,SAAA0d,GACZD,EAAS1Y,IAAI2Y,EAAKvY,QAClBsY,EAAS1Y,IAAI2Y,EAAKL,aAEbG,EAAS7L,IAAI+L,EAAKvY,SACrBqY,EAAS5L,IAAI8L,EAAKvY,OAAQ,IAE5BqY,EAAS1L,IAAI4L,EAAKvY,QAAQrF,KAAK4d,EAAKL,aAEpCE,EAAS3L,IAAI8L,EAAKL,aAAcE,EAASzL,IAAI4L,EAAKL,cAAgB,GAAK,EACzE,GAGA,IAAMM,EAAQ,GASd,GARAF,EAASzd,QAAQ,SAAAiS,GACVsL,EAAS5L,IAAIM,IAAgC,IAAvBsL,EAASzL,IAAIG,KACtC0L,EAAM7d,KAAKmS,GACXqL,EAAW1L,IAAIK,EAAM,GAEzB,GAGqB,IAAjB0L,EAAM/gB,QAAgB6gB,EAASra,KAAO,EAAG,CAC3C,IAAMwa,EAAY1f,MAAMY,KAAK2e,GAAU,GACvCE,EAAM7d,KAAK8d,GACXN,EAAW1L,IAAIgM,EAAW,EAC5B,CAIA,IADA,IAAMC,EAAY,IAAI/Y,IAAMgZ,EAAA,WAE1B,IAAMC,EAAUJ,EAAMK,QACtB,GAAIH,EAAUlM,IAAIoM,GAAU,OAAF,EAC1BF,EAAU9Y,IAAIgZ,GAEd,IAAME,EAAeX,EAAWxL,IAAIiM,IAAY,GAC9BP,EAAS1L,IAAIiM,IAAY,IAEjC/d,QAAQ,SAAAke,GAChB,IAAMC,EAAWF,EAAe,EAC1BG,EAAgBd,EAAWxL,IAAIoM,SAEf7c,IAAlB+c,GAA+BD,EAAWC,IAC5Cd,EAAW1L,IAAIsM,EAAUC,GAGtBN,EAAUlM,IAAIuM,IACjBP,EAAM7d,KAAKoe,EAEf,EACF,EApBOP,EAAM/gB,OAAS,GAACkhB,IA6BvB,OANAL,EAASzd,QAAQ,SAAAiS,GACVqL,EAAW3L,IAAIM,IAClBqL,EAAW1L,IAAIK,EAAM,EAEzB,GAEOqL,CACT,CAGmBe,CAAiBjB,GAG9BK,EAAW,IAAI3Y,IACrBsY,EAAMpd,QAAQ,SAAA0d,GACZD,EAAS1Y,IAAI2Y,EAAKvY,QAClBsY,EAAS1Y,IAAI2Y,EAAKL,YACpB,GAGA,IAAMhE,EAAa,GACbiF,EAAc,IAAI9M,IAIlB+M,EAAc,IAAI/M,IACxBiM,EAASzd,QAAQ,SAAAiS,GACf,IAAMuM,EAAQlB,EAAWxL,IAAIG,GACxBsM,EAAY5M,IAAI6M,IACnBD,EAAY3M,IAAI4M,EAAO,IAEzBD,EAAYzM,IAAI0M,GAAO1e,KAAKmS,EAC9B,GAGqB/T,MAAMY,KAAKyf,EAAY7e,QAAQ6O,KAAK,SAAC9R,EAAGwgB,GAAC,OAAKxgB,EAAIwgB,CAAC,GAC3Djd,QAAQ,SAACwe,EAAOC,GAC3B,IAAMC,EAAeH,EAAYzM,IAAI0M,GACrCE,EAAanQ,OAEbmQ,EAAa1e,QAAQ,SAACiS,EAAMjN,GAC1B,IAAM2Z,EAAcF,EAAa,EACjCH,EAAY1M,IAAIK,EAAM0M,GAEtBtF,EAAWvZ,KAAK,CACdiP,SAAUkD,EACVxF,MAAOkS,EACPpQ,KAAMvJ,EAAY,EAClBqS,OAAuB,IAAfoH,EAAmB,OAAS,MAExC,EACF,GAsTAld,GAjTa,CACXC,QAAS,6CACTC,YAAa,iBACbqK,MAAO,IACPC,OAAQ,IACR2D,QAAS,CAAE4F,OAAQ,GAAI1M,KAAM,GAAI2M,MAAO,GAAInK,IAAK,IACjD1J,WAAY,QACZkO,QAAS,CACP,CACE/Q,KAAM,cACN5B,MAAO,GACPwE,YAAa,sCAEf,CACE5C,KAAM,OACN5B,MAAO,SACPwE,YAAa,kCAGjBf,KAAM,CACJ,CACE7B,KAAM,QACNiD,OAxBY,GAAHwB,OAAO+V,EAAU3L,EAAK0P,KA0BjC,CACEve,KAAM,SACNsG,OAAQ,QACRgJ,UAAW,CACT,CAAEnM,KAAM,SAAU6Q,KAAM,wBACxB,CAAE7Q,KAAM,UAAWsM,GAAI,MAAOuE,KAAM,4BACpC,CAAE7Q,KAAM,UAAWsM,GAAI,OAAQuE,KAAM,qCACrC,CAAE7Q,KAAM,UAAWoS,OAAQ,CAAC,MAAO,OAAQ,UAC3C,CAAEpS,KAAM,UAAWoS,OAAQ,CAAC,MAAO,SACnC,CACEpS,KAAM,SACNlD,KAAM,QACNyT,IAAK,WACLzQ,OAAQ,CAAC,QAAS,OAAQ,MAAO,UACjCsS,OAAQ,CAAC,QACT9F,GAAI,CAAC,QAAS,OAAQ,MAAO,WAE/B,CACEtM,KAAM,YACNoS,OAAQ,CAAC,QAAS,QAAS,OAAQ,MAAO,UAC1CoB,QAAS,CAAC,MAAO,QACjBC,IAAK,CAAC,MAAO,MAAO,MAAO,MAAO,OAClCnH,GAAI,CAAC,QAAS,QAAS,OAAQ,MAAO,WAExC,CACEtM,KAAM,YACNoS,OAAQ,CAAC,QAAS,QAAS,OAAQ,MAAO,UAC1CoB,QAAS,CAAC,QACVC,IAAK,CAAC,MAAO,MAAO,MAAO,MAAO,OAClCnH,GAAI,CAAC,QAAS,QAAS,OAAQ,MAAO,WAExC,CAAEtM,KAAM,UAAWsM,GAAI,MAAOuE,KAAM,+BAGxC,CACEhU,KAAM,WACNsG,OAAQ,CAAC,UACTgJ,UAAW,CACT,CACEnM,KAAM,YACNoS,OAAQ,CAAC,SACToB,QAAS,CAAC,SACVC,IAAK,CAAC,OACNnH,GAAI,CAAC,UAEP,CACEtM,KAAM,YACNoS,OAAQ,CAAC,SACTqB,IAAK,CAAC,OACNnH,GAAI,CAAC,YAIX,CACEzP,KAAM,gBACNsG,OAAQ,CAAC,UACTgJ,UAAW,CACT,CACEnM,KAAM,UACNsM,GAAI,SACJuE,KAAM,2DAER,CAAE7Q,KAAM,UAAWsM,GAAI,OAAQuE,KAAM,qBACrC,CAAE7Q,KAAM,UAAWsM,GAAI,cAAeuE,KAAM,+BAC5C,CAAE7Q,KAAM,UAAWoS,OAAQ,CAAC,OAAQ,gBACpC,CACEpS,KAAM,QACNwT,QAAS,CAAC,SACVjH,KAAM,CAAEjM,MAAO,OAAQkM,MAAO,cAC9BlM,MAAO,cACPuT,OAAQ,CAAEjD,OAAQ,SAEpB,CAAE5Q,KAAM,UAAW6Q,KAAM,6BAA8BvE,GAAI,QAG/D,CACEzP,KAAM,aACNsG,OAAQ,CAAC,iBACTgJ,UAAW,CAAC,CAAEnM,KAAM,SAAU6Q,KAAM,0BAEtC,CACEhU,KAAM,YACNsG,OAAQ,CAAC,SACTgJ,UAAW,CACT,CAAEnM,KAAM,SAAU6Q,KAAM,wBACxB,CACE7Q,KAAM,SACNlD,KAAM,aACNyT,IAAK,OACLzQ,OAAQ,CAAC,KAAM,KAAM,QAAS,QAC9BsS,OAAQ,CAAC,UACT9F,GAAI,CAAC,gBAAiB,gBAAiB,cAAe,eAExD,CACEtM,KAAM,SACNlD,KAAM,aACNyT,IAAK,OACLzQ,OAAQ,CAAC,KAAM,KAAM,QAAS,QAC9BsS,OAAQ,CAAC,eACT9F,GAAI,CAAC,qBAAsB,qBAAsB,mBAAoB,oBAEvE,CACEtM,KAAM,QACNwT,QAAS,CAAC,UACVjH,KAAM,CAAEjM,MAAO,kBAAmBkM,MAAO,cACzClM,MAAO,QACPuT,OAAQ,OACRvH,GAAI,CAAC,OAAQ,SAEf,CAAEtM,KAAM,UAAW6Q,KAAM,iCAAkCvE,GAAI,OAC/D,CAAEtM,KAAM,UAAW6Q,KAAM,wBAAyBvE,GAAI,OACtD,CACEtM,KAAM,QACNwT,QAAS,CAAC,eACVjH,KAAM,CAAEjM,MAAO,aAAckM,MAAO,cACpClM,MAAO,QACPuT,OAAQ,OACRvH,GAAI,CAAC,OAAQ,SAEf,CAAEtM,KAAM,UAAW6Q,KAAM,sCAAuCvE,GAAI,OACpE,CAAEtM,KAAM,UAAW6Q,KAAM,wBAAyBvE,GAAI,OACtD,CAAEtM,KAAM,UAAW6Q,KAAM,8BAA+BvE,GAAI,OAC5D,CAAEtM,KAAM,UAAW6Q,KAAM,8BAA+BvE,GAAI,OAC5D,CACEtM,KAAM,WACNwC,OAAQ,aACR8F,MAAO,WACP0L,QAAS,CAAEnD,KAAM,yBACjBiD,QAAS,CAAEjD,KAAM,4DACjBoD,QAAS,CAAEpD,KAAM,yBACjBkD,QAAS,CAAElD,KAAM,uCAEnB,CAAE7Q,KAAM,UAAW6Q,KAAM,wCAAyCvE,GAAI,kBAI5EuB,OAAQ,CACN,CACEhR,KAAM,IACNmD,KAAM,OACNuC,MAAO,QACP+H,OAAQ,CAAE5L,KAAM,aAAc4B,MAAO,SACrC6O,aAAc,KAEhB,CACEtS,KAAM,IACNmD,KAAM,SACNuC,MAAO,SACP+H,OAAQ,CAAE5L,KAAM,aAAc4B,MAAO,MACrCsc,SAAS,GAEX,CACE/f,KAAM,QACNmD,KAAM,UACNuC,MAAO,CACL,UAAW,UAAW,UAAW,UAAW,UAC5C,UAAW,UAAW,UAAW,UAAW,UAC5C,UAAW,UAAW,UAAW,UAAW,UAC5C,UAAW,UAAW,UAAW,UAAW,WAE9C+H,OAAQ,CAAE5L,KAAM,SAAU4B,MAAO,UAGrC4N,MAAO,CACL,CACElO,KAAM,OACNlD,KAAM,CAAE4B,KAAM,cACdsP,OAAQ,CACN+C,OAAQ,CACN1Q,EAAG,CAAEQ,MAAO,IAAKP,MAAO,SACxBwJ,MAAO,CAAEjJ,MAAO,IAAKgc,KAAM,GAC3BviB,EAAG,CAAEuG,MAAO,IAAKP,MAAO,MACxBkO,GAAI,CAAE3N,MAAO,IAAKP,MAAO,MACzB4C,KAAM,CAAErC,MAAO,QAASP,MAAO,QAC/B+N,YAAa,CAAEpT,MAAO,KACtBkF,YAAa,CAAElF,MAAO,GACtB4E,OAAQ,CAAEgB,MAAO,QAASP,MAAO,SAEnC0Q,MAAO,CACL9Q,QAAS,CAAE0Q,OAAQ,8DACnBvC,YAAa,CAAEpT,MAAO,MAI5B,CACE+E,KAAM,OACNnD,KAAM,QACNC,KAAM,CAAE4B,KAAM,aACdoe,MAAM,EACN9O,OAAQ,CACN+C,OAAQ,CACN5Q,YAAa,CAAEG,MAAO,eACtByF,KAAM,CAAEzF,MAAO,QACfgO,cAAe,CAAEsC,OAAQ,OACzB/Q,OAAQ,CAAES,MAAO,cAAeO,MAAO,UAEzCmQ,MAAO,CACL1C,cAAe,CAAErT,MAAO,IACxBiF,QAAS,CACP0Q,OAAQ,uGAKhB,CACE5Q,KAAM,QACNnD,KAAM,YACNsR,OAAQ,EACRrR,KAAM,CACJsR,MAAO,CACL1P,KAAM,aACN7B,KAAM,aACN2W,QAAS,CAAC,OAAQ,QAAS,KAAM,QAAS,YAG9CsJ,MAAM,EACN9O,OAAQ,CACN+C,OAAQ,CACN1Q,EAAG,CACDuQ,OAAQ,mGAEVmM,GAAI,CAAElc,MAAO,IAAK+P,OAAQ,YAC1B9G,MAAO,CAAE8G,OAAQ,KACjB7G,OAAQ,CAAE6G,OAAQ,OAGtB1C,MAAO,CACL,CACElO,KAAM,OACNnD,KAAM,UACNC,KAAM,CAAE4B,KAAM,cACdsP,OAAQ,CACN+C,OAAQ,CACN1Q,EAAG,CAAEpF,MAAO,GACZX,EAAG,CAAEW,OAAQ,GACb0R,KAAM,CAAErM,MAAO,QACfmO,MAAO,CAAEmC,OAAQ,2CACjBjC,WAAY,CAAE1T,MAAO,QACrB2T,SAAU,CAAE3T,MAAO,OAIzB,CACE+E,KAAM,OACNnD,KAAM,SACNC,KAAM,CAAE4B,KAAM,cACdsP,OAAQ,CACN+C,OAAQ,CACN1Q,EAAG,CAAEpF,MAAO,GACZX,EAAG,CAAEW,MAAO,IACZ0R,KAAM,CAAEiE,OAAQ,+BAChBnC,MAAO,CAAEmC,OAAQ,2CACjBhC,SAAU,CAAE3T,MAAO,SAM7B,CACE+E,KAAM,OACNlD,KAAM,CAAE4B,KAAM,aACdsP,OAAQ,CACN+C,OAAQ,CACN1Q,EAAG,CAAEC,MAAO,YAAauT,QAAS,GAClCtF,GAAI,CAAEjO,MAAO,YAAauT,OAAQ,GAClCvZ,EAAG,CAAEgG,MAAO,YAAauT,QAAS,GAClCrF,GAAI,CAAElO,MAAO,YAAauT,OAAQ,GAClC3Q,KAAM,CAAEjI,MAAO,SACf0O,QAAS,CAAE1O,MAAO,IAClB+hB,aAAc,CAAE/hB,MAAO,OAK/B0E,OAAQ,CACNC,KAAM,CAAEC,OAAQ,eAChB8M,KAAM,CAAEiC,SAAU,GAAI1L,KAAM,aAKd,SADF,UAAH5B,OAAa3C,EAAW4C,QAAQC,QAAQ,gBAAiB,OAEnErE,KAAK,kBAAMD,EAAQ,SAAS,GAC5BuE,MAAM,SAACC,GAAK,OAAKxE,EAAQ,UAADoE,OAAWI,EAAMC,SAAU,EAExD,CAAE,MAAOD,GACPxE,EAAQ,UAADoE,OAAWI,EAAMC,SAC1B,CACF,EACF,CAYA,SAASsb,EAAUve,EAAMC,GACvB,OAAO,IAAI1B,QAAQ,SAACC,GAClB,IACE,IAAKwB,GAAQA,EAAK9D,OAAS,EAEzB,YADAsC,EAAQ,kDAIV,IAAM0B,EAAUF,EAAK,GACfoD,EAAOpD,EAAK/B,MAAM,GAExB,GAAIiC,EAAQhE,OAAS,EAEnB,YADAsC,EAAQ,+EA6FVqC,GA/EUtB,EAAA,CACRuB,QAAS,kDACTC,YAAa,iDACbC,WAAY,QACZC,OAAQ,CAAEC,KAAM,CAAEC,OAAQ,gBAC1BnB,KAAM,CAAEoB,OAdYgC,EAAKhD,IAAI,SAAAC,GAC7B,IAAIC,EAAM,CAAC,EAIX,OAHAJ,EAAQZ,QAAQ,SAACiB,EAAGrF,GAClBoF,EAAIC,GAAKF,EAAInF,EACf,GACOoF,CACT,IASEe,KAAM,CACJC,KAAM,OACNqO,YAAa,GACbC,cAAe,EACfnO,YAAa,EACbkK,YAAa,YAEfP,MAAO,IACPC,OAAQ,GACR3J,SAAU,CACRC,EAAG,CACDC,MAAO1B,EAAQ,GACfoB,KAAM,UACNQ,MAAO5B,EAAQ,IAEjBtE,EAAG,CACDkQ,UAAW,MACXlK,MAAO1B,EAAQ,GACfoB,KAAM,eACNa,MAAO,CAAE0B,MAAO,CAAC,IAAK,KACtBhC,KAAM,CACJC,MAAO,KACPV,OAAQ,CAAC,GACTwK,QAAQ,EACR+K,QAAQ,EACRD,OAAO,IAGXrW,IAAK,CACHuB,MAAO1B,EAAQ,GACfoB,KAAM,UACNQ,MAAO5B,EAAQ,GACfka,OAAQ,CACNtY,MAAO,KACPG,WAAY,EACZ2Y,YAAa,OACbtC,WAAY,OACZ1B,aAAc,GAEhB/I,KAAM,CAAEjM,MAAO1B,EAAQ,GAAIyN,GAAI,MAAOG,MAAO,cAE/CtJ,KAAM,CACJ5C,MAAO1B,EAAQ,GACfoB,KAAM,UACNe,OAAQ,KACRF,MAAO,CAAEC,OAAQ,YAGrB5D,QAAS,CAAE2D,MAAO,CAAEvG,EAAG,iBAAiB,SAChC,CACNsF,KAAM,CAAEC,OAAQ,eAChBuO,MAAO,CAAE2G,QAAS,IAClB+D,OAAQ,CACNrY,cAAe,GACfkX,gBAAiB,IACjBhX,WAAY,EACZuc,YAAa,MACb5D,YAAa,MACbhE,cAAe,IAEjB/U,KAAM,CACJ+J,QAAQ,EACRsK,MAAM,EACNQ,OAAO,EACP+C,UAAW,EACX1X,cAAe,GACfC,cAAe,GACfiV,gBAAiB,IACjBzU,WAAY,aAKA,YADF,aAAHI,OAAgB3C,EAAW4C,QAAQC,QAAQ,gBAAiB,OAEtErE,KAAK,kBAAMD,EAAQ,YAAY,GAC/BuE,MAAM,SAACC,GAAK,OAAKxE,EAAQ,UAADoE,OAAWI,EAAMC,SAAU,EAExD,CAAE,MAAOD,GACPxE,EAAQ,UAADoE,OAAWI,EAAMC,SAC1B,CACF,EACF,CAYA,SAASwb,EAASze,EAAMC,GACtB,OAAO,IAAI1B,QAAQ,SAACC,GAClB,IACE,IAAKwB,GAAQA,EAAK9D,OAAS,EAEzB,YADAsC,EAAQ,kDAIV,IAAM0B,EAAUF,EAAK,GACfoD,EAAOpD,EAAK/B,MAAM,GAExB,GAAIiC,EAAQhE,OAAS,EAEnB,YADAsC,EAAQ,yFAoRVqC,GAvQa,CACX,QAAW,kDACX,KAAQ,CAAE,OAVUuC,EAAKhD,IAAI,SAAAC,GAC7B,IAAIC,EAAM,CAAC,EAIX,OAHAJ,EAAQZ,QAAQ,SAACiB,EAAGrF,GAClBoF,EAAIC,GAAKF,EAAInF,EACf,GACOoF,CACT,IAKE,UAAa,CACX,CACE,UAAa,CACX,CAAC,GAAM,MAAO,MAASJ,EAAQ,GAAI,GAAMA,EAAQ,IACjD,CAAC,GAAM,MAAO,MAASA,EAAQ,GAAI,GAAMA,EAAQ,KAEnD,QAAW,CAACA,EAAQ,KAEtB,CACE,UAAa,UAAF0C,OAAY1C,EAAQ,GAAE,gBAAA0C,OAAe1C,EAAQ,GAAE,MAC1D,GAAM,qBAER,CACE,UAAa,UAAF0C,OAAY1C,EAAQ,GAAE,0BAAA0C,OAAyB1C,EAAQ,GAAE,cAAA0C,OAAa1C,EAAQ,GAAE,QAC3F,GAAM,qBAGV,QAAW,CACT,CACE,MAAS,IACT,OAAU,CAAC,KAAQ,IACnB,KAAQ,CAAC,OAAU,eACnB,SAAY,CACV,MAAS,CACP,KAAQ,UACR,MAAS,CACP,OAAU,CAACA,EAAQ,GAAIA,EAAQ,IAC/B,MAAS,CAAC,UAAW,WAEvB,OAAU,CAAC,MAAS,KAAM,OAAU,QAEtC,EAAK,CACH,MAASA,EAAQ,GACjB,KAAQ,UACR,KAAQ,KACR,KAAQ,CAAC,QAAU,EAAO,OAAU,EAAG,OAAS,EAAO,MAAS,GAAI,aAAgB,KAEtF,EAAK,CACH,KAAQ,eACR,KAAQ,CACN,QAAU,EACV,QAAU,EACV,MAAS,KACT,OAAS,EACT,MAAQ,EACR,UAAa,CACX,UAAa,CAAC,KAAQ,oBAAqB,MAAS,WACpD,MAAS,kBAKjB,MAAS,CACP,CACE,KAAQ,CACN,KAAQ,MACR,SAAW,EACX,aAAgB,EAChB,QAAW,GACX,OAAU,CAAC,KAAQ,KAErB,SAAY,CACV,EAAK,CAAC,MAASA,EAAQ,IACvB,MAAS,CAAC,MAASA,EAAQ,MAG/B,CACE,KAAQ,CACN,KAAQ,MACR,SAAW,EACX,aAAgB,EAChB,QAAW,EACX,OAAU,CAAC,KAAQ,KAErB,SAAY,CACV,EAAK,CAAC,MAASA,EAAQ,IACvB,MAAS,CAAC,MAASA,EAAQ,MAG/B,CACE,KAAQ,CACN,KAAQ,OACR,MAAS,CACP,KAAQ,UAAF0C,OAAY1C,EAAQ,GAAE,8BAE9B,GAAM,CAAC,KAAQ,UAAF0C,OAAY1C,EAAQ,GAAE,oBACnC,MAAS,QACT,SAAY,IAEd,SAAY,CACV,EAAK,CAAC,MAASA,EAAQ,GAAI,KAAQ,gBACnC,KAAQ,CAAC,MAASA,EAAQ,GAAI,KAAQ,eAAgB,OAAU,SAKxE,CACE,MAAS,IACT,OAAU,CAAC,KAAQ,IACnB,KAAQ,CAAC,OAAU,eACnB,SAAY,CACV,EAAK,CACH,MAASA,EAAQ,GACjB,KAAQ,UACR,KAAQ,KACR,KAAQ,MAEV,EAAK,CACH,MAAS,oBACT,KAAQ,eACR,KAAQ,CACN,QAAU,EACV,QAAU,EACV,MAAS,KACT,OAAS,EACT,MAAQ,EACR,UAAa,EACb,UAAa,CACX,UAAa,CAAC,KAAQ,oBAAqB,MAAS,WACpD,MAAS,kBAKjB,MAAS,CACP,CACE,KAAQ,CACN,KAAQ,MACR,SAAW,EACX,aAAgB,EAChB,QAAW,EACX,OAAU,CAAC,KAAQ,KAErB,SAAY,CACV,KAAQ,CACN,UAAa,CACX,KAAQ,iCACR,MAAS,WAEX,MAAS,aAIf,CACE,KAAQ,CACN,KAAQ,OACR,MAAS,CACP,KAAQ,qDAEV,GAAM,CAAC,KAAQ,4CAEjB,SAAY,CACV,KAAQ,CACN,MAAS,oBACT,KAAQ,eACR,OAAU,UAMpB,CACE,MAAS,IACT,OAAU,CAAC,KAAQ,IACnB,KAAQ,CAAC,OAAU,eACnB,UAAa,CACX,CACE,UAAa,UAAF0C,OAAY1C,EAAQ,GAAE,gEACjC,GAAM,mBAGV,SAAY,CACV,EAAK,CACH,MAASA,EAAQ,GACjB,KAAQ,UACR,KAAQ,KACR,KAAQ,MAEV,EAAK,CACH,MAAS,mBACT,KAAQ,eACR,KAAQ,CACN,QAAU,EACV,QAAU,EACV,MAAS,KACT,OAAS,EACT,MAAQ,EACR,UAAa,CACX,UAAa,CAAC,KAAQ,oBAAqB,MAAS,WACpD,MAAS,kBAKjB,MAAS,CACP,CACE,KAAQ,CAAC,KAAQ,OAAQ,SAAW,GACpC,SAAY,CACV,YAAe,CAAC,MAAS,GACzB,OAAU,CACR,UAAa,CACX,KAAQ,iCACR,MAAS,WAEX,MAAS,aAIf,CACE,KAAQ,CAAC,KAAQ,SAAU,SAAW,GACtC,SAAY,CACV,KAAQ,CAAC,MAAS,KAClB,MAAS,CACP,UAAa,CACX,KAAQ,iCACR,MAAS,WAEX,MAAS,aAIf,CACE,KAAQ,CACN,KAAQ,OACR,MAAS,CACP,KAAQ,qDAEV,GAAM,CAAC,KAAQ,8CAEjB,SAAY,CACV,KAAQ,CACN,MAAS,iBACT,KAAQ,gBAOpB,OAAU,CACR,KAAQ,CAAC,OAAU,eACnB,QAAW,CAAC,KAAQ,EAAG,IAAO,GAAI,MAAS,EAAG,OAAU,GACxD,KAAQ,WACR,KAAQ,CACN,cAAiB,GACjB,aAAgB,GAChB,OAAU,EACV,UAAa,WACb,WAAc,WAEhB,KAAQ,CAAC,SAAY,GAAI,KAAQ,WAAY,MAAS,WACtD,OAAU,CAAC,QAAW,IACtB,OAAU,CACR,cAAiB,GACjB,UAAa,WACb,WAAc,aAKF,WADF,YAAH0C,OAAe3C,EAAW4C,QAAQC,QAAQ,gBAAiB,OAErErE,KAAK,kBAAMD,EAAQ,WAAW,GAC9BuE,MAAM,SAACC,GAAK,OAAKxE,EAAQ,UAADoE,OAAWI,EAAMC,SAAU,EAExD,CAAE,MAAOD,GACPxE,EAAQ,UAADoE,OAAWI,EAAMC,SAC1B,CACF,EACF,CAYA,SAASyb,EAAU1e,EAAMC,GACvB,OAAO,IAAI1B,QAAQ,SAACC,GAClB,IACE,IAAKwB,GAAQA,EAAK9D,OAAS,EAEzB,YADAsC,EAAQ,kDAIV,IAAM0B,EAAUF,EAAK,GACfoD,EAAOpD,EAAK/B,MAAM,GAExB,GAAIiC,EAAQhE,OAAS,EAEnB,YADAsC,EAAQ,kGAmFVqC,GArEUtB,EAAA,CACRuB,QAAS,kDACTC,YAAa,uCACbC,WAAY,QACZC,OAAQ,CAAEC,KAAM,CAAEC,OAAQ,gBAC1BnB,KAAM,CAAEoB,OAdYgC,EAAKhD,IAAI,SAAAC,GAC7B,IAAIC,EAAM,CAAC,EAIX,OAHAJ,EAAQZ,QAAQ,SAACiB,EAAGrF,GAClBoF,EAAIC,GAAKF,EAAInF,EACf,GACOoF,CACT,IASEyN,MAAO,CACL,CACE1M,KAAM,CAAEC,KAAM,OAAQE,SAAS,EAAMU,MAAO,QAC5CR,SAAU,CACRC,EAAG,CAAEC,MAAO1B,EAAQ,GAAIoB,KAAM,WAC9B1F,EAAG,CAAEgG,MAAO1B,EAAQ,GAAIoB,KAAM,kBAGlC,CACED,KAAM,CAAEC,KAAM,SAAUoB,KAAM,GAAIR,MAAO,OAAQV,SAAS,GAC1DE,SAAU,CACRC,EAAG,CAAEC,MAAO1B,EAAQ,GAAIoB,KAAM,WAC9B1F,EAAG,CAAEgG,MAAO1B,EAAQ,GAAIoB,KAAM,kBAGlC,CACED,KAAM,CAAEC,KAAM,OAAQG,YAAa,EAAGD,SAAS,GAC/CE,SAAU,CACRC,EAAG,CAAEC,MAAO1B,EAAQ,GAAIoB,KAAM,WAC9B1F,EAAG,CAAEgG,MAAO1B,EAAQ,GAAIoB,KAAM,gBAC9BwO,GAAI,CAAElO,MAAO1B,EAAQ,IACrBgC,MAAO,CACLyO,UAAW,CAAEtS,KAAM,UAAFuE,OAAY1C,EAAQ,GAAE,gBAAA0C,OAAe1C,EAAQ,GAAE,MAAM3D,MAAO,OAC7EA,MAAO,WAIb,CACE8E,KAAM,CAAEC,KAAM,SAAUoB,KAAM,GAAIlB,SAAS,GAC3CE,SAAU,CACRC,EAAG,CAAEC,MAAO1B,EAAQ,GAAIoB,KAAM,WAC9B1F,EAAG,CAAEgG,MAAO1B,EAAQ,GAAIoB,KAAM,gBAC9BY,MAAO,CACLyO,UAAW,CAAEtS,KAAM,UAAFuE,OAAY1C,EAAQ,GAAE,gBAAA0C,OAAe1C,EAAQ,GAAE,MAAM3D,MAAO,OAC7EA,MAAO,YAKfmF,SAAU,CACRC,EAAG,CACDC,MAAO1B,EAAQ,GACfoB,KAAM,UACNO,KAAM,CACJC,MAAO,KACPG,WAAY,IAGhBrG,EAAG,CAAE0F,KAAM,eAAgBO,KAAM,CAAEC,MAAO,OAC3C,SACO,CACNZ,KAAM,CAAEC,OAAQ,eAChB2Y,KAAM,CAAErY,YAAa,EAAGsY,UAAW,QAASC,WAAY,SACxDnY,KAAM,CACJ6U,OAAO,EACPR,MAAM,EACNtK,QAAQ,EACRrJ,WAAY,UACZR,cAAe,MAKH,YADF,aAAHa,OAAgB3C,EAAW4C,QAAQC,QAAQ,gBAAiB,OAEtErE,KAAK,kBAAMD,EAAQ,YAAY,GAC/BuE,MAAM,SAACC,GAAK,OAAKxE,EAAQ,UAADoE,OAAWI,EAAMC,SAAU,EAExD,CAAE,MAAOD,GACPxE,EAAQ,UAADoE,OAAWI,EAAMC,SAC1B,CACF,EACF,CAYA,SAAS0b,EAAO3e,EAAMC,GACpB,OAAO,IAAI1B,QAAQ,SAACC,GAClB,IACE,IAAKwB,GAAQA,EAAK9D,OAAS,EAEzB,YADAsC,EAAQ,kDAIV,IAAM0B,EAAUF,EAAK,GACfoD,EAAOpD,EAAK/B,MAAM,GAExB,GAAIiC,EAAQhE,OAAS,EAEnB,YADAsC,EAAQ,6EAKV,IAAM2B,EAAgBiD,EAAKhD,IAAI,SAAAC,GAC7B,IAAIC,EAAM,CAAC,EAIX,OAHAJ,EAAQZ,QAAQ,SAACiB,EAAGrF,GAClBoF,EAAIC,GAAKF,EAAInF,EACf,GACOoF,CACT,GAGMse,EAAa5R,EAAO,IAAI5I,IAAIjE,EAAcC,IAAI,SAAApE,GAAC,OAAIA,EAAEkE,EAAQ,GAAG,KA8FtEW,GAzFUtB,EAAA,CACRuB,QAAS,kDACTC,YAAa,oCACbC,WAAY,QACZoK,MARmB5F,KAAK8G,IAAI,IAA4B,IAAvBsS,EAAc1iB,QAS/CmP,OARoB,IASpBpK,OAAQ,CAAEC,KAAM,CAAEC,OAAQ,gBAC1BnB,KAAM,CAAEoB,OAAQjB,GAChB4N,MAAO,CACL,CACE1M,KAAM,CACJC,KAAM,OACNqK,YAAa,WACbnK,SAAS,EACTyJ,QAAS,IAEXvJ,SAAU,CACRC,EAAG,CACDC,MAAO1B,EAAQ,GACfoB,KAAM,UACNa,MAAO,CACLb,KAAM,QACN0N,QAAS,IAEXnN,KAAM,CACJC,MAAO5B,EAAQ,GACf+B,YAAa,GACbF,cAAe,GACfC,cAAe,GACf4U,aAAc,GACdiI,aAAc,KAGlBjjB,EAAG,CACDkQ,UAAW,MACXlK,MAAO1B,EAAQ,GACfoB,KAAM,eACNO,KAAM,CACJC,MAAO5B,EAAQ,GACf6B,cAAe,GACfC,cAAe,GACfkU,MAAM,EACNC,YAAa,IAEfpK,MAAO,UAET7J,MAAO,CACLN,MAAO1B,EAAQ,GACfoB,KAAM,UACNe,OAAQ,CACNP,MAAO5B,EAAQ,GACf8B,cAAe,GACfD,cAAe,GACf+B,OAAQ,UAGZgK,MAAO,CACLhC,UAAW,MACXlK,MAAO1B,EAAQ,GACfoB,KAAM,oBAIb,SACO,CACNJ,KAAM,CAAEC,OAAQ,eAChBmB,KAAM,WACNT,KAAM,CACJ6U,OAAO,EACPR,MAAM,EACNzT,UAAW,UACX0T,YAAa,GACb2I,UAAW,EACXlT,QAAQ,EACRrJ,WAAY,UACZC,WAAY,WAEdH,OAAQ,CACN2U,UAAW,WACXC,gBAAiB,OACjBzU,WAAY,UACZ0U,UAAW,WACX3U,WAAY,UACZ8X,WAAY,SACZC,WAAY,MAKA,SADF,UAAH1X,OAAa3C,EAAW4C,QAAQC,QAAQ,gBAAiB,OAEnErE,KAAK,kBAAMD,EAAQ,SAAS,GAC5BuE,MAAM,SAACC,GAAK,OAAKxE,EAAQ,UAADoE,OAAWI,EAAMC,SAAU,EAExD,CAAE,MAAOD,GACPxE,EAAQ,UAADoE,OAAWI,EAAMC,SAC1B,CACF,EACF,CAEA,SAGepC,GAAWke,EAAAC,EAAAC,GAAA,OAAAC,GAAAtgB,MAAC,KAADD,UAAA,CAkC1B,SAAAugB,KAFC,OAEDA,GAAAxgB,EAAA3B,IAAAE,EAlCA,SAAAkiB,EAA2B1X,EAAM2X,EAAW1X,GAAO,IAAA2X,EAAA7W,EAAA8W,EAAAC,EAAA3W,EAAAC,EAAA,OAAA9L,IAAAC,EAAA,SAAAwiB,GAAA,cAAAA,EAAA1kB,GAAA,OAKZ,IAH/BukB,EAAYxX,SAASC,cAAc,QAC/BE,MAAMyX,QAAU,OAC1BJ,EAAUtX,GAAKL,EACfG,SAASM,KAAKC,YAAYiX,GAED,oBAAdhX,UAAyB,CAAAmX,EAAA1kB,EAAA,eAAA0kB,EAAA1kB,EAAA,EAC5B6M,KAAmB,cAAA6X,EAAA1kB,EAAA,EAGNuN,UAAUgX,EAAW5X,EAAM,CAAEa,SAAS,IAAQ,OAAvD,OAANE,EAAMgX,EAAA1jB,EAAA0jB,EAAA1kB,EAAG,EACM0N,EAAOtH,KAAKwe,WAAW,OAAM,OAAtC,OAANJ,EAAME,EAAA1jB,EAAA0jB,EAAA1kB,EAAG,EAEQ6kB,MAAML,GAAO,OAAtB,OAARC,EAAQC,EAAA1jB,EAAA0jB,EAAA1kB,EAAG,EACEykB,EAAS3W,OAAM,OACH,OADzBA,EAAI4W,EAAA1jB,EACJ+M,EAAS,IAAIC,WAAY0W,EAAAzjB,EAAA,EAExB,IAAIwC,QAAQ,SAACC,EAASohB,GAC3B/W,EAAOE,UAASrK,EAAA3B,IAAAE,EAAG,SAAA4iB,IAAA,IAAA7W,EAAA8W,EAAA,OAAA/iB,IAAAC,EAAA,SAAA+iB,GAAA,cAAAA,EAAApkB,EAAAokB,EAAAjlB,GAAA,OAE+B,OAF/BilB,EAAApkB,EAAA,EAETqN,EAAaH,EAAOL,OAAOS,MAAM,KAAK,GAAE8W,EAAAjlB,EAAA,EACxCklB,GAAYhX,EAAYoW,EAAW1X,GAAQ,OACjDG,SAASM,KAAK0C,YAAYwU,GAC1B7gB,IAAUuhB,EAAAjlB,EAAA,eAAAilB,EAAApkB,EAAA,EAAAmkB,EAAAC,EAAAjkB,EAEN+L,SAASM,KAAK4O,SAASsI,IAAYxX,SAASM,KAAK0C,YAAYwU,GACjEO,EAAME,GAAM,cAAAC,EAAAhkB,EAAA,KAAA8jB,EAAA,iBAGhBhX,EAAOkC,cAAcnC,EACvB,IAAE,EAAAuW,EAAA,KACHvgB,MAAA,KAAAD,UAAA,UAKcqhB,GAAWC,EAAAC,EAAAC,GAAA,OAAAC,GAAAxhB,MAAC,KAADD,UAAA,CAsC1B,SAAAyhB,KAFC,OAEDA,GAAA1hB,EAAA3B,IAAAE,EAtCA,SAAAojB,EAA2BrX,EAAYoW,EAAW1X,GAAO,OAAA3K,IAAAC,EAAA,SAAAsjB,GAAA,cAAAA,EAAAxlB,EAAA,OAAAwlB,EAAAvkB,EAAA,EAChDmN,MAAMC,IAAG,eAAAoX,EAAA7hB,EAAA3B,IAAAE,EAAC,SAAAujB,EAAOlX,GAAO,IAAAC,EAAAkX,EAAAvY,EAAAwC,EAAAgW,EAAAC,EAAA9c,EAAAgG,EAAA,OAAA9M,IAAAC,EAAA,SAAA4jB,GAAA,cAAAA,EAAA9lB,GAAA,OAG7B,OAFMyO,EAAQD,EAAQW,SAASC,WAAWC,qBAE1CyW,EAAA9lB,EAAA,EAC0B+lB,GAAqBvX,EAASC,EAAO6V,EAAW1X,GAAQ,OAAjE,KAAX+Y,EAAWG,EAAA9kB,GAIA,CAAF8kB,EAAA9lB,EAAA,QACboN,EAAOuY,EAAYvY,KACnBwC,EAAM+V,EAAY/V,IAClBgW,EAAcD,EAAYrV,MAC1BuV,EAAeF,EAAYpV,OAAOuV,EAAA9lB,EAAA,eAGK,OADjC+I,EAAQyF,EAAQW,SAASO,oBACzBJ,KAAK,4BAA4BwW,EAAA9lB,EAAA,EACjCwO,EAAQe,OAAM,OACpBnC,EAAOrE,EAAMqE,KACbwC,EAAM7G,EAAM6G,IAAI,OAauE,OAVnFb,EAAQN,EAAMC,OAAOiB,SAASzB,IAC9Bd,KAAOA,EACb2B,EAAMa,IAAMA,EACR+V,GACF5W,EAAMc,iBAAkB,EACxBd,EAAMuB,MAAQsV,EACd7W,EAAMwB,OAASsV,GAEf9W,EAAMc,iBAAkB,EAE1Bd,EAAM1L,KAAO,GAAHyE,OAAMwc,EAAU0B,OAAO,GAAG1N,cAAgBgM,EAAUnhB,MAAM,GAAE,UAAA2E,OAAS8E,GAAUkZ,EAAA9lB,EAAA,EAEnFwO,EAAQe,OAAM,cAAAuW,EAAA7kB,EAAA,KAAAykB,EAAA,IACrB,gBAAAO,GAAA,OAAAR,EAAA3hB,MAAA,KAAAD,UAAA,EAlCe,IAkCd,EAAA0hB,EAAA,IACHD,GAAAxhB,MAAA,KAAAD,UAAA,UAKckiB,GAAoBG,EAAAC,EAAAC,EAAAC,GAAA,OAAAC,GAAAxiB,MAAC,KAADD,UAAA,CA6BnC,SAAAyiB,KAFC,OAEDA,GAAA1iB,EAAA3B,IAAAE,EA7BA,SAAAokB,EAAoC/X,EAASC,EAAO6V,EAAW1X,GAAO,IAAA8B,EAAAC,EAAAgX,EAAAa,EAAAC,EAAA3X,EAAA,OAAA7M,IAAAC,EAAA,SAAAwkB,GAAA,cAAAA,EAAA1mB,GAAA,OAE/C,OADf0O,EAASD,EAAMC,QACdY,KAAK,SAASoX,EAAA1mB,EAAA,EACfwO,EAAQe,OAAM,OAOjB,OALGZ,EAAY,GAAH7G,OAAMwc,EAAU0B,OAAO,GAAG1N,cAAgBgM,EAAUnhB,MAAM,GAAE,UAAA2E,OAAS8E,GAChF+Y,EAAc,KAElBjX,EAAOc,MAAMhL,QAAQ,SAAAsK,GACnBA,EAAMQ,KAAK,CAAC,OAAQ,OAAQ,MAAO,QAAS,UAC9C,GAAGoX,EAAA1mB,EAAA,EACGwO,EAAQe,OAAM,OAAAiX,EAAA/jB,EAEFiM,EAAOc,OAAK,IAA9B,IAAAgX,EAAAzjB,MAAA0jB,EAAAD,EAAAxmB,KAAAwB,OAASsN,EAAK2X,EAAAhlB,OACF4B,OAASsL,IACjBgX,EAAc,CACZvY,KAAM0B,EAAM1B,KACZwC,IAAKd,EAAMc,IACXU,MAAOxB,EAAMwB,MACbC,OAAQzB,EAAMyB,QAEhBzB,EAAMW,SAET,OAAAmR,GAAA4F,EAAA5mB,EAAAghB,EAAA,SAAA4F,EAAA5lB,GAAA,QAAA8lB,EAAA1mB,EAAA,EAEKwO,EAAQe,OAAM,cAAAmX,EAAAzlB,EAAA,EACb0kB,GAAW,EAAAY,EAAA,KACnBziB,MAAA,KAAAD,UAAA,CAKD,SAASgJ,KACP,OAAO,IAAIpJ,QAAQ,SAACC,EAASohB,GAC3B,GAAyB,oBAAdvX,UAAX,CAMA,IAAMoZ,EAAU,CACd,sCACA,2CACA,6CAGEC,EAAc,EAElBD,EAAQniB,QAAQ,SAACqiB,EAAKjc,GACpB,IAAMkc,EAAS/Z,SAASC,cAAc,UACtC8Z,EAAOD,IAAMA,EACbC,EAAOC,OAAS,aACdH,IACoBD,EAAQvlB,QAC1BsC,GAEJ,EACAojB,EAAOE,QAAU,kBAAMlC,EAAO,IAAImC,MAAM,kBAADnf,OAAmB+e,IAAO,EACjE9Z,SAASma,KAAK5Z,YAAYwZ,EAC5B,EAtBA,MAFEpjB,GAyBJ,EACF,CAE+B,oBAApByjB,kBACTA,gBAAgBC,UAAU,OAAQniB,GAClCkiB,gBAAgBC,UAAU,MAAOhf,GACjC+e,gBAAgBC,UAAU,MAAO5e,GACjC2e,gBAAgBC,UAAU,QAASve,GACnCse,gBAAgBC,UAAU,QAAS/e,GACnC8e,gBAAgBC,UAAU,OAAQlX,GAClCiX,gBAAgBC,UAAU,UAAWlW,GACrCiW,gBAAgBC,UAAU,SAAUhW,GACpC+V,gBAAgBC,UAAU,SAAU1U,GACpCyU,gBAAgBC,UAAU,QAASle,GACnCie,gBAAgBC,UAAU,OAAQ/V,GAClC8V,gBAAgBC,UAAU,MAAO9T,GACjC6T,gBAAgBC,UAAU,QAAS3T,GACnC0T,gBAAgBC,UAAU,YAAa/R,GACvC8R,gBAAgBC,UAAU,WAAYtR,GACtCqR,gBAAgBC,UAAU,UAAWxQ,GACrCuQ,gBAAgBC,UAAU,YAAa3P,GACvC0P,gBAAgBC,UAAU,cAAetO,GACzCqO,gBAAgBC,UAAU,MAAOlP,GACjCiP,gBAAgBC,UAAU,MAAO5N,GACjC2N,gBAAgBC,UAAU,OAAQzM,GAClCwM,gBAAgBC,UAAU,YAAaxM,GACvCuM,gBAAgBC,UAAU,QAASlM,GACnCiM,gBAAgBC,UAAU,UAAW9L,GACrC6L,gBAAgBC,UAAU,SAAU/K,GACpC8K,gBAAgBC,UAAU,UAAW3K,GACrC0K,gBAAgBC,UAAU,cAAehX,GACzC+W,gBAAgBC,UAAU,WAAYnK,GACtCkK,gBAAgBC,UAAU,QAASzJ,GACnCwJ,gBAAgBC,UAAU,QAAS3I,GACnC0I,gBAAgBC,UAAU,YAAavI,GACvCsI,gBAAgBC,UAAU,OAAQtI,GAClCqI,gBAAgBC,UAAU,SAAUjI,GACpCgI,gBAAgBC,UAAU,WAAY3H,GACtC0H,gBAAgBC,UAAU,SAAU1H,GACpCyH,gBAAgBC,UAAU,QAASlH,GACnCiH,gBAAgBC,UAAU,SAAUzF,GACpCwF,gBAAgBC,UAAU,SAAUvD,GACpCsD,gBAAgBC,UAAU,YAAa3D,GACvC0D,gBAAgBC,UAAU,YAAaxD,GACvCuD,gBAAgBC,UAAU,WAAYzD,IAExCwD,gBAAgBC,UAAU,OAAQniB,GAClCkiB,gBAAgBC,UAAU,MAAOhf,GACjC+e,gBAAgBC,UAAU,QAAS/e,GACnC8e,gBAAgBC,UAAU,MAAO5e,GACjC2e,gBAAgBC,UAAU,QAASve,GACnCse,gBAAgBC,UAAU,QAASle,GACnCie,gBAAgBC,UAAU,OAAQlX,GAClCiX,gBAAgBC,UAAU,cAAehX,GACzC+W,gBAAgBC,UAAU,UAAWlW,GACrCiW,gBAAgBC,UAAU,SAAUhW,GACpC+V,gBAAgBC,UAAU,OAAQ/V,GAClC8V,gBAAgBC,UAAU,SAAU1U,GACpCyU,gBAAgBC,UAAU,MAAO9T,GACjC6T,gBAAgBC,UAAU,QAAS3T,GACnC0T,gBAAgBC,UAAU,YAAa/R,GACvC8R,gBAAgBC,UAAU,WAAYtR,GACtCqR,gBAAgBC,UAAU,UAAWxQ,GACrCuQ,gBAAgBC,UAAU,YAAa3P,GACvC0P,gBAAgBC,UAAU,MAAOlP,GACjCiP,gBAAgBC,UAAU,cAAetO,GACzCqO,gBAAgBC,UAAU,MAAO5N,GACjC2N,gBAAgBC,UAAU,OAAQzM,GAClCwM,gBAAgBC,UAAU,YAAaxM,GACvCuM,gBAAgBC,UAAU,QAASlM,GACnCiM,gBAAgBC,UAAU,UAAW9L,GACrC6L,gBAAgBC,UAAU,SAAU/K,GACpC8K,gBAAgBC,UAAU,UAAW3K,GACrC0K,gBAAgBC,UAAU,WAAYnK,GACtCkK,gBAAgBC,UAAU,QAASzJ,GACnCwJ,gBAAgBC,UAAU,QAAS3I,GACnC0I,gBAAgBC,UAAU,YAAavI,GACvCsI,gBAAgBC,UAAU,OAAQtI,GAClCqI,gBAAgBC,UAAU,SAAUjI,GACpCgI,gBAAgBC,UAAU,WAAY3H,GACtC0H,gBAAgBC,UAAU,SAAU1H,GACpCyH,gBAAgBC,UAAU,QAASlH,GACnCiH,gBAAgBC,UAAU,SAAUzF,GACpCwF,gBAAgBC,UAAU,YAAa3D,GACvC0D,gBAAgBC,UAAU,WAAYzD,GACtCwD,gBAAgBC,UAAU,YAAaxD,GACvCuD,gBAAgBC,UAAU,SAAUvD,E","sources":["webpack://excel-custom-functions-js/./src/functions/functions.js"],"sourcesContent":["/**\n * LINE custom function\n * Creates a multi-series line chart from Excel data range\n * \n * @customfunction\n * @requiresAddress\n * @param {any[][]} data The data range including headers\n * @param {CustomFunctions.Invocation} invocation Invocation object\n * @returns {string} Status message\n */\nfunction LINE(data, invocation) {\n  return new Promise((resolve) => {\n    try {\n      if (!data || data.length < 2) {\n        resolve(\"Error: Need at least header row + one data row\");\n        return;\n      }\n\n      const headers = data[0];\n      const rows = data.slice(1);\n\n      // Convert rows -> objects (same as taskpane.js)\n      const processedData = rows.map(row => {\n        let obj = {};\n        headers.forEach((h, i) => {\n          obj[h] = row[i];\n        });\n        return obj;\n      });\n\n      // Transform data for multi-series line chart (exact copy from taskpane.js)\n      const transformedData = [];\n      const valueColumns = headers.slice(1);\n      processedData.forEach(row => {\n        valueColumns.forEach(colName => {\n          if (row[colName] !== null && row[colName] !== undefined && row[colName] !== \"\") {\n            transformedData.push({\n              [headers[0]]: row[headers[0]], // x-axis value (first column)\n              series: colName,               // series name (column header)\n              value: parseFloat(row[colName]) || 0  // y-axis value\n            });\n          }\n        });\n      });\n\n      // Use EXACT specification from taskpane.js line chart\n      const spec = {\n        $schema: \"https://vega.github.io/schema/vega-lite/v6.json\",\n        description: \"Multi-series line chart from Excel selection\",\n        background: \"white\",\n        config: { view: { stroke: \"transparent\" }},\n        data: { values: transformedData },\n        mark: { \n          type: \"line\", \n          point: false,\n          tooltip: true,\n          strokeWidth: 2\n        },\n        encoding: {\n          x: { \n            field: headers[0], \n            type: \"ordinal\",\n            axis: {\n              title: headers[0],\n              labelFontSize: 12,\n              titleFontSize: 14,\n              labelAngle: 0\n            }\n          },\n          y: { \n            field: \"value\", \n            type: \"quantitative\",\n            axis: {\n              title: \"Value\",\n              labelFontSize: 12,\n              titleFontSize: 14\n            }\n          },\n          color: { \n            field: \"series\", \n            type: \"nominal\",\n            scale: {\n              scheme: \"category10\"\n            },\n            legend: {\n              title: \"Series\",\n              titleFontSize: 12,\n              labelFontSize: 11\n            }\n          }\n        },\n        config: {\n          font: \"Segoe UI\",\n          axis: {\n            labelColor: \"#605e5c\",\n            titleColor: \"#323130\",\n            gridColor: \"#f3f2f1\"\n          },\n          legend: {\n            titleColor: \"#323130\",\n            labelColor: \"#605e5c\"\n          },\n          point: {\n            size: 60,\n            filled: true\n          }\n        }\n      };\n      const chartId = `line_${invocation.address.replace(/[^A-Za-z0-9]/g, \"_\")}`;\n      createChart(spec, \"line\", chartId)\n        .then(() => resolve(\"Line\"))\n        .catch((error) => resolve(`Error: ${error.message}`));\n\n    } catch (error) {\n      resolve(`Error: ${error.message}`);\n    }\n  });\n}\n\n/**\n * BAR custom function\n * Creates a bar chart from Excel data range\n * \n * @customfunction\n * @requiresAddress\n * @param {any[][]} data The data range including headers\n * @param {CustomFunctions.Invocation} invocation Invocation object\n * @returns {string} Status message\n */\nfunction BAR(data, invocation) {\n  return new Promise((resolve) => {\n    try {\n      if (!data || data.length < 2) {\n        resolve(\"Error: Need at least header row + one data row\");\n        return;\n      }\n\n      const headers = data[0];\n      const rows = data.slice(1);\n\n      // Convert rows -> objects (same as taskpane.js)\n      const processedData = rows.map(row => {\n        let obj = {};\n        headers.forEach((h, i) => {\n          obj[h] = row[i];\n        });\n        return obj;\n      });\n\n      // Use EXACT specification from taskpane.js bar chart\n      const spec = {\n        $schema: \"https://vega.github.io/schema/vega-lite/v6.json\",\n        description: \"Bar chart from Excel selection\",\n        background: \"white\",\n        config: { view: { stroke: \"transparent\" }},\n        data: { values: processedData },\n        mark: { \n          type: \"bar\", \n          tooltip: true\n        },\n        encoding: {\n          x: { \n            field: headers[0], \n            type: \"nominal\",\n            axis: {\n              title: headers[0],\n              labelFontSize: 12,\n              titleFontSize: 14\n            }\n          },\n          y: { \n            field: headers[1], \n            type: \"quantitative\",\n            axis: {\n              title: headers[1],\n              labelFontSize: 12,\n              titleFontSize: 14\n            }\n          },\n          // Add color encoding for grouped bars if 3rd column exists\n          ...(headers.length >= 3 && {\n            color: { \n              field: headers[2], \n              type: \"nominal\",\n              legend: {\n                title: headers[2],\n                titleFontSize: 12,\n                labelFontSize: 11\n              }\n            }\n          })\n        },\n        config: {\n          font: \"Segoe UI\",\n          axis: {\n            labelColor: \"#605e5c\",\n            titleColor: \"#323130\",\n            gridColor: \"#f3f2f1\"\n          },\n          legend: {\n            titleColor: \"#323130\",\n            labelColor: \"#605e5c\"\n          }\n        }\n      };\n      const chartId = `bar_${invocation.address.replace(/[^A-Za-z0-9]/g, \"_\")}`;\n      createChart(spec, \"bar\", chartId)\n        .then(() => resolve(\"Bar\"))\n        .catch((error) => resolve(`Error: ${error.message}`));\n\n    } catch (error) {\n      resolve(`Error: ${error.message}`);\n    }\n  });\n}\n\n/**\n * GAUGE custom function \n * Creates a gauge chart from Excel data range\n * \n * @customfunction\n * @requiresAddress\n * @param {any[][]} data The data range including headers\n * @param {CustomFunctions.Invocation} invocation Invocation object\n * @returns {string} Status message\n */\nfunction GAUGE(data, invocation) {\n  return new Promise((resolve) => {\n    try {\n      if (!data || data.length < 2) {\n        resolve(\"Error: Need at least header row + one data row\");\n        return;\n      }\n\n      const headers = data[0];\n      const rows = data.slice(1);\n\n      if (headers.length < 2) {\n        resolve(\"Error: Gauge chart requires 2 columns (Current Value, Max Value)\");\n        return;\n      }\n\n      // Process gauge data - expect one row with current value and max value\n      const gaugeRow = rows[0]; // Use first data row\n      const mainValue = parseFloat(gaugeRow[0]) || 0;\n      const maxValue = parseFloat(gaugeRow[1]) || 100;\n      const minValue = 0; // Always start from 0\n\n      const spec = {\n        \"$schema\": \"https://vega.github.io/schema/vega/v5.json\",\n        \"description\": \"Gauge chart from Excel selection\",\n        \"width\": 400,\n        \"height\": 300,\n        \"background\": \"white\",\n        \"config\": { \"view\": { \"stroke\": \"transparent\" }},\n        \n        \"signals\": [\n          {\"name\": \"centerX\", \"update\": \"width / 2\"},\n          {\"name\": \"centerY\", \"update\": \"height / 2\"},\n          {\"name\": \"outerRadius\", \"update\": \"min(width, height) / 2 - 10\"},\n          {\"name\": \"innerRadius\", \"update\": \"outerRadius - outerRadius * 0.25\"},\n          {\"name\": \"mainValue\", \"value\": mainValue},\n          {\"name\": \"minValue\", \"value\": minValue},\n          {\"name\": \"maxValue\", \"value\": maxValue},\n          {\"name\": \"usedValue\", \"update\": \"min(max(minValue, mainValue), maxValue)\"},\n          {\"name\": \"fontFactor\", \"update\": \"(min(width, height)/5)/25\"},\n          {\"name\": \"backgroundColor\", \"value\": \"#e1e4e8\"},\n          {\"name\": \"fillColor\", \"value\": \"#0078d4\"},\n          {\"name\": \"needleColor\", \"value\": \"#323130\"},\n          {\"name\": \"needleSize\", \"update\": \"innerRadius\"}\n        ],\n        \n        \"scales\": [\n          {\n            \"name\": \"gaugeScale\",\n            \"type\": \"linear\",\n            \"domain\": [{\"signal\": \"minValue\"}, {\"signal\": \"maxValue\"}],\n            \"range\": [{\"signal\": \"-PI/2\"}, {\"signal\": \"PI/2\"}]\n          },\n          {\n            \"name\": \"needleScale\",\n            \"type\": \"linear\",\n            \"domain\": [{\"signal\": \"minValue\"}, {\"signal\": \"maxValue\"}],\n            \"range\": [-90, 90]\n          }\n        ],\n        \n        \"marks\": [\n          {\n            \"type\": \"arc\",\n            \"name\": \"gauge\",\n            \"encode\": {\n              \"enter\": {\n                \"x\": {\"signal\": \"centerX\"},\n                \"y\": {\"signal\": \"centerY\"},\n                \"startAngle\": {\"signal\": \"-PI/2\"},\n                \"endAngle\": {\"signal\": \"PI/2\"},\n                \"outerRadius\": {\"signal\": \"outerRadius\"},\n                \"innerRadius\": {\"signal\": \"innerRadius\"},\n                \"fill\": {\"signal\": \"backgroundColor\"}\n              }\n            }\n          },\n          {\n            \"type\": \"arc\",\n            \"encode\": {\n              \"enter\": {\"startAngle\": {\"signal\": \"-PI/2\"}},\n              \"update\": {\n                \"x\": {\"signal\": \"centerX\"},\n                \"y\": {\"signal\": \"centerY\"},\n                \"innerRadius\": {\"signal\": \"innerRadius\"},\n                \"outerRadius\": {\"signal\": \"outerRadius\"},\n                \"endAngle\": {\"scale\": \"gaugeScale\", \"signal\": \"usedValue\"},\n                \"fill\": {\"signal\": \"fillColor\"}\n              }\n            }\n          },\n          {\n            \"type\": \"text\",\n            \"description\": \"displayed main value at the center\",\n            \"encode\": {\n              \"enter\": {\n                \"x\": {\"signal\": \"centerX\"},\n                \"y\": {\"signal\": \"centerY + fontFactor * 15\"},\n                \"baseline\": {\"value\": \"middle\"},\n                \"align\": {\"value\": \"center\"},\n                \"fontSize\": {\"signal\": \"fontFactor * 7\"},\n                \"font\": {\"value\": \"Segoe UI\"},\n                \"fontWeight\": {\"value\": \"bold\"}\n              },\n              \"update\": {\n                \"text\": {\"signal\": \"mainValue < 1 ? format(mainValue, '.0%') : format(mainValue, ',.0f')\"},\n                \"fill\": {\"signal\": \"fillColor\"}\n              }\n            }\n          },\n          {\n            \"type\": \"symbol\",\n            \"name\": \"needle\",\n            \"encode\": {\n              \"enter\": {\"x\": {\"signal\": \"centerX\"}, \"y\": {\"signal\": \"centerY\"}},\n              \"update\": {\n                \"shape\": {\n                  \"signal\": \"'M-2.5 -2.5 Q 0 0 2.5 -2.5 L 0 -' + toString(needleSize) + ' Z '\"\n                },\n                \"angle\": {\"signal\": \"usedValue\", \"scale\": \"needleScale\"},\n                \"size\": {\"signal\": \"4\"},\n                \"stroke\": {\"signal\": \"needleColor\"},\n                \"fill\": {\"signal\": \"needleColor\"}\n              }\n            }\n          },\n          {\n            \"type\": \"symbol\",\n            \"description\": \"center circle\",\n            \"encode\": {\n              \"enter\": {\n                \"x\": {\"signal\": \"centerX\"},\n                \"y\": {\"signal\": \"centerY\"},\n                \"shape\": {\"value\": \"circle\"},\n                \"size\": {\"signal\": \"pow(fontFactor * 8, 2)\"},\n                \"fill\": {\"signal\": \"needleColor\"},\n                \"stroke\": {\"value\": \"white\"},\n                \"strokeWidth\": {\"value\": 2}\n              }\n            }\n          }\n        ]\n      };\n      const chartId = `gauge_${invocation.address.replace(/[^A-Za-z0-9]/g, \"_\")}`;\n      createChart(spec, \"gauge\", chartId)\n        .then(() => resolve(\"Gauge\"))\n        .catch((error) => resolve(`Error: ${error.message}`));\n\n    } catch (error) {\n      resolve(`Error: ${error.message}`);\n    }\n  });\n}\n\n/**\n * PIE custom function\n * Creates a pie chart from Excel data range\n * \n * @customfunction\n * @requiresAddress\n * @param {any[][]} data The data range including headers\n * @param {CustomFunctions.Invocation} invocation Invocation object\n * @returns {string} Status message\n */\nfunction PIE(data, invocation) {\n  return new Promise((resolve) => {\n    try {\n      if (!data || data.length < 2) {\n        resolve(\"Error: Need at least header row + one data row\");\n        return;\n      }\n\n      const headers = data[0];\n      const rows = data.slice(1);\n\n      if (headers.length < 2) {\n        resolve(\"Error: Pie chart requires 2 columns (Category, Value)\");\n        return;\n      }\n\n      // Validate that all values are positive numbers\n      const hasInvalidValues = rows.some(row => isNaN(row[1]) || row[1] <= 0);\n      if (hasInvalidValues) {\n        resolve(\"Error: Pie chart values must be positive numbers\");\n        return;\n      }\n\n      // Convert rows -> objects (same as taskpane.js)\n      const processedData = rows.map(row => {\n        let obj = {};\n        headers.forEach((h, i) => {\n          obj[h] = row[i];\n        });\n        return obj;\n      });\n\n      // Use EXACT specification from taskpane.js pie chart\n      const spec = {\n        $schema: \"https://vega.github.io/schema/vega-lite/v6.json\",\n        background: \"white\",\n        config: { view: { stroke: \"transparent\" }},\n        description: \"Pie chart from Excel selection\",\n        data: { values: processedData },\n        mark: { type: \"arc\", outerRadius: 120 },\n        encoding: {\n          theta: { field: headers[1], type: \"quantitative\" },\n          color: { field: headers[0], type: \"nominal\" }\n        }\n      };\n      const chartId = `pie_${invocation.address.replace(/[^A-Za-z0-9]/g, \"_\")}`;\n      createChart(spec, \"pie\", chartId)\n        .then(() => resolve(\"Pie\"))\n        .catch((error) => resolve(`Error: ${error.message}`));\n\n    } catch (error) {\n      resolve(`Error: ${error.message}`);\n    }\n  });\n}\n\n/**\n * DONUT custom function\n * Creates a donut chart from Excel data range\n * \n * @customfunction\n * @requiresAddress\n * @param {any[][]} data The data range including headers\n * @param {CustomFunctions.Invocation} invocation Invocation object\n * @returns {string} Status message\n */\nfunction DONUT(data, invocation) {\n  return new Promise((resolve) => {\n    try {\n      if (!data || data.length < 2) {\n        resolve(\"Error: Need at least header row + one data row\");\n        return;\n      }\n\n      const headers = data[0];\n      const rows = data.slice(1);\n\n      if (headers.length < 2) {\n        resolve(\"Error: Donut chart requires 2 columns (Category, Value)\");\n        return;\n      }\n\n      // Validate that all values are positive numbers\n      const hasInvalidValues = rows.some(row => isNaN(row[1]) || row[1] <= 0);\n      if (hasInvalidValues) {\n        resolve(\"Error: Donut chart values must be positive numbers\");\n        return;\n      }\n\n      // Convert rows -> objects (same as taskpane.js)\n      const processedData = rows.map(row => {\n        let obj = {};\n        headers.forEach((h, i) => {\n          obj[h] = row[i];\n        });\n        return obj;\n      });\n\n      // Use Vega-Lite specification for donut chart (based on the reference provided)\n      const spec = {\n        $schema: \"https://vega.github.io/schema/vega-lite/v6.json\",\n        background: \"white\",\n        config: { view: { stroke: \"transparent\" }},\n        description: \"Donut chart from Excel selection\",\n        data: { values: processedData },\n        mark: { \n          type: \"arc\", \n          innerRadius: 50,  // This creates the donut hole\n          outerRadius: 120,\n          tooltip: true,\n          stroke: \"white\",\n          strokeWidth: 2\n        },\n        encoding: {\n          theta: { \n            field: headers[1], \n            type: \"quantitative\",\n            scale: { type: \"linear\", range: [0, 6.28] }\n          },\n          color: { \n            field: headers[0], \n            type: \"nominal\",\n            scale: { scheme: \"category10\" },\n            legend: {\n              title: headers[0],\n              titleFontSize: 12,\n              labelFontSize: 11,\n              orient: \"right\"\n            }\n          },\n          tooltip: [\n            { field: headers[0], type: \"nominal\", title: \"Category\" },\n            { field: headers[1], type: \"quantitative\", title: \"Value\", format: \",.0f\" }\n          ]\n        },\n        config: {\n          font: \"Segoe UI\",\n          legend: {\n            titleColor: \"#323130\",\n            labelColor: \"#605e5c\"\n          }\n        }\n      };\n\n      const chartId = `donut_${invocation.address.replace(/[^A-Za-z0-9]/g, \"_\")}`;\n      createChart(spec, \"donut\", chartId)\n        .then(() => resolve(\"Donut\"))\n        .catch((error) => resolve(`Error: ${error.message}`));\n\n    } catch (error) {\n      resolve(`Error: ${error.message}`);\n    }\n  });\n}\n\n/**\n * CHORD custom function\n * Creates a chord diagram from Excel data range\n * \n * @customfunction\n * @requiresAddress\n * @param {any[][]} data The data range including headers\n * @param {CustomFunctions.Invocation} invocation Invocation object\n * @returns {string} Status message\n */\nfunction CHORD(data, invocation) {\n  return new Promise((resolve) => {\n    try {\n      if (!data || data.length < 2) {\n        resolve(\"Error: Need at least header row + one data row\");\n        return;\n      }\n\n      const headers = data[0];\n      const rows = data.slice(1);\n\n      let matrix, nodeLabels, n;\n      \n      if (headers.length === 3) {\n        // SHORT FORMAT: 3 columns (Source, Destination, Value)\n        \n        // Get unique nodes from both source and destination columns\n        const nodeSet = new Set();\n        rows.forEach(row => {\n          nodeSet.add(row[0]); // source\n          nodeSet.add(row[1]); // destination\n        });\n        nodeLabels = Array.from(nodeSet);\n        n = nodeLabels.length;\n        \n        // Create index mapping\n        const nodeIndex = {};\n        nodeLabels.forEach((label, i) => {\n          nodeIndex[label] = i;\n        });\n        \n        // Build matrix from edge list\n        matrix = Array(n).fill(0).map(() => Array(n).fill(0));\n        rows.forEach(row => {\n          const source = row[0];\n          const dest = row[1];\n          const value = parseFloat(row[2]) || 0;\n          \n          const sourceIdx = nodeIndex[source];\n          const destIdx = nodeIndex[dest];\n          \n          if (sourceIdx !== undefined && destIdx !== undefined) {\n            matrix[sourceIdx][destIdx] = value;\n          }\n        });\n        \n      } else if (headers.length >= 2) {\n        // MATRIX FORMAT: Square matrix with labels in first row and column\n        \n        // Extract matrix values (excluding first column which contains row labels)\n        matrix = rows.map(row => {\n          return headers.slice(1).map((_, colIndex) => {\n            const value = parseFloat(row[colIndex + 1]);\n            return isNaN(value) ? 0 : value;\n          });\n        });\n        \n        // Node labels from column headers (excluding first column)\n        nodeLabels = headers.slice(1);\n        n = nodeLabels.length;\n        \n        // Validate matrix\n        if (matrix.length !== n) {\n          resolve(\"Error: Matrix format requires a square matrix\");\n          return;\n        }\n      } else {\n        resolve(\"Error: Requires 3 columns (Source, Destination, Value) or matrix format\");\n        return;\n      }\n\n      // Calculate totals for each node (sum of incoming + outgoing)\n      const nodeTotals = new Array(n).fill(0);\n      for (let i = 0; i < n; i++) {\n        for (let j = 0; j < n; j++) {\n          nodeTotals[i] += matrix[i][j]; // outgoing\n          nodeTotals[i] += matrix[j][i]; // incoming\n        }\n      }\n      \n      const totalSum = nodeTotals.reduce((sum, val) => sum + val, 0);\n\n      if (totalSum === 0) {\n        resolve(\"Error: All values are zero\");\n        return;\n      }\n\n      // Generate chord arcs with angles\n      const chords = [];\n      let currentAngle = 0;\n      const padding = 0.05;\n\n      for (let i = 0; i < n; i++) {\n        const angleSize = (nodeTotals[i] / totalSum) * 2 * Math.PI;\n        chords.push({\n          index: i,\n          label: nodeLabels[i],\n          startAngle: currentAngle,\n          endAngle: currentAngle + angleSize,\n          value: nodeTotals[i]\n        });\n        currentAngle += angleSize + padding;\n      }\n\n      // Track used portions of each chord for proper ribbon positioning\n      const usedAngles = chords.map(c => ({ \n        start: c.startAngle, \n        end: c.startAngle \n      }));\n\n      // Generate ribbon paths for connections\n      const ribbonsPaths = [];\n      const innerRadius = 270;\n\n      // Process matrix to create ribbons\n      for (let i = 0; i < n; i++) {\n        for (let j = 0; j < n; j++) {\n          const value = matrix[i][j];\n          if (value > 0) {\n            const sourceChord = chords[i];\n            const targetChord = chords[j];\n            \n            // Calculate angle span for this ribbon on source\n            const sourceAngleSpan = (value / nodeTotals[i]) * (sourceChord.endAngle - sourceChord.startAngle);\n            const sourceStart = usedAngles[i].end;\n            const sourceEnd = sourceStart + sourceAngleSpan;\n            usedAngles[i].end = sourceEnd;\n            \n            // Calculate angle span for this ribbon on target\n            const targetAngleSpan = (value / nodeTotals[j]) * (targetChord.endAngle - targetChord.startAngle);\n            const targetStart = usedAngles[j].end;\n            const targetEnd = targetStart + targetAngleSpan;\n            usedAngles[j].end = targetEnd;\n\n            // Generate SVG path using inline polar to cartesian conversion\n            const s0x = innerRadius * Math.cos(sourceStart - Math.PI / 2);\n            const s0y = innerRadius * Math.sin(sourceStart - Math.PI / 2);\n            const s1x = innerRadius * Math.cos(sourceEnd - Math.PI / 2);\n            const s1y = innerRadius * Math.sin(sourceEnd - Math.PI / 2);\n            const t0x = innerRadius * Math.cos(targetStart - Math.PI / 2);\n            const t0y = innerRadius * Math.sin(targetStart - Math.PI / 2);\n            const t1x = innerRadius * Math.cos(targetEnd - Math.PI / 2);\n            const t1y = innerRadius * Math.sin(targetEnd - Math.PI / 2);\n            \n            const sourceLargeArc = (sourceEnd - sourceStart) > Math.PI ? 1 : 0;\n            const targetLargeArc = (targetEnd - targetStart) > Math.PI ? 1 : 0;\n            \n            const path = `M${s0x},${s0y}A${innerRadius},${innerRadius},0,${sourceLargeArc},1,${s1x},${s1y}Q0,0,${t0x},${t0y}A${innerRadius},${innerRadius},0,${targetLargeArc},1,${t1x},${t1y}Q0,0,${s0x},${s0y}Z`;\n            \n            ribbonsPaths.push({\n              path: path,\n              source: i,\n              target: j,\n              sourceLabel: nodeLabels[i],\n              targetLabel: nodeLabels[j],\n              value: value\n            });\n          }\n        }\n      }\n\n      // Create Vega specification\n      const spec = {\n        \"$schema\": \"https://vega.github.io/schema/vega/v5.json\",\n        \"description\": \"Chord diagram from Excel data\",\n        \"width\": 700,\n        \"height\": 700,\n        \"padding\": 5,\n        \"background\": \"white\",\n        \"signals\": [\n          { \"name\": \"originX\", \"value\": 0 },\n          { \"name\": \"originY\", \"value\": 0 },\n          { \"name\": \"inner_radius\", \"value\": 270 },\n          { \"name\": \"outer_radius\", \"value\": 290 }\n        ],\n        \"scales\": [\n          {\n            \"name\": \"color\",\n            \"type\": \"ordinal\",\n            \"domain\": { \"data\": \"chords\", \"field\": \"index\" },\n            \"range\": { \"scheme\": \"category10\" }\n          }\n        ],\n        \"data\": [\n          {\n            \"name\": \"chords\",\n            \"values\": chords,\n            \"transform\": [\n              {\n                \"type\": \"formula\",\n                \"expr\": \"(((datum.startAngle + datum.endAngle) / 2) * 180 / PI) - 90\",\n                \"as\": \"angle_degrees\"\n              },\n              {\n                \"type\": \"formula\",\n                \"expr\": \"PI * datum.angle_degrees / 180\",\n                \"as\": \"radians\"\n              },\n              {\n                \"type\": \"formula\",\n                \"expr\": \"inrange(datum.angle_degrees, [90, 270])\",\n                \"as\": \"leftside\"\n              },\n              {\n                \"type\": \"formula\",\n                \"expr\": \"originX + outer_radius * cos(datum.radians)\",\n                \"as\": \"x\"\n              },\n              {\n                \"type\": \"formula\",\n                \"expr\": \"originY + outer_radius * sin(datum.radians)\",\n                \"as\": \"y\"\n              }\n            ]\n          },\n          {\n            \"name\": \"ribbonsPaths\",\n            \"values\": ribbonsPaths\n          }\n        ],\n        \"marks\": [\n          {\n            \"type\": \"arc\",\n            \"from\": { \"data\": \"chords\" },\n            \"encode\": {\n              \"enter\": {\n                \"fill\": { \"scale\": \"color\", \"field\": \"index\" },\n                \"x\": { \"signal\": \"width / 2\" },\n                \"y\": { \"signal\": \"height / 2\" }\n              },\n              \"update\": {\n                \"startAngle\": { \"field\": \"startAngle\" },\n                \"endAngle\": { \"field\": \"endAngle\" },\n                \"padAngle\": { \"value\": 0 },\n                \"innerRadius\": { \"signal\": \"inner_radius\" },\n                \"outerRadius\": { \"signal\": \"outer_radius\" },\n                \"opacity\": { \"value\": 0.9 },\n                \"tooltip\": {\n                  \"signal\": \"{'Label': datum.label, 'Value': datum.value}\"\n                }\n              },\n              \"hover\": {\n                \"opacity\": { \"value\": 1 }\n              }\n            }\n          },\n          {\n            \"type\": \"text\",\n            \"from\": { \"data\": \"chords\" },\n            \"encode\": {\n              \"enter\": {\n                \"text\": { \"field\": \"label\" },\n                \"fontSize\": { \"value\": 11 },\n                \"font\": { \"value\": \"Segoe UI\" },\n                \"fill\": { \"value\": \"#323130\" }\n              },\n              \"update\": {\n                \"x\": { \"signal\": \"width / 2 + datum.x\" },\n                \"y\": { \"signal\": \"width / 2 + datum.y\" },\n                \"dx\": { \"signal\": \"(datum.leftside ? -1 : 1) * 6\" },\n                \"angle\": { \"signal\": \"datum.leftside ? datum.angle_degrees - 180 : datum.angle_degrees\" },\n                \"align\": { \"signal\": \"datum.leftside ? 'right' : 'left'\" },\n                \"baseline\": { \"value\": \"middle\" }\n              }\n            }\n          },\n          {\n            \"type\": \"path\",\n            \"from\": { \"data\": \"ribbonsPaths\" },\n            \"encode\": {\n              \"enter\": {\n                \"x\": { \"signal\": \"width / 2\" },\n                \"y\": { \"signal\": \"height / 2\" }\n              },\n              \"update\": {\n                \"path\": { \"field\": \"path\" },\n                \"fill\": { \"scale\": \"color\", \"field\": \"source\" },\n                \"opacity\": { \"value\": 0.6 },\n                \"stroke\": { \"value\": \"white\" },\n                \"strokeWidth\": { \"value\": 0.5 },\n                \"tooltip\": {\n                  \"signal\": \"{'From': datum.sourceLabel, 'To': datum.targetLabel, 'Value': format(datum.value, ',.0f')}\"\n                }\n              },\n              \"hover\": {\n                \"opacity\": { \"value\": 0.8 }\n              }\n            }\n          }\n        ]\n      };\n\n      // Inline chart creation\n      const chartId = `chord_${invocation.address.replace(/[^A-Za-z0-9]/g, \"_\")}`;\n      \n      // If createChart is available, use it\n      if (typeof createChart !== 'undefined') {\n        createChart(spec, \"chord\", chartId)\n          .then(() => resolve(\"Chord\"))\n          .catch((error) => resolve(`Error: ${error.message}`));\n      } else {\n        // Fallback: inline implementation\n        loadVegaLibraries()\n          .then(() => {\n            const container = document.createElement('div');\n            container.id = 'vega-container-temp';\n            container.style.position = 'absolute';\n            container.style.left = '-9999px';\n            document.body.appendChild(container);\n\n            return vegaEmbed(container, spec, { actions: false, renderer: 'canvas' });\n          })\n          .then(result => {\n            return result.view.toCanvas();\n          })\n          .then(canvas => {\n            return canvas.toBlob(blob => {\n              const reader = new FileReader();\n              reader.onloadend = () => {\n                const base64data = reader.result.split(',')[1];\n                \n                Excel.run(async (context) => {\n                  const sheet = context.workbook.worksheets.getActiveWorksheet();\n                  const shapes = sheet.shapes;\n                  shapes.load(\"items\");\n                  await context.sync();\n\n                  const chartName = `ChordChart_${chartId}`;\n                  for (let shape of shapes.items) {\n                    shape.load(\"name\");\n                    await context.sync();\n                    if (shape.name === chartName) {\n                      shape.delete();\n                    }\n                  }\n                  await context.sync();\n\n                  const range = context.workbook.getSelectedRange();\n                  range.load(\"left, top\");\n                  await context.sync();\n\n                  const image = sheet.shapes.addImage(base64data);\n                  image.left = range.left;\n                  image.top = range.top;\n                  image.lockAspectRatio = true;\n                  image.name = chartName;\n\n                  await context.sync();\n                  \n                  const tempDiv = document.getElementById('vega-container-temp');\n                  if (tempDiv) document.body.removeChild(tempDiv);\n                  \n                  resolve(\"Chord\");\n                }).catch(error => {\n                  const tempDiv = document.getElementById('vega-container-temp');\n                  if (tempDiv) document.body.removeChild(tempDiv);\n                  resolve(`Error: ${error.message}`);\n                });\n              };\n              reader.readAsDataURL(blob);\n            });\n          })\n          .catch(error => {\n            const tempDiv = document.getElementById('vega-container-temp');\n            if (tempDiv) document.body.removeChild(tempDiv);\n            resolve(`Error: ${error.message}`);\n          });\n      }\n\n    } catch (error) {\n      resolve(`Error: ${error.message}`);\n    }\n  });\n}\n\n/**\n * AREA custom function\n * Creates an area chart from Excel data range\n * \n * @customfunction\n * @requiresAddress\n * @param {any[][]} data The data range including headers\n * @param {CustomFunctions.Invocation} invocation Invocation object\n * @returns {string} Status message\n */\nfunction AREA(data, invocation) {\n  return new Promise((resolve) => {\n    try {\n      if (!data || data.length < 2) {\n        resolve(\"Error: Need at least header row + one data row\");\n        return;\n      }\n\n      const headers = data[0];\n      const rows = data.slice(1);\n\n      // Convert rows -> objects (same as taskpane.js)\n      const processedData = rows.map(row => {\n        let obj = {};\n        headers.forEach((h, i) => {\n          obj[h] = row[i];\n        });\n        return obj;\n      });\n\n      // Use EXACT specification from taskpane.js area chart\n      const spec = {\n        $schema: \"https://vega.github.io/schema/vega-lite/v6.json\",\n        description: \"Area chart from Excel selection\",\n        background: \"white\",\n        config: { view: { stroke: \"transparent\" }},\n        data: { values: processedData },\n        mark: { \n          type: \"area\", \n          tooltip: true,\n          opacity: 0.7\n        },\n        encoding: {\n          x: { \n            field: headers[0], \n            type: \"ordinal\",\n            axis: {\n              title: headers[0],\n              labelFontSize: 12,\n              titleFontSize: 14\n            }\n          },\n          y: { \n            field: headers[1], \n            type: \"quantitative\",\n            axis: {\n              title: headers[1],\n              labelFontSize: 12,\n              titleFontSize: 14\n            }\n          },\n          // Add color encoding for multiple areas if 3rd column exists\n          ...(headers.length >= 3 && {\n            color: { \n              field: headers[2], \n              type: \"nominal\",\n              legend: {\n                title: headers[2],\n                titleFontSize: 12,\n                labelFontSize: 11\n              }\n            }\n          })\n        },\n        config: {\n          font: \"Segoe UI\",\n          axis: {\n            labelColor: \"#605e5c\",\n            titleColor: \"#323130\",\n            gridColor: \"#f3f2f1\"\n          },\n          legend: {\n            titleColor: \"#323130\",\n            labelColor: \"#605e5c\"\n          }\n        }\n      };\n      const chartId = `area_${invocation.address.replace(/[^A-Za-z0-9]/g, \"_\")}`;\n      createChart(spec, \"area\", chartId)\n        .then(() => resolve(\"Area\"))\n        .catch((error) => resolve(`Error: ${error.message}`));\n\n    } catch (error) {\n      resolve(`Error: ${error.message}`);\n    }\n  });\n}\n\n/**\n * STREAMGRAPH custom function\n * Creates a streamgraph chart from Excel data range\n * \n * @customfunction\n * @requiresAddress\n * @param {any[][]} data The data range including headers\n * @param {CustomFunctions.Invocation} invocation Invocation object\n * @returns {string} Status message\n */\nfunction STREAMGRAPH(data, invocation) {\n  return new Promise((resolve) => {\n    try {\n      if (!data || data.length < 2) {\n        resolve(\"Error: Need at least header row + one data row\");\n        return;\n      }\n\n      const headers = data[0];\n      const rows = data.slice(1);\n\n      if (headers.length < 3) {\n        resolve(\"Error: Streamgraph requires 3 columns (Time/Date, Series/Category, Values)\");\n        return;\n      }\n\n      // Convert rows -> objects and detect data type for X-axis\n      let xAxisType = \"ordinal\"; // Default to ordinal for simple values like years\n      const processedData = rows.map(row => {\n        let obj = {};\n        headers.forEach((h, i) => {\n          obj[h] = row[i];\n        });\n        \n        // Check if first column looks like dates that need conversion\n        const firstColValue = obj[headers[0]];\n        if (typeof firstColValue === 'number' && firstColValue > 25569) {\n          // Handle Excel date serial numbers\n          obj[headers[0]] = new Date((firstColValue - 25569) * 86400 * 1000);\n          xAxisType = \"temporal\";\n        } else if (typeof firstColValue === 'string' && firstColValue.includes('-')) {\n          // Try to parse string dates (e.g., \"2020-01-01\")\n          const parsedDate = new Date(firstColValue);\n          if (!isNaN(parsedDate.getTime())) {\n            obj[headers[0]] = parsedDate;\n            xAxisType = \"temporal\";\n          }\n        }\n        // For simple values like 2020, 2021, keep as-is and use ordinal\n        \n        return obj;\n      });\n\n      // Create axis configuration based on detected type\n      const xAxisConfig = xAxisType === \"temporal\" ? {\n        field: headers[0],\n        type: \"temporal\",\n        axis: {\n          domain: false,\n          format: \"%Y-%m\",\n          tickSize: 0,\n          title: headers[0],\n          labelFontSize: 11,\n          titleFontSize: 12,\n          labelColor: \"#605e5c\",\n          titleColor: \"#323130\",\n          labelAngle: -45\n        }\n      } : {\n        field: headers[0],\n        type: \"ordinal\",\n        axis: {\n          domain: false,\n          tickSize: 0,\n          title: headers[0],\n          labelFontSize: 11,\n          titleFontSize: 12,\n          labelColor: \"#605e5c\",\n          titleColor: \"#323130\"\n        }\n      };\n\n      // Use Vega-Lite specification for streamgraph\n      const spec = {\n        $schema: \"https://vega.github.io/schema/vega-lite/v6.json\",\n        width: 600,\n        height: 400,\n        background: \"white\",\n        config: { view: { stroke: \"transparent\" }},\n        description: \"Streamgraph from Excel selection\",\n        data: { values: processedData },\n        mark: {\n          type: \"area\",\n          tooltip: true,\n          interpolate: \"basis\",\n          opacity: 0.8\n        },\n        encoding: {\n          x: xAxisConfig,\n          y: {\n            aggregate: \"sum\",\n            field: headers[2],\n            type: \"quantitative\",\n            axis: null,\n            stack: \"center\"\n          },\n          color: {\n            field: headers[1],\n            type: \"nominal\",\n            scale: { scheme: \"category20b\" },\n            legend: {\n              title: headers[1],\n              titleFontSize: 12,\n              labelFontSize: 11,\n              orient: \"right\"\n            }\n          },\n          tooltip: [\n            { \n              field: headers[0], \n              type: xAxisType === \"temporal\" ? \"temporal\" : \"ordinal\", \n              title: \"Period\",\n              format: xAxisType === \"temporal\" ? \"%Y-%m-%d\" : undefined\n            },\n            { field: headers[1], type: \"nominal\", title: \"Series\" },\n            { field: headers[2], type: \"quantitative\", title: \"Value\", format: \",.0f\" }\n          ]\n        },\n        config: {\n          font: \"Segoe UI\",\n          legend: {\n            titleColor: \"#323130\",\n            labelColor: \"#605e5c\"\n          }\n        }\n      };\n\n      const chartId = `streamgraph_${invocation.address.replace(/[^A-Za-z0-9]/g, \"_\")}`;\n      createChart(spec, \"streamgraph\", chartId)\n        .then(() => resolve(\"Streamgraph\"))\n        .catch((error) => resolve(`Error: ${error.message}`));\n\n    } catch (error) {\n      resolve(`Error: ${error.message}`);\n    }\n  });\n}\n\n/**\n * SCATTER custom function\n * Creates a scatter plot from Excel data range\n * \n * @customfunction\n * @requiresAddress\n * @param {any[][]} data The data range including headers\n * @param {CustomFunctions.Invocation} invocation Invocation object\n * @returns {string} Status message\n */\nfunction SCATTER(data, invocation) {\n  return new Promise((resolve) => {\n    try {\n      if (!data || data.length < 2) {\n        resolve(\"Error: Need at least header row + one data row\");\n        return;\n      }\n\n      const headers = data[0];\n      const rows = data.slice(1);\n\n      if (headers.length < 2) {\n        resolve(\"Error: Scatter plot requires at least 2 columns (X, Y values)\");\n        return;\n      }\n\n      // Convert rows -> objects (same as taskpane.js)\n      const processedData = rows.map(row => {\n        let obj = {};\n        headers.forEach((h, i) => {\n          obj[h] = row[i];\n        });\n        return obj;\n      });\n\n      // Use EXACT specification from taskpane.js point chart\n      const spec = {\n        $schema: \"https://vega.github.io/schema/vega-lite/v6.json\",\n        description: \"Colored scatter plot from Excel selection\",\n        background: \"white\",\n        config: { view: { stroke: \"transparent\" }},\n        data: { values: processedData },\n        mark: { type: \"point\", size: 100, tooltip: true },\n        encoding: {\n          x: { \n            field: headers[0], \n            type: \"quantitative\",\n            scale: { zero: false },\n            axis: {\n              title: headers[0],\n              labelFontSize: 12,\n              titleFontSize: 14\n            }\n          },\n          y: { \n            field: headers[1], \n            type: \"quantitative\",\n            scale: { zero: false },\n            axis: {\n              title: headers[1],\n              labelFontSize: 12,\n              titleFontSize: 14\n            }\n          },\n          // Add color encoding if 3rd column exists\n          ...(headers.length >= 3 && {\n            color: { \n              field: headers[2], \n              type: \"nominal\",\n              legend: {\n                title: headers[2],\n                titleFontSize: 12,\n                labelFontSize: 11\n              }\n            }\n          }),\n          // Add shape encoding if 4th column exists\n          ...(headers.length >= 4 && {\n            shape: { \n              field: headers[3], \n              type: \"nominal\",\n              legend: {\n                title: headers[3],\n                titleFontSize: 12,\n                labelFontSize: 11\n              }\n            }\n          })\n        },\n        config: {\n          font: \"Segoe UI\",\n          axis: {\n            labelColor: \"#605e5c\",\n            titleColor: \"#323130\",\n            gridColor: \"#f3f2f1\"\n          },\n          legend: {\n            titleColor: \"#323130\",\n            labelColor: \"#605e5c\"\n          }\n        }\n      };\n      const chartId = `scatter_${invocation.address.replace(/[^A-Za-z0-9]/g, \"_\")}`;\n      createChart(spec, \"scatter\", chartId)\n        .then(() => resolve(\"Scatter\"))\n        .catch((error) => resolve(`Error: ${error.message}`));\n\n    } catch (error) {\n      resolve(`Error: ${error.message}`);\n    }\n  });\n}\n\n/**\n * BUBBLE custom function\n * Creates a bubble chart from Excel data range\n * \n * @customfunction\n * @requiresAddress\n * @param {any[][]} data The data range including headers\n * @param {CustomFunctions.Invocation} invocation Invocation object\n * @returns {string} Status message\n */\nfunction BUBBLE(data, invocation) {\n  return new Promise((resolve) => {\n    try {\n      if (!data || data.length < 2) {\n        resolve(\"Error: Need at least header row + one data row\");\n        return;\n      }\n\n      const headers = data[0];\n      const rows = data.slice(1);\n\n      if (headers.length < 3) {\n        resolve(\"Error: Bubble chart requires at least 3 columns (X values, Y values, Size values)\");\n        return;\n      }\n\n      // Convert rows -> objects (same as taskpane.js)\n      const processedData = rows.map(row => {\n        let obj = {};\n        headers.forEach((h, i) => {\n          obj[h] = row[i];\n        });\n        return obj;\n      });\n\n      // Use EXACT specification from taskpane.js bubble chart\n      const spec = {\n        $schema: \"https://vega.github.io/schema/vega-lite/v6.json\",\n        description: \"Bubble chart from Excel selection\",\n        background: \"white\",\n        config: { view: { stroke: \"transparent\" }},\n        data: { values: processedData },\n        mark: { type: \"circle\", tooltip: true, opacity: 0.7 },\n        encoding: {\n          x: { \n            field: headers[0], \n            type: \"quantitative\",\n            scale: { zero: false },\n            axis: {\n              title: headers[0],\n              labelFontSize: 12,\n              titleFontSize: 14\n            }\n          },\n          y: { \n            field: headers[1], \n            type: \"quantitative\",\n            scale: { zero: false },\n            axis: {\n              title: headers[1],\n              labelFontSize: 12,\n              titleFontSize: 14\n            }\n          },\n          size: {\n            field: headers[2],\n            type: \"quantitative\",\n            scale: {\n              type: \"linear\",\n              range: [100, 1000]\n            },\n            legend: {\n              title: headers[2],\n              titleFontSize: 12,\n              labelFontSize: 11\n            }\n          },\n          // Add color encoding if 4th column exists\n          ...(headers.length >= 4 && {\n            color: { \n              field: headers[3], \n              type: \"nominal\",\n              legend: {\n                title: headers[3],\n                titleFontSize: 12,\n                labelFontSize: 11\n              }\n            }\n          })\n        },\n        config: {\n          font: \"Segoe UI\",\n          axis: {\n            labelColor: \"#605e5c\",\n            titleColor: \"#323130\",\n            gridColor: \"#f3f2f1\"\n          },\n          legend: {\n            titleColor: \"#323130\",\n            labelColor: \"#605e5c\"\n          }\n        }\n      };\n      const chartId = `bubble_${invocation.address.replace(/[^A-Za-z0-9]/g, \"_\")}`;\n      createChart(spec, \"bubble\", chartId)\n        .then(() => resolve(\"Bubble\"))\n        .catch((error) => resolve(`Error: ${error.message}`));\n\n    } catch (error) {\n      resolve(`Error: ${error.message}`);\n    }\n  });\n}\n\n/**\n * RING custom function\n * Creates a ring chart from Excel data range\n * \n * @customfunction\n * @requiresAddress\n * @param {any[][]} data The data range including headers\n * @param {CustomFunctions.Invocation} invocation Invocation object\n * @returns {string} Status message\n */\nfunction RING(data, invocation) {\n  return new Promise((resolve) => {\n    try {\n      if (!data || data.length < 2) {\n        resolve(\"Error: Need at least header row + one data row\");\n        return;\n      }\n\n      const headers = data[0];\n      const rows = data.slice(1);\n\n      if (headers.length < 2) {\n        resolve(\"Error: Ring chart requires 2 columns: Category, Value\");\n        return;\n      }\n\n      // Convert rows -> objects (same as taskpane.js)\n      const processedData = rows.map(row => {\n        let obj = {};\n        headers.forEach((h, i) => {\n          obj[h] = row[i];\n        });\n        return obj;\n      });\n\n      const numRings = processedData.length;\n      if (numRings === 0) {\n        resolve(\"Error: Ring chart requires at least one data row\");\n        return;\n      }\n\n      // Dynamic ring parameters based on number of rings\n      const ringWidth = Math.max(15, Math.min(25, 120 / numRings));\n      const ringGap = Math.max(3, Math.min(8, 40 / numRings));\n      const maxRadius = 150 + (numRings * 5);\n\n      // Generate colors dynamically\n      const generateRingColor = (index, total) => {\n        const baseHue = 210; // Blue base\n        const saturation = Math.max(50, 80 - (index * 5));\n        const lightness = Math.max(25, 60 - (index * 8));\n        return `hsl(${baseHue}, ${saturation}%, ${lightness}%)`;\n      };\n\n      // Transform data for the chart\n      const transformedData = processedData.map((d, index) => ({\n        [`__${index}__`]: d[headers[0]], // Category\n        [`__${index + 100}__`]: d[headers[1]], // Value\n        [`Ring${index + 1}_Theta2`]: 2 * Math.PI * d[headers[1]] / 100,\n        [`Ring${index + 1}_Percent_Label`]: d[headers[1]] + '%'\n      }));\n\n      // Flatten into single object\n      const chartData = [Object.assign({}, ...transformedData)];\n\n      // Calculate ring positions\n      const ringPositions = [];\n      let currentOuter = maxRadius;\n      for (let i = 0; i < numRings; i++) {\n        const outer = currentOuter;\n        const inner = outer - ringWidth;\n        const middle = (outer + inner) / 2;\n        ringPositions.push({ outer, inner, middle });\n        currentOuter = inner - ringGap;\n      }\n\n      // Calculate legend dimensions and positioning\n      const legendWidth = 120; // Fixed width for legend area\n      const legendItemHeight = 25; // Height per legend item\n      const totalLegendHeight = numRings * legendItemHeight;\n      const chartCenterY = maxRadius + 50; // Y center of the chart\n      const legendStartY = chartCenterY - (totalLegendHeight / 2); // Center legend relative to chart center\n\n      // Use EXACT specification from taskpane.js ring chart with right-side legend\n      const spec = {\n        \"$schema\": \"https://vega.github.io/schema/vega-lite/v5.json\",\n        \"config\": {\n          \"autosize\": {\n            \"type\": \"pad\",\n            \"resize\": true\n          },\n          \"concat\": {\"spacing\": 20} // Spacing between chart and legend\n        },\n        \"description\": `Dynamic ring chart with ${numRings} concentric rings`,\n        \"background\": \"white\",\n        \"data\": {\"values\": chartData},\n        \"hconcat\": [\n          {\n            \"description\": \"RINGS - Main Chart\",\n            \"width\": (maxRadius + 50) * 2,\n            \"height\": (maxRadius + 50) * 2,\n            \"view\": {\"stroke\": null},\n            \"layer\": [\n              // Background rings (full circles) - centered\n              ...processedData.map((d, index) => ({\n                \"description\": `RING ${index + 1} BACKGROUND`,\n                \"mark\": {\n                  \"type\": \"arc\",\n                  \"radius\": ringPositions[index].outer,\n                  \"radius2\": ringPositions[index].inner,\n                  \"theta\": 0,\n                  \"theta2\": 6.283185307179586, // 2π\n                  \"opacity\": 0.25,\n                  \"x\": maxRadius + 50,\n                  \"y\": maxRadius + 50\n                },\n                \"encoding\": {\n                  \"color\": {\"value\": generateRingColor(index, numRings)}\n                }\n              })),\n              // Progress rings - centered\n              ...processedData.map((d, index) => ({\n                \"description\": `RING ${index + 1} PROGRESS`,\n                \"mark\": {\n                  \"type\": \"arc\",\n                  \"radius\": ringPositions[index].outer,\n                  \"radius2\": ringPositions[index].inner,\n                  \"theta\": 0,\n                  \"theta2\": {\"expr\": `datum['Ring${index + 1}_Theta2']`},\n                  \"cornerRadius\": Math.min(8, ringWidth / 2),\n                  \"tooltip\": true,\n                  \"x\": maxRadius + 50,\n                  \"y\": maxRadius + 50\n                },\n                \"encoding\": {\n                  \"color\": {\"value\": generateRingColor(index, numRings)},\n                  \"tooltip\": [\n                    {\"value\": d[headers[0]], \"title\": \"Category\"},\n                    {\"value\": d[headers[1]] + \"%\", \"title\": \"Progress\"}\n                  ]\n                }\n              })),\n              // White percentage labels slightly to the right - centered\n              ...processedData.map((d, index) => ({\n                \"description\": `RING ${index + 1} LABEL`,\n                \"mark\": {\n                  \"type\": \"text\",\n                  \"align\": \"center\",\n                  \"baseline\": \"middle\",\n                  \"x\": maxRadius + 50 + 15, // Center + offset to right\n                  \"y\": maxRadius + 50 - ringPositions[index].middle, // Center + offset up\n                  \"fontSize\": Math.max(10, Math.min(14, 180 / numRings)),\n                  \"font\": \"Segoe UI\",\n                  \"fontWeight\": \"bold\",\n                  \"color\": \"white\"\n                },\n                \"encoding\": {\n                  \"text\": {\"value\": d[headers[1]] + \"%\"},\n                  \"opacity\": {\n                    \"condition\": {\n                      \"test\": `datum['Ring${index + 1}_Theta2'] > 0`,\n                      \"value\": 1\n                    },\n                    \"value\": 0\n                  }\n                }\n              }))\n            ]\n          },\n          {\n            \"description\": \"LEGEND - Right Side\",\n            \"width\": legendWidth,\n            \"height\": (maxRadius + 50) * 2, // Match chart height exactly\n            \"view\": {\"stroke\": null},\n            \"layer\": processedData.map((d, index) => [\n              {\n                \"description\": `LEGEND CIRCLE ${index + 1}`,\n                \"mark\": {\n                  \"type\": \"circle\",\n                  \"size\": 150,\n                  \"x\": 15, // Fixed position from left edge\n                  \"y\": legendStartY + (index * legendItemHeight),\n                  \"color\": generateRingColor(index, numRings)\n                }\n              },\n              {\n                \"description\": `LEGEND LABEL ${index + 1}`,\n                \"mark\": {\n                  \"type\": \"text\",\n                  \"x\": 35, // Positioned to the right of the circle\n                  \"y\": legendStartY + (index * legendItemHeight),\n                  \"align\": \"left\",\n                  \"baseline\": \"middle\",\n                  \"fontSize\": 11,\n                  \"font\": \"Segoe UI\"\n                },\n                \"encoding\": {\n                  \"text\": {\"value\": d[headers[0]]}\n                }\n              }\n            ]).flat()\n          }\n        ],\n        \"view\": {\"stroke\": null}\n      };\n      const chartId = `ring_${invocation.address.replace(/[^A-Za-z0-9]/g, \"_\")}`;\n      createChart(spec, \"ring\", chartId)\n        .then(() => resolve(\"Ring\"))\n        .catch((error) => resolve(`Error: ${error.message}`));\n\n    } catch (error) {\n      resolve(`Error: ${error.message}`);\n    }\n  });\n}\n\n/**\n * RADIAL custom function\n * Creates a radial chart from Excel data range\n * \n * @customfunction\n * @requiresAddress\n * @param {any[][]} data The data range including headers\n * @param {CustomFunctions.Invocation} invocation Invocation object\n * @returns {string} Status message\n */\nfunction RADIAL(data, invocation) {\n  return new Promise((resolve) => {\n    try {\n      if (!data || data.length < 2) {\n        resolve(\"Error: Need at least header row + one data row\");\n        return;\n      }\n\n      const headers = data[0];\n      const rows = data.slice(1);\n\n      if (headers.length < 2) {\n        resolve(\"Error: Radial chart requires 2 columns (Category, Value)\");\n        return;\n      }\n\n      // Convert rows -> objects (same as taskpane.js)\n      const processedData = rows.map(row => {\n        let obj = {};\n        headers.forEach((h, i) => {\n          obj[h] = row[i];\n        });\n        return obj;\n      });\n\n      // Use EXACT specification from taskpane.js radial chart\n      const spec = {\n        $schema: \"https://vega.github.io/schema/vega-lite/v6.json\",\n        description: \"Radial chart from Excel selection\",\n        background: \"white\",\n        config: { view: { stroke: \"transparent\" }},\n        data: { values: processedData },\n        transform: [\n            { \n                window: [{ op: \"rank\", as: \"sortOrder\" }],\n                sort: [{ field: headers[1], order: \"descending\" }]\n            }\n  \t    ],\n        layer: [{\n          mark: { type: \"arc\", innerRadius: 20, stroke: \"#fff\" }\n        }, {\n          mark: { type: \"text\", radiusOffset: 10 },\n          encoding: {\n            text: { field: headers[1], type: \"quantitative\" }\n          }\n        }],\n        encoding: {\n          theta: { field: headers[1], type: \"quantitative\", stack: true },\n          radius: { \n            field: headers[1], \n            scale: { type: \"sqrt\", zero: true, rangeMin: 20 }\n          },\n          color: { field: headers[0], type: \"nominal\", legend: { title: headers[0], titleFontSize: 12, labelFontSize: 11, orient: \"right\" } },\n\t      order: { field: \"sortOrder\", type: \"quantitative\" }\n        }\n      };\n      const chartId = `radial_${invocation.address.replace(/[^A-Za-z0-9]/g, \"_\")}`;\n      createChart(spec, \"radial\", chartId)\n        .then(() => resolve(\"Radial\"))\n        .catch((error) => resolve(`Error: ${error.message}`));\n\n    } catch (error) {\n      resolve(`Error: ${error.message}`);\n    }\n  });\n}\n\n/**\n * BOX custom function\n * Creates a box plot from Excel data range\n * \n * @customfunction\n * @requiresAddress\n * @param {any[][]} data The data range including headers\n * @param {CustomFunctions.Invocation} invocation Invocation object\n * @returns {string} Status message\n */\nfunction BOX(data, invocation) {\n  return new Promise((resolve) => {\n    try {\n      if (!data || data.length < 2) {\n        resolve(\"Error: Need at least header row + one data row\");\n        return;\n      }\n\n      const headers = data[0];\n      const rows = data.slice(1);\n\n      if (headers.length < 2) {\n        resolve(\"Error: Box plot requires 2 columns (Category, Values)\");\n        return;\n      }\n\n      // Expect headers: Category | Value (same as taskpane.js)\n      const processedData = rows\n        .filter(r => r[0] && !isNaN(+r[1]))\n        .map(r => ({\n          category: r[0],\n          value: +r[1]\n        }));\n\n      if (processedData.length === 0) {\n        resolve(\"Error: No valid numeric data found for box plot\");\n        return;\n      }\n\n      // Use EXACT specification from taskpane.js box chart\n      const spec = {\n        $schema: \"https://vega.github.io/schema/vega-lite/v6.json\",\n        description: \"Box plot from Excel selection\",\n        data: { values: processedData },\n        mark: {\n          type: \"boxplot\",\n          extent: \"min-max\"   // show whiskers from min to max\n        },\n        encoding: {\n          x: { field: \"category\", type: \"nominal\" },\n          y: {\n            field: \"value\",\n            type: \"quantitative\",\n            scale: { zero: false }\n          },\n          color: {\n            field: \"category\",\n            type: \"nominal\",\n            legend: null\n          }\n        }\n      };\n      const chartId = `box_${invocation.address.replace(/[^A-Za-z0-9]/g, \"_\")}`;\n      createChart(spec, \"box\", chartId)\n        .then(() => resolve(\"Box\"))\n        .catch((error) => resolve(`Error: ${error.message}`));\n\n    } catch (error) {\n      resolve(`Error: ${error.message}`);\n    }\n  });\n}\n\n/**\n * RADAR custom function\n * Creates a radar chart from Excel data range\n * \n * @customfunction\n * @requiresAddress\n * @param {any[][]} data The data range including headers\n * @param {CustomFunctions.Invocation} invocation Invocation object\n * @returns {string} Status message\n */\nfunction RADAR(data, invocation) {\n  return new Promise((resolve) => {\n    try {\n      if (!data || data.length < 2) {\n        resolve(\"Error: Need at least header row + one data row\");\n        return;\n      }\n\n      const headers = data[0];\n      const rows = data.slice(1);\n\n      if (headers.length < 3) {\n        resolve(\"Error: Radar chart requires at least 3 columns (Series, Dimension1, Dimension2, ...)\");\n        return;\n      }\n\n      const radarData = [];\n      const dimensions = headers.slice(1); // All columns except first are dimensions\n      \n      rows.forEach((row, seriesIndex) => {\n        const seriesName = row[headers[0]] || `Series ${seriesIndex + 1}`;\n        \n        dimensions.forEach(dimension => {\n          const value = parseFloat(row[headers.indexOf(dimension)]) || 0;\n          radarData.push({\n            series: seriesName,\n            dimension: dimension,\n            value: value,\n            category: seriesIndex\n          });\n        });\n      });\n\n      // Get unique dimensions for grid\n      const uniqueDimensions = [...new Set(radarData.map(d => d.dimension))];\n\n      // Use EXACT specification from taskpane.js radar chart\n      const spec = {\n        $schema: \"https://vega.github.io/schema/vega/v6.json\",\n        description: \"Radar chart from Excel selection\",\n        width: 400,\n        height: 400,\n        padding: 60,\n        autosize: {\"type\": \"none\", \"contains\": \"padding\"},\n        background: \"white\",\n        config: { view: { stroke: \"transparent\" }},\n\n        signals: [\n          {\"name\": \"radius\", \"update\": \"width / 2\"}\n        ],\n\n        data: [\n          {\n            name: \"table\",\n            values: radarData\n          },\n          {\n            name: \"dimensions\",\n            values: uniqueDimensions.map(d => ({dimension: d}))\n          }\n        ],\n\n        scales: [\n          {\n            name: \"angular\",\n            type: \"point\",\n            range: {\"signal\": \"[-PI, PI]\"},\n            padding: 0.5,\n            domain: uniqueDimensions\n          },\n          {\n            name: \"radial\",\n            type: \"linear\",\n            range: {\"signal\": \"[0, radius]\"},\n            zero: true,\n            nice: true,\n            domain: {\"data\": \"table\", \"field\": \"value\"},\n            domainMin: 0\n          },\n          {\n            name: \"color\",\n            type: \"ordinal\",\n            domain: {\"data\": \"table\", \"field\": \"category\"},\n            range: [\n              \"#0078d4\", \"#00bcf2\", \"#40e0d0\", \"#00cc6a\", \"#10893e\",\n              \"#107c10\", \"#bad80a\", \"#ffb900\", \"#ff8c00\", \"#d13438\"\n            ]\n          }\n        ],\n\n        encode: {\n          enter: {\n            x: {\"signal\": \"radius\"},\n            y: {\"signal\": \"radius\"}\n          }\n        },\n\n        marks: [\n          {\n            type: \"group\",\n            name: \"categories\",\n            zindex: 1,\n            from: {\n              facet: {\"data\": \"table\", \"name\": \"facet\", \"groupby\": [\"category\", \"series\"]}\n            },\n            marks: [\n              {\n                type: \"line\",\n                name: \"category-line\",\n                from: {\"data\": \"facet\"},\n                encode: {\n                  enter: {\n                    interpolate: {\"value\": \"linear-closed\"},\n                    x: {\"signal\": \"scale('radial', datum.value) * cos(scale('angular', datum.dimension))\"},\n                    y: {\"signal\": \"scale('radial', datum.value) * sin(scale('angular', datum.dimension))\"},\n                    stroke: {\"scale\": \"color\", \"field\": \"category\"},\n                    strokeWidth: {\"value\": 2},\n                    fill: {\"scale\": \"color\", \"field\": \"category\"},\n                    fillOpacity: {\"value\": 0.1},\n                    strokeOpacity: {\"value\": 0.8}\n                  }\n                }\n              },\n              {\n                type: \"symbol\",\n                name: \"category-points\",\n                from: {\"data\": \"facet\"},\n                encode: {\n                  enter: {\n                    x: {\"signal\": \"scale('radial', datum.value) * cos(scale('angular', datum.dimension))\"},\n                    y: {\"signal\": \"scale('radial', datum.value) * sin(scale('angular', datum.dimension))\"},\n                    size: {\"value\": 50},\n                    fill: {\"scale\": \"color\", \"field\": \"category\"},\n                    stroke: {\"value\": \"white\"},\n                    strokeWidth: {\"value\": 1}\n                  }\n                }\n              }\n            ]\n          },\n          {\n            type: \"rule\",\n            name: \"radial-grid\",\n            from: {\"data\": \"dimensions\"},\n            zindex: 0,\n            encode: {\n              enter: {\n                x: {\"value\": 0},\n                y: {\"value\": 0},\n                x2: {\"signal\": \"radius * cos(scale('angular', datum.dimension))\"},\n                y2: {\"signal\": \"radius * sin(scale('angular', datum.dimension))\"},\n                stroke: {\"value\": \"#e1e4e8\"},\n                strokeWidth: {\"value\": 1}\n              }\n            }\n          },\n          {\n            type: \"text\",\n            name: \"dimension-label\",\n            from: {\"data\": \"dimensions\"},\n            zindex: 1,\n            encode: {\n              enter: {\n                x: {\"signal\": \"(radius + 20) * cos(scale('angular', datum.dimension))\"},\n                y: {\"signal\": \"(radius + 20) * sin(scale('angular', datum.dimension))\"},\n                text: {\"field\": \"dimension\"},\n                align: [\n                  {\n                    test: \"abs(scale('angular', datum.dimension)) > PI / 2\",\n                    value: \"right\"\n                  },\n                  {\n                    value: \"left\"\n                  }\n                ],\n                baseline: [\n                  {\n                    test: \"scale('angular', datum.dimension) > 0\", \n                    value: \"top\"\n                  },\n                  {\n                    test: \"scale('angular', datum.dimension) == 0\", \n                    value: \"middle\"\n                  },\n                  {\n                    value: \"bottom\"\n                  }\n                ],\n                fill: {\"value\": \"#323130\"},\n                fontWeight: {\"value\": \"bold\"},\n                font: {\"value\": \"Segoe UI\"},\n                fontSize: {\"value\": 12}\n              }\n            }\n          },\n          {\n            type: \"line\",\n            name: \"outer-line\",\n            from: {\"data\": \"radial-grid\"},\n            encode: {\n              enter: {\n                interpolate: {\"value\": \"linear-closed\"},\n                x: {\"field\": \"x2\"},\n                y: {\"field\": \"y2\"},\n                stroke: {\"value\": \"#8a8886\"},\n                strokeWidth: {\"value\": 2},\n                strokeOpacity: {\"value\": 0.6}\n              }\n            }\n          }\n        ]\n      };\n      const chartId = `radar_${invocation.address.replace(/[^A-Za-z0-9]/g, \"_\")}`;\n      createChart(spec, \"radar\", chartId)\n        .then(() => resolve(\"Radar\"))\n        .catch((error) => resolve(`Error: ${error.message}`));\n\n    } catch (error) {\n      resolve(`Error: ${error.message}`);\n    }\n  });\n}\n\n/**\n * WATERFALL custom function\n * Creates a waterfall chart from Excel data range\n * \n * @customfunction\n * @requiresAddress\n * @param {any[][]} data The data range including headers\n * @param {CustomFunctions.Invocation} invocation Invocation object\n * @returns {string} Status message\n */\nfunction WATERFALL(data, invocation) {\n  return new Promise((resolve) => {\n    try {\n      if (!data || data.length < 2) {\n        resolve(\"Error: Need at least header row + one data row\");\n        return;\n      }\n\n      const headers = data[0];\n      const rows = data.slice(1);\n\n      if (headers.length < 3) {\n        resolve(\"Error: Waterfall chart requires 3 columns (Category, Amount, Type)\");\n        return;\n      }\n\n      // Convert rows -> objects (same as taskpane.js)\n      const processedDataRaw = rows.map(row => {\n        let obj = {};\n        headers.forEach((h, i) => {\n          obj[h] = row[i];\n        });\n        return obj;\n      });\n\n      // Process waterfall data inline - set last entry's amount to 0 (same as taskpane.js)\n      const processedData = [...processedDataRaw];\n      if (processedData.length > 0) {\n        processedData[processedData.length - 1] = {\n          ...processedData[processedData.length - 1],\n          [headers[1]]: 0\n        };\n      }\n\n      // Calculate dynamic dimensions\n      const numDataPoints = processedDataRaw.length;\n      const dynamicWidth = Math.max(400, Math.min(1600, numDataPoints * 50));\n      const maxAmount = Math.max(...processedDataRaw.map(d => Math.abs(d[headers[1]])));\n      const dynamicHeight = Math.max(300, Math.min(600, maxAmount / 100 + 200));\n\n      // Use EXACT specification from taskpane.js waterfall chart\n      const spec = {\n        $schema: \"https://vega.github.io/schema/vega-lite/v6.json\",\n        description: \"Waterfall chart with multiple subtotals\",\n        background: \"white\",\n        data: { values: processedData },\n        config: { view: { stroke: \"transparent\" }},\n        width: dynamicWidth,\n        height: dynamicHeight,\n        transform: [\n          { \"window\": [{ \"op\": \"sum\", \"field\": headers[1], \"as\": \"sum\" }] },\n          { \"window\": [{ \"op\": \"lead\", \"field\": headers[0], \"as\": \"lead\" }] },\n          {\n            \"calculate\": `datum.lead === null ? datum.${headers[0]} : datum.lead`,\n            \"as\": \"lead\"\n          },\n          {\n            // If total → reset, else → running sum step\n            \"calculate\": `datum.${headers[2]} == 'total' ? 0 : datum.sum - datum.${headers[1]}`,\n            \"as\": \"previous_sum\"\n          },\n          {\n            \"calculate\": `datum.${headers[2]} == 'total' ? datum.sum : datum.${headers[1]}`,\n            \"as\": \"amount\"\n          },\n          {\n            \"calculate\": `datum.${headers[2]} == 'total' ? datum.${headers[1]} / 2 : (datum.sum + datum.previous_sum) / 2`,\n            \"as\": \"center\"\n          },\n          {\n            \"calculate\": `datum.${headers[2]} == 'total' ? datum.sum : (datum.${headers[1]} > 0 ? '+' : '') + datum.${headers[1]}`,\n            \"as\": \"text_amount\"\n          },\n          { \"calculate\": \"(datum.sum + datum.previous_sum) / 2\", \"as\": \"center\" },\n\n          // Add group index for stacked handling\n          {\n            \"window\": [{ \"op\": \"rank\", \"as\": \"group_index\" }],\n            \"frame\": [null, null],\n            \"groupby\": [headers[0]]\n          },\n\n          // Precompute color shades\n          {\n            \"calculate\": `\n            datum.${headers[2]} == 'total'\n                ? '#00B0F0'\n                : datum.amount >= 0\n                ? (datum.group_index == 1 ? '#70AD47'\n                    : (datum.group_index == 2 ? '#8BC97A'\n                    : (datum.group_index == 3 ? '#A7DA9D'\n                    : '#C3EBC0')))\n                : (datum.group_index == 1 ? '#E15759'\n                    : (datum.group_index == 2 ? '#EC7A7C'\n                    : (datum.group_index == 3 ? '#F29C9D'\n                    : '#F8BEBF')))\n            `,\n            \"as\": \"bar_color\"\n          }\n        ],\n        encoding: {\n          x: {\n            field: headers[0],\n            type: \"ordinal\",\n            sort: null,\n            axis: { labelAngle: -45, title: null },\n            scale: { paddingInner: 0.05, paddingOuter: 0.025 }\n          }\n        },\n        layer: [\n          {\n            mark: { type: \"bar\", size: 60},\n            encoding: {\n              y: { field: \"previous_sum\", type: \"quantitative\", title: null },\n              y2: { field: \"sum\" },\n              color: { field: \"bar_color\", type: \"nominal\", scale: null }\n            }\n          },\n          {\n            mark: { type: \"text\", fontWeight: \"bold\", baseline: \"middle\" },\n            encoding: {\n              y: { field: \"center\", type: \"quantitative\" },\n              text: { field: \"text_amount\", type: \"nominal\" },\n              color: {\n                condition: [\n                  { test: `datum.${headers[2]} == 'total'`, value: \"#725a30\" }\n                ],\n                value: \"white\"\n              }\n            }\n          }\n        ],\n        config: { text: { fontWeight: \"bold\", color: \"#D9D9D9\" } }\n      };\n      const chartId = `waterfall_${invocation.address.replace(/[^A-Za-z0-9]/g, \"_\")}`;\n      createChart(spec, \"waterfall\", chartId)\n        .then(() => resolve(\"Waterfall\"))\n        .catch((error) => resolve(`Error: ${error.message}`));\n\n    } catch (error) {\n      resolve(`Error: ${error.message}`);\n    }\n  });\n}\n\n/**\n * SUNBURST custom function\n * Creates a sunburst chart from Excel data range\n * \n * @customfunction\n * @requiresAddress\n * @param {any[][]} data The data range including headers\n * @param {CustomFunctions.Invocation} invocation Invocation object\n * @returns {string} Status message\n */\nfunction SUNBURST(data, invocation) {\n  return new Promise((resolve) => {\n    try {\n      if (!data || data.length < 2) {\n        resolve(\"Error: Need at least header row + one data row\");\n        return;\n      }\n\n      const headers = data[0];\n      const rows = data.slice(1);\n\n      if (headers.length < 2) {\n        resolve(\"Error: Sunburst chart requires at least 2 columns (Parent, Child, optional Value)\");\n        return;\n      }\n\n      // Build hierarchical data (same as taskpane.js)\n      const nodes = new Map();\n      rows.forEach((row, i) => {\n        const parent = row[0] || \"\";\n        const child = row[1] || `node_${i}`;\n        const value = headers.length >= 3 ? (parseFloat(row[2]) || 1) : 1;\n        \n        // Add parent node if it doesn't exist and is not empty\n        if (parent && !nodes.has(parent)) {\n          nodes.set(parent, {\n            id: parent,\n            parent: \"\",\n            name: parent,\n            size: 0 // Will be calculated later\n          });\n        }\n        \n        // Add child node\n        if (!nodes.has(child)) {\n          nodes.set(child, {\n            id: child,\n            parent: parent,\n            name: child,\n            size: value\n          });\n        } else {\n          // Update parent and value if child already exists\n          const existingNode = nodes.get(child);\n          existingNode.parent = parent;\n          existingNode.size = value;\n        }\n      });\n      \n      // Convert Map to array\n      const hierarchicalData = Array.from(nodes.values());\n      \n      // Find root nodes (nodes with no parent or parent not in dataset)\n      const allIds = new Set(hierarchicalData.map(d => d.id));\n      hierarchicalData.forEach(node => {\n        if (node.parent && !allIds.has(node.parent)) {\n          node.parent = \"\"; // Make it a root node if parent doesn't exist\n        }\n      });\n\n      // Calculate chart size based on data complexity\n      const nodeCount = hierarchicalData.length;\n      const chartSize = Math.max(400, Math.min(600, nodeCount * 15 + 300));\n\n      // Use EXACT specification from taskpane.js sunburst chart\n      const spec = {\n        \"$schema\": \"https://vega.github.io/schema/vega/v6.json\",\n        \"description\": \"Sunburst chart from Excel selection\",\n        \"width\": chartSize,\n        \"height\": chartSize,\n        \"padding\": 10,\n        \"autosize\": \"none\",\n        \"background\": \"white\",\n        \"config\": { \"view\": { \"stroke\": \"transparent\" }},\n\n        \"signals\": [\n          {\n            \"name\": \"centerX\",\n            \"update\": \"width / 2\"\n          },\n          {\n            \"name\": \"centerY\", \n            \"update\": \"height / 2\"\n          },\n          {\n            \"name\": \"outerRadius\",\n            \"update\": \"min(width, height) / 2 - 10\"\n          }\n        ],\n\n        \"data\": [\n          {\n            \"name\": \"tree\",\n            \"values\": hierarchicalData,\n            \"transform\": [\n              {\n                \"type\": \"stratify\",\n                \"key\": \"id\",\n                \"parentKey\": \"parent\"\n              },\n              {\n                \"type\": \"partition\",\n                \"field\": \"size\",\n                \"sort\": {\"field\": \"size\", \"order\": \"descending\"},\n                \"size\": [{\"signal\": \"2 * PI\"}, {\"signal\": \"outerRadius\"}],\n                \"as\": [\"a0\", \"r0\", \"a1\", \"r1\", \"depth\", \"children\"]\n              }\n            ]\n          }\n        ],\n\n        \"scales\": [\n          {\n            \"name\": \"color\",\n            \"type\": \"ordinal\",\n            \"domain\": {\"data\": \"tree\", \"field\": \"depth\"},\n            \"range\": [\n              \"#0078d4\", \"#00bcf2\", \"#40e0d0\", \"#00cc6a\", \"#10893e\", \n              \"#107c10\", \"#bad80a\", \"#ffb900\", \"#ff8c00\", \"#d13438\",\n              \"#8764b8\", \"#e3008c\", \"#00b7c3\", \"#038387\", \"#486991\"\n            ]\n          },\n          {\n            \"name\": \"opacity\",\n            \"type\": \"linear\",\n            \"domain\": {\"data\": \"tree\", \"field\": \"depth\"},\n            \"range\": [0.8, 0.4]\n          }\n        ],\n\n        \"marks\": [\n          {\n            \"type\": \"arc\",\n            \"from\": {\"data\": \"tree\"},\n            \"encode\": {\n              \"enter\": {\n                \"x\": {\"signal\": \"centerX\"},\n                \"y\": {\"signal\": \"centerY\"},\n                \"stroke\": {\"value\": \"white\"},\n                \"strokeWidth\": {\"value\": 1}\n              },\n              \"update\": {\n                \"startAngle\": {\"field\": \"a0\"},\n                \"endAngle\": {\"field\": \"a1\"},\n                \"innerRadius\": {\"field\": \"r0\"},\n                \"outerRadius\": {\"field\": \"r1\"},\n                \"fill\": {\"scale\": \"color\", \"field\": \"depth\"},\n                \"fillOpacity\": {\"scale\": \"opacity\", \"field\": \"depth\"}\n              }\n            }\n          },\n          {\n            \"type\": \"text\",\n            \"from\": {\"data\": \"tree\"},\n            \"encode\": {\n              \"enter\": {\n                \"x\": {\"signal\": \"centerX\"},\n                \"y\": {\"signal\": \"centerY\"},\n                \"radius\": {\"signal\": \"(datum.r0 + datum.r1) / 2\"},\n                \"theta\": {\"signal\": \"(datum.a0 + datum.a1) / 2\"},\n                \"fill\": {\"value\": \"#323130\"},\n                \"font\": {\"value\": \"Segoe UI\"},\n                \"fontSize\": {\"value\": 10},\n                \"fontWeight\": {\"value\": \"bold\"},\n                \"align\": {\"value\": \"center\"},\n                \"baseline\": {\"value\": \"middle\"}\n              },\n              \"update\": {\n                \"text\": {\n                  \"signal\": \"(datum.r1 - datum.r0) > 20 && (datum.a1 - datum.a0) > 0.3 ? datum.name : ''\"\n                },\n                \"opacity\": {\n                  \"signal\": \"(datum.r1 - datum.r0) > 20 && (datum.a1 - datum.a0) > 0.3 ? 1 : 0\"\n                }\n              }\n            }\n          }\n        ]\n      };\n      const chartId = `sunburst_${invocation.address.replace(/[^A-Za-z0-9]/g, \"_\")}`;\n      createChart(spec, \"sunburst\", chartId)\n        .then(() => resolve(\"Sunburst\"))\n        .catch((error) => resolve(`Error: ${error.message}`));\n\n    } catch (error) {\n      resolve(`Error: ${error.message}`);\n    }\n  });\n}\n\n/**\n * TREEMAP custom function\n * Creates a treemap chart from Excel data range\n * \n * @customfunction\n * @requiresAddress\n * @param {any[][]} data The data range including headers\n * @param {CustomFunctions.Invocation} invocation Invocation object\n * @returns {string} Status message\n */\nfunction TREEMAP(data, invocation) {\n  return new Promise((resolve) => {\n    try {\n      if (!data || data.length < 2) {\n        resolve(\"Error: Need at least header row + one data row\");\n        return;\n      }\n\n      const headers = data[0];\n      const rows = data.slice(1);\n\n      if (headers.length < 3) {\n        resolve(\"Error: Treemap chart requires 3 columns (Parent, Category, Value)\");\n        return;\n      }\n\n      // Convert rows -> objects (same as taskpane.js)\n      const processedData = rows.map(row => {\n        let obj = {};\n        headers.forEach((h, i) => {\n          obj[h] = row[i];\n        });\n        return obj;\n      });\n\n      // Build treemap data structure (same as taskpane.js)\n      let treeData;\n      \n      if (headers.length >= 3) {\n        // Hierarchical data with parent column\n        treeData = processedData.map((d, i) => ({\n          id: `${d[headers[1]]}_${i}`,\n          name: d[headers[1]],\n          parent: d[headers[0]] || \"root\",\n          size: parseFloat(d[headers[2]]) || 0\n        }));\n        \n        // Add root and parent nodes\n        const parents = [...new Set(treeData.map(d => d.parent))];\n        parents.forEach(parent => {\n          if (parent !== \"root\" && !treeData.find(d => d.id === parent)) {\n            treeData.push({\n              id: parent,\n              name: parent,\n              parent: \"root\",\n              size: 0\n            });\n          }\n        });\n        \n        // Add root node\n        treeData.push({\n          id: \"root\",\n          name: \"Root\",\n          parent: \"\",\n          size: 0\n        });\n      } else {\n        // Simple flat data - create single level hierarchy\n        treeData = [\n          {\n            id: \"root\",\n            name: \"Root\", \n            parent: \"\",\n            size: 0\n          },\n          ...processedData.map((d, i) => ({\n            id: `item_${i}`,\n            name: d[headers[1]],\n            parent: \"root\",\n            size: parseFloat(d[headers[2]]) || 0\n          }))\n        ];\n      }\n\n      // Use EXACT specification from taskpane.js treemap chart\n      const spec = {\n        $schema: \"https://vega.github.io/schema/vega/v5.json\",\n        description: \"Treemap visualization from Excel data\",\n        background: \"white\",\n        width: 600,\n        height: 400,\n        padding: 5,\n        autosize: \"fit\",\n        \n        data: [\n          {\n            name: \"tree\",\n            values: treeData,\n            transform: [\n              {\n                type: \"stratify\",\n                key: \"id\",\n                parentKey: \"parent\"\n              },\n              {\n                type: \"treemap\",\n                field: \"size\",\n                sort: { field: \"value\" },\n                round: true,\n                method: \"squarify\",\n                ratio: 1.6,\n                size: [{ signal: \"width\" }, { signal: \"height\" }]\n              }\n            ]\n          },\n          {\n            name: \"nodes\",\n            source: \"tree\",\n            transform: [\n              { type: \"filter\", expr: \"datum.children\" }\n            ]\n          },\n          {\n            name: \"leaves\", \n            source: \"tree\",\n            transform: [\n              { type: \"filter\", expr: \"!datum.children\" }\n            ]\n          }\n        ],\n        \n        scales: [\n          {\n            name: \"color\",\n            type: \"ordinal\",\n            domain: { data: \"nodes\", field: \"name\" },\n            range: [\n              \"#0078d4\", \"#00bcf2\", \"#40e0d0\", \"#00cc6a\", \"#10893e\",\n              \"#107c10\", \"#bad80a\", \"#ffb900\", \"#ff8c00\", \"#d13438\"\n            ]\n          },\n          {\n            name: \"fontSize\",\n            type: \"ordinal\", \n            domain: [0, 1, 2, 3],\n            range: [20, 16, 12, 10]\n          },\n          {\n            name: \"opacity\",\n            type: \"ordinal\",\n            domain: [0, 1, 2, 3], \n            range: [0.3, 0.6, 0.8, 1.0]\n          }\n        ],\n        \n        marks: [\n          {\n            type: \"rect\",\n            from: { data: \"nodes\" },\n            interactive: false,\n            encode: {\n              enter: {\n                fill: { scale: \"color\", field: \"name\" },\n                fillOpacity: { scale: \"opacity\", field: \"depth\" }\n              },\n              update: {\n                x: { field: \"x0\" },\n                y: { field: \"y0\" },\n                x2: { field: \"x1\" },\n                y2: { field: \"y1\" },\n                stroke: { value: \"#ffffff\" },\n                strokeWidth: { value: 1 }\n              }\n            }\n          },\n          {\n            type: \"rect\",\n            from: { data: \"leaves\" },\n            encode: {\n              enter: {\n                stroke: { value: \"#ffffff\" },\n                strokeWidth: { value: 2 }\n              },\n              update: {\n                x: { field: \"x0\" },\n                y: { field: \"y0\" },\n                x2: { field: \"x1\" },\n                y2: { field: \"y1\" },\n                fill: { value: \"transparent\" },\n                tooltip: {\n                  signal: `{'Category': datum.name, 'Value': datum.size, 'Parent': datum.parent}`\n                }\n              },\n              hover: {\n                fill: { value: \"#323130\" },\n                fillOpacity: { value: 0.1 }\n              }\n            }\n          },\n          {\n            type: \"text\",\n            from: { data: \"leaves\" },\n            interactive: false,\n            encode: {\n              enter: {\n                font: { value: \"Segoe UI, Arial, sans-serif\" },\n                align: { value: \"center\" },\n                baseline: { value: \"middle\" },\n                fill: { value: \"#323130\" },\n                fontWeight: { value: \"bold\" },\n                text: { field: \"name\" },\n                fontSize: { scale: \"fontSize\", field: \"depth\" }\n              },\n              update: {\n                x: { signal: \"0.5 * (datum.x0 + datum.x1)\" },\n                y: { signal: \"0.5 * (datum.y0 + datum.y1)\" },\n                opacity: {\n                  signal: \"(datum.x1 - datum.x0) > 50 && (datum.y1 - datum.y0) > 20 ? 1 : 0\"\n                }\n              }\n            }\n          }\n        ]\n      };\n      const chartId = `treemap_${invocation.address.replace(/[^A-Za-z0-9]/g, \"_\")}`;\n      createChart(spec, \"treemap\", chartId)\n        .then(() => resolve(\"Treemap\"))\n        .catch((error) => resolve(`Error: ${error.message}`));\n\n    } catch (error) {\n      resolve(`Error: ${error.message}`);\n    }\n  });\n}\n\n/**\n * HISTOGRAM custom function\n * Creates a histogram from Excel data range\n * \n * @customfunction\n * @requiresAddress\n * @param {any[][]} data The data range including headers\n * @param {CustomFunctions.Invocation} invocation Invocation object\n * @returns {string} Status message\n */\nfunction HISTOGRAM(data, invocation) {\n  return new Promise((resolve) => {\n    try {\n      if (!data || data.length < 2) {\n        resolve(\"Error: Need at least header row + one data row\");\n        return;\n      }\n\n      const headers = data[0];\n      const rows = data.slice(1);\n\n      // Expect a single numeric column\n      const numericData = rows\n        .filter(r => !isNaN(+r[0]))\n        .map(r => ({ value: +r[0] }));\n\n      if (numericData.length === 0) {\n        resolve(\"Error: No valid numeric data found for histogram\");\n        return;\n      }\n\n      // Calculate data range for better binning control\n      const values = numericData.map(d => d.value);\n      const minVal = Math.min(...values);\n      const maxVal = Math.max(...values);\n      const range = maxVal - minVal;\n      \n      // Calculate nice bin boundaries\n      const binCount = 20;\n      const binWidth = range / binCount;\n      const niceMin = Math.floor(minVal / binWidth) * binWidth;\n      const niceMax = Math.ceil(maxVal / binWidth) * binWidth;\n\n      // Use EXACT specification from taskpane.js histogram\n      const spec = {\n        \"$schema\": \"https://vega.github.io/schema/vega-lite/v6.json\",\n        \"description\": \"Histogram from Excel selection\",\n        \"background\": \"white\",\n        \"config\": { \"view\": { \"stroke\": \"transparent\" }},\n        \"data\": { \"values\": numericData },\n        \"mark\": {\n          \"type\": \"bar\",\n          \"tooltip\": true,\n          \"stroke\": \"white\",\n          \"strokeWidth\": 1\n        },\n        \"encoding\": {\n          \"x\": {\n            \"field\": \"value\",\n            \"bin\": { \n              \"extent\": [niceMin, niceMax],\n              \"step\": binWidth,\n              \"nice\": false  // Prevent Vega from adjusting our nice boundaries\n            },\n            \"type\": \"quantitative\",\n            \"axis\": { \n              \"title\": \"Value\",\n              \"labelFontSize\": 12,\n              \"titleFontSize\": 14,\n              \"labelColor\": \"#605e5c\",\n              \"titleColor\": \"#323130\"\n            },\n            \"scale\": {\n              \"domain\": [niceMin, niceMax],\n              \"range\": \"width\",\n              \"paddingInner\": 0.05,\n              \"paddingOuter\": 0.02\n            }\n          },\n          \"y\": {\n            \"aggregate\": \"count\",\n            \"type\": \"quantitative\",\n            \"axis\": { \n              \"title\": \"Count\",\n              \"labelFontSize\": 12,\n              \"titleFontSize\": 14,\n              \"labelColor\": \"#605e5c\",\n              \"titleColor\": \"#323130\",\n              \"gridColor\": \"#f3f2f1\"\n            }\n          },\n          \"color\": {\n            \"value\": \"#0078d4\"\n          }\n        },\n        \"config\": {\n          \"font\": \"Segoe UI\",\n          \"axis\": {\n            \"labelColor\": \"#605e5c\",\n            \"titleColor\": \"#323130\",\n            \"gridColor\": \"#f3f2f1\"\n          }\n        }\n      };\n      const chartId = `histogram_${invocation.address.replace(/[^A-Za-z0-9]/g, \"_\")}`;\n      createChart(spec, \"histogram\", chartId)\n        .then(() => resolve(\"Histogram\"))\n        .catch((error) => resolve(`Error: ${error.message}`));\n\n    } catch (error) {\n      resolve(`Error: ${error.message}`);\n    }\n  });\n}\n\n/**\n * MAP custom function\n * Creates a world map chart from Excel data range\n * \n * @customfunction\n * @requiresAddress\n * @param {any[][]} data The data range including headers\n * @param {CustomFunctions.Invocation} invocation Invocation object\n * @returns {string} Status message\n */\nfunction MAP(data, invocation) {\n  return new Promise((resolve) => {\n    try {\n      if (!data || data.length < 2) {\n        resolve(\"Error: Need at least header row + one data row\");\n        return;\n      }\n\n      const headers = data[0];\n      const rows = data.slice(1);\n\n      if (headers.length < 2) {\n        resolve(\"Error: Map chart requires 2 columns (Country ISO3, Value)\");\n        return;\n      }\n\n      // ISO3 to numeric ID mapping (same as taskpane.js)\n      const isoToId = {\n        \"AFG\": 4,    // Afghanistan\n        \"AGO\": 24,   // Angola\n        \"ALB\": 8,    // Albania\n        \"AND\": 20,   // Andorra\n        \"ARE\": 784,  // United Arab Emirates\n        \"ARG\": 32,   // Argentina\n        \"ARM\": 51,   // Armenia\n        \"ATA\": 10,   // Antarctica\n        \"ATG\": 28,   // Antigua and Barbuda\n        \"AUS\": 36,   // Australia\n        \"AUT\": 40,   // Austria\n        \"AZE\": 31,   // Azerbaijan\n        \"BDI\": 108,  // Burundi\n        \"BEL\": 56,   // Belgium\n        \"BEN\": 204,  // Benin\n        \"BFA\": 854,  // Burkina Faso\n        \"BGD\": 50,   // Bangladesh\n        \"BGR\": 100,  // Bulgaria\n        \"BHR\": 48,   // Bahrain\n        \"BHS\": 44,   // Bahamas\n        \"BIH\": 70,   // Bosnia and Herzegovina\n        \"BLR\": 112,  // Belarus\n        \"BLZ\": 84,   // Belize\n        \"BOL\": 68,   // Bolivia\n        \"BRA\": 76,   // Brazil\n        \"BRB\": 52,   // Barbados\n        \"BRN\": 96,   // Brunei\n        \"BTN\": 64,   // Bhutan\n        \"BWA\": 72,   // Botswana\n        \"CAF\": 140,  // Central African Republic\n        \"CAN\": 124,  // Canada\n        \"CHE\": 756,  // Switzerland\n        \"CHL\": 152,  // Chile\n        \"CHN\": 156,  // China\n        \"CIV\": 384,  // Côte d'Ivoire\n        \"CMR\": 120,  // Cameroon\n        \"COD\": 180,  // Democratic Republic of Congo\n        \"COG\": 178,  // Congo\n        \"COL\": 170,  // Colombia\n        \"COM\": 174,  // Comoros\n        \"CPV\": 132,  // Cape Verde\n        \"CRI\": 188,  // Costa Rica\n        \"CUB\": 192,  // Cuba\n        \"CYP\": 196,  // Cyprus\n        \"CZE\": 203,  // Czechia\n        \"DEU\": 276,  // Germany\n        \"DJI\": 262,  // Djibouti\n        \"DMA\": 212,  // Dominica\n        \"DNK\": 208,  // Denmark\n        \"DOM\": 214,  // Dominican Republic\n        \"DZA\": 12,   // Algeria\n        \"ECU\": 218,  // Ecuador\n        \"EGY\": 818,  // Egypt\n        \"ERI\": 232,  // Eritrea\n        \"ESH\": 732,  // Western Sahara\n        \"ESP\": 724,  // Spain\n        \"EST\": 233,  // Estonia\n        \"ETH\": 231,  // Ethiopia\n        \"FIN\": 246,  // Finland\n        \"FJI\": 242,  // Fiji\n        \"FRA\": 250,  // France\n        \"FSM\": 583,  // Micronesia\n        \"GAB\": 266,  // Gabon\n        \"GBR\": 826,  // United Kingdom\n        \"GEO\": 268,  // Georgia\n        \"GHA\": 288,  // Ghana\n        \"GIN\": 324,  // Guinea\n        \"GMB\": 270,  // Gambia\n        \"GNB\": 624,  // Guinea-Bissau\n        \"GNQ\": 226,  // Equatorial Guinea\n        \"GRC\": 300,  // Greece\n        \"GRD\": 308,  // Grenada\n        \"GRL\": 304,  // Greenland\n        \"GTM\": 320,  // Guatemala\n        \"GUY\": 328,  // Guyana\n        \"HND\": 340,  // Honduras\n        \"HRV\": 191,  // Croatia\n        \"HTI\": 332,  // Haiti\n        \"HUN\": 348,  // Hungary\n        \"IDN\": 360,  // Indonesia\n        \"IND\": 356,  // India\n        \"IRL\": 372,  // Ireland\n        \"IRN\": 364,  // Iran\n        \"IRQ\": 368,  // Iraq\n        \"ISL\": 352,  // Iceland\n        \"ISR\": 376,  // Israel\n        \"ITA\": 380,  // Italy\n        \"JAM\": 388,  // Jamaica\n        \"JOR\": 400,  // Jordan\n        \"JPN\": 392,  // Japan\n        \"KAZ\": 398,  // Kazakhstan\n        \"KEN\": 404,  // Kenya\n        \"KGZ\": 417,  // Kyrgyzstan\n        \"KHM\": 116,  // Cambodia\n        \"KIR\": 296,  // Kiribati\n        \"KNA\": 659,  // Saint Kitts and Nevis\n        \"KOR\": 410,  // South Korea\n        \"KWT\": 414,  // Kuwait\n        \"LAO\": 418,  // Laos\n        \"LBN\": 422,  // Lebanon\n        \"LBR\": 430,  // Liberia\n        \"LBY\": 434,  // Libya\n        \"LCA\": 662,  // Saint Lucia\n        \"LIE\": 438,  // Liechtenstein\n        \"LKA\": 144,  // Sri Lanka\n        \"LSO\": 426,  // Lesotho\n        \"LTU\": 440,  // Lithuania\n        \"LUX\": 442,  // Luxembourg\n        \"LVA\": 428,  // Latvia\n        \"MAR\": 504,  // Morocco\n        \"MCO\": 492,  // Monaco\n        \"MDA\": 498,  // Moldova\n        \"MDG\": 450,  // Madagascar\n        \"MDV\": 462,  // Maldives\n        \"MEX\": 484,  // Mexico\n        \"MHL\": 584,  // Marshall Islands\n        \"MKD\": 807,  // North Macedonia\n        \"MLI\": 466,  // Mali\n        \"MLT\": 470,  // Malta\n        \"MMR\": 104,  // Myanmar\n        \"MNE\": 499,  // Montenegro\n        \"MNG\": 496,  // Mongolia\n        \"MOZ\": 508,  // Mozambique\n        \"MRT\": 478,  // Mauritania\n        \"MUS\": 480,  // Mauritius\n        \"MWI\": 454,  // Malawi\n        \"MYS\": 458,  // Malaysia\n        \"NAM\": 516,  // Namibia\n        \"NCL\": 540,  // New Caledonia\n        \"NER\": 562,  // Niger\n        \"NGA\": 566,  // Nigeria\n        \"NIC\": 558,  // Nicaragua\n        \"NLD\": 528,  // Netherlands\n        \"NOR\": 578,  // Norway\n        \"NPL\": 524,  // Nepal\n        \"NRU\": 520,  // Nauru\n        \"NZL\": 554,  // New Zealand\n        \"OMN\": 512,  // Oman\n        \"PAK\": 586,  // Pakistan\n        \"PAN\": 591,  // Panama\n        \"PER\": 604,  // Peru\n        \"PHL\": 608,  // Philippines\n        \"PLW\": 585,  // Palau\n        \"PNG\": 598,  // Papua New Guinea\n        \"POL\": 616,  // Poland\n        \"PRI\": 630,  // Puerto Rico\n        \"PRK\": 408,  // North Korea\n        \"PRT\": 620,  // Portugal\n        \"PRY\": 600,  // Paraguay\n        \"PSE\": 275,  // Palestine\n        \"QAT\": 634,  // Qatar\n        \"ROU\": 642,  // Romania\n        \"RUS\": 643,  // Russia\n        \"RWA\": 646,  // Rwanda\n        \"SAU\": 682,  // Saudi Arabia\n        \"SDN\": 729,  // Sudan\n        \"SEN\": 686,  // Senegal\n        \"SGP\": 702,  // Singapore\n        \"SLB\": 90,   // Solomon Islands\n        \"SLE\": 694,  // Sierra Leone\n        \"SLV\": 222,  // El Salvador\n        \"SMR\": 674,  // San Marino\n        \"SOM\": 706,  // Somalia\n        \"SRB\": 688,  // Serbia\n        \"SSD\": 728,  // South Sudan\n        \"STP\": 678,  // São Tomé and Príncipe\n        \"SUR\": 740,  // Suriname\n        \"SVK\": 703,  // Slovakia\n        \"SVN\": 705,  // Slovenia\n        \"SWE\": 752,  // Sweden\n        \"SWZ\": 748,  // Eswatini\n        \"SYC\": 690,  // Seychelles\n        \"SYR\": 760,  // Syria\n        \"TCD\": 148,  // Chad\n        \"TGO\": 768,  // Togo\n        \"THA\": 764,  // Thailand\n        \"TJK\": 762,  // Tajikistan\n        \"TKM\": 795,  // Turkmenistan\n        \"TLS\": 626,  // Timor-Leste\n        \"TON\": 776,  // Tonga\n        \"TTO\": 780,  // Trinidad and Tobago\n        \"TUN\": 788,  // Tunisia\n        \"TUR\": 792,  // Turkey\n        \"TUV\": 798,  // Tuvalu\n        \"TWN\": 158,  // Taiwan\n        \"TZA\": 834,  // Tanzania\n        \"UGA\": 800,  // Uganda\n        \"UKR\": 804,  // Ukraine\n        \"URY\": 858,  // Uruguay\n        \"USA\": 840,  // United States\n        \"UZB\": 860,  // Uzbekistan\n        \"VAT\": 336,  // Vatican City\n        \"VCT\": 670,  // Saint Vincent and the Grenadines\n        \"VEN\": 862,  // Venezuela\n        \"VNM\": 704,  // Vietnam\n        \"VUT\": 548,  // Vanuatu\n        \"WSM\": 882,  // Samoa\n        \"XKX\": 383,  // Kosovo\n        \"YEM\": 887,  // Yemen\n        \"ZAF\": 710,  // South Africa\n        \"ZMB\": 894,  // Zambia\n        \"ZWE\": 716   // Zimbabwe\n      };\n\n      // Process data (same as taskpane.js)\n      const worldData = rows\n        .filter(r => r[0] && !isNaN(+r[1]))\n        .map(r => {\n          const iso = (r[0] || \"\").toUpperCase().trim();\n          const idVal = isoToId[iso];\n          return {\n            id: idVal,     // numeric ID matching topojson country.id\n            iso: iso,       // original ISO3 for tooltip\n            rate: +r[1]\n          };\n        })\n        .filter(d => d.id); // drop rows where iso isn't in lookup\n\n      if (worldData.length === 0) {\n        resolve(\"Error: No valid country data found. Please use ISO3 country codes (USA, GBR, DEU, etc.)\");\n        return;\n      }\n\n      // Use EXACT specification from taskpane.js map chart\n      const spec = {\n        $schema: \"https://vega.github.io/schema/vega-lite/v6.json\",\n        width: 800,\n        height: 450,\n        data: {\n          url: \"https://cdn.jsdelivr.net/npm/world-atlas@2/countries-110m.json\",\n          format: { type: \"topojson\", feature: \"countries\" }\n        },\n        transform: [\n          {\n            lookup: \"id\",\n            from: {\n              data: { values: worldData },\n              key: \"id\",\n              fields: [\"rate\", \"iso\"]\n            }\n          }\n        ],\n        projection: { type: \"equalEarth\" },\n        mark: { type: \"geoshape\", stroke: \"white\", strokeWidth: 0.5 },\n        encoding: {\n          color: {\n            field: \"rate\",\n            type: \"quantitative\",\n            scale: { scheme: \"blues\" }\n          },\n          tooltip: [\n            { field: \"iso\", type: \"nominal\", title: \"Country (ISO3)\" },\n            { field: \"rate\", type: \"quantitative\", title: \"Value\" }\n          ]\n        }\n      };\n      const chartId = `map_${invocation.address.replace(/[^A-Za-z0-9]/g, \"_\")}`;\n      createChart(spec, \"map\", chartId)\n        .then(() => resolve(\"Map\"))\n        .catch((error) => resolve(`Error: ${error.message}`));\n\n    } catch (error) {\n      resolve(`Error: ${error.message}`);\n    }\n  });\n}\n\n/**\n * CANDLESTICK custom function\n * Creates a candlestick chart from Excel data range\n * \n * @customfunction\n * @requiresAddress\n * @param {any[][]} data The data range including headers\n * @param {CustomFunctions.Invocation} invocation Invocation object\n * @returns {string} Status message\n */\nfunction CANDLESTICK(data, invocation) {\n  return new Promise((resolve) => {\n    try {\n      if (!data || data.length < 2) {\n        resolve(\"Error: Need at least header row + one data row\");\n        return;\n      }\n\n      const headers = data[0];\n      const rows = data.slice(1);\n\n      if (headers.length < 5) {\n        resolve(\"Error: Candlestick chart requires 5 columns (Date, Open, High, Low, Close)\");\n        return;\n      }\n\n      // Convert rows -> objects (same as taskpane.js)\n      const processedData = rows.map(row => {\n        let obj = {};\n        headers.forEach((h, i) => {\n          obj[h] = row[i];\n        });\n        return obj;\n      });\n\n      // Helper function to convert Excel dates to JS dates\n      function excelDateToJSDate(serial) {\n        if (typeof serial === 'number') {\n          return new Date(Math.round((serial - 25569) * 86400 * 1000));\n        }\n        return new Date(serial);\n      }\n\n      // Process and validate data\n      const candlestickData = processedData.map((row, index) => {\n        const date = excelDateToJSDate(row[headers[0]]);\n        const open = parseFloat(row[headers[1]]) || 0;\n        const high = parseFloat(row[headers[2]]) || 0;\n        const low = parseFloat(row[headers[3]]) || 0;\n        const close = parseFloat(row[headers[4]]) || 0;\n        \n        if (isNaN(date.getTime()) || isNaN(open) || isNaN(high) || isNaN(low) || isNaN(close)) {\n          return null;\n        }\n        \n        return {\n          date: date.toISOString(),\n          open: open,\n          high: high,\n          low: low,\n          close: close\n        };\n      }).filter(Boolean);\n\n      if (candlestickData.length === 0) {\n        resolve(\"Error: No valid candlestick data found\");\n        return;\n      }\n\n      // Use EXACT specification from taskpane.js candlestick chart\n      const spec = {\n        \"$schema\": \"https://vega.github.io/schema/vega-lite/v6.json\",\n        \"width\": 600,\n        \"description\": \"Candlestick chart from Excel selection\",\n        \"background\": \"white\",\n        \"config\": { \"view\": { \"stroke\": \"transparent\" }},\n        \"data\": { \"values\": candlestickData },\n        \"encoding\": {\n          \"x\": {\n            \"field\": \"date\",\n            \"type\": \"temporal\",\n            \"title\": \"Date\",\n            \"axis\": {\n              \"format\": \"%m/%d\",\n              \"labelAngle\": -45,\n              \"labelFontSize\": 11,\n              \"titleFontSize\": 12,\n              \"labelColor\": \"#605e5c\",\n              \"titleColor\": \"#323130\",\n              \"font\": \"Segoe UI\"\n            }\n          },\n          \"y\": {\n            \"type\": \"quantitative\",\n            \"scale\": { \"zero\": false },\n            \"axis\": {\n              \"title\": \"Price\",\n              \"labelFontSize\": 11,\n              \"titleFontSize\": 12,\n              \"labelColor\": \"#605e5c\",\n              \"titleColor\": \"#323130\",\n              \"font\": \"Segoe UI\",\n              \"grid\": true,\n              \"gridColor\": \"#f3f2f1\"\n            }\n          },\n          \"color\": {\n            \"condition\": {\n              \"test\": \"datum.open < datum.close\",\n              \"value\": \"#06982d\"\n            },\n            \"value\": \"#ae1325\"\n          }\n        },\n        \"layer\": [\n          {\n            \"mark\": {\n              \"type\": \"rule\",\n              \"tooltip\": true\n            },\n            \"encoding\": {\n              \"y\": { \"field\": \"low\" },\n              \"y2\": { \"field\": \"high\" },\n              \"tooltip\": [\n                { \"field\": \"date\", \"type\": \"temporal\", \"title\": \"Date\", \"format\": \"%Y-%m-%d\" },\n                { \"field\": \"open\", \"type\": \"quantitative\", \"title\": \"Open\", \"format\": \".2f\" },\n                { \"field\": \"high\", \"type\": \"quantitative\", \"title\": \"High\", \"format\": \".2f\" },\n                { \"field\": \"low\", \"type\": \"quantitative\", \"title\": \"Low\", \"format\": \".2f\" },\n                { \"field\": \"close\", \"type\": \"quantitative\", \"title\": \"Close\", \"format\": \".2f\" }\n              ]\n            }\n          },\n          {\n            \"mark\": {\n              \"type\": \"bar\",\n              \"tooltip\": true\n            },\n            \"encoding\": {\n              \"y\": { \"field\": \"open\" },\n              \"y2\": { \"field\": \"close\" },\n              \"tooltip\": [\n                { \"field\": \"date\", \"type\": \"temporal\", \"title\": \"Date\", \"format\": \"%Y-%m-%d\" },\n                { \"field\": \"open\", \"type\": \"quantitative\", \"title\": \"Open\", \"format\": \".2f\" },\n                { \"field\": \"high\", \"type\": \"quantitative\", \"title\": \"High\", \"format\": \".2f\" },\n                { \"field\": \"low\", \"type\": \"quantitative\", \"title\": \"Low\", \"format\": \".2f\" },\n                { \"field\": \"close\", \"type\": \"quantitative\", \"title\": \"Close\", \"format\": \".2f\" }\n              ]\n            }\n          }\n        ],\n        \"config\": {\n          \"font\": \"Segoe UI\",\n          \"axis\": {\n            \"labelColor\": \"#605e5c\",\n            \"titleColor\": \"#323130\",\n            \"gridColor\": \"#f3f2f1\"\n          }\n        }\n      };\n      const chartId = `candlestick_${invocation.address.replace(/[^A-Za-z0-9]/g, \"_\")}`;\n      createChart(spec, \"candlestick\", chartId)\n        .then(() => resolve(\"Candlestick\"))\n        .catch((error) => resolve(`Error: ${error.message}`));\n\n    } catch (error) {\n      resolve(`Error: ${error.message}`);\n    }\n  });\n}\n\n/**\n * ARC custom function\n * Creates an arc diagram from Excel data range\n * \n * @customfunction\n * @requiresAddress\n * @param {any[][]} data The data range including headers\n * @param {CustomFunctions.Invocation} invocation Invocation object\n * @returns {string} Status message\n */\nfunction ARC(data, invocation) {\n  return new Promise((resolve) => {\n    try {\n      if (!data || data.length < 2) {\n        resolve(\"Error: Need at least header row + one data row\");\n        return;\n      }\n\n      const headers = data[0];\n      const rows = data.slice(1);\n\n      if (headers.length < 2) {\n        resolve(\"Error: Arc chart requires at least 2 columns (Source, Target, Weight optional)\");\n        return;\n      }\n\n      // Convert rows -> objects (same as taskpane.js)\n      const processedData = rows.map(row => {\n        let obj = {};\n        headers.forEach((h, i) => {\n          obj[h] = row[i];\n        });\n        return obj;\n      });\n\n      // EXACT data processing from taskpane.js - Transform Excel data for arc chart\n      const edges = processedData.map((row, index) => ({\n        source: row[headers[0]],\n        target: row[headers[1]],\n        value: headers.length >= 3 && row[headers[2]] ? row[headers[2]] : 1,\n        group: headers.length >= 4 && row[headers[3]] ? row[headers[3]] : \"default\"\n      }));\n\n      // Get unique nodes from edges\n      const nodeMap = new Map();\n      edges.forEach(edge => {\n        if (!nodeMap.has(edge.source)) {\n          nodeMap.set(edge.source, { \n            name: edge.source, \n            group: edge.group,\n            index: nodeMap.size\n          });\n        }\n        if (!nodeMap.has(edge.target)) {\n          nodeMap.set(edge.target, { \n            name: edge.target, \n            group: edge.group,\n            index: nodeMap.size\n          });\n        }\n      });\n\n      const nodes = Array.from(nodeMap.values());\n\n      // Transform edges to use node indices\n      const edgesWithIndices = edges.map(edge => ({\n        source: nodeMap.get(edge.source).index,\n        target: nodeMap.get(edge.target).index,\n        value: edge.value\n      }));\n\n      // Use EXACT specification from taskpane.js arc chart\n      const spec = {\n        $schema: \"https://vega.github.io/schema/vega/v5.json\",\n        description: \"Arc diagram from Excel selection\",\n        width: Math.max(600, nodes.length * 40),\n        height: 300,\n        padding: { top: 20, bottom: 80, left: 20, right: 20 },\n        background: \"white\",\n        config: { view: { stroke: \"transparent\" }},\n        data: [\n          {\n            name: \"edges\",\n            values: edgesWithIndices\n          },\n          {\n            name: \"sourceDegree\",\n            source: \"edges\",\n            transform: [\n              { type: \"aggregate\", groupby: [\"source\"], as: [\"count\"] }\n            ]\n          },\n          {\n            name: \"targetDegree\", \n            source: \"edges\",\n            transform: [\n              { type: \"aggregate\", groupby: [\"target\"], as: [\"count\"] }\n            ]\n          },\n          {\n            name: \"nodes\",\n            values: nodes,\n            transform: [\n              { type: \"window\", ops: [\"rank\"], as: [\"order\"] },\n              {\n                type: \"lookup\", from: \"sourceDegree\", key: \"source\",\n                fields: [\"index\"], as: [\"sourceDegree\"],\n                default: { count: 0 }\n              },\n              {\n                type: \"lookup\", from: \"targetDegree\", key: \"target\", \n                fields: [\"index\"], as: [\"targetDegree\"],\n                default: { count: 0 }\n              },\n              {\n                type: \"formula\", as: \"degree\",\n                expr: \"(datum.sourceDegree.count || 0) + (datum.targetDegree.count || 0)\"\n              }\n            ]\n          }\n        ],\n\n        scales: [\n          {\n            name: \"position\",\n            type: \"band\",\n            domain: { data: \"nodes\", field: \"order\", sort: true },\n            range: \"width\"\n          },\n          {\n            name: \"color\",\n            type: \"ordinal\",\n            range: { scheme: \"category20\" },\n            domain: { data: \"nodes\", field: \"group\" }\n          }\n        ],\n\n        marks: [\n          {\n            type: \"symbol\",\n            name: \"layout\",\n            interactive: false,\n            from: { data: \"nodes\" },\n            encode: {\n              enter: { opacity: { value: 0 } },\n              update: {\n                x: { scale: \"position\", field: \"order\" },\n                y: { value: 0 },\n                size: { field: \"degree\", mult: 8, offset: 50 },\n                fill: { scale: \"color\", field: \"group\" }\n              }\n            }\n          },\n          {\n            type: \"path\",\n            from: { data: \"edges\" },\n            encode: {\n              update: {\n                stroke: { value: \"#0078d4\" },\n                strokeOpacity: { value: 0.4 },\n                strokeWidth: { field: \"value\", mult: 2, offset: 1 }\n              }\n            },\n            transform: [\n              {\n                type: \"lookup\", from: \"layout\", key: \"datum.index\",\n                fields: [\"datum.source\", \"datum.target\"],\n                as: [\"sourceNode\", \"targetNode\"]\n              },\n              {\n                type: \"linkpath\",\n                sourceX: { expr: \"min(datum.sourceNode.x, datum.targetNode.x)\" },\n                targetX: { expr: \"max(datum.sourceNode.x, datum.targetNode.x)\" },\n                sourceY: { expr: \"0\" },\n                targetY: { expr: \"0\" },\n                shape: \"arc\"\n              }\n            ]\n          },\n          {\n            type: \"symbol\",\n            from: { data: \"layout\" },\n            encode: {\n              update: {\n                x: { field: \"x\" },\n                y: { field: \"y\" },\n                fill: { field: \"fill\" },\n                size: { field: \"size\" },\n                stroke: { value: \"white\" },\n                strokeWidth: { value: 1 },\n                tooltip: { \n                  signal: \"{'Node': datum.datum.name, 'Group': datum.datum.group, 'Connections': datum.datum.degree}\" \n                }\n              }\n            }\n          },\n          {\n            type: \"text\",\n            from: { data: \"nodes\" },\n            encode: {\n              update: {\n                x: { scale: \"position\", field: \"order\" },\n                y: { value: 25 },\n                fontSize: { value: 10 },\n                align: { value: \"center\" },\n                baseline: { value: \"top\" },\n                angle: { value: -45 },\n                text: { field: \"name\" },\n                fill: { value: \"#323130\" },\n                font: { value: \"Segoe UI\" }\n              }\n            }\n          }\n        ],\n        \n        config: {\n          view: { stroke: \"transparent\" },\n          font: \"Segoe UI\",\n          text: { font: \"Segoe UI\", fontSize: 10, fill: \"#605e5c\" }\n        }\n      };\n      const chartId = `arc_${invocation.address.replace(/[^A-Za-z0-9]/g, \"_\")}`;\n      createChart(spec, \"arc\", chartId)\n        .then(() => resolve(\"Arc\"))\n        .catch((error) => resolve(`Error: ${error.message}`));\n\n    } catch (error) {\n      resolve(`Error: ${error.message}`);\n    }\n  });\n}\n\n/**\n * TREE custom function\n * Creates a tree diagram from Excel data range\n * \n * @customfunction\n * @requiresAddress\n * @param {any[][]} data The data range including headers\n * @param {CustomFunctions.Invocation} invocation Invocation object\n * @returns {string} Status message\n */\nfunction TREE(data, invocation) {\n  return new Promise((resolve) => {\n    try {\n      if (!data || data.length < 2) {\n        resolve(\"Error: Need at least header row + one data row\");\n        return;\n      }\n\n      const headers = data[0];\n      const rows = data.slice(1);\n\n      if (headers.length < 2) {\n        resolve(\"Error: Tree chart requires at least 2 columns (Parent, Child, Value optional)\");\n        return;\n      }\n\n      // Process data same as taskpane.js\n      const nodes = new Map();\n\n      rows.forEach((row, i) => {\n        const parent = row[0] || \"\";\n        const child = row[1] || `node_${i}`;\n        const value = headers.length >= 3 ? (parseFloat(row[2]) || 1) : 1;\n        \n        // Add parent node if it doesn't exist and is not empty\n        if (parent && !nodes.has(parent)) {\n          nodes.set(parent, {\n            id: parent,\n            parent: \"\",\n            name: parent,\n            value: 1\n          });\n        }\n        \n        // Add child node\n        if (!nodes.has(child)) {\n          nodes.set(child, {\n            id: child,\n            parent: parent,\n            name: child,\n            value: value\n          });\n        } else {\n          // Update parent and value if child already exists\n          const existingNode = nodes.get(child);\n          existingNode.parent = parent;\n          existingNode.value = value;\n        }\n      });\n      \n      // Convert Map to array\n      const treeData = Array.from(nodes.values());\n      \n      // Find root nodes (nodes with no parent or parent not in dataset)\n      const allIds = new Set(treeData.map(d => d.id));\n      treeData.forEach(node => {\n        if (node.parent && !allIds.has(node.parent)) {\n          node.parent = \"\"; // Make it a root node if parent doesn't exist\n        }\n      });\n\n      // Calculate dynamic dimensions based on data size\n      const nodeCount = treeData.length;\n      const dynamicWidth = Math.max(600, Math.min(1200, nodeCount * 40));\n      const dynamicHeight = Math.max(400, Math.min(1600, nodeCount * 30));\n\n      // Use EXACT specification from taskpane.js tree chart\n      const spec = {\n        \"$schema\": \"https://vega.github.io/schema/vega/v6.json\",\n        \"description\": \"Tree diagram from Excel selection\",\n        \"width\": dynamicWidth,\n        \"height\": dynamicHeight,\n        \"padding\": 20,\n        \"background\": \"white\",\n        \"config\": { \"view\": { \"stroke\": \"transparent\" }},\n\n        \"signals\": [\n          {\n            \"name\": \"layout\", \n            \"value\": \"tidy\"\n          },\n          {\n            \"name\": \"links\", \n            \"value\": \"diagonal\"\n          }\n        ],\n\n        \"data\": [\n          {\n            \"name\": \"tree\",\n            \"values\": treeData,\n            \"transform\": [\n              {\n                \"type\": \"stratify\",\n                \"key\": \"id\",\n                \"parentKey\": \"parent\"\n              },\n              {\n                \"type\": \"tree\",\n                \"method\": {\"signal\": \"layout\"},\n                \"size\": [{\"signal\": \"height - 40\"}, {\"signal\": \"width - 100\"}],\n                \"as\": [\"y\", \"x\", \"depth\", \"children\"]\n              }\n            ]\n          },\n          {\n            \"name\": \"links\",\n            \"source\": \"tree\",\n            \"transform\": [\n              { \"type\": \"treelinks\" },\n              {\n                \"type\": \"linkpath\",\n                \"orient\": \"horizontal\",\n                \"shape\": {\"signal\": \"links\"}\n              }\n            ]\n          }\n        ],\n\n        \"scales\": [\n          {\n            \"name\": \"color\",\n            \"type\": \"ordinal\",\n            \"range\": [\"#0078d4\", \"#00bcf2\", \"#40e0d0\", \"#00cc6a\", \"#10893e\", \"#107c10\", \"#bad80a\", \"#ffb900\", \"#ff8c00\", \"#d13438\"],\n            \"domain\": {\"data\": \"tree\", \"field\": \"depth\"}\n          },\n          {\n            \"name\": \"size\",\n            \"type\": \"linear\",\n            \"range\": [100, 400],\n            \"domain\": {\"data\": \"tree\", \"field\": \"value\"}\n          }\n        ],\n\n        \"marks\": [\n          {\n            \"type\": \"path\",\n            \"from\": {\"data\": \"links\"},\n            \"encode\": {\n              \"update\": {\n                \"path\": {\"field\": \"path\"},\n                \"stroke\": {\"value\": \"#8a8886\"},\n                \"strokeWidth\": {\"value\": 2},\n                \"strokeOpacity\": {\"value\": 0.6}\n              }\n            }\n          },\n          {\n            \"type\": \"symbol\",\n            \"from\": {\"data\": \"tree\"},\n            \"encode\": {\n              \"enter\": {\n                \"stroke\": {\"value\": \"#ffffff\"},\n                \"strokeWidth\": {\"value\": 2}\n              },\n              \"update\": {\n                \"x\": {\"field\": \"x\"},\n                \"y\": {\"field\": \"y\"},\n                \"size\": {\"scale\": \"size\", \"field\": \"value\"},\n                \"fill\": {\"scale\": \"color\", \"field\": \"depth\"},\n                \"fillOpacity\": {\"value\": 0.8},\n                \"tooltip\": {\n                  \"signal\": \"{'Name': datum.name, 'ID': datum.id, 'Parent': datum.parent, 'Depth': datum.depth, 'Value': datum.value}\"\n                }\n              },\n              \"hover\": {\n                \"fillOpacity\": {\"value\": 1.0},\n                \"strokeWidth\": {\"value\": 3}\n              }\n            }\n          },\n          {\n            \"type\": \"text\",\n            \"from\": {\"data\": \"tree\"},\n            \"encode\": {\n              \"enter\": {\n                \"fontSize\": {\"value\": 11},\n                \"baseline\": {\"value\": \"middle\"},\n                \"font\": {\"value\": \"Segoe UI\"},\n                \"fontWeight\": {\"value\": \"bold\"}\n              },\n              \"update\": {\n                \"x\": {\"field\": \"x\"},\n                \"y\": {\"field\": \"y\"},\n                \"text\": {\"field\": \"name\"},\n                \"dx\": {\"signal\": \"datum.children ? -12 : 12\"},\n                \"align\": {\"signal\": \"datum.children ? 'right' : 'left'\"},\n                \"fill\": {\"value\": \"#323130\"}\n              }\n            }\n          }\n        ]\n      };\n      const chartId = `tree_${invocation.address.replace(/[^A-Za-z0-9]/g, \"_\")}`;\n      createChart(spec, \"tree\", chartId)\n        .then(() => resolve(\"Tree\"))\n        .catch((error) => resolve(`Error: ${error.message}`));\n\n    } catch (error) {\n      resolve(`Error: ${error.message}`);\n    }\n  });\n}\n\n/**\n * WORDCLOUD custom function\n * Creates a word cloud from Excel data range\n * \n * @customfunction\n * @requiresAddress\n * @param {any[][]} data The data range including headers\n * @param {CustomFunctions.Invocation} invocation Invocation object\n * @returns {string} Status message\n */\nfunction WORDCLOUD(data, invocation) {\n  return new Promise((resolve) => {\n    try {\n      if (!data || data.length < 2) {\n        resolve(\"Error: Need at least header row + one data row\");\n        return;\n      }\n\n      const headers = data[0];\n      const rows = data.slice(1);\n\n      if (headers.length < 1) {\n        resolve(\"Error: Wordcloud requires at least 1 column (Text data)\");\n        return;\n      }\n\n      // Convert rows -> objects (same as taskpane.js)\n      const processedData = rows.map(row => {\n        let obj = {};\n        headers.forEach((h, i) => {\n          obj[h] = row[i];\n        });\n        return obj;\n      });\n\n      // Use EXACT specification from taskpane.js wordcloud chart\n      const spec = {\n        $schema: \"https://vega.github.io/schema/vega/v5.json\",\n        description: \"Word cloud from Excel selection\",\n        width: 800,\n        height: 400,\n        padding: 0,\n        background: \"white\",\n        config: { view: { stroke: \"transparent\" }},\n        data: [\n          {\n            name: \"table\",\n            values: processedData,\n            transform: [\n              {\n                type: \"countpattern\",\n                field: headers[0], // Use first column as text source\n                case: \"upper\",\n                pattern: \"[\\\\w']{3,}\",\n                stopwords: \"(i|me|my|myself|we|us|our|ours|ourselves|you|your|yours|yourself|yourselves|he|him|his|himself|she|her|hers|herself|it|its|itself|they|them|their|theirs|themselves|what|which|who|whom|whose|this|that|these|those|am|is|are|was|were|be|been|being|have|has|had|having|do|does|did|doing|will|would|should|can|could|ought|i'm|you're|he's|she's|it's|we're|they're|i've|you've|we've|they've|i'd|you'd|he'd|she'd|we'd|they'd|i'll|you'll|he'll|she'll|we'll|they'll|isn't|aren't|wasn't|weren't|hasn't|haven't|hadn't|doesn't|don't|didn't|won't|wouldn't|shan't|shouldn't|can't|cannot|couldn't|mustn't|let's|that's|who's|what's|here's|there's|when's|where's|why's|how's|a|an|the|and|but|if|or|because|as|until|while|of|at|by|for|with|about|against|between|into|through|during|before|after|above|below|to|from|up|upon|down|in|out|on|off|over|under|again|further|then|once|here|there|when|where|why|how|all|any|both|each|few|more|most|other|some|such|no|nor|not|only|own|same|so|than|too|very|say|says|said|shall)\"\n              },\n              {\n                type: \"formula\", \n                as: \"angle\",\n                expr: \"[-45, 0, 45][~~(random() * 3)]\"\n              },\n              {\n                type: \"formula\", \n                as: \"weight\",\n                expr: \"if(datum.count > 10, 600, 300)\"\n              }\n            ]\n          }\n        ],\n        \n        scales: [\n          {\n            name: \"color\",\n            type: \"ordinal\",\n            domain: { data: \"table\", field: \"text\" },\n            range: [\"#d5a928\", \"#652c90\", \"#939597\", \"#2563eb\", \"#dc2626\", \"#059669\"]\n          }\n        ],\n        \n        marks: [\n          {\n            type: \"text\",\n            from: { data: \"table\" },\n            encode: {\n              enter: {\n                text: { field: \"text\" },\n                align: { value: \"center\" },\n                baseline: { value: \"alphabetic\" },\n                fill: { scale: \"color\", field: \"text\" }\n              },\n              update: {\n                fillOpacity: { value: 1 }\n              },\n              hover: {\n                fillOpacity: { value: 0.5 }\n              }\n            },\n            transform: [\n              {\n                type: \"wordcloud\",\n                size: [800, 400],\n                text: { field: \"text\" },\n                rotate: { field: \"datum.angle\" },\n                font: \"Helvetica Neue, Arial\",\n                fontSize: { field: \"datum.count\" },\n                fontWeight: { field: \"datum.weight\" },\n                fontSizeRange: [12, 56],\n                padding: 2\n              }\n            ]\n          }\n        ]\n      };\n      const chartId = `wordcloud_${invocation.address.replace(/[^A-Za-z0-9]/g, \"_\")}`;\n      createChart(spec, \"wordcloud\", chartId)\n        .then(() => resolve(\"Wordcloud\"))\n        .catch((error) => resolve(`Error: ${error.message}`));\n\n    } catch (error) {\n      resolve(`Error: ${error.message}`);\n    }\n  });\n}\n\n/**\n * STRIP custom function\n * Creates a strip plot from Excel data range\n * \n * @customfunction\n * @requiresAddress\n * @param {any[][]} data The data range including headers\n * @param {CustomFunctions.Invocation} invocation Invocation object\n * @returns {string} Status message\n */\nfunction STRIP(data, invocation) {\n  return new Promise((resolve) => {\n    try {\n      if (!data || data.length < 2) {\n        resolve(\"Error: Need at least header row + one data row\");\n        return;\n      }\n\n      const headers = data[0];\n      const rows = data.slice(1);\n\n      if (headers.length < 2) {\n        resolve(\"Error: Strip plot requires at least 2 columns (Categories, Values)\");\n        return;\n      }\n\n      // Convert rows -> objects (same as taskpane.js)\n      const processedData = rows.map(row => {\n        let obj = {};\n        headers.forEach((h, i) => {\n          obj[h] = row[i];\n        });\n        return obj;\n      });\n\n      // Use EXACT specification from taskpane.js strip chart\n      const spec = {\n        $schema: \"https://vega.github.io/schema/vega-lite/v6.json\",\n        description: \"Strip plot showing distribution using tick marks\",\n        background: \"white\",\n        config: { \n          view: { stroke: \"transparent\" },\n          axis: {\n            labelFontSize: 11,\n            titleFontSize: 12,\n            labelColor: \"#605E5C\",\n            titleColor: \"#323130\"\n          }\n        },\n        data: { values: processedData },\n        mark: {\n          type: \"tick\",\n          thickness: 2,\n          size: 15,\n          color: \"#0078d4\",\n          opacity: 0.8,\n          tooltip: true\n        },\n        encoding: {\n          y: { \n            field: headers[0],\n            type: \"ordinal\",\n            axis: {\n              title: headers[0],\n              labelAngle: 0\n            }\n          },\n          x: { \n            field: headers[1],\n            type: \"quantitative\",\n            axis: {\n              title: headers[1],\n              grid: true,\n              gridColor: \"#f3f2f1\",\n              gridOpacity: 0.5\n            }\n          },\n          // Add color encoding if 3rd column exists\n          ...(headers.length > 2 && {\n            color: {\n              field: headers[2],\n              type: \"nominal\",\n              scale: { scheme: \"category10\" },\n              legend: {\n                title: headers[2],\n                orient: \"right\",\n                titleFontSize: 11,\n                labelFontSize: 10\n              }\n            }\n          }),\n          tooltip: headers.map(h => ({ field: h, type: \"nominal\" }))\n        }\n      };\n      const chartId = `strip_${invocation.address.replace(/[^A-Za-z0-9]/g, \"_\")}`;\n      createChart(spec, \"strip\", chartId)\n        .then(() => resolve(\"Strip\"))\n        .catch((error) => resolve(`Error: ${error.message}`));\n\n    } catch (error) {\n      resolve(`Error: ${error.message}`);\n    }\n  });\n}\n\n/**\n * HEATMAP custom function\n * Creates a heatmap from Excel data range\n * \n * @customfunction\n * @requiresAddress\n * @param {any[][]} data The data range including headers\n * @param {CustomFunctions.Invocation} invocation Invocation object\n * @returns {string} Status message\n */\nfunction HEATMAP(data, invocation) {\n  return new Promise((resolve) => {\n    try {\n      if (!data || data.length < 2) {\n        resolve(\"Error: Need at least header row + one data row\");\n        return;\n      }\n\n      const headers = data[0];\n      const rows = data.slice(1);\n\n      if (headers.length < 3) {\n        resolve(\"Error: Heatmap requires 3 columns (Y-categories, X-categories, Values)\");\n        return;\n      }\n\n      // Convert rows -> objects (same as taskpane.js)\n      const processedData = rows.map(row => {\n        let obj = {};\n        headers.forEach((h, i) => {\n          obj[h] = row[i];\n        });\n        return obj;\n      });\n\n      // Use EXACT specification from taskpane.js heatmap chart\n      const spec = {\n        $schema: \"https://vega.github.io/schema/vega-lite/v5.json\",\n        description: \"Heatmap with marginal bars from Excel selection\",\n        background: \"white\",\n        config: { view: { stroke: \"transparent\" }},\n        data: { values: processedData },\n        spacing: 15,\n        bounds: \"flush\",\n        vconcat: [\n          {\n            height: 60,\n            mark: {\n              type: \"bar\",\n              stroke: null,\n              cornerRadiusEnd: 2,\n              tooltip: true,\n              color: \"lightgrey\"\n            },\n            encoding: {\n              x: {\n                field: headers[1],\n                type: \"ordinal\",\n                axis: null\n              },\n              y: {\n                field: headers[2],\n                aggregate: \"mean\",\n                type: \"quantitative\",\n                axis: null\n              }\n            }\n          },\n          {\n            spacing: 15,\n            bounds: \"flush\",\n            hconcat: [\n              {\n                mark: {\n                  type: \"rect\",\n                  stroke: \"white\",\n                  tooltip: true\n                },\n                encoding: {\n                  y: {\n                    field: headers[0],\n                    type: \"ordinal\",\n                    title: headers[0],\n                    axis: {\n                      domain: false,\n                      ticks: false,\n                      labels: true,\n                      labelAngle: 0,\n                      labelPadding: 5\n                    }\n                  },\n                  x: {\n                    field: headers[1],\n                    type: \"ordinal\",\n                    title: headers[1],\n                    axis: {\n                      domain: false,\n                      ticks: false,\n                      labels: true,\n                      labelAngle: 0\n                    }\n                  },\n                  color: {\n                    aggregate: \"mean\",\n                    field: headers[2],\n                    type: \"quantitative\",\n                    title: headers[2],\n                    scale: {\n                      scheme: \"blues\"\n                    },\n                    legend: {\n                      direction: \"vertical\",\n                      gradientLength: 120\n                    }\n                  }\n                }\n              },\n              {\n                mark: {\n                  type: \"bar\",\n                  stroke: null,\n                  cornerRadiusEnd: 2,\n                  tooltip: true,\n                  color: \"lightgrey\"\n                },\n                width: 60,\n                encoding: {\n                  y: {\n                    field: headers[0],\n                    type: \"ordinal\",\n                    axis: null\n                  },\n                  x: {\n                    field: headers[2],\n                    type: \"quantitative\",\n                    aggregate: \"mean\",\n                    axis: null\n                  }\n                }\n              }\n            ]\n          }\n        ],\n        config: {\n          autosize: {\n            type: \"fit\",\n            contains: \"padding\"\n          },\n          view: { stroke: \"transparent\" },\n          font: \"Segoe UI\",\n          text: { font: \"Segoe UI\", fontSize: 12, fill: \"#605E5C\" },\n          axis: {\n            ticks: false,\n            grid: false,\n            domain: false,\n            labelColor: \"#605E5C\",\n            labelFontSize: 12,\n            titleFontSize: 14,\n            titleColor: \"#323130\"\n          },\n          legend: {\n            titleFont: \"Segoe UI\",\n            titleFontWeight: \"bold\",\n            titleColor: \"#605E5C\",\n            labelFont: \"Segoe UI\",\n            labelFontSize: 12,\n            labelColor: \"#605E5C\"\n          }\n        }\n      };\n      const chartId = `heatmap_${invocation.address.replace(/[^A-Za-z0-9]/g, \"_\")}`;\n      createChart(spec, \"heatmap\", chartId)\n        .then(() => resolve(\"Heatmap\"))\n        .catch((error) => resolve(`Error: ${error.message}`));\n\n    } catch (error) {\n      resolve(`Error: ${error.message}`);\n    }\n  });\n}\n\n/**\n * BULLET custom function\n * Creates a bullet chart from Excel data range\n * \n * @customfunction\n * @requiresAddress\n * @param {any[][]} data The data range including headers\n * @param {CustomFunctions.Invocation} invocation Invocation object\n * @returns {string} Status message\n */\nfunction BULLET(data, invocation) {\n  return new Promise((resolve) => {\n    try {\n      if (!data || data.length < 2) {\n        resolve(\"Error: Need at least header row + one data row\");\n        return;\n      }\n\n      const headers = data[0];\n      const rows = data.slice(1);\n\n      if (headers.length < 7) {\n        resolve(\"Error: Bullet chart requires 7 columns (Title, Poor max, Satisfactory max, Good max, Actual, Forecast, Target)\");\n        return;\n      }\n\n      // Convert to bullet chart data format (same as taskpane.js)\n      const processedData = rows.map(r => ({\n        title: r[0],\n        ranges: [+r[1], +r[2], +r[3]],\n        measures: [+r[4], +r[5]],\n        markers: [+r[6]]\n      }));\n\n      // Use EXACT specification from taskpane.js bullet chart\n      const spec = {\n        \"$schema\": \"https://vega.github.io/schema/vega-lite/v6.json\",\n        background: \"white\",\n        config: { view: { stroke: \"transparent\" }},\n        \"data\": { \"values\": processedData },\n        \"facet\": {\n          \"row\": {\n            \"field\": \"title\", \"type\": \"ordinal\",\n            \"header\": { \"labelAngle\": 0, \"title\": \"\", \"labelAlign\": \"left\" }\n          }\n        },\n        \"spacing\": 10,\n        \"spec\": {\n          \"encoding\": {\n            \"x\": {\n              \"type\": \"quantitative\",\n              \"scale\": { \"nice\": false },\n              \"title\": null\n            }\n          },\n          \"layer\": [\n            { \"mark\": { \"type\": \"bar\", \"color\": \"#eee\" }, \"encoding\": { \"x\": { \"field\": \"ranges[2]\" } } },\n            { \"mark\": { \"type\": \"bar\", \"color\": \"#ddd\" }, \"encoding\": { \"x\": { \"field\": \"ranges[1]\" } } },\n            { \"mark\": { \"type\": \"bar\", \"color\": \"#ccc\" }, \"encoding\": { \"x\": { \"field\": \"ranges[0]\" } } },\n            { \"mark\": { \"type\": \"bar\", \"color\": \"lightsteelblue\", \"size\": 10 }, \"encoding\": { \"x\": { \"field\": \"measures[1]\" } } },\n            { \"mark\": { \"type\": \"bar\", \"color\": \"steelblue\", \"size\": 10 }, \"encoding\": { \"x\": { \"field\": \"measures[0]\" } } },\n            { \"mark\": { \"type\": \"tick\", \"color\": \"black\" }, \"encoding\": { \"x\": { \"field\": \"markers[0]\" } } }\n          ]\n        },\n        \"resolve\": { \"scale\": { \"x\": \"independent\" } },\n        \"config\": { \"tick\": { \"thickness\": 2 }, \"scale\": { \"barBandPaddingInner\": 0 } }\n      };\n      const chartId = `bullet_${invocation.address.replace(/[^A-Za-z0-9]/g, \"_\")}`;\n      createChart(spec, \"bullet\", chartId)\n        .then(() => resolve(\"Bullet\"))\n        .catch((error) => resolve(`Error: ${error.message}`));\n\n    } catch (error) {\n      resolve(`Error: ${error.message}`);\n    }\n  });\n}\n\n/**\n * HORIZON custom function\n * Creates a horizon chart from Excel data range\n * \n * @customfunction\n * @requiresAddress\n * @param {any[][]} data The data range including headers\n * @param {CustomFunctions.Invocation} invocation Invocation object\n * @returns {string} Status message\n */\nfunction HORIZON(data, invocation) {\n  return new Promise((resolve) => {\n    try {\n      if (!data || data.length < 2) {\n        resolve(\"Error: Need at least header row + one data row\");\n        return;\n      }\n\n      const headers = data[0];\n      const rows = data.slice(1);\n\n      if (headers.length < 2) {\n        resolve(\"Error: Horizon chart requires 2 columns (X values, Y values)\");\n        return;\n      }\n\n      // Convert rows -> objects and transform data (same as taskpane.js)\n      const horizonData = rows.map((row, index) => ({\n        x: row[0] || index + 1,\n        y: parseFloat(row[1]) || 0\n      }));\n\n      // Calculate data range and bands (same as taskpane.js)\n      const yValues = horizonData.map(d => d.y);\n      const maxY = Math.max(...yValues);\n      const minY = Math.min(...yValues);\n      const range = maxY - minY;\n      \n      // Define number of bands (typically 2-4 for horizon graphs)\n      const numBands = 3;\n      const bandHeight = range / (numBands * 2); // Divide by 2 for positive and negative\n      const baseline = minY + range / 2; // Use middle as baseline\n      \n      // Calculate dynamic dimensions\n      const dataPoints = horizonData.length;\n      const dynamicWidth = Math.max(300, Math.min(800, dataPoints * 15));\n\n      // Use EXACT specification from taskpane.js horizon chart\n      const spec = {\n        \"$schema\": \"https://vega.github.io/schema/vega-lite/v6.json\",\n        \"description\": \"Horizon Graph from Excel selection (IDL methodology)\",\n        \"width\": dynamicWidth,\n        \"height\": 60,\n        \"background\": \"white\",\n        \"config\": { \n          \"view\": { \"stroke\": \"transparent\" },\n          \"area\": {\"interpolate\": \"monotone\"}\n        },\n        \"data\": { \"values\": horizonData },\n        \"encoding\": {\n          \"x\": {\n            \"field\": \"x\",\n            \"type\": headers[0].toLowerCase().includes('date') ? \"temporal\" : \"quantitative\",\n            \"scale\": {\"zero\": false, \"nice\": false},\n            \"axis\": {\n              \"title\": headers[0],\n              \"labelFontSize\": 10,\n              \"titleFontSize\": 12,\n              \"labelColor\": \"#605e5c\",\n              \"titleColor\": \"#323130\",\n              \"font\": \"Segoe UI\"\n            }\n          },\n          \"y\": {\n            \"type\": \"quantitative\",\n            \"scale\": {\"domain\": [0, bandHeight]},\n            \"axis\": {\n              \"title\": headers[1],\n              \"orient\": \"left\",\n              \"labelFontSize\": 10,\n              \"titleFontSize\": 12,\n              \"labelColor\": \"#605e5c\",\n              \"titleColor\": \"#323130\",\n              \"font\": \"Segoe UI\",\n              \"tickCount\": 3\n            }\n          }\n        },\n        \"layer\": [\n          // Band 1 (lightest positive)\n          {\n            \"transform\": [\n              {\"calculate\": `max(0, min(datum.y - ${baseline}, ${bandHeight}))`, \"as\": \"band1\"}\n            ],\n            \"mark\": {\n              \"type\": \"area\",\n              \"clip\": true,\n              \"opacity\": 0.3,\n              \"color\": \"#4a90e2\",\n              \"interpolate\": \"monotone\"\n            },\n            \"encoding\": {\n              \"y\": {\"field\": \"band1\"}\n            }\n          },\n          // Band 2 (medium positive)\n          {\n            \"transform\": [\n              {\"calculate\": `max(0, min(datum.y - ${baseline} - ${bandHeight}, ${bandHeight}))`, \"as\": \"band2\"}\n            ],\n            \"mark\": {\n              \"type\": \"area\",\n              \"clip\": true,\n              \"opacity\": 0.6,\n              \"color\": \"#2e7bd6\",\n              \"interpolate\": \"monotone\"\n            },\n            \"encoding\": {\n              \"y\": {\"field\": \"band2\"}\n            }\n          },\n          // Band 3 (darkest positive)\n          {\n            \"transform\": [\n              {\"calculate\": `max(0, datum.y - ${baseline} - ${bandHeight * 2})`, \"as\": \"band3\"}\n            ],\n            \"mark\": {\n              \"type\": \"area\",\n              \"clip\": true,\n              \"opacity\": 0.9,\n              \"color\": \"#1a5bb8\",\n              \"interpolate\": \"monotone\"\n            },\n            \"encoding\": {\n              \"y\": {\"field\": \"band3\"}\n            }\n          },\n          // Band -1 (lightest negative, mirrored)\n          {\n            \"transform\": [\n              {\"calculate\": `max(0, min(${baseline} - datum.y, ${bandHeight}))`, \"as\": \"nband1\"}\n            ],\n            \"mark\": {\n              \"type\": \"area\",\n              \"clip\": true,\n              \"opacity\": 0.3,\n              \"color\": \"#e74c3c\",\n              \"interpolate\": \"monotone\"\n            },\n            \"encoding\": {\n              \"y\": {\"field\": \"nband1\"}\n            }\n          },\n          // Band -2 (medium negative, mirrored)\n          {\n            \"transform\": [\n              {\"calculate\": `max(0, min(${baseline} - datum.y - ${bandHeight}, ${bandHeight}))`, \"as\": \"nband2\"}\n            ],\n            \"mark\": {\n              \"type\": \"area\",\n              \"clip\": true,\n              \"opacity\": 0.6,\n              \"color\": \"#c0392b\",\n              \"interpolate\": \"monotone\"\n            },\n            \"encoding\": {\n              \"y\": {\"field\": \"nband2\"}\n            }\n          },\n          // Band -3 (darkest negative, mirrored)\n          {\n            \"transform\": [\n              {\"calculate\": `max(0, ${baseline} - datum.y - ${bandHeight * 2})`, \"as\": \"nband3\"}\n            ],\n            \"mark\": {\n              \"type\": \"area\",\n              \"clip\": true,\n              \"opacity\": 0.9,\n              \"color\": \"#a93226\",\n              \"interpolate\": \"monotone\"\n            },\n            \"encoding\": {\n              \"y\": {\"field\": \"nband3\"}\n            }\n          }\n        ]\n      };\n      const chartId = `horizon_${invocation.address.replace(/[^A-Za-z0-9]/g, \"_\")}`;\n      createChart(spec, \"horizon\", chartId)\n        .then(() => resolve(\"Horizon\"))\n        .catch((error) => resolve(`Error: ${error.message}`));\n\n    } catch (error) {\n      resolve(`Error: ${error.message}`);\n    }\n  });\n}\n\n/**\n * DUMBBELL custom function\n * Creates a dumbbell chart from Excel data range\n * \n * @customfunction\n * @requiresAddress\n * @param {any[][]} data The data range including headers\n * @param {CustomFunctions.Invocation} invocation Invocation object\n * @returns {string} Status message\n */\nfunction DUMBBELL(data, invocation) {\n  return new Promise((resolve) => {\n    try {\n      if (!data || data.length < 2) {\n        resolve(\"Error: Need at least header row + one data row\");\n        return;\n      }\n\n      const headers = data[0];\n      const rows = data.slice(1);\n\n      if (headers.length < 3) {\n        resolve(\"Error: Dumbbell chart requires 3 columns: Category, Value 1, Value 2\");\n        return;\n      }\n\n      // Convert rows -> objects\n      const processedData = rows.map(row => {\n        let obj = {};\n        headers.forEach((h, i) => {\n          obj[h] = row[i];\n        });\n        return obj;\n      });\n\n      // Transform wide data (Category | Value1 | Value2) to long format for Vega-Lite\n      const dumbellData = [];\n      \n      processedData.forEach(row => {\n        const category = row[headers[0]];\n        const value1 = parseFloat(row[headers[1]]) || 0;\n        const value2 = parseFloat(row[headers[2]]) || 0;\n        \n        // Add both data points for each category\n        dumbellData.push({\n          category: category,\n          period: headers[1], // First value label\n          value: value1\n        });\n        \n        dumbellData.push({\n          category: category,\n          period: headers[2], // Second value label  \n          value: value2\n        });\n      });\n\n      // Calculate dynamic dimensions based on number of categories\n      const categories = [...new Set(processedData.map(d => d[headers[0]]))];\n      const categoryCount = categories.length;\n      \n      // Auto-adjust height and padding based on category count\n      let dynamicHeight, paddingInner, paddingOuter;\n      \n      if (categoryCount <= 3) {\n        // Few categories: smaller height, minimal padding\n        dynamicHeight = Math.max(200, categoryCount * 80);\n        paddingInner = 0.3;\n        paddingOuter = 0.2;\n      } else if (categoryCount <= 6) {\n        // Medium categories: moderate height and padding\n        dynamicHeight = Math.max(300, categoryCount * 60);\n        paddingInner = 0.2;\n        paddingOuter = 0.1;\n      } else {\n        // Many categories: larger height, tight padding\n        dynamicHeight = Math.max(400, Math.min(600, categoryCount * 50));\n        paddingInner = 0.1;\n        paddingOuter = 0.05;\n      }\n\n      // Use EXACT specification matching taskpane.js\n      const spec = {\n        $schema: \"https://vega.github.io/schema/vega-lite/v6.json\",\n        description: \"Dumbbell chart from Excel selection\",\n        background: \"white\",\n        config: { view: { stroke: \"transparent\" }},\n        width: 500,\n        height: dynamicHeight,\n        data: { values: dumbellData },\n        encoding: {\n          x: { \n            field: \"value\", \n            type: \"quantitative\", \n            title: null,\n            scale: { zero: false },\n            axis: {\n              labelFontSize: 12,\n              labelColor: \"#605e5c\",\n              grid: true,\n              gridColor: \"#f3f2f1\",\n              labelAlign: \"center\"\n            }\n          },\n          y: { \n            field: \"category\", \n            type: \"nominal\", \n            title: null,\n            scale: { paddingInner: paddingInner, paddingOuter: paddingOuter },\n            axis: {\n              offset: 5,\n              ticks: false,\n              minExtent: 70,\n              domain: false,\n              labelFontSize: 12,\n              labelColor: \"#605e5c\"\n            }\n          }\n        },\n        layer: [\n          {\n            mark: \"line\",\n            encoding: {\n              detail: { field: \"category\", type: \"nominal\" },\n              color: { value: \"#d1d5db\" }\n            }\n          },\n          {\n            mark: { \n              type: \"point\", \n              filled: true,\n              tooltip: true\n            },\n            encoding: {\n              color: { \n                field: \"period\", \n                type: \"ordinal\",\n                scale: {\n                  domain: [headers[1], headers[2]],\n                  range: [\"#87ceeb\", \"#1e3a8a\"]\n                },\n                title: \"Measure\",\n                legend: {\n                  titleFontSize: 12,\n                  labelFontSize: 11,\n                  titleColor: \"#323130\",\n                  labelColor: \"#605e5c\"\n                }\n              },\n              size: { value: 100 },\n              opacity: { value: 1 },\n              tooltip: [\n                { field: \"category\", type: \"nominal\", title: \"Category\" },\n                { field: \"period\", type: \"nominal\", title: \"Measure\" },\n                { field: \"value\", type: \"quantitative\", title: \"Value\", format: \",.1f\" }\n              ]\n            }\n          }\n        ],\n        config: {\n          font: \"Segoe UI\",\n          axis: {\n            labelColor: \"#605e5c\",\n            titleColor: \"#323130\",\n            gridColor: \"#f3f2f1\"\n          },\n          legend: {\n            titleColor: \"#323130\",\n            labelColor: \"#605e5c\"\n          }\n        }\n      };\n      const chartId = `dumbbell_${invocation.address.replace(/[^A-Za-z0-9]/g, \"_\")}`;\n      createChart(spec, \"dumbbell\", chartId)\n        .then(() => resolve(\"Dumbbell\"))\n        .catch((error) => resolve(`Error: ${error.message}`));\n\n    } catch (error) {\n      resolve(`Error: ${error.message}`);\n    }\n  });\n}\n\n/**\n * SLOPE custom function\n * Creates a slope chart from Excel data range\n * \n * @customfunction\n * @requiresAddress\n * @param {any[][]} data The data range including headers\n * @param {CustomFunctions.Invocation} invocation Invocation object\n * @returns {string} Status message\n */\nfunction SLOPE(data, invocation) {\n  return new Promise((resolve) => {\n    try {\n      if (!data || data.length < 2) {\n        resolve(\"Error: Need at least header row + one data row\");\n        return;\n      }\n\n      const headers = data[0];\n      const rows = data.slice(1);\n\n      if (headers.length < 3) {\n        resolve(\"Error: Slope chart requires 3 columns (Time Period, Category, Value)\");\n        return;\n      }\n\n      // Convert rows -> objects (same as taskpane.js)\n      const processedData = rows.map(row => {\n        let obj = {};\n        headers.forEach((h, i) => {\n          obj[h] = row[i];\n        });\n        return obj;\n      });\n\n      const timePeriods = [...new Set(processedData.map(d => d[headers[0]]))];\n      const categories = [...new Set(processedData.map(d => d[headers[1]]))];\n      \n      // Filter data for first and last periods only (same as taskpane.js)\n      const firstPeriod = timePeriods[0];\n      const lastPeriod = timePeriods[timePeriods.length - 1];\n      \n      const slopeData = processedData.filter(d => \n        d[headers[0]] === firstPeriod || d[headers[0]] === lastPeriod\n      );\n\n      // Check if values are percentages (between -1 and 1)\n      const allValues = slopeData.map(d => d[headers[2]]);\n      const isPercentage = allValues.every(v => v >= -1 && v <= 1);\n      const formatString = isPercentage ? \".1%\" : \",.0f\";\n\n      // Calculate dynamic dimensions based on number of categories\n      const dynamicHeight = Math.max(300, Math.min(600, categories.length * 40));\n      const dynamicWidth = 500;\n\n      // Use EXACT specification from taskpane.js slope chart\n      const spec = {\n        $schema: \"https://vega.github.io/schema/vega-lite/v6.json\",\n        description: \"Slope chart from Excel selection\",\n        background: \"white\",\n        config: { \n          view: { stroke: \"transparent\" },\n          autosize: { type: \"fit\", contains: \"padding\" }\n        },\n        width: dynamicWidth,\n        height: dynamicHeight,\n        data: { values: slopeData },\n        encoding: {\n          x: {\n            field: headers[0],\n            type: \"ordinal\",\n            axis: {\n              title: null,\n              labelFontSize: 14,\n              labelFontWeight: \"bold\",\n              labelPadding: 10,\n              domain: false,\n              ticks: false,\n              labelColor: \"#323130\"\n            },\n            scale: { padding: 0.1 }\n          },\n          y: {\n            field: headers[2],\n            type: \"quantitative\",\n            axis: null,\n            scale: { zero: false }\n          },\n          color: {\n            field: headers[1],\n            type: \"nominal\",\n            legend: null,\n            scale: { scheme: \"category10\" }\n          }\n        },\n        layer: [\n          // Background grid lines\n          {\n            mark: {\n              type: \"rule\",\n              strokeDash: [2, 2],\n              opacity: 0.3\n            },\n            data: { values: [{}] },\n            encoding: {\n              x: { datum: firstPeriod },\n              x2: { datum: lastPeriod },\n              y: { value: 0 },\n              color: { value: \"#e0e0e0\" }\n            }\n          },\n          // Slope lines\n          {\n            mark: {\n              type: \"line\",\n              strokeWidth: 2,\n              opacity: 0.7,\n              tooltip: true\n            },\n            encoding: {\n              detail: { field: headers[1], type: \"nominal\" },\n              tooltip: [\n                { field: headers[1], type: \"nominal\", title: \"Category\" },\n                { field: headers[0], type: \"nominal\", title: \"Period\" },\n                { field: headers[2], type: \"quantitative\", title: \"Value\", format: formatString }\n              ]\n            }\n          },\n          // Points at the ends\n          {\n            mark: {\n              type: \"circle\",\n              size: 100,\n              opacity: 1,\n              tooltip: true\n            }\n          },\n          // Left side value labels\n          {\n            transform: [\n              { filter: `datum['${headers[0]}'] == '${firstPeriod}'` }\n            ],\n            mark: {\n              type: \"text\",\n              align: \"right\",\n              baseline: \"middle\",\n              dx: -8,\n              fontSize: 11,\n              fontWeight: \"normal\"\n            },\n            encoding: {\n              text: { \n                field: headers[2], \n                type: \"quantitative\",\n                format: formatString\n              }\n            }\n          },\n          // Left side category labels (for top values)\n          {\n            transform: [\n              { filter: `datum['${headers[0]}'] == '${firstPeriod}'` },\n              {\n                window: [{ op: \"rank\", as: \"rank\" }],\n                sort: [{ field: headers[2], order: \"descending\" }]\n              },\n              { filter: \"datum.rank <= 3\" }\n            ],\n            mark: {\n              type: \"text\",\n              align: \"right\",\n              baseline: \"bottom\",\n              dx: -8,\n              dy: -12,\n              fontSize: 10,\n              fontWeight: \"bold\",\n              fontStyle: \"italic\"\n            },\n            encoding: {\n              text: { field: headers[1], type: \"nominal\" }\n            }\n          },\n          // Right side value labels\n          {\n            transform: [\n              { filter: `datum['${headers[0]}'] == '${lastPeriod}'` }\n            ],\n            mark: {\n              type: \"text\",\n              align: \"left\",\n              baseline: \"middle\",\n              dx: 8,\n              fontSize: 11,\n              fontWeight: \"normal\"\n            },\n            encoding: {\n              text: { \n                field: headers[2], \n                type: \"quantitative\",\n                format: formatString\n              }\n            }\n          },\n          // Right side category labels\n          {\n            transform: [\n              { filter: `datum['${headers[0]}'] == '${lastPeriod}'` }\n            ],\n            mark: {\n              type: \"text\",\n              align: \"left\",\n              baseline: \"middle\",\n              dx: 35,\n              fontSize: 10,\n              fontWeight: \"bold\"\n            },\n            encoding: {\n              text: { field: headers[1], type: \"nominal\" }\n            }\n          }\n        ],\n        config: {\n          view: { stroke: \"transparent\" },\n          font: \"Segoe UI\",\n          text: { \n            font: \"Segoe UI\", \n            fontSize: 11, \n            fill: \"#605E5C\" \n          },\n          axis: {\n            labelColor: \"#605e5c\",\n            titleColor: \"#323130\",\n            gridColor: \"#f3f2f1\"\n          }\n        }\n      };\n      const chartId = `slope_${invocation.address.replace(/[^A-Za-z0-9]/g, \"_\")}`;\n      createChart(spec, \"slope\", chartId)\n        .then(() => resolve(\"Slope\"))\n        .catch((error) => resolve(`Error: ${error.message}`));\n\n    } catch (error) {\n      resolve(`Error: ${error.message}`);\n    }\n  });\n}\n\n/**\n * MEKKO custom function\n * Creates a Mekko chart from Excel data range\n * \n * @customfunction\n * @requiresAddress\n * @param {any[][]} data The data range including headers\n * @param {CustomFunctions.Invocation} invocation Invocation object\n * @returns {string} Status message\n */\nfunction MEKKO(data, invocation) {\n  return new Promise((resolve) => {\n    try {\n      if (!data || data.length < 2) {\n        resolve(\"Error: Need at least header row + one data row\");\n        return;\n      }\n\n      const headers = data[0];\n      const rows = data.slice(1);\n\n      if (headers.length < 3) {\n        resolve(\"Error: Mekko chart requires 3 columns (Category, Subcategory, Value)\");\n        return;\n      }\n\n      // Convert rows -> objects (same as taskpane.js)\n      const processedData = rows.map(row => {\n        let obj = {};\n        headers.forEach((h, i) => {\n          obj[h] = row[i];\n        });\n        return obj;\n      });\n\n      // Use EXACT specification from taskpane.js mekko chart\n      const spec = {\n        $schema: \"https://vega.github.io/schema/vega/v5.json\",\n        description: \"Mekko chart from Excel selection\",\n        width: 800,\n        height: 500,\n        background: \"white\",\n        config: { view: { stroke: \"transparent\" }},\n        view: { stroke: null },\n        padding: { top: 60, bottom: 80, left: 60, right: 60 },\n        data: [\n          {\n            name: \"table\",\n            values: processedData\n          },\n          {\n            name: \"categories\",\n            source: \"table\",\n            transform: [\n              {\n                type: \"aggregate\",\n                fields: [headers[2]],\n                ops: [\"sum\"],\n                as: [\"categoryTotal\"],\n                groupby: [headers[0]]\n              },\n              {\n                type: \"stack\",\n                offset: \"normalize\",\n                sort: { field: \"categoryTotal\", order: \"descending\" },\n                field: \"categoryTotal\",\n                as: [\"x0\", \"x1\"]\n              },\n              {\n                type: \"formula\",\n                as: \"Percent\",\n                expr: \"datum.x1-datum.x0\"\n              },\n              {\n                type: \"formula\",\n                as: \"Label\",\n                expr: `datum.${headers[0]} + ' (' + format(datum.Percent,'.1%') + ')'`\n              }\n            ]\n          },\n          {\n            name: \"finalTable\",\n            source: \"table\",\n            transform: [\n              {\n                type: \"stack\",\n                offset: \"normalize\",\n                groupby: [headers[0]],\n                sort: { field: headers[2], order: \"descending\" },\n                field: headers[2],\n                as: [\"y0\", \"y1\"]\n              },\n              {\n                type: \"stack\",\n                groupby: [headers[0]],\n                sort: { field: headers[2], order: \"descending\" },\n                field: headers[2],\n                as: [\"z0\", \"z1\"]\n              },\n              {\n                type: \"lookup\",\n                from: \"categories\",\n                key: headers[0],\n                values: [\"x0\", \"x1\"],\n                fields: [headers[0]]\n              },\n              {\n                type: \"formula\",\n                as: \"Percent\",\n                expr: \"datum.y1-datum.y0\"\n              },\n              {\n                type: \"formula\",\n                as: \"Label\",\n                expr: `[datum.${headers[1]}, format(datum.${headers[2]}, '.0f') + ' (' + format(datum.Percent, '.1%') + ')']`\n              },\n              {\n                type: \"window\",\n                sort: { field: \"y0\", order: \"ascending\" },\n                ops: [\"row_number\"],\n                fields: [null],\n                as: [\"rank\"],\n                groupby: [headers[0]]\n              }\n            ]\n          }\n        ],\n        scales: [\n          {\n            name: \"x\",\n            type: \"linear\",\n            range: \"width\",\n            domain: { data: \"finalTable\", field: \"x1\" }\n          },\n          {\n            name: \"y\",\n            type: \"linear\",\n            range: \"height\",\n            nice: false,\n            zero: true,\n            domain: { data: \"finalTable\", field: \"z1\" }\n          },\n          {\n            name: \"opacity\",\n            type: \"linear\",\n            range: [1, 0.6],\n            domain: { data: \"finalTable\", field: \"rank\" }\n          },\n          {\n            name: \"color\",\n            type: \"ordinal\",\n            range: { scheme: \"category20\" },\n            domain: {\n              data: \"categories\",\n              field: headers[0],\n              sort: { field: \"x0\", order: \"ascending\", op: \"sum\" }\n            }\n          }\n        ],\n        axes: [\n          {\n            orient: \"left\",\n            scale: \"y\",\n            zindex: 1,\n            format: \"\",\n            tickCount: 5,\n            tickSize: 15,\n            labelColor: { value: \"#333740\" },\n            labelFontWeight: { value: \"normal\" },\n            labelFontSize: { value: 12 },\n            labelFont: { value: \"Segoe UI\" },\n            offset: 5,\n            domain: false,\n            encode: {\n              labels: {\n                update: {\n                  text: { signal: `format(datum.value, '.0f')` }\n                }\n              }\n            }\n          }\n        ],\n        marks: [\n          {\n            type: \"rect\",\n            name: \"bars\",\n            from: { data: \"finalTable\" },\n            encode: {\n              update: {\n                x: { scale: \"x\", field: \"x0\" },\n                x2: { scale: \"x\", field: \"x1\" },\n                y: { scale: \"y\", field: \"z0\" },\n                y2: { scale: \"y\", field: \"z1\" },\n                fill: { scale: \"color\", field: headers[0] },\n                stroke: { value: \"white\" },\n                strokeWidth: { value: 1 },\n                fillOpacity: { scale: \"opacity\", field: \"rank\" },\n                tooltip: { signal: \"datum\" }\n              }\n            }\n          },\n          {\n            type: \"text\",\n            name: \"labels\",\n            interactive: false,\n            from: { data: \"bars\" },\n            encode: {\n              update: {\n                x: { signal: \"(datum.x2 - datum.x)*0.5 + datum.x\" },\n                align: { value: \"center\" },\n                text: { field: \"datum.Label\" },\n                y: { signal: \"(datum.y2 - datum.y)*0.5 + datum.y\" },\n                fill: { value: \"white\" },\n                font: { value: \"Segoe UI\" },\n                lineHeight: { value: 12 },\n                fontSize: { value: 10 },\n                opacity: { signal: \"(datum.x2 - datum.x) > 0.05 && (datum.y2 - datum.y) > 20 ? 1 : 0\" }\n              }\n            }\n          },\n          {\n            type: \"text\",\n            name: \"categoryLabels\",\n            from: { data: \"categories\" },\n            encode: {\n              update: {\n                x: { scale: \"x\", signal: \"(datum.x1-datum.x0)/2 + datum.x0\" },\n                y: { signal: \"-15\" },\n                text: { field: headers[0] },\n                align: { value: \"center\" },\n                baseline: { value: \"bottom\" },\n                fill: { value: \"#333740\" },\n                fontWeight: { value: \"bold\" },\n                fontSize: { value: 12 },\n                font: { value: \"Segoe UI\" }\n              }\n            }\n          },\n          {\n            type: \"text\",\n            name: \"categoryPercentages\",\n            from: { data: \"categories\" },\n            encode: {\n              update: {\n                x: { scale: \"x\", signal: \"(datum.x1-datum.x0)/2 + datum.x0\" },\n                y: { signal: \"height + 30\" },\n                text: { field: \"Label\" },\n                align: { value: \"center\" },\n                baseline: { value: \"top\" },\n                fill: { value: \"#666666\" },\n                fontWeight: { value: \"normal\" },\n                fontSize: { value: 10 },\n                font: { value: \"Segoe UI\" }\n              }\n            }\n          }\n        ]\n      };\n      const chartId = `mekko_${invocation.address.replace(/[^A-Za-z0-9]/g, \"_\")}`;\n      createChart(spec, \"mekko\", chartId)\n        .then(() => resolve(\"Mekko\"))\n        .catch((error) => resolve(`Error: ${error.message}`));\n\n    } catch (error) {\n      resolve(`Error: ${error.message}`);\n    }\n  });\n}\n\n/**\n * MARIMEKKO custom function\n * Creates a marimekko chart from Excel data range\n * \n * @customfunction\n * @requiresAddress\n * @param {any[][]} data The data range including headers\n * @param {CustomFunctions.Invocation} invocation Invocation object\n * @returns {string} Status message\n */\nfunction MARIMEKKO(data, invocation) {\n  return new Promise((resolve) => {\n    try {\n      if (!data || data.length < 2) {\n        resolve(\"Error: Need at least header row + one data row\");\n        return;\n      }\n\n      const headers = data[0];\n      const rows = data.slice(1);\n\n      if (headers.length < 3) {\n        resolve(\"Error: Marimekko chart requires at least 3 columns: Category, Subcategory, Value\");\n        return;\n      }\n\n      // Convert rows -> objects (same as taskpane.js)\n      const processedData = rows.map(row => {\n        let obj = {};\n        headers.forEach((h, i) => {\n          obj[h] = row[i];\n        });\n        return obj;\n      });\n\n      // Use EXACT specification from taskpane.js marimekko chart\n      const spec = {\n        \"$schema\": \"https://vega.github.io/schema/vega/v5.json\",\n        \"description\": \"Marimekko Chart from Excel selection\",\n        \"width\": 600,\n        \"height\": 400,\n        \"background\": \"white\",\n        \"config\": { \"view\": { \"stroke\": \"transparent\" }},\n        \"padding\": { \"top\": 30, \"bottom\": 60, \"left\": 60, \"right\": 60 },\n        \"data\": [\n          {\n            \"name\": \"table\",\n            \"values\": processedData,\n            \"transform\": [\n              {\n                \"type\": \"formula\",\n                \"as\": \"Category\",\n                \"expr\": `datum['${headers[0]}']`\n              },\n              {\n                \"type\": \"formula\", \n                \"as\": \"Subcategory\",\n                \"expr\": `datum['${headers[1]}']`\n              },\n              {\n                \"type\": \"formula\",\n                \"as\": \"Value\", \n                \"expr\": `datum['${headers[2]}']`\n              }\n            ]\n          },\n          {\n            \"name\": \"categories\",\n            \"source\": \"table\",\n            \"transform\": [\n              {\n                \"type\": \"aggregate\",\n                \"fields\": [\"Value\"],\n                \"ops\": [\"sum\"],\n                \"as\": [\"categoryTotal\"],\n                \"groupby\": [\"Category\"]\n              },\n              {\n                \"type\": \"stack\",\n                \"offset\": \"normalize\",\n                \"sort\": { \"field\": \"categoryTotal\", \"order\": \"descending\" },\n                \"field\": \"categoryTotal\",\n                \"as\": [\"x0\", \"x1\"]\n              },\n              {\n                \"type\": \"formula\",\n                \"as\": \"Percent\",\n                \"expr\": \"datum.x1 - datum.x0\"\n              }\n            ]\n          },\n          {\n            \"name\": \"finalTable\",\n            \"source\": \"table\",\n            \"transform\": [\n              {\n                \"type\": \"stack\",\n                \"offset\": \"normalize\",\n                \"groupby\": [\"Category\"],\n                \"sort\": { \"field\": \"Value\", \"order\": \"descending\" },\n                \"field\": \"Value\",\n                \"as\": [\"y0\", \"y1\"]\n              },\n              {\n                \"type\": \"lookup\",\n                \"from\": \"categories\",\n                \"key\": \"Category\",\n                \"values\": [\"x0\", \"x1\"],\n                \"fields\": [\"Category\"]\n              },\n              {\n                \"type\": \"formula\",\n                \"as\": \"Percent\",\n                \"expr\": \"datum.y1 - datum.y0\"\n              }\n            ]\n          }\n        ],\n        \"scales\": [\n          {\n            \"name\": \"x\",\n            \"type\": \"linear\",\n            \"range\": \"width\",\n            \"domain\": { \"data\": \"finalTable\", \"field\": \"x1\" }\n          },\n          {\n            \"name\": \"y\",\n            \"type\": \"linear\",\n            \"range\": \"height\",\n            \"nice\": false,\n            \"zero\": true,\n            \"domain\": { \"data\": \"finalTable\", \"field\": \"y1\" }\n          },\n          {\n            \"name\": \"color\",\n            \"type\": \"ordinal\",\n            \"range\": { \"scheme\": \"category10\" },\n            \"domain\": {\n              \"data\": \"categories\",\n              \"field\": \"Category\",\n              \"sort\": { \"field\": \"x0\", \"order\": \"ascending\", \"op\": \"sum\" }\n            }\n          }\n        ],\n        \"axes\": [\n          {\n            \"orient\": \"left\",\n            \"scale\": \"y\",\n            \"format\": \"%\",\n            \"tickCount\": 5,\n            \"labelColor\": \"#333333\",\n            \"labelFontSize\": 11,\n            \"domain\": false\n          },\n          {\n            \"orient\": \"bottom\",\n            \"scale\": \"x\",\n            \"format\": \"%\",\n            \"tickCount\": 5,\n            \"labelColor\": \"#333333\", \n            \"labelFontSize\": 11,\n            \"domain\": false\n          }\n        ],\n        \"marks\": [\n          {\n            \"type\": \"rect\",\n            \"name\": \"bars\",\n            \"from\": { \"data\": \"finalTable\" },\n            \"encode\": {\n              \"update\": {\n                \"x\": { \"scale\": \"x\", \"field\": \"x0\" },\n                \"x2\": { \"scale\": \"x\", \"field\": \"x1\" },\n                \"y\": { \"scale\": \"y\", \"field\": \"y0\" },\n                \"y2\": { \"scale\": \"y\", \"field\": \"y1\" },\n                \"fill\": { \"scale\": \"color\", \"field\": \"Category\" },\n                \"stroke\": { \"value\": \"white\" },\n                \"strokeWidth\": { \"value\": 1 },\n                \"opacity\": { \"value\": 0.8 },\n                \"tooltip\": { \n                  \"signal\": \"{'Category': datum.Category, 'Subcategory': datum.Subcategory, 'Value': datum.Value, 'Percentage': format(datum.Percent, '.1%')}\" \n                }\n              },\n              \"hover\": {\n                \"opacity\": { \"value\": 1.0 }\n              }\n            }\n          },\n          {\n            \"type\": \"text\",\n            \"name\": \"valueLabels\",\n            \"from\": { \"data\": \"finalTable\" },\n            \"encode\": {\n              \"update\": {\n                \"x\": { \"scale\": \"x\", \"signal\": \"(datum.x1 - datum.x0)/2 + datum.x0\" },\n                \"y\": { \"scale\": \"y\", \"signal\": \"(datum.y1 - datum.y0)/2 + datum.y0\" },\n                \"text\": { \n                  \"signal\": \"datum.Percent > 0.027 ? [datum.Subcategory, format(datum.Value, ',.0f') + ' (' + format(datum.Percent, '.0%') + ')'] : []\" \n                },\n                \"align\": { \"value\": \"center\" },\n                \"baseline\": { \"value\": \"middle\" },\n                \"fill\": { \"value\": \"white\" },\n                \"fontSize\": { \"value\": 10 },\n                \"fontWeight\": { \"value\": \"normal\" },\n                \"font\": { \"value\": \"Segoe UI\" },\n                \"lineHeight\": { \"value\": 12 },\n                \"opacity\": { \"signal\": \"datum.Percent > 0.027 ? 1 : 0\" }\n              }\n            }\n          }\n        ]\n      };\n      const chartId = `marimekko_${invocation.address.replace(/[^A-Za-z0-9]/g, \"_\")}`;\n      createChart(spec, \"marimekko\", chartId)\n        .then(() => resolve(\"Marimekko\"))\n        .catch((error) => resolve(`Error: ${error.message}`));\n\n    } catch (error) {\n      resolve(`Error: ${error.message}`);\n    }\n  });\n}\n\n/**\n * BUMP custom function\n * Creates a bump chart from Excel data range\n * \n * @customfunction\n * @requiresAddress\n * @param {any[][]} data The data range including headers\n * @param {CustomFunctions.Invocation} invocation Invocation object\n * @returns {string} Status message\n */\nfunction BUMP(data, invocation) {\n  return new Promise((resolve) => {\n    try {\n      if (!data || data.length < 2) {\n        resolve(\"Error: Need at least header row + one data row\");\n        return;\n      }\n\n      const headers = data[0];\n      const rows = data.slice(1);\n\n      if (headers.length < 3) {\n        resolve(\"Error: Bump chart requires 3 columns: Time periods, Categories, Rank values\");\n        return;\n      }\n\n      // Convert rows -> objects (same as taskpane.js)\n      const processedData = rows.map(row => {\n        let obj = {};\n        headers.forEach((h, i) => {\n          obj[h] = row[i];\n        });\n        return obj;\n      });\n\n      // Calculate width based on number of unique x-values\n      const uniqueX = [...new Set(processedData.map(d => d[headers[0]]))];\n      const dynamicWidth = Math.max(400, uniqueX.length * 80);\n\n      // Use EXACT specification from taskpane.js bump chart\n      const spec = {\n        $schema: \"https://vega.github.io/schema/vega-lite/v6.json\",\n        description: \"Bump chart from Excel selection\",\n        background: \"white\",\n        config: { view: { stroke: \"transparent\" }},\n        data: { values: processedData },\n        width: dynamicWidth,\n        height: 200,   // give it some room\n        encoding: {\n          x: {\n            field: headers[0],\n            type: \"nominal\",\n            axis: { title: \"\" },\n            scale: { type: \"point\", padding: 1 }   // padding 1 for more spread\n          },\n          y: {\n            field: headers[2],      \n            type: \"ordinal\",\n            axis: false\n          }\n        },\n        layer: [\n          {\n            mark: { type: \"line\", interpolate: \"monotone\" },\n            encoding: {\n              color: {\n                field: headers[1],   \n                type: \"nominal\",\n                legend: false\n              }\n            }\n          },\n          {\n            mark: { type: \"circle\", size: 400, tooltip: true },\n            encoding: {\n              color: {\n                field: headers[1],\n                type: \"nominal\",\n                legend: false\n              }\n            }\n          },\n          {\n            mark: { type: \"text\", color: \"white\" },\n            encoding: {\n              text: { field: headers[2] }\n            }\n          },\n          {\n            // Left-side labels\n            transform: [\n              { window: [{ op: \"rank\", as: \"rank\" }], sort: [{ field: headers[0], order: \"descending\" }] },\n              { filter: \"datum.rank === 1\" }\n            ],\n            mark: {\n              type: \"text\",\n              align: \"left\",\n              baseline: \"middle\",\n              dx: 15,\n              fontWeight: \"bold\",\n              fontSize: 12\n            },\n            encoding: {\n              text: { field: headers[1], type: \"nominal\" },\n              color: { field: headers[1], type: \"nominal\", legend: false }\n            }\n          },\n          {\n            // Right-side labels\n            transform: [\n              { window: [{ op: \"rank\", as: \"rank\" }], sort: [{ field: headers[0], order: \"ascending\" }] },\n              { filter: \"datum.rank === 1\" }\n            ],\n            mark: {\n              type: \"text\",\n              align: \"right\",\n              baseline: \"middle\",\n              dx: -15,\n              fontWeight: \"bold\",\n              fontSize: 12\n            },\n            encoding: {\n              text: { field: headers[1], type: \"nominal\" },\n              color: { field: headers[1], type: \"nominal\", legend: false }\n            }\n          }\n        ],\n        config: {\n          view: { stroke: \"transparent\" },\n          line: { strokeWidth: 3, strokeCap: \"round\", strokeJoin: \"round\" },\n          axis: {\n            ticks: false,\n            grid: false,\n            domain: false,\n            labelColor: \"#666666\",\n            labelFontSize: 12\n          }\n        }\n      };\n      const chartId = `bump_${invocation.address.replace(/[^A-Za-z0-9]/g, \"_\")}`;\n      createChart(spec, \"bump\", chartId)\n        .then(() => resolve(\"Bump\"))\n        .catch((error) => resolve(`Error: ${error.message}`));\n\n    } catch (error) {\n      resolve(`Error: ${error.message}`);\n    }\n  });\n}\n\n/**\n * WAFFLE custom function\n * Creates a waffle chart from Excel data range\n * \n * @customfunction\n * @requiresAddress\n * @param {any[][]} data The data range including headers\n * @param {CustomFunctions.Invocation} invocation Invocation object\n * @returns {string} Status message\n */\nfunction WAFFLE(data, invocation) {\n  return new Promise((resolve) => {\n    try {\n      if (!data || data.length < 2) {\n        resolve(\"Error: Need at least header row + one data row\");\n        return;\n      }\n\n      const headers = data[0];\n      const rows = data.slice(1);\n\n      if (headers.length < 2) {\n        resolve(\"Error: Waffle chart requires 2 columns: Category names, Values\");\n        return;\n      }\n\n      // Convert rows -> objects (same as taskpane.js)\n      const processedData = rows.map(row => {\n        let obj = {};\n        headers.forEach((h, i) => {\n          obj[h] = row[i];\n        });\n        return obj;\n      });\n\n      // Use EXACT specification from taskpane.js waffle chart\n      const spec = {\n        $schema: \"https://vega.github.io/schema/vega-lite/v5.json\",\n        description: \"Waffle chart from Excel selection\",\n        background: \"white\",\n        config: { view: { stroke: \"transparent\" }},\n        data: { values: processedData },\n        transform: [\n          {\n            joinaggregate: [{\"op\": \"sum\", \"field\": headers[1], \"as\": \"TotalValue\"}]\n          },\n          {\n            calculate: `round(datum.${headers[1]}/datum.TotalValue * 100)`,\n            as: \"PercentOfTotal\"\n          },\n          {\n            aggregate: [{\"op\": \"min\", \"field\": \"PercentOfTotal\", \"as\": \"Percent\"}],\n            groupby: [headers[0]]\n          },\n          {\"calculate\": \"sequence(1,101)\", \"as\": \"Sequence\"},\n          {\"flatten\": [\"Sequence\"]},\n          {\n            calculate: `if(datum.Sequence <= datum.Percent, datum.${headers[0]},'_blank')`,\n            as: \"Plot\"\n          },\n          {\"calculate\": \"ceil (datum.Sequence / 10)\", \"as\": \"row\"},\n          {\"calculate\": \"datum.Sequence - datum.row * 10\", \"as\": \"col\"}\n        ],\n        facet: {\"column\": {\"field\": headers[0], \"header\": {\"labelOrient\": \"bottom\"}}},\n        spec: {\n          layer: [\n            {\n              mark: {\n                type: \"circle\",\n                filled: true,\n                tooltip: true,\n                stroke: \"#9e9b9b\",\n                strokeWidth: 0.7\n              },\n              encoding: {\n                x: {\"field\": \"col\", \"type\": \"ordinal\", \"axis\": null},\n                y: {\"field\": \"row\", \"type\": \"ordinal\", \"axis\": null, \"sort\": \"-y\"},\n                color: {\n                  condition: {\"test\": \"datum.Plot == '_blank'\", \"value\": \"#e6e3e3\"},\n                  scale: {\"scheme\": \"set1\"},\n                  field: \"Plot\",\n                  type: \"nominal\",\n                  legend: null\n                },\n                size: {\"value\": 241},\n                tooltip: [{\"field\": headers[0], \"type\": \"nominal\"}]\n              }\n            },\n            {\n              mark: {\"type\": \"text\", \"fontSize\": 30, \"fontWeight\": \"bold\"},\n              encoding: {\n                y: {\"value\": 30},\n                text: {\n                  condition: {\n                    test: \"datum.Sequence == 1\",\n                    value: {\"expr\": \"datum.Percent + '%'\"}\n                  }\n                },\n                color: {\"scale\": {\"scheme\": \"set1\"}, \"field\": \"Plot\"}\n              }\n            }\n          ]\n        },\n        config: {\n          view: {\"stroke\": \"transparent\"},\n          font: \"Segoe UI\",\n          text: {\"font\": \"Segoe UI\", \"fontSize\": 12, \"fill\": \"#605E5C\"},\n          axis: {\n            ticks: false,\n            grid: false,\n            domain: false,\n            labelColor: \"#605E5C\",\n            labelFontSize: 12\n          },\n          header: {\n            titleFont: \"Segoe UI\",\n            titleFontSize: 16,\n            titleColor: \"#757575\",\n            labelFont: \"Segoe UI\",\n            labelFontSize: 13,\n            labelColor: \"#605E5C\"\n          },\n          legend: {\n            titleFont: \"Segoe UI\",\n            titleFontWeight: \"bold\",\n            titleColor: \"#605E5C\",\n            labelFont: \"Segoe UI\",\n            labelFontSize: 13,\n            labelColor: \"#605E5C\",\n            symbolType: \"circle\",\n            symbolSize: 75\n          }\n        }\n      };\n      const chartId = `waffle_${invocation.address.replace(/[^A-Za-z0-9]/g, \"_\")}`;\n      createChart(spec, \"waffle\", chartId)\n        .then(() => resolve(\"Waffle\"))\n        .catch((error) => resolve(`Error: ${error.message}`));\n\n    } catch (error) {\n      resolve(`Error: ${error.message}`);\n    }\n  });\n}\n\n/**\n * LOLLIPOP custom function\n * Creates a lollipop chart from Excel data range\n * \n * @customfunction\n * @requiresAddress\n * @param {any[][]} data The data range including headers\n * @param {CustomFunctions.Invocation} invocation Invocation object\n * @returns {string} Status message\n */\nfunction LOLLIPOP(data, invocation) {\n  return new Promise((resolve) => {\n    try {\n      if (!data || data.length < 2) {\n        resolve(\"Error: Need at least header row + one data row\");\n        return;\n      }\n\n      const headers = data[0];\n      const rows = data.slice(1);\n\n      if (headers.length < 2) {\n        resolve(\"Error: Lollipop chart requires 2 columns: Category names, Values\");\n        return;\n      }\n\n      // Convert rows -> objects (same as taskpane.js)\n      const processedData = rows.map(row => {\n        let obj = {};\n        headers.forEach((h, i) => {\n          obj[h] = row[i];\n        });\n        return obj;\n      });\n\n      // Use EXACT specification from taskpane.js lollipop chart\n      const spec = {\n        $schema: \"https://vega.github.io/schema/vega-lite/v5.json\",\n        description: \"Lollipop chart from Excel selection\",\n        background: \"white\",\n        config: { view: { stroke: \"transparent\" }},\n        data: { values: processedData },\n        encoding: {\n          y: {\n            field: headers[0],\n            type: \"nominal\",\n            sort: \"-x\",\n            axis: {\n              domain: false,\n              title: null,\n              ticks: false,\n              labelFont: \"Segoe UI\",\n              labelFontSize: 14,\n              labelPadding: 10,\n              labelColor: \"#605e5c\"\n            }\n          },\n          x: {\n            field: headers[1],\n            type: \"quantitative\",\n            axis: {\n              domain: false,\n              ticks: false,\n              grid: true,\n              gridColor: \"#e0e0e0\",\n              labelFont: \"Segoe UI\",\n              labelFontSize: 12,\n              labelColor: \"#605e5c\",\n              title: headers[1],\n              titleFont: \"Segoe UI\",\n              titleFontSize: 14,\n              titleColor: \"#323130\"\n            }\n          },\n          color: { value: \"#0078d4\" }\n        },\n        layer: [\n          {\n            mark: {\n              type: \"rule\",\n              tooltip: true,\n              strokeWidth: 3,\n              opacity: 0.7\n            }\n          },\n          {\n            mark: {\n              type: \"circle\",\n              tooltip: true,\n              size: 300,\n              opacity: 0.9\n            },\n            encoding: {\n              size: {\n                field: headers[1],\n                type: \"quantitative\",\n                scale: {\n                  range: [200, 800]\n                },\n                legend: null\n              }\n            }\n          }\n        ],\n        config: {\n          autosize: {\n            type: \"fit\",\n            contains: \"padding\"\n          },\n          view: { stroke: \"transparent\" },\n          font: \"Segoe UI\",\n          text: { font: \"Segoe UI\", fontSize: 12, fill: \"#605E5C\" }\n        }\n      };\n      const chartId = `lollipop_${invocation.address.replace(/[^A-Za-z0-9]/g, \"_\")}`;\n      createChart(spec, \"lollipop\", chartId)\n        .then(() => resolve(\"Lollipop\"))\n        .catch((error) => resolve(`Error: ${error.message}`));\n\n    } catch (error) {\n      resolve(`Error: ${error.message}`);\n    }\n  });\n}\n\n/**\n * VIOLIN custom function\n * Creates a violin chart from Excel data range\n * \n * @customfunction\n * @requiresAddress\n * @param {any[][]} data The data range including headers\n * @param {CustomFunctions.Invocation} invocation Invocation object\n * @returns {string} Status message\n */\nfunction VIOLIN(data, invocation) {\n  return new Promise((resolve) => {\n    try {\n      if (!data || data.length < 2) {\n        resolve(\"Error: Need at least header row + one data row\");\n        return;\n      }\n\n      const headers = data[0];\n      const rows = data.slice(1);\n\n      if (headers.length < 2) {\n        resolve(\"Error: Violin chart requires 2 columns: Categories/Groups, Continuous values\");\n        return;\n      }\n\n      // Convert rows -> objects\n      const processedData = rows.map(row => {\n        let obj = {};\n        headers.forEach((h, i) => {\n          obj[h] = row[i];\n        });\n        return obj;\n      });\n\n      // Use EXACT specification as provided\n      const spec = {\n        $schema: \"https://vega.github.io/schema/vega-lite/v5.20.1.json\",\n        description: \"Violin chart from Excel selection\",\n        background: \"white\",\n        config: {\n          view: { continuousWidth: 300, continuousHeight: 300, stroke: null },\n          facet: { spacing: 0 }\n        },\n        data: { values: processedData },\n        mark: { type: \"area\", orient: \"horizontal\" },\n        encoding: {\n          color: { field: headers[0], type: \"nominal\" },\n          column: {\n            field: headers[0],\n            header: {\n              labelOrient: \"bottom\",\n              labelPadding: 0,\n              titleOrient: \"bottom\"\n            },\n            type: \"nominal\"\n          },\n          x: {\n            axis: { grid: false, labels: false, ticks: true, values: [0] },\n            field: \"density\",\n            impute: null,\n            stack: \"center\",\n            title: null,\n            type: \"quantitative\"\n          },\n          y: { field: headers[1], type: \"quantitative\" }\n        },\n        transform: [\n          {\n            density: headers[1],\n            groupby: [headers[0]],\n            as: [headers[1], \"density\"]\n          }\n        ],\n        width: 100\n      };\n      const chartId = `violin_${invocation.address.replace(/[^A-Za-z0-9]/g, \"_\")}`;\n      createChart(spec, \"violin\", chartId)\n        .then(() => resolve(\"Violin\"))\n        .catch((error) => resolve(`Error: ${error.message}`));\n\n    } catch (error) {\n      resolve(`Error: ${error.message}`);\n    }\n  });\n}\n\n/**\n * GANTT custom function\n * Creates a Gantt chart from Excel data range\n * \n * @customfunction\n * @requiresAddress\n * @param {any[][]} data The data range including headers\n * @param {CustomFunctions.Invocation} invocation Invocation object\n * @returns {string} Status message\n */\nfunction GANTT(data, invocation) {\n  return new Promise((resolve) => {\n    try {\n      if (!data || data.length < 2) {\n        resolve(\"Error: Need at least header row + one data row\");\n        return;\n      }\n\n      const headers = data[0];\n      const rows = data.slice(1);\n\n      if (headers.length < 6) {\n        resolve(\"Error: Gantt chart requires 6 columns (Parent ID, Task ID, Task Name, Start Date, End Date, Progress)\");\n        return;\n      }\n\n      // Helper function to convert Excel dates (same as taskpane.js)\n      function excelDateToJSDate(serial) {\n        return new Date(Math.round((serial - 25569) * 86400 * 1000));\n      }\n\n      const ganttData = rows.map(row => {\n        const parentId = row[0] || null;   // col 1 = parent id\n        const id = row[1];                 // col 2 = task id\n        const name = row[2] || `Task ${id}`;\n        if (!id) return null;\n\n        const start = typeof row[3] === \"number\" ? excelDateToJSDate(row[3]) : new Date(row[3]);\n        const end = typeof row[4] === \"number\" ? excelDateToJSDate(row[4]) : new Date(row[4]);\n        if (!(start instanceof Date) || isNaN(start) || !(end instanceof Date) || isNaN(end)) return null;\n\n        let progress = 0;\n        if (row[5]) {\n          if (typeof row[5] === \"string\" && row[5].includes(\"%\")) {\n            progress = parseFloat(row[5]) / 100;\n          } else if (row[5] > 1) {\n            progress = row[5] / 100;\n          } else {\n            progress = row[5];\n          }\n        }\n\n        const dependencies = row[6] ? String(row[6]).split(\",\").map(d => d.trim()) : [];\n\n        return { id, parentId, name, startDate: start, endDate: end, progress, dependencies };\n      }).filter(Boolean);\n\n      // Precompute progressEnd\n      ganttData.forEach(task => {\n        const duration = task.endDate - task.startDate;\n        task.progressEnd = new Date(task.startDate.getTime() + duration * task.progress);\n      });\n\n      // Build parent->children map\n      const childrenMap = new Map();\n      ganttData.forEach(task => {\n        if (!childrenMap.has(task.parentId)) {\n          childrenMap.set(task.parentId, []);\n        }\n        childrenMap.get(task.parentId).push(task);\n      });\n\n      // Sort children by startDate\n      for (let [pid, childList] of childrenMap.entries()) {\n        childList.sort((a, b) => a.startDate - b.startDate);\n      }\n\n      // Recursive hierarchy ordering\n      function buildHierarchy(parentId = null, level = 0) {\n        const ordered = [];\n        const tasks = childrenMap.get(parentId) || [];\n        for (const task of tasks) {\n          task.level = level;\n          ordered.push(task);\n          ordered.push(...buildHierarchy(task.id, level + 1));\n        }\n        return ordered;\n      }\n\n      const orderedTasks = buildHierarchy(null);\n\n      // Use EXACT specification from taskpane.js gantt chart\n      const spec = {\n        $schema: \"https://vega.github.io/schema/vega-lite/v5.json\",\n        description: \"Gantt Chart from Excel Data\",\n        width: 800,\n        height: Math.max(300, orderedTasks.length * 30),\n        data: { values: orderedTasks },\n        layer: [\n          {\n            mark: { type: \"bar\", opacity: 0.3, height: 20 },\n            encoding: {\n              y: { field: \"name\", type: \"nominal\", axis: { title: null, labelFontSize: 11 }, sort: null },\n              x: { field: \"startDate\", type: \"temporal\", axis: { title: \"Timeline\", format: \"%b %d\", labelAngle: -45 } },\n              x2: { field: \"endDate\", type: \"temporal\" },\n              color: { field: \"level\", type: \"ordinal\", scale: { scheme: \"category10\" }, legend: { title: \"Level\" } },\n              tooltip: [\n                { field: \"name\", type: \"nominal\", title: \"Task\" },\n                { field: \"startDate\", type: \"temporal\", title: \"Start\", format: \"%Y-%m-%d\" },\n                { field: \"endDate\", type: \"temporal\", title: \"End\", format: \"%Y-%m-%d\" },\n                { field: \"progress\", type: \"quantitative\", title: \"Progress\", format: \".0%\" }\n              ]\n            }\n          },\n          {\n            mark: { type: \"bar\", opacity: 0.8, height: 20 },\n            encoding: {\n              y: { field: \"name\", type: \"nominal\", sort: null },\n              x: { field: \"startDate\", type: \"temporal\" },\n              x2: { field: \"progressEnd\", type: \"temporal\" },\n              color: { field: \"level\", type: \"ordinal\", scale: { scheme: \"category10\" } }\n            }\n          },\n          {\n            mark: { type: \"text\", align: \"left\", baseline: \"middle\", dx: 5, fontSize: 10 },\n            encoding: {\n              y: { field: \"name\", type: \"nominal\", sort: null },\n              x: { field: \"endDate\", type: \"temporal\" },\n              text: { field: \"progress\", type: \"quantitative\", format: \".0%\" },\n              color: { value: \"#666\" }\n            }\n          },\n          {\n            mark: { type: \"rule\", strokeDash: [4, 4], opacity: 0.5 },\n            data: { values: [{ date: new Date().toISOString() }] },\n            encoding: {\n              x: { field: \"date\", type: \"temporal\" },\n              color: { value: \"red\" },\n              size: { value: 1 }\n            }\n          }\n        ],\n        config: { view: { stroke: null }, axis: { grid: true, gridColor: \"#f0f0f0\" } }\n      };\n      const chartId = `gantt_${invocation.address.replace(/[^A-Za-z0-9]/g, \"_\")}`;\n      createChart(spec, \"gantt\", chartId)\n        .then(() => resolve(\"Gantt\"))\n        .catch((error) => resolve(`Error: ${error.message}`));\n\n    } catch (error) {\n      resolve(`Error: ${error.message}`);\n    }\n  });\n}\n\n/**\n * SANKEY custom function\n * Creates a Sankey diagram from Excel data range\n * \n * @customfunction\n * @requiresAddress\n * @param {any[][]} data The data range including headers\n * @param {CustomFunctions.Invocation} invocation Invocation object\n * @returns {string} Status message\n */\nfunction SANKEY(data, invocation) {\n  return new Promise((resolve) => {\n    try {\n      if (!data || data.length < 2) {\n        resolve(\"Error: Need at least header row + one data row\");\n        return;\n      }\n\n      const headers = data[0];\n      const rows = data.slice(1);\n\n      if (headers.length < 3) {\n        resolve(\"Error: Sankey chart requires 3 columns (Source, Target, Value)\");\n        return;\n      }\n\n      // Parse links from Source-Target-Value format\n      const links = rows\n        .filter(r => r[0] && r[1] && !isNaN(+r[2]))\n        .map(r => ({\n          source: String(r[0]).trim(),\n          destination: String(r[1]).trim(),\n          value: +r[2]\n        }));\n\n      if (links.length === 0) {\n        resolve(\"Error: No valid data found for Sankey chart\");\n        return;\n      }\n\n      // Helper function to assign stage levels to nodes using topological sort\n      const assignNodeStages = (links) => {\n        const nodeStages = new Map();\n        const inDegree = new Map();\n        const outEdges = new Map();\n        \n        // Build graph\n        const allNodes = new Set();\n        links.forEach(link => {\n          allNodes.add(link.source);\n          allNodes.add(link.destination);\n          \n          if (!outEdges.has(link.source)) {\n            outEdges.set(link.source, []);\n          }\n          outEdges.get(link.source).push(link.destination);\n          \n          inDegree.set(link.destination, (inDegree.get(link.destination) || 0) + 1);\n        });\n        \n        // Find source nodes (stage 0)\n        const queue = [];\n        allNodes.forEach(node => {\n          if (!inDegree.has(node) || inDegree.get(node) === 0) {\n            queue.push(node);\n            nodeStages.set(node, 0);\n          }\n        });\n        \n        // Handle cycles or no clear sources\n        if (queue.length === 0 && allNodes.size > 0) {\n          const firstNode = Array.from(allNodes)[0];\n          queue.push(firstNode);\n          nodeStages.set(firstNode, 0);\n        }\n        \n        // Topological sort to assign stages\n        const processed = new Set();\n        while (queue.length > 0) {\n          const current = queue.shift();\n          if (processed.has(current)) continue;\n          processed.add(current);\n          \n          const currentStage = nodeStages.get(current) || 0;\n          const neighbors = outEdges.get(current) || [];\n          \n          neighbors.forEach(neighbor => {\n            const newStage = currentStage + 1;\n            const existingStage = nodeStages.get(neighbor);\n            \n            if (existingStage === undefined || newStage > existingStage) {\n              nodeStages.set(neighbor, newStage);\n            }\n            \n            if (!processed.has(neighbor)) {\n              queue.push(neighbor);\n            }\n          });\n        }\n        \n        // Assign stage 0 to any remaining unprocessed nodes\n        allNodes.forEach(node => {\n          if (!nodeStages.has(node)) {\n            nodeStages.set(node, 0);\n          }\n        });\n        \n        return nodeStages;\n      };\n\n      // Auto-detect node stages using topological sort\n      const nodeStages = assignNodeStages(links);\n      \n      // Get all unique nodes\n      const allNodes = new Set();\n      links.forEach(link => {\n        allNodes.add(link.source);\n        allNodes.add(link.destination);\n      });\n\n      // Create category definitions with stack assignments\n      const categories = [];\n      const nodeToStack = new Map();\n      let sortCounter = 1;\n\n      // Group nodes by stage\n      const stageGroups = new Map();\n      allNodes.forEach(node => {\n        const stage = nodeStages.get(node);\n        if (!stageGroups.has(stage)) {\n          stageGroups.set(stage, []);\n        }\n        stageGroups.get(stage).push(node);\n      });\n\n      // Create categories for each node with proper stack assignment\n      const sortedStages = Array.from(stageGroups.keys()).sort((a, b) => a - b);\n      sortedStages.forEach((stage, stageIndex) => {\n        const nodesInStage = stageGroups.get(stage);\n        nodesInStage.sort(); // Sort alphabetically within stage\n        \n        nodesInStage.forEach((node, nodeIndex) => {\n          const stackNumber = stageIndex + 1;\n          nodeToStack.set(node, stackNumber);\n          \n          categories.push({\n            category: node,\n            stack: stackNumber,\n            sort: nodeIndex + 1,\n            labels: stageIndex === 0 ? \"left\" : null\n          });\n        });\n      });\n\n      // Combine categories and links into input data\n      const inputData = [...categories, ...links];\n\n      const spec = {\n        $schema: \"https://vega.github.io/schema/vega/v5.json\",\n        description: \"Sankey diagram\",\n        width: 800,\n        height: 600,\n        padding: { bottom: 20, left: 80, right: 80, top: 40 },\n        background: \"white\",\n        signals: [\n          {\n            name: \"standardGap\",\n            value: 14,\n            description: \"Gap as a percentage of full domain\"\n          },\n          {\n            name: \"base\",\n            value: \"center\",\n            description: \"How to stack (center or zero)\"\n          }\n        ],\n        data: [\n          {\n            name: \"input\",\n            values: inputData\n          },\n          {\n            name: \"stacks\",\n            source: \"input\",\n            transform: [\n              { type: \"filter\", expr: \"datum.source != null\" },\n              { type: \"formula\", as: \"end\", expr: \"['source','destination']\" },\n              { type: \"formula\", as: \"name\", expr: \"[datum.source, datum.destination]\" },\n              { type: \"project\", fields: [\"end\", \"name\", \"value\"] },\n              { type: \"flatten\", fields: [\"end\", \"name\"] },\n              {\n                type: \"lookup\",\n                from: \"input\",\n                key: \"category\",\n                values: [\"stack\", \"sort\", \"gap\", \"labels\"],\n                fields: [\"name\"],\n                as: [\"stack\", \"sort\", \"gap\", \"labels\"]\n              },\n              {\n                type: \"aggregate\",\n                fields: [\"value\", \"stack\", \"sort\", \"gap\", \"labels\"],\n                groupby: [\"end\", \"name\"],\n                ops: [\"sum\", \"max\", \"max\", \"max\", \"max\"],\n                as: [\"value\", \"stack\", \"sort\", \"gap\", \"labels\"]\n              },\n              {\n                type: \"aggregate\",\n                fields: [\"value\", \"stack\", \"sort\", \"gap\", \"labels\"],\n                groupby: [\"name\"],\n                ops: [\"max\", \"max\", \"max\", \"max\", \"max\"],\n                as: [\"value\", \"stack\", \"sort\", \"gap\", \"labels\"]\n              },\n              { type: \"formula\", as: \"gap\", expr: \"datum.gap ? datum.gap : 0\" }\n            ]\n          },\n          {\n            name: \"maxValue\",\n            source: [\"stacks\"],\n            transform: [\n              {\n                type: \"aggregate\",\n                fields: [\"value\"],\n                groupby: [\"stack\"],\n                ops: [\"sum\"],\n                as: [\"value\"]\n              },\n              {\n                type: \"aggregate\",\n                fields: [\"value\"],\n                ops: [\"max\"],\n                as: [\"value\"]\n              }\n            ]\n          },\n          {\n            name: \"plottedStacks\",\n            source: [\"stacks\"],\n            transform: [\n              {\n                type: \"formula\",\n                as: \"spacer\",\n                expr: \"(data('maxValue')[0].value/100)*(standardGap+datum.gap)\"\n              },\n              { type: \"formula\", as: \"type\", expr: \"['data','spacer']\" },\n              { type: \"formula\", as: \"spacedValue\", expr: \"[datum.value, datum.spacer]\" },\n              { type: \"flatten\", fields: [\"type\", \"spacedValue\"] },\n              {\n                type: \"stack\",\n                groupby: [\"stack\"],\n                sort: { field: \"sort\", order: \"descending\" },\n                field: \"spacedValue\",\n                offset: { signal: \"base\" }\n              },\n              { type: \"formula\", expr: \"((datum.value)/2)+datum.y0\", as: \"yc\" }\n            ]\n          },\n          {\n            name: \"finalTable\",\n            source: [\"plottedStacks\"],\n            transform: [{ type: \"filter\", expr: \"datum.type == 'data'\" }]\n          },\n          {\n            name: \"linkTable\",\n            source: [\"input\"],\n            transform: [\n              { type: \"filter\", expr: \"datum.source != null\" },\n              {\n                type: \"lookup\",\n                from: \"finalTable\",\n                key: \"name\",\n                values: [\"y0\", \"y1\", \"stack\", \"sort\"],\n                fields: [\"source\"],\n                as: [\"sourceStacky0\", \"sourceStacky1\", \"sourceStack\", \"sourceSort\"]\n              },\n              {\n                type: \"lookup\",\n                from: \"finalTable\",\n                key: \"name\",\n                values: [\"y0\", \"y1\", \"stack\", \"sort\"],\n                fields: [\"destination\"],\n                as: [\"destinationStacky0\", \"destinationStacky1\", \"destinationStack\", \"destinationSort\"]\n              },\n              {\n                type: \"stack\",\n                groupby: [\"source\"],\n                sort: { field: \"destinationSort\", order: \"descending\" },\n                field: \"value\",\n                offset: \"zero\",\n                as: [\"syi0\", \"syi1\"]\n              },\n              { type: \"formula\", expr: \"datum.syi0+datum.sourceStacky0\", as: \"sy0\" },\n              { type: \"formula\", expr: \"datum.sy0+datum.value\", as: \"sy1\" },\n              {\n                type: \"stack\",\n                groupby: [\"destination\"],\n                sort: { field: \"sourceSort\", order: \"descending\" },\n                field: \"value\",\n                offset: \"zero\",\n                as: [\"dyi0\", \"dyi1\"]\n              },\n              { type: \"formula\", expr: \"datum.dyi0+datum.destinationStacky0\", as: \"dy0\" },\n              { type: \"formula\", expr: \"datum.dy0+datum.value\", as: \"dy1\" },\n              { type: \"formula\", expr: \"((datum.value)/2)+datum.sy0\", as: \"syc\" },\n              { type: \"formula\", expr: \"((datum.value)/2)+datum.dy0\", as: \"dyc\" },\n              {\n                type: \"linkpath\",\n                orient: \"horizontal\",\n                shape: \"diagonal\",\n                sourceY: { expr: \"scale('y', datum.syc)\" },\n                sourceX: { expr: \"scale('x', toNumber(datum.sourceStack)) + bandwidth('x')\" },\n                targetY: { expr: \"scale('y', datum.dyc)\" },\n                targetX: { expr: \"scale('x', datum.destinationStack)\" }\n              },\n              { type: \"formula\", expr: \"range('y')[0]-scale('y', datum.value)\", as: \"strokeWidth\" }\n            ]\n          }\n        ],\n        scales: [\n          {\n            name: \"x\",\n            type: \"band\",\n            range: \"width\",\n            domain: { data: \"finalTable\", field: \"stack\" },\n            paddingInner: 0.88\n          },\n          {\n            name: \"y\",\n            type: \"linear\",\n            range: \"height\",\n            domain: { data: \"finalTable\", field: \"y1\" },\n            reverse: false\n          },\n          {\n            name: \"color\",\n            type: \"ordinal\",\n            range: [\n              \"#1f77b4\", \"#ff7f0e\", \"#2ca02c\", \"#d62728\", \"#9467bd\",\n              \"#8c564b\", \"#e377c2\", \"#7f7f7f\", \"#bcbd22\", \"#17becf\",\n              \"#aec7e8\", \"#ffbb78\", \"#98df8a\", \"#ff9896\", \"#c5b0d5\",\n              \"#c49c94\", \"#f7b6d2\", \"#c7c7c7\", \"#dbdb8d\", \"#9edae5\"\n            ],\n            domain: { data: \"stacks\", field: \"name\" }\n          }\n        ],\n        marks: [\n          {\n            type: \"rect\",\n            from: { data: \"finalTable\" },\n            encode: {\n              update: {\n                x: { scale: \"x\", field: \"stack\" },\n                width: { scale: \"x\", band: 1 },\n                y: { scale: \"y\", field: \"y0\" },\n                y2: { scale: \"y\", field: \"y1\" },\n                fill: { scale: \"color\", field: \"name\" },\n                fillOpacity: { value: 0.75 },\n                strokeWidth: { value: 0 },\n                stroke: { scale: \"color\", field: \"name\" }\n              },\n              hover: {\n                tooltip: { signal: \"{'Name': datum.name, 'Value': format(datum.value, ',.2f')}\" },\n                fillOpacity: { value: 1 }\n              }\n            }\n          },\n          {\n            type: \"path\",\n            name: \"links\",\n            from: { data: \"linkTable\" },\n            clip: true,\n            encode: {\n              update: {\n                strokeWidth: { field: \"strokeWidth\" },\n                path: { field: \"path\" },\n                strokeOpacity: { signal: \"0.3\" },\n                stroke: { field: \"destination\", scale: \"color\" }\n              },\n              hover: {\n                strokeOpacity: { value: 0.8 },\n                tooltip: {\n                  signal: \"{'Source': datum.source, 'Destination': datum.destination, 'Value': format(datum.value, ',.2f')}\"\n                }\n              }\n            }\n          },\n          {\n            type: \"group\",\n            name: \"labelText\",\n            zindex: 1,\n            from: {\n              facet: {\n                data: \"finalTable\",\n                name: \"labelFacet\",\n                groupby: [\"name\", \"stack\", \"yc\", \"value\", \"labels\"]\n              }\n            },\n            clip: false,\n            encode: {\n              update: {\n                x: {\n                  signal: \"datum.labels=='left' ? scale('x', datum.stack)-8 : scale('x', datum.stack) + bandwidth('x') + 8\"\n                },\n                yc: { scale: \"y\", signal: \"datum.yc\" },\n                width: { signal: \"0\" },\n                height: { signal: \"0\" }\n              }\n            },\n            marks: [\n              {\n                type: \"text\",\n                name: \"heading\",\n                from: { data: \"labelFacet\" },\n                encode: {\n                  update: {\n                    x: { value: 0 },\n                    y: { value: -2 },\n                    text: { field: \"name\" },\n                    align: { signal: \"datum.labels=='left' ? 'right' : 'left'\" },\n                    fontWeight: { value: \"bold\" },\n                    fontSize: { value: 11 }\n                  }\n                }\n              },\n              {\n                type: \"text\",\n                name: \"amount\",\n                from: { data: \"labelFacet\" },\n                encode: {\n                  update: {\n                    x: { value: 0 },\n                    y: { value: 12 },\n                    text: { signal: \"format(datum.value, ',.0f')\" },\n                    align: { signal: \"datum.labels=='left' ? 'right' : 'left'\" },\n                    fontSize: { value: 10 }\n                  }\n                }\n              }\n            ]\n          },\n          {\n            type: \"rect\",\n            from: { data: \"labelText\" },\n            encode: {\n              update: {\n                x: { field: \"bounds.x1\", offset: -2 },\n                x2: { field: \"bounds.x2\", offset: 2 },\n                y: { field: \"bounds.y1\", offset: -2 },\n                y2: { field: \"bounds.y2\", offset: 2 },\n                fill: { value: \"white\" },\n                opacity: { value: 0.8 },\n                cornerRadius: { value: 4 }\n              }\n            }\n          }\n        ],\n        config: {\n          view: { stroke: \"transparent\" },\n          text: { fontSize: 11, fill: \"#333333\" }\n        }\n      };\n\n      const chartId = `sankey_${invocation.address.replace(/[^A-Za-z0-9]/g, \"_\")}`;\n      createChart(spec, \"sankey\", chartId)\n        .then(() => resolve(\"Sankey\"))\n        .catch((error) => resolve(`Error: ${error.message}`));\n\n    } catch (error) {\n      resolve(`Error: ${error.message}`);\n    }\n  });\n}\n\n/**\n * RIDGELINE custom function\n * Creates a ridgeline (joyplot) chart from Excel data range\n * \n * @customfunction\n * @requiresAddress\n * @param {any[][]} data The data range including headers\n * @param {CustomFunctions.Invocation} invocation Invocation object\n * @returns {string} Status message\n */\nfunction RIDGELINE(data, invocation) {\n  return new Promise((resolve) => {\n    try {\n      if (!data || data.length < 2) {\n        resolve(\"Error: Need at least header row + one data row\");\n        return;\n      }\n\n      const headers = data[0];\n      const rows = data.slice(1);\n\n      if (headers.length < 3) {\n        resolve(\"Error: Ridgeline chart requires 3 columns (Time/X-axis, Categories, Values)\");\n        return;\n      }\n\n      // Convert rows -> objects (same as taskpane.js)\n      const processedData = rows.map(row => {\n        let obj = {};\n        headers.forEach((h, i) => {\n          obj[h] = row[i];\n        });\n        return obj;\n      });\n\n      // Use EXACT specification from taskpane.js ridgeline chart\n      const spec = {\n        $schema: \"https://vega.github.io/schema/vega-lite/v6.json\",\n        description: \"Ridgeline (Joyplot) chart from Excel selection\",\n        background: \"white\",\n        config: { view: { stroke: \"transparent\" }},\n        data: { values: processedData },\n        mark: {\n          type: \"area\",\n          fillOpacity: 0.7,\n          strokeOpacity: 1,\n          strokeWidth: 1,\n          interpolate: \"monotone\"\n        },\n        width: 400,\n        height: 20,\n        encoding: {\n          x: {\n            field: headers[0],       // date/time column\n            type: \"ordinal\",\n            title: headers[0]\n          },\n          y: {\n            aggregate: \"sum\",\n            field: headers[2],       // value column\n            type: \"quantitative\",\n            scale: { range: [20, -40] },\n            axis: {\n              title: null,\n              values: [0],\n              domain: false,\n              labels: false,\n              ticks: false\n            }\n          },\n          row: {\n            field: headers[1],       // category column\n            type: \"nominal\",\n            title: headers[1],\n            header: {\n              title: null,\n              labelAngle: 0,\n              labelOrient: \"left\",\n              labelAlign: \"left\",\n              labelPadding: 0\n            },\n            sort: { field: headers[0], op: \"max\", order: \"ascending\" }\n          },\n          fill: {\n            field: headers[1],\n            type: \"nominal\",\n            legend: null,\n            scale: { scheme: \"plasma\" }\n          }\n        },\n        resolve: { scale: { y: \"independent\" } },\n        config: {\n          view: { stroke: \"transparent\" },\n          facet: { spacing: 20 },\n          header: {\n            labelFontSize: 12,\n            labelFontWeight: 500,\n            labelAngle: 0,\n            labelAnchor: \"end\",\n            labelOrient: \"top\",\n            labelPadding: -19\n          },\n          axis: {\n            domain: false,\n            grid: false,\n            ticks: false,\n            tickCount: 5,\n            labelFontSize: 12,\n            titleFontSize: 12,\n            titleFontWeight: 400,\n            titleColor: \"#605E5C\"\n          }\n        }\n      };\n      const chartId = `ridgeline_${invocation.address.replace(/[^A-Za-z0-9]/g, \"_\")}`;\n      createChart(spec, \"ridgeline\", chartId)\n        .then(() => resolve(\"Ridgeline\"))\n        .catch((error) => resolve(`Error: ${error.message}`));\n\n    } catch (error) {\n      resolve(`Error: ${error.message}`);\n    }\n  });\n}\n\n/**\n * VARIANCE custom function\n * Creates a variance chart from Excel data range\n * \n * @customfunction\n * @requiresAddress\n * @param {any[][]} data The data range including headers\n * @param {CustomFunctions.Invocation} invocation Invocation object\n * @returns {string} Status message\n */\nfunction VARIANCE(data, invocation) {\n  return new Promise((resolve) => {\n    try {\n      if (!data || data.length < 2) {\n        resolve(\"Error: Need at least header row + one data row\");\n        return;\n      }\n\n      const headers = data[0];\n      const rows = data.slice(1);\n\n      if (headers.length < 3) {\n        resolve(\"Error: Variance chart requires 3 columns (Business Unit, First Metric, Second Metric)\");\n        return;\n      }\n\n      // Convert rows -> objects\n      const processedData = rows.map(row => {\n        let obj = {};\n        headers.forEach((h, i) => {\n          obj[h] = row[i];\n        });\n        return obj;\n      });\n\n      const spec = {\n        \"$schema\": \"https://vega.github.io/schema/vega-lite/v5.json\",\n        \"data\": { \"values\": processedData },\n        \"transform\": [\n          {\n            \"aggregate\": [\n              {\"op\": \"sum\", \"field\": headers[1], \"as\": headers[1]},\n              {\"op\": \"sum\", \"field\": headers[2], \"as\": headers[2]}\n            ],\n            \"groupby\": [headers[0]]\n          },\n          {\n            \"calculate\": `datum['${headers[1]}'] - datum['${headers[2]}']`,\n            \"as\": \"Variance Absolute\"\n          },\n          {\n            \"calculate\": `datum['${headers[2]}'] === 0 ? 0 : datum['${headers[1]}']/datum['${headers[2]}']-1`,\n            \"as\": \"Variance Percent\"\n          }\n        ],\n        \"hconcat\": [\n          {\n            \"width\": 350,\n            \"height\": {\"step\": 50},\n            \"view\": {\"stroke\": \"transparent\"},\n            \"encoding\": {\n              \"color\": {\n                \"type\": \"nominal\",\n                \"scale\": {\n                  \"domain\": [headers[1], headers[2]],\n                  \"range\": [\"#404040\", \"silver\"]\n                },\n                \"legend\": {\"title\": null, \"orient\": \"top\"}\n              },\n              \"y\": {\n                \"field\": headers[0],\n                \"type\": \"nominal\",\n                \"sort\": null,\n                \"axis\": {\"domain\": false, \"offset\": 0, \"ticks\": false, \"title\": \"\", \"labelPadding\": 35}\n              },\n              \"x\": {\n                \"type\": \"quantitative\",\n                \"axis\": {\n                  \"domain\": false,\n                  \"labels\": false,\n                  \"title\": null,\n                  \"ticks\": false,\n                  \"grid\": true,\n                  \"gridColor\": {\n                    \"condition\": {\"test\": \"datum.value === 0\", \"value\": \"#605E5C\"},\n                    \"value\": \"transparent\"\n                  }\n                }\n              }\n            },\n            \"layer\": [\n              {\n                \"mark\": {\n                  \"type\": \"bar\",\n                  \"tooltip\": true,\n                  \"cornerRadius\": 3,\n                  \"yOffset\": 12,\n                  \"height\": {\"band\": 0.5}\n                },\n                \"encoding\": {\n                  \"x\": {\"field\": headers[2]},\n                  \"color\": {\"datum\": headers[2]}\n                }\n              },\n              {\n                \"mark\": {\n                  \"type\": \"bar\",\n                  \"tooltip\": true,\n                  \"cornerRadius\": 3,\n                  \"yOffset\": 0,\n                  \"height\": {\"band\": 0.5}\n                },\n                \"encoding\": {\n                  \"x\": {\"field\": headers[1]},\n                  \"color\": {\"datum\": headers[1]}\n                }\n              },\n              {\n                \"mark\": {\n                  \"type\": \"text\",\n                  \"align\": {\n                    \"expr\": `datum['${headers[1]}'] < 0 ? 'right' : 'left'`\n                  },\n                  \"dx\": {\"expr\": `datum['${headers[1]}'] < 0 ? -5 : 5`},\n                  \"color\": \"black\",\n                  \"fontSize\": 11\n                },\n                \"encoding\": {\n                  \"x\": {\"field\": headers[1], \"type\": \"quantitative\"},\n                  \"text\": {\"field\": headers[1], \"type\": \"quantitative\", \"format\": \",\"}\n                }\n              }\n            ]\n          },\n          {\n            \"width\": 150,\n            \"height\": {\"step\": 50},\n            \"view\": {\"stroke\": \"transparent\"},\n            \"encoding\": {\n              \"y\": {\n                \"field\": headers[0],\n                \"type\": \"nominal\",\n                \"sort\": null,\n                \"axis\": null\n              },\n              \"x\": {\n                \"field\": \"Variance Absolute\",\n                \"type\": \"quantitative\",\n                \"axis\": {\n                  \"domain\": false,\n                  \"labels\": false,\n                  \"title\": null,\n                  \"ticks\": false,\n                  \"grid\": true,\n                  \"gridWidth\": 1,\n                  \"gridColor\": {\n                    \"condition\": {\"test\": \"datum.value === 0\", \"value\": \"#605E5C\"},\n                    \"value\": \"transparent\"\n                  }\n                }\n              }\n            },\n            \"layer\": [\n              {\n                \"mark\": {\n                  \"type\": \"bar\",\n                  \"tooltip\": true,\n                  \"cornerRadius\": 3,\n                  \"yOffset\": 0,\n                  \"height\": {\"band\": 0.5}\n                },\n                \"encoding\": {\n                  \"fill\": {\n                    \"condition\": {\n                      \"test\": \"datum['Variance Absolute'] < 0\",\n                      \"value\": \"#b92929\"\n                    },\n                    \"value\": \"#329351\"\n                  }\n                }\n              },\n              {\n                \"mark\": {\n                  \"type\": \"text\",\n                  \"align\": {\n                    \"expr\": \"datum['Variance Absolute'] < 0 ? 'right' : 'left'\"\n                  },\n                  \"dx\": {\"expr\": \"datum['Variance Absolute'] < 0 ? -5 : 5\"}\n                },\n                \"encoding\": {\n                  \"text\": {\n                    \"field\": \"Variance Absolute\",\n                    \"type\": \"quantitative\",\n                    \"format\": \"+,\"\n                  }\n                }\n              }\n            ]\n          },\n          {\n            \"width\": 150,\n            \"height\": {\"step\": 50},\n            \"view\": {\"stroke\": \"transparent\"},\n            \"transform\": [\n              {\n                \"calculate\": `datum['${headers[2]}'] === 0 ? 'n/m' : format(datum['Variance Percent'], '+.1%')`,\n                \"as\": \"PercentDisplay\"\n              }\n            ],\n            \"encoding\": {\n              \"y\": {\n                \"field\": headers[0],\n                \"type\": \"nominal\",\n                \"sort\": null,\n                \"axis\": null\n              },\n              \"x\": {\n                \"field\": \"Variance Percent\",\n                \"type\": \"quantitative\",\n                \"axis\": {\n                  \"domain\": false,\n                  \"labels\": false,\n                  \"title\": null,\n                  \"ticks\": false,\n                  \"grid\": true,\n                  \"gridColor\": {\n                    \"condition\": {\"test\": \"datum.value === 0\", \"value\": \"#605E5C\"},\n                    \"value\": \"transparent\"\n                  }\n                }\n              }\n            },\n            \"layer\": [\n              {\n                \"mark\": {\"type\": \"rule\", \"tooltip\": true},\n                \"encoding\": {\n                  \"strokeWidth\": {\"value\": 2},\n                  \"stroke\": {\n                    \"condition\": {\n                      \"test\": \"datum['Variance Absolute'] < 0\",\n                      \"value\": \"#b92929\"\n                    },\n                    \"value\": \"#329351\"\n                  }\n                }\n              },\n              {\n                \"mark\": {\"type\": \"circle\", \"tooltip\": true},\n                \"encoding\": {\n                  \"size\": {\"value\": 100},\n                  \"color\": {\n                    \"condition\": {\n                      \"test\": \"datum['Variance Absolute'] < 0\",\n                      \"value\": \"#b92929\"\n                    },\n                    \"value\": \"#329351\"\n                  }\n                }\n              },\n              {\n                \"mark\": {\n                  \"type\": \"text\",\n                  \"align\": {\n                    \"expr\": \"datum['Variance Absolute'] < 0 ? 'right' : 'left'\"\n                  },\n                  \"dx\": {\"expr\": \"datum['Variance Absolute'] < 0 ? -10 : 10\"}\n                },\n                \"encoding\": {\n                  \"text\": {\n                    \"field\": \"PercentDisplay\",\n                    \"type\": \"nominal\"\n                  }\n                }\n              }\n            ]\n          }\n        ],\n        \"config\": {\n          \"view\": {\"stroke\": \"transparent\"},\n          \"padding\": {\"left\": 5, \"top\": 20, \"right\": 5, \"bottom\": 5},\n          \"font\": \"Segoe UI\",\n          \"axis\": {\n            \"labelFontSize\": 12,\n            \"labelPadding\": 10,\n            \"offset\": 5,\n            \"labelFont\": \"Segoe UI\",\n            \"labelColor\": \"#252423\"\n          },\n          \"text\": {\"fontSize\": 12, \"font\": \"Segoe UI\", \"color\": \"#605E5C\"},\n          \"concat\": {\"spacing\": 50},\n          \"legend\": {\n            \"labelFontSize\": 12,\n            \"labelFont\": \"Segoe UI\",\n            \"labelColor\": \"#605E5C\"\n          }\n        }\n      };\n      const chartId = `variance_${invocation.address.replace(/[^A-Za-z0-9]/g, \"_\")}`;\n      createChart(spec, \"variance\", chartId)\n        .then(() => resolve(\"Variance\"))\n        .catch((error) => resolve(`Error: ${error.message}`));\n\n    } catch (error) {\n      resolve(`Error: ${error.message}`);\n    }\n  });\n}\n\n/**\n * DEVIATION custom function\n * Creates a deviation chart from Excel data range\n * \n * @customfunction\n * @requiresAddress\n * @param {any[][]} data The data range including headers\n * @param {CustomFunctions.Invocation} invocation Invocation object\n * @returns {string} Status message\n */\nfunction DEVIATION(data, invocation) {\n  return new Promise((resolve) => {\n    try {\n      if (!data || data.length < 2) {\n        resolve(\"Error: Need at least header row + one data row\");\n        return;\n      }\n\n      const headers = data[0];\n      const rows = data.slice(1);\n\n      if (headers.length < 3) {\n        resolve(\"Error: Deviation chart requires 3 columns (Date/Period, Actual Values, Target/Baseline Values)\");\n        return;\n      }\n\n      // Convert rows -> objects (same as taskpane.js)\n      const processedData = rows.map(row => {\n        let obj = {};\n        headers.forEach((h, i) => {\n          obj[h] = row[i];\n        });\n        return obj;\n      });\n\n      // Use EXACT specification from taskpane.js deviation chart\n      const spec = {\n        $schema: \"https://vega.github.io/schema/vega-lite/v6.json\",\n        description: \"Deviation chart from Excel selection\",\n        background: \"white\",\n        config: { view: { stroke: \"transparent\" }},\n        data: { values: processedData },\n        layer: [\n          {\n            mark: { type: \"line\", tooltip: true, color: \"grey\" },\n            encoding: {\n              x: { field: headers[0], type: \"ordinal\" },\n              y: { field: headers[1], type: \"quantitative\" }\n            }\n          },\n          {\n            mark: { type: \"circle\", size: 80, color: \"grey\", tooltip: true },\n            encoding: {\n              x: { field: headers[0], type: \"ordinal\" },\n              y: { field: headers[1], type: \"quantitative\" }\n            }\n          },\n          {\n            mark: { type: \"rule\", strokeWidth: 2, tooltip: true },\n            encoding: {\n              x: { field: headers[0], type: \"ordinal\" },\n              y: { field: headers[1], type: \"quantitative\" },\n              y2: { field: headers[2] },\n              color: {\n                condition: { test: `datum[\"${headers[1]}\"] < datum[\"${headers[2]}\"]`, value: \"red\" },\n                value: \"green\"\n              }\n            }\n          },\n          {\n            mark: { type: \"circle\", size: 60, tooltip: true },\n            encoding: {\n              x: { field: headers[0], type: \"ordinal\" },\n              y: { field: headers[2], type: \"quantitative\" },\n              color: {\n                condition: { test: `datum[\"${headers[1]}\"] < datum[\"${headers[2]}\"]`, value: \"red\" },\n                value: \"green\"\n              }\n            }\n          }\n        ],\n        encoding: {\n          x: { \n            field: headers[0], \n            type: \"ordinal\", \n            axis: { \n              title: null,\n              labelAngle: 0\n            } \n          },\n          y: { type: \"quantitative\", axis: { title: \"\" } }\n        },\n        config: {\n          view: { stroke: \"transparent\" },\n          line: { strokeWidth: 3, strokeCap: \"round\", strokeJoin: \"round\" },\n          axis: {\n            ticks: false,\n            grid: false,\n            domain: false,\n            labelColor: \"#605E5C\",\n            labelFontSize: 12\n          }\n        }\n      };\n      const chartId = `deviation_${invocation.address.replace(/[^A-Za-z0-9]/g, \"_\")}`;\n      createChart(spec, \"deviation\", chartId)\n        .then(() => resolve(\"Deviation\"))\n        .catch((error) => resolve(`Error: ${error.message}`));\n\n    } catch (error) {\n      resolve(`Error: ${error.message}`);\n    }\n  });\n}\n\n/**\n * RIBBON custom function\n * Creates a ribbon chart from Excel data range\n * \n * @customfunction\n * @requiresAddress\n * @param {any[][]} data The data range including headers\n * @param {CustomFunctions.Invocation} invocation Invocation object\n * @returns {string} Status message\n */\nfunction RIBBON(data, invocation) {\n  return new Promise((resolve) => {\n    try {\n      if (!data || data.length < 2) {\n        resolve(\"Error: Need at least header row + one data row\");\n        return;\n      }\n\n      const headers = data[0];\n      const rows = data.slice(1);\n\n      if (headers.length < 3) {\n        resolve(\"Error: Ribbon chart requires 3 columns (Time periods, Categories, Values)\");\n        return;\n      }\n\n      // Convert rows -> objects (same as taskpane.js)\n      const processedData = rows.map(row => {\n        let obj = {};\n        headers.forEach((h, i) => {\n          obj[h] = row[i];\n        });\n        return obj;\n      });\n\n      // Calculate dynamic dimensions based on data\n      const uniquePeriods = [...new Set(processedData.map(d => d[headers[0]]))];\n      const dynamicWidth = Math.max(600, uniquePeriods.length * 100);\n      const dynamicHeight = 400;\n\n      // Use EXACT specification from taskpane.js ribbon chart\n      const spec = {\n        $schema: \"https://vega.github.io/schema/vega-lite/v6.json\",\n        description: \"Ribbon chart from Excel selection\",\n        background: \"white\",\n        width: dynamicWidth,\n        height: dynamicHeight,\n        config: { view: { stroke: \"transparent\" }},\n        data: { values: processedData },\n        layer: [\n          {\n            mark: { \n              type: \"area\", \n              interpolate: \"monotone\", \n              tooltip: true,\n              opacity: 0.8\n            },\n            encoding: {\n              x: {\n                field: headers[0],\n                type: \"ordinal\",\n                scale: {\n                  type: \"point\",\n                  padding: 0.3\n                },\n                axis: {\n                  title: headers[0],\n                  labelAngle: -45,\n                  labelFontSize: 12,\n                  titleFontSize: 14,\n                  labelPadding: 10,\n                  titlePadding: 20\n                }\n              },\n              y: {\n                aggregate: \"sum\",\n                field: headers[2],\n                type: \"quantitative\",\n                axis: {\n                  title: headers[2],\n                  labelFontSize: 12,\n                  titleFontSize: 14,\n                  grid: true,\n                  gridOpacity: 0.3\n                },\n                stack: \"center\"\n              },\n              color: {\n                field: headers[1],\n                type: \"nominal\",\n                legend: {\n                  title: headers[1],\n                  titleFontSize: 12,\n                  labelFontSize: 11,\n                  orient: \"right\"\n                }\n              },\n              order: {\n                aggregate: \"sum\",\n                field: headers[2],\n                type: \"quantitative\"\n              }\n            }\n          }\n        ],\n        config: {\n          view: { stroke: \"transparent\" },\n          font: \"Segoe UI\",\n          axis: {\n            ticks: false,\n            grid: true,\n            gridColor: \"#f0f0f0\",\n            gridOpacity: 0.5,\n            gridWidth: 1,\n            domain: false,\n            labelColor: \"#605e5c\",\n            titleColor: \"#323130\"\n          },\n          legend: {\n            titleFont: \"Segoe UI\",\n            titleFontWeight: \"bold\",\n            titleColor: \"#323130\",\n            labelFont: \"Segoe UI\",\n            labelColor: \"#605e5c\",\n            symbolType: \"circle\",\n            symbolSize: 75\n          }\n        }\n      };\n      const chartId = `ribbon_${invocation.address.replace(/[^A-Za-z0-9]/g, \"_\")}`;\n      createChart(spec, \"ribbon\", chartId)\n        .then(() => resolve(\"Ribbon\"))\n        .catch((error) => resolve(`Error: ${error.message}`));\n\n    } catch (error) {\n      resolve(`Error: ${error.message}`);\n    }\n  });\n}\n\n/**\n * Create chart\n */\nasync function createChart(spec, chartType, chartId) {\n  // chartId comes directly from caller (cell address based)\n  const hiddenDiv = document.createElement(\"div\");\n  hiddenDiv.style.display = \"none\";\n  hiddenDiv.id = chartId;\n  document.body.appendChild(hiddenDiv);\n\n  if (typeof vegaEmbed === 'undefined') {\n    await loadVegaLibraries();\n  }\n\n  const result = await vegaEmbed(hiddenDiv, spec, { actions: false });\n  const pngUrl = await result.view.toImageURL(\"png\");\n\n  const response = await fetch(pngUrl);\n  const blob = await response.blob();\n  const reader = new FileReader();\n\n  return new Promise((resolve, reject) => {\n    reader.onloadend = async () => {\n      try {\n        const base64data = reader.result.split(\",\")[1];\n        await insertChart(base64data, chartType, chartId);\n        document.body.removeChild(hiddenDiv);\n        resolve();\n      } catch (err) {\n        if (document.body.contains(hiddenDiv)) document.body.removeChild(hiddenDiv);\n        reject(err);\n      }\n    };\n    reader.readAsDataURL(blob);\n  });\n}\n\n/**\n * Insert chart\n */\nasync function insertChart(base64data, chartType, chartId) {\n  return Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getActiveWorksheet();\n\n    // Remove old chart and get its position\n    const oldPosition = await removeExistingCharts(context, sheet, chartType, chartId);\n\n    let left, top, targetWidth, targetHeight;\n\n    if (oldPosition) {\n      left = oldPosition.left;\n      top = oldPosition.top;\n      targetWidth = oldPosition.width;\n      targetHeight = oldPosition.height;\n    } else {\n      const range = context.workbook.getSelectedRange();\n      range.load(\"left, top, width, height\");\n      await context.sync();\n      left = range.left;\n      top = range.top;\n    }\n\n    const image = sheet.shapes.addImage(base64data);\n    image.left = left;\n    image.top = top;\n    if (oldPosition) {\n      image.lockAspectRatio = false;\n      image.width = targetWidth;\n      image.height = targetHeight;\n    } else {\n      image.lockAspectRatio = true;\n    }\n    image.name = `${chartType.charAt(0).toUpperCase() + chartType.slice(1)}Chart_${chartId}`;\n\n    await context.sync();\n  });\n}\n\n/**\n * Remove existing chart\n */\nasync function removeExistingCharts(context, sheet, chartType, chartId) {\n  const shapes = sheet.shapes;\n  shapes.load(\"items\");\n  await context.sync();\n\n  const chartName = `${chartType.charAt(0).toUpperCase() + chartType.slice(1)}Chart_${chartId}`;\n  let oldPosition = null;\n\n  shapes.items.forEach(shape => {\n    shape.load([\"name\", \"left\", \"top\", \"width\", \"height\"]);\n  });\n  await context.sync();\n\n  for (let shape of shapes.items) {\n    if (shape.name === chartName) {\n      oldPosition = {\n        left: shape.left,\n        top: shape.top,\n        width: shape.width,\n        height: shape.height,\n      };\n      shape.delete();\n    }\n  }\n\n  await context.sync();\n  return oldPosition;\n}\n\n/**\n * Load Vega libraries\n */\nfunction loadVegaLibraries() {\n  return new Promise((resolve, reject) => {\n    if (typeof vegaEmbed !== 'undefined') {\n      resolve();\n      return;\n    }\n\n    // Load libraries in sequence (same as taskpane.html)\n    const scripts = [\n      'https://cdn.jsdelivr.net/npm/vega@6',\n      'https://cdn.jsdelivr.net/npm/vega-lite@6', \n      'https://cdn.jsdelivr.net/npm/vega-embed@6'\n    ];\n\n    let loadedCount = 0;\n    \n    scripts.forEach((src, index) => {\n      const script = document.createElement('script');\n      script.src = src;\n      script.onload = () => {\n        loadedCount++;\n        if (loadedCount === scripts.length) {\n          resolve();\n        }\n      };\n      script.onerror = () => reject(new Error(`Failed to load ${src}`));\n      document.head.appendChild(script);\n    });\n  });\n}\n\nif (typeof CustomFunctions !== 'undefined') {\n  CustomFunctions.associate(\"LINE\", LINE);\n  CustomFunctions.associate(\"BAR\", BAR);\n  CustomFunctions.associate(\"PIE\", PIE);\n  CustomFunctions.associate(\"DONUT\", DONUT);\n  CustomFunctions.associate(\"GAUGE\", GAUGE);\n  CustomFunctions.associate(\"AREA\", AREA);\n  CustomFunctions.associate(\"SCATTER\", SCATTER);\n  CustomFunctions.associate(\"BUBBLE\", BUBBLE);\n  CustomFunctions.associate(\"RADIAL\", RADIAL);\n  CustomFunctions.associate(\"CHORD\", CHORD);\n  CustomFunctions.associate(\"RING\", RING);\n  CustomFunctions.associate(\"BOX\", BOX);\n  CustomFunctions.associate(\"RADAR\", RADAR);\n  CustomFunctions.associate(\"WATERFALL\", WATERFALL);\n  CustomFunctions.associate(\"SUNBURST\", SUNBURST);\n  CustomFunctions.associate(\"TREEMAP\", TREEMAP);\n  CustomFunctions.associate(\"HISTOGRAM\", HISTOGRAM);\n  CustomFunctions.associate(\"CANDLESTICK\", CANDLESTICK);\n  CustomFunctions.associate(\"MAP\", MAP);\n  CustomFunctions.associate(\"ARC\", ARC);\n  CustomFunctions.associate(\"TREE\", TREE);\n  CustomFunctions.associate(\"WORDCLOUD\", WORDCLOUD);\n  CustomFunctions.associate(\"STRIP\", STRIP);\n  CustomFunctions.associate(\"HEATMAP\", HEATMAP);\n  CustomFunctions.associate(\"BULLET\", BULLET);\n  CustomFunctions.associate(\"HORIZON\", HORIZON);\n  CustomFunctions.associate(\"STREAMGRAPH\", STREAMGRAPH);\n  CustomFunctions.associate(\"DUMBBELL\", DUMBBELL);\n  CustomFunctions.associate(\"SLOPE\", SLOPE);\n  CustomFunctions.associate(\"MEKKO\", MEKKO);\n  CustomFunctions.associate(\"MARIMEKKO\", MARIMEKKO);\n  CustomFunctions.associate(\"BUMP\", BUMP);\n  CustomFunctions.associate(\"WAFFLE\", WAFFLE);\n  CustomFunctions.associate(\"LOLLIPOP\", LOLLIPOP);\n  CustomFunctions.associate(\"VIOLIN\", VIOLIN);\n  CustomFunctions.associate(\"GANTT\", GANTT);\n  CustomFunctions.associate(\"SANKEY\", SANKEY);\n  CustomFunctions.associate(\"RIBBON\", RIBBON);\n  CustomFunctions.associate(\"RIDGELINE\", RIDGELINE);\n  CustomFunctions.associate(\"DEVIATION\", DEVIATION);\n  CustomFunctions.associate(\"VARIANCE\", VARIANCE);\n}\nCustomFunctions.associate(\"LINE\", LINE);\nCustomFunctions.associate(\"BAR\", BAR);\nCustomFunctions.associate(\"GAUGE\", GAUGE);\nCustomFunctions.associate(\"PIE\", PIE);\nCustomFunctions.associate(\"DONUT\", DONUT);\nCustomFunctions.associate(\"CHORD\", CHORD);\nCustomFunctions.associate(\"AREA\", AREA);\nCustomFunctions.associate(\"STREAMGRAPH\", STREAMGRAPH);\nCustomFunctions.associate(\"SCATTER\", SCATTER);\nCustomFunctions.associate(\"BUBBLE\", BUBBLE);\nCustomFunctions.associate(\"RING\", RING);\nCustomFunctions.associate(\"RADIAL\", RADIAL);\nCustomFunctions.associate(\"BOX\", BOX);\nCustomFunctions.associate(\"RADAR\", RADAR);\nCustomFunctions.associate(\"WATERFALL\", WATERFALL);\nCustomFunctions.associate(\"SUNBURST\", SUNBURST);\nCustomFunctions.associate(\"TREEMAP\", TREEMAP);\nCustomFunctions.associate(\"HISTOGRAM\", HISTOGRAM);\nCustomFunctions.associate(\"MAP\", MAP);\nCustomFunctions.associate(\"CANDLESTICK\", CANDLESTICK);\nCustomFunctions.associate(\"ARC\", ARC);\nCustomFunctions.associate(\"TREE\", TREE);\nCustomFunctions.associate(\"WORDCLOUD\", WORDCLOUD);\nCustomFunctions.associate(\"STRIP\", STRIP);\nCustomFunctions.associate(\"HEATMAP\", HEATMAP);\nCustomFunctions.associate(\"BULLET\", BULLET);\nCustomFunctions.associate(\"HORIZON\", HORIZON);\nCustomFunctions.associate(\"DUMBBELL\", DUMBBELL);\nCustomFunctions.associate(\"SLOPE\", SLOPE);\nCustomFunctions.associate(\"MEKKO\", MEKKO);\nCustomFunctions.associate(\"MARIMEKKO\", MARIMEKKO);\nCustomFunctions.associate(\"BUMP\", BUMP);\nCustomFunctions.associate(\"WAFFLE\", WAFFLE);\nCustomFunctions.associate(\"LOLLIPOP\", LOLLIPOP);\nCustomFunctions.associate(\"VIOLIN\", VIOLIN);\nCustomFunctions.associate(\"GANTT\", GANTT);\nCustomFunctions.associate(\"SANKEY\", SANKEY);\nCustomFunctions.associate(\"RIDGELINE\", RIDGELINE);\nCustomFunctions.associate(\"VARIANCE\", VARIANCE);\nCustomFunctions.associate(\"DEVIATION\", DEVIATION);\nCustomFunctions.associate(\"RIBBON\", RIBBON);"],"names":["e","t","r","Symbol","n","iterator","o","toStringTag","i","c","prototype","Generator","u","Object","create","_regeneratorDefine2","f","p","y","G","v","a","d","bind","length","l","TypeError","call","done","value","return","GeneratorFunction","GeneratorFunctionPrototype","getPrototypeOf","setPrototypeOf","__proto__","displayName","_regenerator","w","m","defineProperty","_invoke","enumerable","configurable","writable","_createForOfIteratorHelper","Array","isArray","_unsupportedIterableToArray","_n","F","s","next","_arrayLikeToArray","toString","slice","constructor","name","from","test","asyncGeneratorStep","Promise","resolve","then","_asyncToGenerator","arguments","apply","_next","_throw","ownKeys","keys","getOwnPropertySymbols","filter","getOwnPropertyDescriptor","push","_objectSpread","forEach","_defineProperty","getOwnPropertyDescriptors","defineProperties","_typeof","toPrimitive","String","_toPrimitive","_toPropertyKey","LINE","data","invocation","headers","processedData","map","row","obj","h","transformedData","valueColumns","colName","undefined","parseFloat","createChart","$schema","description","background","config","view","stroke","values","mark","type","point","tooltip","strokeWidth","encoding","x","field","axis","title","labelFontSize","titleFontSize","labelAngle","color","scale","scheme","legend","font","labelColor","titleColor","gridColor","size","filled","concat","address","replace","catch","error","message","BAR","GAUGE","rows","gaugeRow","PIE","some","isNaN","outerRadius","theta","DONUT","innerRadius","range","orient","format","CHORD","matrix","nodeLabels","nodeSet","Set","add","nodeIndex","label","fill","source","dest","sourceIdx","destIdx","_","colIndex","nodeTotals","j","totalSum","reduce","sum","val","chords","currentAngle","angleSize","Math","PI","index","startAngle","endAngle","usedAngles","start","end","ribbonsPaths","sourceChord","targetChord","sourceAngleSpan","sourceStart","sourceEnd","targetAngleSpan","targetStart","targetEnd","s0x","cos","s0y","sin","s1x","s1y","t0x","t0y","t1x","t1y","sourceLargeArc","targetLargeArc","path","target","sourceLabel","targetLabel","spec","chartId","loadVegaLibraries","container","document","createElement","id","style","position","left","body","appendChild","vegaEmbed","actions","renderer","result","toCanvas","canvas","toBlob","blob","reader","FileReader","onloadend","base64data","split","Excel","run","_ref","_callee","context","sheet","shapes","chartName","_iterator","_step","shape","image","tempDiv","_t","_context","workbook","worksheets","getActiveWorksheet","load","sync","items","delete","getSelectedRange","addImage","top","lockAspectRatio","getElementById","removeChild","_x","readAsDataURL","AREA","opacity","STREAMGRAPH","xAxisType","width","height","firstColValue","Date","includes","parsedDate","getTime","interpolate","domain","tickSize","aggregate","stack","SCATTER","zero","BUBBLE","RING","numRings","ringWidth","max","min","ringGap","maxRadius","generateRingColor","total","saturation","lightness","chartData","assign","_toConsumableArray","ringPositions","currentOuter","outer","inner","middle","legendStartY","flat","RADIAL","transform","window","op","as","sort","order","layer","radiusOffset","text","radius","rangeMin","BOX","category","extent","RADAR","radarData","dimensions","seriesIndex","seriesName","dimension","indexOf","series","uniqueDimensions","padding","autosize","signals","scales","nice","domainMin","encode","enter","marks","zindex","facet","fillOpacity","strokeOpacity","x2","y2","align","baseline","fontWeight","fontSize","WATERFALL","processedDataRaw","numDataPoints","dynamicWidth","maxAmount","abs","paddingInner","paddingOuter","condition","SUNBURST","nodes","Map","parent","child","has","set","existingNode","get","hierarchicalData","allIds","node","nodeCount","chartSize","TREEMAP","treeData","find","key","parentKey","round","method","ratio","signal","expr","interactive","update","hover","HISTOGRAM","numericData","minVal","maxVal","binWidth","niceMin","floor","niceMax","ceil","MAP","isoToId","worldData","iso","toUpperCase","trim","rate","url","feature","lookup","fields","projection","CANDLESTICK","candlestickData","serial","date","open","high","low","close","toISOString","Boolean","ARC","edges","group","nodeMap","edge","edgesWithIndices","bottom","right","groupby","ops","default","count","mult","offset","sourceX","targetX","sourceY","targetY","angle","TREE","WORDCLOUD","case","pattern","stopwords","rotate","fontSizeRange","STRIP","thickness","grid","gridOpacity","HEATMAP","spacing","bounds","vconcat","cornerRadiusEnd","hconcat","ticks","labels","labelPadding","direction","gradientLength","contains","titleFont","titleFontWeight","labelFont","BULLET","ranges","measures","markers","HORIZON","horizonData","yValues","maxY","minY","bandHeight","dataPoints","toLowerCase","DUMBBELL","dumbellData","value1","value2","period","dynamicHeight","categoryCount","labelAlign","minExtent","detail","SLOPE","timePeriods","categories","firstPeriod","lastPeriod","slopeData","formatString","every","labelFontWeight","strokeDash","datum","dx","dy","fontStyle","MEKKO","axes","tickCount","lineHeight","MARIMEKKO","BUMP","uniqueX","line","strokeCap","strokeJoin","WAFFLE","joinaggregate","calculate","header","symbolType","symbolSize","LOLLIPOP","VIOLIN","continuousWidth","continuousHeight","column","labelOrient","titleOrient","impute","density","GANTT","excelDateToJSDate","buildHierarchy","_step3","parentId","level","ordered","_iterator3","childrenMap","task","err","ganttData","progress","startDate","endDate","dependencies","duration","progressEnd","_step2","_iterator2","entries","_step2$value","_slicedToArray","b","orderedTasks","SANKEY","links","destination","nodeStages","inDegree","outEdges","allNodes","link","queue","firstNode","processed","_loop","current","shift","currentStage","neighbor","newStage","existingStage","assignNodeStages","nodeToStack","stageGroups","stage","stageIndex","nodesInStage","stackNumber","reverse","band","clip","yc","cornerRadius","RIDGELINE","labelAnchor","VARIANCE","DEVIATION","RIBBON","uniquePeriods","titlePadding","gridWidth","_x2","_x3","_x4","_createChart","_callee3","chartType","hiddenDiv","pngUrl","response","_context3","display","toImageURL","fetch","reject","_callee2","_t2","_context2","insertChart","_x5","_x6","_x7","_insertChart","_callee5","_context5","_ref4","_callee4","oldPosition","targetWidth","targetHeight","_context4","removeExistingCharts","charAt","_x10","_x8","_x9","_x0","_x1","_removeExistingCharts","_callee6","_iterator4","_step4","_context6","scripts","loadedCount","src","script","onload","onerror","Error","head","CustomFunctions","associate"],"sourceRoot":""}