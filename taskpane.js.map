{"version":3,"file":"taskpane.js","mappings":"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","sources":["webpack://excel-custom-functions-js/webpack/bootstrap","webpack://excel-custom-functions-js/webpack/runtime/define property getters","webpack://excel-custom-functions-js/webpack/runtime/global","webpack://excel-custom-functions-js/webpack/runtime/hasOwnProperty shorthand","webpack://excel-custom-functions-js/webpack/runtime/publicPath","webpack://excel-custom-functions-js/webpack/runtime/jsonp chunk loading","webpack://excel-custom-functions-js/./src/taskpane/taskpane.js","webpack://excel-custom-functions-js/./src/taskpane/taskpane.html"],"sourcesContent":["// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript && document.currentScript.tagName.toUpperCase() === 'SCRIPT')\n\t\tscriptUrl = document.currentScript.src;\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) {\n\t\t\tvar i = scripts.length - 1;\n\t\t\twhile (i > -1 && (!scriptUrl || !/^http(s?):/.test(scriptUrl))) scriptUrl = scripts[i--].src;\n\t\t}\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/^blob:/, \"\").replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","__webpack_require__.b = document.baseURI || self.location.href;\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t926: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n// no on chunks loaded\n\n// no jsonp function","/* global console, document, Excel, Office */\n\nOffice.onReady(() => {\n  document.getElementById(\"drawChart\").onclick = run;\n});\n\nexport async function run() {\n  try {\n    await Excel.run(async (context) => {\n      const sheet = context.workbook.worksheets.getActiveWorksheet();\n\n      // Get current selection\n      const range = context.workbook.getSelectedRange();\n      range.load(\"values, left, top\");\n      await context.sync();\n\n      const values = range.values;\n      if (values.length < 2) {\n        console.warn(\"Need at least header row + one data row\");\n        return;\n      }\n\n      // First row is header\n      const headers = values[0];\n      const rows = values.slice(1);\n\n      // Convert rows -> objects\n      const data = rows.map(row => {\n        let obj = {};\n        headers.forEach((h, i) => {\n          obj[h] = row[i];\n        });\n        return obj;\n      });\n\n      // Get chart type from dropdown\n      const chartType = document.getElementById(\"chartType\").value;\n\n      let spec;\n\n      if (chartType === \"point\") {\n        spec = {\n          $schema: \"https://vega.github.io/schema/vega-lite/v6.json\",\n          description: \"Colored scatter plot from Excel selection\",\n          background: \"white\",\n          config: { view: { stroke: \"transparent\" }},\n          data: { values: data },\n          mark: { type: \"point\", size: 100, tooltip: true },\n          encoding: {\n            x: { \n              field: headers[0], \n              type: \"quantitative\",\n              scale: { zero: false },\n              axis: {\n                title: headers[0],\n                labelFontSize: 12,\n                titleFontSize: 14\n              }\n            },\n            y: { \n              field: headers[1], \n              type: \"quantitative\",\n              scale: { zero: false },\n              axis: {\n                title: headers[1],\n                labelFontSize: 12,\n                titleFontSize: 14\n              }\n            },\n            // Add color encoding if 3rd column exists\n            ...(headers.length >= 3 && {\n              color: { \n                field: headers[2], \n                type: \"nominal\",\n                legend: {\n                  title: headers[2],\n                  titleFontSize: 12,\n                  labelFontSize: 11\n                }\n              }\n            }),\n            // Add shape encoding if 4th column exists\n            ...(headers.length >= 4 && {\n              shape: { \n                field: headers[3], \n                type: \"nominal\",\n                legend: {\n                  title: headers[3],\n                  titleFontSize: 12,\n                  labelFontSize: 11\n                }\n              }\n            })\n          },\n          config: {\n            font: \"Segoe UI\",\n            axis: {\n              labelColor: \"#605e5c\",\n              titleColor: \"#323130\",\n              gridColor: \"#f3f2f1\"\n            },\n            legend: {\n              titleColor: \"#323130\",\n              labelColor: \"#605e5c\"\n            }\n          }\n        };\n      }\n\n      else if (chartType === \"line\") {\n        const transformedData = [];\n        const valueColumns = headers.slice(1);\n        data.forEach(row => {\n            valueColumns.forEach(colName => {\n            if (row[colName] !== null && row[colName] !== undefined && row[colName] !== \"\") {\n                transformedData.push({\n                [headers[0]]: row[headers[0]], // x-axis value (first column)\n                series: colName,               // series name (column header)\n                value: parseFloat(row[colName]) || 0  // y-axis value\n                });\n            }\n            });\n        });\n\n        spec = {\n            $schema: \"https://vega.github.io/schema/vega-lite/v6.json\",\n            description: \"Multi-series line chart from Excel selection\",\n            background: \"white\",\n            config: { view: { stroke: \"transparent\" }},\n            data: { values: transformedData },\n            mark: { \n            type: \"line\", \n            point: false,\n            tooltip: true,\n            strokeWidth: 2\n            },\n            encoding: {\n            x: { \n                field: headers[0], \n                type: \"ordinal\",\n                axis: {\n                title: headers[0],\n                labelFontSize: 12,\n                titleFontSize: 14,\n                labelAngle: 0\n                }\n            },\n            y: { \n                field: \"value\", \n                type: \"quantitative\",\n                axis: {\n                title: \"Value\",\n                labelFontSize: 12,\n                titleFontSize: 14\n                }\n            },\n            color: { \n                field: \"series\", \n                type: \"nominal\",\n                scale: {\n                scheme: \"category10\"\n                },\n                legend: {\n                title: \"Series\",\n                titleFontSize: 12,\n                labelFontSize: 11\n                }\n            }\n            },\n            config: {\n            font: \"Segoe UI\",\n            axis: {\n                labelColor: \"#605e5c\",\n                titleColor: \"#323130\",\n                gridColor: \"#f3f2f1\"\n            },\n            legend: {\n                titleColor: \"#323130\",\n                labelColor: \"#605e5c\"\n            },\n            point: {\n                size: 60,\n                filled: true\n            }\n            }\n        };\n      }\n\n      else if (chartType === \"gantt\") {\n      function excelDateToJSDate(serial) {\n          return new Date(Math.round((serial - 25569) * 86400 * 1000));\n      }\n\n      const ganttData = rows.map(row => {\n          const parentId = row[0] || null;   // col 1 = parent id\n          const id = row[1];                 // col 2 = task id\n          const name = row[2] || `Task ${id}`;\n          if (!id) return null;\n\n          const start = typeof row[3] === \"number\" ? excelDateToJSDate(row[3]) : new Date(row[3]);\n          const end = typeof row[4] === \"number\" ? excelDateToJSDate(row[4]) : new Date(row[4]);\n          if (!(start instanceof Date) || isNaN(start) || !(end instanceof Date) || isNaN(end)) return null;\n\n          let progress = 0;\n          if (row[5]) {\n              if (typeof row[5] === \"string\" && row[5].includes(\"%\")) {\n                  progress = parseFloat(row[5]) / 100;\n              } else if (row[5] > 1) {\n                  progress = row[5] / 100;\n              } else {\n                  progress = row[5];\n              }\n          }\n\n          const dependencies = row[6] ? String(row[6]).split(\",\").map(d => d.trim()) : [];\n\n          return { id, parentId, name, startDate: start, endDate: end, progress, dependencies };\n      }).filter(Boolean);\n\n      // Precompute progressEnd\n      ganttData.forEach(task => {\n          const duration = task.endDate - task.startDate;\n          task.progressEnd = new Date(task.startDate.getTime() + duration * task.progress);\n      });\n\n      // Build parent->children map\n      const childrenMap = new Map();\n      ganttData.forEach(task => {\n          if (!childrenMap.has(task.parentId)) {\n              childrenMap.set(task.parentId, []);\n          }\n          childrenMap.get(task.parentId).push(task);\n      });\n\n      // Sort children by startDate\n      for (let [pid, childList] of childrenMap.entries()) {\n          childList.sort((a, b) => a.startDate - b.startDate);\n      }\n\n      // Recursive hierarchy ordering\n      function buildHierarchy(parentId = null, level = 0) {\n          const ordered = [];\n          const tasks = childrenMap.get(parentId) || [];\n          for (const task of tasks) {\n              task.level = level;\n              ordered.push(task);\n              ordered.push(...buildHierarchy(task.id, level + 1));\n          }\n          return ordered;\n      }\n\n      const orderedTasks = buildHierarchy(null);\n\n      spec = {\n          $schema: \"https://vega.github.io/schema/vega-lite/v5.json\",\n          description: \"Gantt Chart from Excel Data\",\n          width: 800,\n          height: Math.max(300, orderedTasks.length * 30),\n          data: { values: orderedTasks },\n          layer: [\n              {\n                  mark: { type: \"bar\", opacity: 0.3, height: 20 },\n                  encoding: {\n                      y: { field: \"name\", type: \"nominal\", axis: { title: null, labelFontSize: 11 }, sort: null },\n                      x: { field: \"startDate\", type: \"temporal\", axis: { title: \"Timeline\", format: \"%b %d\", labelAngle: -45 } },\n                      x2: { field: \"endDate\", type: \"temporal\" },\n                      color: { field: \"level\", type: \"ordinal\", scale: { scheme: \"category10\" }, legend: { title: \"Level\" } },\n                      tooltip: [\n                          { field: \"name\", type: \"nominal\", title: \"Task\" },\n                          { field: \"startDate\", type: \"temporal\", title: \"Start\", format: \"%Y-%m-%d\" },\n                          { field: \"endDate\", type: \"temporal\", title: \"End\", format: \"%Y-%m-%d\" },\n                          { field: \"progress\", type: \"quantitative\", title: \"Progress\", format: \".0%\" }\n                      ]\n                  }\n              },\n              {\n                  mark: { type: \"bar\", opacity: 0.8, height: 20 },\n                  encoding: {\n                      y: { field: \"name\", type: \"nominal\", sort: null },\n                      x: { field: \"startDate\", type: \"temporal\" },\n                      x2: { field: \"progressEnd\", type: \"temporal\" },\n                      color: { field: \"level\", type: \"ordinal\", scale: { scheme: \"category10\" } }\n                  }\n              },\n              {\n                  mark: { type: \"text\", align: \"left\", baseline: \"middle\", dx: 5, fontSize: 10 },\n                  encoding: {\n                      y: { field: \"name\", type: \"nominal\", sort: null },\n                      x: { field: \"endDate\", type: \"temporal\" },\n                      text: { field: \"progress\", type: \"quantitative\", format: \".0%\" },\n                      color: { value: \"#666\" }\n                  }\n              },\n              {\n                  mark: { type: \"rule\", strokeDash: [4, 4], opacity: 0.5 },\n                  data: { values: [{ date: new Date().toISOString() }] },\n                  encoding: {\n                      x: { field: \"date\", type: \"temporal\" },\n                      color: { value: \"red\" },\n                      size: { value: 1 }\n                  }\n              }\n          ],\n          config: { view: { stroke: null }, axis: { grid: true, gridColor: \"#f0f0f0\" } }\n        };\n      }\n\n      else if (chartType === \"slope\") {\n        const timePeriods = [...new Set(data.map(d => d[headers[0]]))];\n        const categories = [...new Set(data.map(d => d[headers[1]]))];\n        \n        // Filter data for first and last periods only\n        const firstPeriod = timePeriods[0];\n        const lastPeriod = timePeriods[timePeriods.length - 1];\n        \n        const slopeData = data.filter(d => \n            d[headers[0]] === firstPeriod || d[headers[0]] === lastPeriod\n        );\n\n        // Check if values are percentages (between -1 and 1)\n        const allValues = slopeData.map(d => d[headers[2]]);\n        const isPercentage = allValues.every(v => v >= -1 && v <= 1);\n        const formatString = isPercentage ? \".1%\" : \",.0f\";\n\n        // Calculate dynamic dimensions based on number of categories\n        const dynamicHeight = Math.max(300, Math.min(600, categories.length * 40));\n        const dynamicWidth = 500;\n\n        spec = {\n            $schema: \"https://vega.github.io/schema/vega-lite/v6.json\",\n            description: \"Slope chart from Excel selection\",\n            background: \"white\",\n            config: { \n            view: { stroke: \"transparent\" },\n            autosize: { type: \"fit\", contains: \"padding\" }\n            },\n            width: dynamicWidth,\n            height: dynamicHeight,\n            data: { values: slopeData },\n            encoding: {\n            x: {\n                field: headers[0],\n                type: \"ordinal\",\n                axis: {\n                title: null,\n                labelFontSize: 14,\n                labelFontWeight: \"bold\",\n                labelPadding: 10,\n                domain: false,\n                ticks: false,\n                labelColor: \"#323130\"\n                },\n                scale: { padding: 0.1 }\n            },\n            y: {\n                field: headers[2],\n                type: \"quantitative\",\n                axis: null,\n                scale: { zero: false }\n            },\n            color: {\n                field: headers[1],\n                type: \"nominal\",\n                legend: null,\n                scale: { scheme: \"category10\" }\n            }\n            },\n            layer: [\n            // Background grid lines\n            {\n                mark: {\n                type: \"rule\",\n                strokeDash: [2, 2],\n                opacity: 0.3\n                },\n                data: { values: [{}] },\n                encoding: {\n                x: { datum: firstPeriod },\n                x2: { datum: lastPeriod },\n                y: { value: 0 },\n                color: { value: \"#e0e0e0\" }\n                }\n            },\n            // Slope lines\n            {\n                mark: {\n                type: \"line\",\n                strokeWidth: 2,\n                opacity: 0.7,\n                tooltip: true\n                },\n                encoding: {\n                detail: { field: headers[1], type: \"nominal\" },\n                tooltip: [\n                    { field: headers[1], type: \"nominal\", title: \"Category\" },\n                    { field: headers[0], type: \"nominal\", title: \"Period\" },\n                    { field: headers[2], type: \"quantitative\", title: \"Value\", format: formatString }\n                ]\n                }\n            },\n            // Points at the ends\n            {\n                mark: {\n                type: \"circle\",\n                size: 100,\n                opacity: 1,\n                tooltip: true\n                }\n            },\n            // Left side value labels\n            {\n                transform: [\n                { filter: `datum['${headers[0]}'] == '${firstPeriod}'` }\n                ],\n                mark: {\n                type: \"text\",\n                align: \"right\",\n                baseline: \"middle\",\n                dx: -8,\n                fontSize: 11,\n                fontWeight: \"normal\"\n                },\n                encoding: {\n                text: { \n                    field: headers[2], \n                    type: \"quantitative\",\n                    format: formatString\n                }\n                }\n            },\n            // Left side category labels (for top values)\n            {\n                transform: [\n                { filter: `datum['${headers[0]}'] == '${firstPeriod}'` },\n                {\n                    window: [{ op: \"rank\", as: \"rank\" }],\n                    sort: [{ field: headers[2], order: \"descending\" }]\n                },\n                { filter: \"datum.rank <= 3\" }\n                ],\n                mark: {\n                type: \"text\",\n                align: \"right\",\n                baseline: \"bottom\",\n                dx: -8,\n                dy: -12,\n                fontSize: 10,\n                fontWeight: \"bold\",\n                fontStyle: \"italic\"\n                },\n                encoding: {\n                text: { field: headers[1], type: \"nominal\" }\n                }\n            },\n            // Right side value labels\n            {\n                transform: [\n                { filter: `datum['${headers[0]}'] == '${lastPeriod}'` }\n                ],\n                mark: {\n                type: \"text\",\n                align: \"left\",\n                baseline: \"middle\",\n                dx: 8,\n                fontSize: 11,\n                fontWeight: \"normal\"\n                },\n                encoding: {\n                text: { \n                    field: headers[2], \n                    type: \"quantitative\",\n                    format: formatString\n                }\n                }\n            },\n            // Right side category labels\n            {\n                transform: [\n                { filter: `datum['${headers[0]}'] == '${lastPeriod}'` }\n                ],\n                mark: {\n                type: \"text\",\n                align: \"left\",\n                baseline: \"middle\",\n                dx: 35,\n                fontSize: 10,\n                fontWeight: \"bold\"\n                },\n                encoding: {\n                text: { field: headers[1], type: \"nominal\" }\n                }\n            }\n            ],\n            config: {\n            view: { stroke: \"transparent\" },\n            font: \"Segoe UI\",\n            text: { \n                font: \"Segoe UI\", \n                fontSize: 11, \n                fill: \"#605E5C\" \n            },\n            axis: {\n                labelColor: \"#605e5c\",\n                titleColor: \"#323130\",\n                gridColor: \"#f3f2f1\"\n            }\n            }\n        };\n      }\n\n      else if (chartType === \"horizon\") {\n        const horizonData = data.map((row, index) => ({\n            x: row[headers[0]] || index + 1,\n            y: parseFloat(row[headers[1]]) || 0\n        }));\n\n        // Calculate data range and bands\n        const yValues = horizonData.map(d => d.y);\n        const maxY = Math.max(...yValues);\n        const minY = Math.min(...yValues);\n        const range = maxY - minY;\n        \n        // Define number of bands (typically 2-4 for horizon graphs)\n        const numBands = 3;\n        const bandHeight = range / (numBands * 2); // Divide by 2 for positive and negative\n        const baseline = minY + range / 2; // Use middle as baseline\n        \n        // Calculate dynamic dimensions\n        const dataPoints = horizonData.length;\n        const dynamicWidth = Math.max(300, Math.min(800, dataPoints * 15));\n\n        spec = {\n            \"$schema\": \"https://vega.github.io/schema/vega-lite/v6.json\",\n            \"description\": \"Horizon Graph from Excel selection (IDL methodology)\",\n            \"width\": dynamicWidth,\n            \"height\": 60,\n            \"background\": \"white\",\n            \"config\": { \n            \"view\": { \"stroke\": \"transparent\" },\n            \"area\": {\"interpolate\": \"monotone\"}\n            },\n            \"data\": { \"values\": horizonData },\n            \"encoding\": {\n            \"x\": {\n                \"field\": \"x\",\n                \"type\": headers[0].toLowerCase().includes('date') ? \"temporal\" : \"quantitative\",\n                \"scale\": {\"zero\": false, \"nice\": false},\n                \"axis\": {\n                \"title\": headers[0],\n                \"labelFontSize\": 10,\n                \"titleFontSize\": 12,\n                \"labelColor\": \"#605e5c\",\n                \"titleColor\": \"#323130\",\n                \"font\": \"Segoe UI\"\n                }\n            },\n            \"y\": {\n                \"type\": \"quantitative\",\n                \"scale\": {\"domain\": [0, bandHeight]},\n                \"axis\": {\n                \"title\": headers[1],\n                \"orient\": \"left\",\n                \"labelFontSize\": 10,\n                \"titleFontSize\": 12,\n                \"labelColor\": \"#605e5c\",\n                \"titleColor\": \"#323130\",\n                \"font\": \"Segoe UI\",\n                \"tickCount\": 3\n                }\n            }\n            },\n            \"layer\": [\n            // Band 1 (lightest positive)\n            {\n                \"transform\": [\n                {\"calculate\": `max(0, min(datum.y - ${baseline}, ${bandHeight}))`, \"as\": \"band1\"}\n                ],\n                \"mark\": {\n                \"type\": \"area\",\n                \"clip\": true,\n                \"opacity\": 0.3,\n                \"color\": \"#4a90e2\",\n                \"interpolate\": \"monotone\"\n                },\n                \"encoding\": {\n                \"y\": {\"field\": \"band1\"}\n                }\n            },\n            // Band 2 (medium positive)\n            {\n                \"transform\": [\n                {\"calculate\": `max(0, min(datum.y - ${baseline} - ${bandHeight}, ${bandHeight}))`, \"as\": \"band2\"}\n                ],\n                \"mark\": {\n                \"type\": \"area\",\n                \"clip\": true,\n                \"opacity\": 0.6,\n                \"color\": \"#2e7bd6\",\n                \"interpolate\": \"monotone\"\n                },\n                \"encoding\": {\n                \"y\": {\"field\": \"band2\"}\n                }\n            },\n            // Band 3 (darkest positive)\n            {\n                \"transform\": [\n                {\"calculate\": `max(0, datum.y - ${baseline} - ${bandHeight * 2})`, \"as\": \"band3\"}\n                ],\n                \"mark\": {\n                \"type\": \"area\",\n                \"clip\": true,\n                \"opacity\": 0.9,\n                \"color\": \"#1a5bb8\",\n                \"interpolate\": \"monotone\"\n                },\n                \"encoding\": {\n                \"y\": {\"field\": \"band3\"}\n                }\n            },\n            // Band -1 (lightest negative, mirrored)\n            {\n                \"transform\": [\n                {\"calculate\": `max(0, min(${baseline} - datum.y, ${bandHeight}))`, \"as\": \"nband1\"}\n                ],\n                \"mark\": {\n                \"type\": \"area\",\n                \"clip\": true,\n                \"opacity\": 0.3,\n                \"color\": \"#e74c3c\",\n                \"interpolate\": \"monotone\"\n                },\n                \"encoding\": {\n                \"y\": {\"field\": \"nband1\"}\n                }\n            },\n            // Band -2 (medium negative, mirrored)\n            {\n                \"transform\": [\n                {\"calculate\": `max(0, min(${baseline} - datum.y - ${bandHeight}, ${bandHeight}))`, \"as\": \"nband2\"}\n                ],\n                \"mark\": {\n                \"type\": \"area\",\n                \"clip\": true,\n                \"opacity\": 0.6,\n                \"color\": \"#c0392b\",\n                \"interpolate\": \"monotone\"\n                },\n                \"encoding\": {\n                \"y\": {\"field\": \"nband2\"}\n                }\n            },\n            // Band -3 (darkest negative, mirrored)\n            {\n                \"transform\": [\n                {\"calculate\": `max(0, ${baseline} - datum.y - ${bandHeight * 2})`, \"as\": \"nband3\"}\n                ],\n                \"mark\": {\n                \"type\": \"area\",\n                \"clip\": true,\n                \"opacity\": 0.9,\n                \"color\": \"#a93226\",\n                \"interpolate\": \"monotone\"\n                },\n                \"encoding\": {\n                \"y\": {\"field\": \"nband3\"}\n                }\n            }\n            ]\n        };\n      }\n\n      else if (chartType === \"tree\") {\n        const nodes = new Map();\n\n        data.forEach((row, i) => {\n            const parent = row[headers[0]] || \"\";\n            const child = row[headers[1]] || `node_${i}`;\n            const value = headers.length >= 3 ? (parseFloat(row[headers[2]]) || 1) : 1;\n            \n            // Add parent node if it doesn't exist and is not empty\n            if (parent && !nodes.has(parent)) {\n            nodes.set(parent, {\n                id: parent,\n                parent: \"\",\n                name: parent,\n                value: 1\n            });\n            }\n            \n            // Add child node\n            if (!nodes.has(child)) {\n            nodes.set(child, {\n                id: child,\n                parent: parent,\n                name: child,\n                value: value\n            });\n            } else {\n            // Update parent and value if child already exists\n            const existingNode = nodes.get(child);\n            existingNode.parent = parent;\n            existingNode.value = value;\n            }\n        });\n        \n        // Convert Map to array\n        const treeData = Array.from(nodes.values());\n        \n        // Find root nodes (nodes with no parent or parent not in dataset)\n        const allIds = new Set(treeData.map(d => d.id));\n        treeData.forEach(node => {\n            if (node.parent && !allIds.has(node.parent)) {\n            node.parent = \"\"; // Make it a root node if parent doesn't exist\n            }\n        });\n\n        // Calculate dynamic dimensions based on data size\n        const nodeCount = treeData.length;\n        const dynamicWidth = Math.max(600, Math.min(1200, nodeCount * 40));\n        const dynamicHeight = Math.max(400, Math.min(1600, nodeCount * 30));\n\n        spec = {\n            \"$schema\": \"https://vega.github.io/schema/vega/v6.json\",\n            \"description\": \"Tree diagram from Excel selection\",\n            \"width\": dynamicWidth,\n            \"height\": dynamicHeight,\n            \"padding\": 20,\n            \"background\": \"white\",\n            \"config\": { \"view\": { \"stroke\": \"transparent\" }},\n\n            \"signals\": [\n            {\n                \"name\": \"layout\", \n                \"value\": \"tidy\"\n            },\n            {\n                \"name\": \"links\", \n                \"value\": \"diagonal\"\n            }\n            ],\n\n            \"data\": [\n            {\n                \"name\": \"tree\",\n                \"values\": treeData,\n                \"transform\": [\n                {\n                    \"type\": \"stratify\",\n                    \"key\": \"id\",\n                    \"parentKey\": \"parent\"\n                },\n                {\n                    \"type\": \"tree\",\n                    \"method\": {\"signal\": \"layout\"},\n                    \"size\": [{\"signal\": \"height - 40\"}, {\"signal\": \"width - 100\"}],\n                    \"as\": [\"y\", \"x\", \"depth\", \"children\"]\n                }\n                ]\n            },\n            {\n                \"name\": \"links\",\n                \"source\": \"tree\",\n                \"transform\": [\n                { \"type\": \"treelinks\" },\n                {\n                    \"type\": \"linkpath\",\n                    \"orient\": \"horizontal\",\n                    \"shape\": {\"signal\": \"links\"}\n                }\n                ]\n            }\n            ],\n\n            \"scales\": [\n            {\n                \"name\": \"color\",\n                \"type\": \"ordinal\",\n                \"range\": [\"#0078d4\", \"#00bcf2\", \"#40e0d0\", \"#00cc6a\", \"#10893e\", \"#107c10\", \"#bad80a\", \"#ffb900\", \"#ff8c00\", \"#d13438\"],\n                \"domain\": {\"data\": \"tree\", \"field\": \"depth\"}\n            },\n            {\n                \"name\": \"size\",\n                \"type\": \"linear\",\n                \"range\": [100, 400],\n                \"domain\": {\"data\": \"tree\", \"field\": \"value\"}\n            }\n            ],\n\n            \"marks\": [\n            {\n                \"type\": \"path\",\n                \"from\": {\"data\": \"links\"},\n                \"encode\": {\n                \"update\": {\n                    \"path\": {\"field\": \"path\"},\n                    \"stroke\": {\"value\": \"#8a8886\"},\n                    \"strokeWidth\": {\"value\": 2},\n                    \"strokeOpacity\": {\"value\": 0.6}\n                }\n                }\n            },\n            {\n                \"type\": \"symbol\",\n                \"from\": {\"data\": \"tree\"},\n                \"encode\": {\n                \"enter\": {\n                    \"stroke\": {\"value\": \"#ffffff\"},\n                    \"strokeWidth\": {\"value\": 2}\n                },\n                \"update\": {\n                    \"x\": {\"field\": \"x\"},\n                    \"y\": {\"field\": \"y\"},\n                    \"size\": {\"scale\": \"size\", \"field\": \"value\"},\n                    \"fill\": {\"scale\": \"color\", \"field\": \"depth\"},\n                    \"fillOpacity\": {\"value\": 0.8},\n                    \"tooltip\": {\n                    \"signal\": \"{'Name': datum.name, 'ID': datum.id, 'Parent': datum.parent, 'Depth': datum.depth, 'Value': datum.value}\"\n                    }\n                },\n                \"hover\": {\n                    \"fillOpacity\": {\"value\": 1.0},\n                    \"strokeWidth\": {\"value\": 3}\n                }\n                }\n            },\n            {\n                \"type\": \"text\",\n                \"from\": {\"data\": \"tree\"},\n                \"encode\": {\n                \"enter\": {\n                    \"fontSize\": {\"value\": 11},\n                    \"baseline\": {\"value\": \"middle\"},\n                    \"font\": {\"value\": \"Segoe UI\"},\n                    \"fontWeight\": {\"value\": \"bold\"}\n                },\n                \"update\": {\n                    \"x\": {\"field\": \"x\"},\n                    \"y\": {\"field\": \"y\"},\n                    \"text\": {\"field\": \"name\"},\n                    \"dx\": {\"signal\": \"datum.children ? -12 : 12\"},\n                    \"align\": {\"signal\": \"datum.children ? 'right' : 'left'\"},\n                    \"fill\": {\"value\": \"#323130\"}\n                }\n                }\n            }\n            ]\n        };\n      }\n\n      else if (chartType === \"sunburst\") {\n        const nodes = new Map();\n        data.forEach((row, i) => {\n            const parent = row[headers[0]] || \"\";\n            const child = row[headers[1]] || `node_${i}`;\n            const value = headers.length >= 3 ? (parseFloat(row[headers[2]]) || 1) : 1;\n            \n            // Add parent node if it doesn't exist and is not empty\n            if (parent && !nodes.has(parent)) {\n            nodes.set(parent, {\n                id: parent,\n                parent: \"\",\n                name: parent,\n                size: 0 // Will be calculated later\n            });\n            }\n            \n            // Add child node\n            if (!nodes.has(child)) {\n            nodes.set(child, {\n                id: child,\n                parent: parent,\n                name: child,\n                size: value\n            });\n            } else {\n            // Update parent and value if child already exists\n            const existingNode = nodes.get(child);\n            existingNode.parent = parent;\n            existingNode.size = value;\n            }\n        });\n        \n        // Convert Map to array\n        const hierarchicalData = Array.from(nodes.values());\n        \n        // Find root nodes (nodes with no parent or parent not in dataset)\n        const allIds = new Set(hierarchicalData.map(d => d.id));\n        hierarchicalData.forEach(node => {\n            if (node.parent && !allIds.has(node.parent)) {\n            node.parent = \"\"; // Make it a root node if parent doesn't exist\n            }\n        });\n\n        // Calculate chart size based on data complexity\n        const nodeCount = hierarchicalData.length;\n        const chartSize = Math.max(400, Math.min(600, nodeCount * 15 + 300));\n\n        spec = {\n            \"$schema\": \"https://vega.github.io/schema/vega/v6.json\",\n            \"description\": \"Sunburst chart from Excel selection\",\n            \"width\": chartSize,\n            \"height\": chartSize,\n            \"padding\": 10,\n            \"autosize\": \"none\",\n            \"background\": \"white\",\n            \"config\": { \"view\": { \"stroke\": \"transparent\" }},\n\n            \"signals\": [\n            {\n                \"name\": \"centerX\",\n                \"update\": \"width / 2\"\n            },\n            {\n                \"name\": \"centerY\", \n                \"update\": \"height / 2\"\n            },\n            {\n                \"name\": \"outerRadius\",\n                \"update\": \"min(width, height) / 2 - 10\"\n            }\n            ],\n\n            \"data\": [\n            {\n                \"name\": \"tree\",\n                \"values\": hierarchicalData,\n                \"transform\": [\n                {\n                    \"type\": \"stratify\",\n                    \"key\": \"id\",\n                    \"parentKey\": \"parent\"\n                },\n                {\n                    \"type\": \"partition\",\n                    \"field\": \"size\",\n                    \"sort\": {\"field\": \"size\", \"order\": \"descending\"},\n                    \"size\": [{\"signal\": \"2 * PI\"}, {\"signal\": \"outerRadius\"}],\n                    \"as\": [\"a0\", \"r0\", \"a1\", \"r1\", \"depth\", \"children\"]\n                }\n                ]\n            }\n            ],\n\n            \"scales\": [\n            {\n                \"name\": \"color\",\n                \"type\": \"ordinal\",\n                \"domain\": {\"data\": \"tree\", \"field\": \"depth\"},\n                \"range\": [\n                \"#0078d4\", \"#00bcf2\", \"#40e0d0\", \"#00cc6a\", \"#10893e\", \n                \"#107c10\", \"#bad80a\", \"#ffb900\", \"#ff8c00\", \"#d13438\",\n                \"#8764b8\", \"#e3008c\", \"#00b7c3\", \"#038387\", \"#486991\"\n                ]\n            },\n            {\n                \"name\": \"opacity\",\n                \"type\": \"linear\",\n                \"domain\": {\"data\": \"tree\", \"field\": \"depth\"},\n                \"range\": [0.8, 0.4]\n            }\n            ],\n\n            \"marks\": [\n            {\n                \"type\": \"arc\",\n                \"from\": {\"data\": \"tree\"},\n                \"encode\": {\n                \"enter\": {\n                    \"x\": {\"signal\": \"centerX\"},\n                    \"y\": {\"signal\": \"centerY\"},\n                    \"stroke\": {\"value\": \"white\"},\n                    \"strokeWidth\": {\"value\": 1}\n                },\n                \"update\": {\n                    \"startAngle\": {\"field\": \"a0\"},\n                    \"endAngle\": {\"field\": \"a1\"},\n                    \"innerRadius\": {\"field\": \"r0\"},\n                    \"outerRadius\": {\"field\": \"r1\"},\n                    \"fill\": {\"scale\": \"color\", \"field\": \"depth\"},\n                    \"fillOpacity\": {\"scale\": \"opacity\", \"field\": \"depth\"}\n                }\n                }\n            },\n            {\n                \"type\": \"text\",\n                \"from\": {\"data\": \"tree\"},\n                \"encode\": {\n                \"enter\": {\n                    \"x\": {\"signal\": \"centerX\"},\n                    \"y\": {\"signal\": \"centerY\"},\n                    \"radius\": {\"signal\": \"(datum.r0 + datum.r1) / 2\"},\n                    \"theta\": {\"signal\": \"(datum.a0 + datum.a1) / 2\"},\n                    \"fill\": {\"value\": \"#323130\"},\n                    \"font\": {\"value\": \"Segoe UI\"},\n                    \"fontSize\": {\"value\": 10},\n                    \"fontWeight\": {\"value\": \"bold\"},\n                    \"align\": {\"value\": \"center\"},\n                    \"baseline\": {\"value\": \"middle\"}\n                },\n                \"update\": {\n                    \"text\": {\n                    \"signal\": \"(datum.r1 - datum.r0) > 20 && (datum.a1 - datum.a0) > 0.3 ? datum.name : ''\"\n                    },\n                    \"opacity\": {\n                    \"signal\": \"(datum.r1 - datum.r0) > 20 && (datum.a1 - datum.a0) > 0.3 ? 1 : 0\"\n                    }\n                }\n                }\n            }\n            ]\n        };\n      }\n\n      else if (chartType === \"radar\") {\n        const radarData = [];\n        const dimensions = headers.slice(1); // All columns except first are dimensions\n        \n        data.forEach((row, seriesIndex) => {\n            const seriesName = row[headers[0]] || `Series ${seriesIndex + 1}`;\n            \n            dimensions.forEach(dimension => {\n            const value = parseFloat(row[dimension]) || 0;\n            radarData.push({\n                series: seriesName,\n                dimension: dimension,\n                value: value,\n                category: seriesIndex\n            });\n            });\n        });\n\n        // Get unique dimensions for grid\n        const uniqueDimensions = [...new Set(radarData.map(d => d.dimension))];\n\n        spec = {\n            \"$schema\": \"https://vega.github.io/schema/vega/v6.json\",\n            \"description\": \"Radar chart from Excel selection\",\n            \"width\": 400,\n            \"height\": 400,\n            \"padding\": 60,\n            \"autosize\": {\"type\": \"none\", \"contains\": \"padding\"},\n            \"background\": \"white\",\n            \"config\": { \"view\": { \"stroke\": \"transparent\" }},\n\n            \"signals\": [\n            {\"name\": \"radius\", \"update\": \"width / 2\"}\n            ],\n\n            \"data\": [\n            {\n                \"name\": \"table\",\n                \"values\": radarData\n            },\n            {\n                \"name\": \"dimensions\",\n                \"values\": uniqueDimensions.map(d => ({dimension: d}))\n            }\n            ],\n\n            \"scales\": [\n            {\n                \"name\": \"angular\",\n                \"type\": \"point\",\n                \"range\": {\"signal\": \"[-PI, PI]\"},\n                \"padding\": 0.5,\n                \"domain\": uniqueDimensions\n            },\n            {\n                \"name\": \"radial\",\n                \"type\": \"linear\",\n                \"range\": {\"signal\": \"[0, radius]\"},\n                \"zero\": true,\n                \"nice\": true,\n                \"domain\": {\"data\": \"table\", \"field\": \"value\"},\n                \"domainMin\": 0\n            },\n            {\n                \"name\": \"color\",\n                \"type\": \"ordinal\",\n                \"domain\": {\"data\": \"table\", \"field\": \"category\"},\n                \"range\": [\n                \"#0078d4\", \"#00bcf2\", \"#40e0d0\", \"#00cc6a\", \"#10893e\",\n                \"#107c10\", \"#bad80a\", \"#ffb900\", \"#ff8c00\", \"#d13438\"\n                ]\n            }\n            ],\n\n            \"encode\": {\n            \"enter\": {\n                \"x\": {\"signal\": \"radius\"},\n                \"y\": {\"signal\": \"radius\"}\n            }\n            },\n\n            \"marks\": [\n            {\n                \"type\": \"group\",\n                \"name\": \"categories\",\n                \"zindex\": 1,\n                \"from\": {\n                \"facet\": {\"data\": \"table\", \"name\": \"facet\", \"groupby\": [\"category\", \"series\"]}\n                },\n                \"marks\": [\n                {\n                    \"type\": \"line\",\n                    \"name\": \"category-line\",\n                    \"from\": {\"data\": \"facet\"},\n                    \"encode\": {\n                    \"enter\": {\n                        \"interpolate\": {\"value\": \"linear-closed\"},\n                        \"x\": {\"signal\": \"scale('radial', datum.value) * cos(scale('angular', datum.dimension))\"},\n                        \"y\": {\"signal\": \"scale('radial', datum.value) * sin(scale('angular', datum.dimension))\"},\n                        \"stroke\": {\"scale\": \"color\", \"field\": \"category\"},\n                        \"strokeWidth\": {\"value\": 2},\n                        \"fill\": {\"scale\": \"color\", \"field\": \"category\"},\n                        \"fillOpacity\": {\"value\": 0.1},\n                        \"strokeOpacity\": {\"value\": 0.8}\n                    }\n                    }\n                },\n                {\n                    \"type\": \"symbol\",\n                    \"name\": \"category-points\",\n                    \"from\": {\"data\": \"facet\"},\n                    \"encode\": {\n                    \"enter\": {\n                        \"x\": {\"signal\": \"scale('radial', datum.value) * cos(scale('angular', datum.dimension))\"},\n                        \"y\": {\"signal\": \"scale('radial', datum.value) * sin(scale('angular', datum.dimension))\"},\n                        \"size\": {\"value\": 50},\n                        \"fill\": {\"scale\": \"color\", \"field\": \"category\"},\n                        \"stroke\": {\"value\": \"white\"},\n                        \"strokeWidth\": {\"value\": 1}\n                    }\n                    }\n                }\n                ]\n            },\n            {\n                \"type\": \"rule\",\n                \"name\": \"radial-grid\",\n                \"from\": {\"data\": \"dimensions\"},\n                \"zindex\": 0,\n                \"encode\": {\n                \"enter\": {\n                    \"x\": {\"value\": 0},\n                    \"y\": {\"value\": 0},\n                    \"x2\": {\"signal\": \"radius * cos(scale('angular', datum.dimension))\"},\n                    \"y2\": {\"signal\": \"radius * sin(scale('angular', datum.dimension))\"},\n                    \"stroke\": {\"value\": \"#e1e4e8\"},\n                    \"strokeWidth\": {\"value\": 1}\n                }\n                }\n            },\n            {\n                \"type\": \"text\",\n                \"name\": \"dimension-label\",\n                \"from\": {\"data\": \"dimensions\"},\n                \"zindex\": 1,\n                \"encode\": {\n                \"enter\": {\n                    \"x\": {\"signal\": \"(radius + 20) * cos(scale('angular', datum.dimension))\"},\n                    \"y\": {\"signal\": \"(radius + 20) * sin(scale('angular', datum.dimension))\"},\n                    \"text\": {\"field\": \"dimension\"},\n                    \"align\": [\n                    {\n                        \"test\": \"abs(scale('angular', datum.dimension)) > PI / 2\",\n                        \"value\": \"right\"\n                    },\n                    {\n                        \"value\": \"left\"\n                    }\n                    ],\n                    \"baseline\": [\n                    {\n                        \"test\": \"scale('angular', datum.dimension) > 0\", \n                        \"value\": \"top\"\n                    },\n                    {\n                        \"test\": \"scale('angular', datum.dimension) == 0\", \n                        \"value\": \"middle\"\n                    },\n                    {\n                        \"value\": \"bottom\"\n                    }\n                    ],\n                    \"fill\": {\"value\": \"#323130\"},\n                    \"fontWeight\": {\"value\": \"bold\"},\n                    \"font\": {\"value\": \"Segoe UI\"},\n                    \"fontSize\": {\"value\": 12}\n                }\n                }\n            },\n            {\n                \"type\": \"line\",\n                \"name\": \"outer-line\",\n                \"from\": {\"data\": \"radial-grid\"},\n                \"encode\": {\n                \"enter\": {\n                    \"interpolate\": {\"value\": \"linear-closed\"},\n                    \"x\": {\"field\": \"x2\"},\n                    \"y\": {\"field\": \"y2\"},\n                    \"stroke\": {\"value\": \"#8a8886\"},\n                    \"strokeWidth\": {\"value\": 2},\n                    \"strokeOpacity\": {\"value\": 0.6}\n                }\n                }\n            }\n            ]\n        };\n      }\n\n      else if (chartType === \"waterfall\") {\n        // Process waterfall data inline - set last entry's amount to 0\n        const processedData = [...data];\n        if (processedData.length > 0) {\n          processedData[processedData.length - 1] = {\n            ...processedData[processedData.length - 1],\n            [headers[1]]: 0\n          };\n        }\n\n        // Calculate dynamic dimensions\n        const numDataPoints = data.length;\n        const dynamicWidth = Math.max(400, Math.min(1200, numDataPoints * 70));\n        const maxAmount = Math.max(...data.map(d => Math.abs(d[headers[1]])));\n        const dynamicHeight = Math.max(300, Math.min(600, maxAmount / 100 + 200));\n\n        spec = {\n        $schema: \"https://vega.github.io/schema/vega-lite/v6.json\",\n        description: \"Waterfall chart with multiple subtotals\",\n        background: \"white\",\n        data: { values: processedData },\n        config: { view: { stroke: \"transparent\" }},\n        width: dynamicWidth,\n        height: dynamicHeight,\n        transform: [\n          { \"window\": [{ \"op\": \"sum\", \"field\": headers[1], \"as\": \"sum\" }] },\n          { \"window\": [{ \"op\": \"lead\", \"field\": headers[0], \"as\": \"lead\" }] },\n          {\n            \"calculate\": `datum.lead === null ? datum.${headers[0]} : datum.lead`,\n            \"as\": \"lead\"\n          },\n          {\n            // If subtotal → reset, else → running sum step\n            \"calculate\": `datum.${headers[2]} == 'subtotal' ? 0 : datum.sum - datum.${headers[1]}`,\n            \"as\": \"previous_sum\"\n          },\n          {\n            \"calculate\": `datum.${headers[2]} == 'subtotal' ? datum.sum : datum.${headers[1]}`,\n            \"as\": \"amount\"\n          },\n          {\n            \"calculate\": `datum.${headers[2]} == 'subtotal' ? datum.${headers[1]} / 2 : (datum.sum + datum.previous_sum) / 2`,\n            \"as\": \"center\"\n          },\n          {\n            \"calculate\": `datum.${headers[2]} == 'subtotal' ? datum.sum : (datum.${headers[1]} > 0 ? '+' : '') + datum.${headers[1]}`,\n            \"as\": \"text_amount\"\n          },\n          { \"calculate\": \"(datum.sum + datum.previous_sum) / 2\", \"as\": \"center\" }\n        ],\n        encoding: {\n          x: {\n            field: headers[0],\n            type: \"ordinal\",\n            sort: null,\n            axis: { labelAngle: 0, title: null },\n            scale: { paddingInner: 0.1, paddingOuter: 0.05 }\n          }\n        },\n        layer: [\n          {\n            mark: { type: \"bar\", size: 60 },\n            encoding: {\n              y: { field: \"previous_sum\", type: \"quantitative\", title: null },\n              y2: { field: \"sum\" },\n              color: {\n                condition: [\n                  { test: `datum.${headers[2]} == 'subtotal'`, value: \"#00B0F0\" },\n                  { test: \"datum.sum < datum.previous_sum\", value: \"#E15759\" }\n                ],\n                value: \"#70AD47\"\n              }\n            }\n          },\n          {\n            mark: {\n              type: \"rule\",\n              color: \"#8F8F8F\",\n              opacity: 1,\n              strokeWidth: 2,\n              xOffset: -30,\n              x2Offset: 30\n            },\n            encoding: {\n              x2: { field: \"lead\" },\n              y: { field: \"sum\", type: \"quantitative\" }\n            }\n          },\n          {\n            mark: {\n              type: \"text\",\n              dy: { expr: \"datum.amount >= 0 ? -4 : 4\" },\n              baseline: { expr: \"datum.amount >= 0 ? 'bottom' : 'top'\" }\n            },\n            encoding: {\n              y: { field: \"sum\", type: \"quantitative\" },\n              text: { field: \"sum\", type: \"nominal\" },\n              opacity: {\n                condition: {\n                  test: `datum.${headers[2]} == 'subtotal'`,\n                  value: 0\n                },\n                value: 1\n              }\n            }\n          },\n          {\n            mark: { type: \"text\", fontWeight: \"bold\", baseline: \"middle\" },\n            encoding: {\n              y: { field: \"center\", type: \"quantitative\" },\n              text: { field: \"text_amount\", type: \"nominal\" },\n              color: {\n                condition: [\n                  { test: `datum.${headers[2]} == 'subtotal'`, value: \"#725a30\" }\n                ],\n                value: \"white\"\n              }\n            }\n          }\n        ],\n        config: { text: { fontWeight: \"bold\", color: \"#D9D9D9\" } }\n      };\n      }\n\n      else if (chartType === \"bullet\") {\n      const data = rows.map(r => ({\n        title: r[0],\n        ranges: [+r[1], +r[2], +r[3]],\n        measures: [+r[4], +r[5]],\n        markers: [+r[6]]\n      }));\n\n      spec = {\n        \"$schema\": \"https://vega.github.io/schema/vega-lite/v6.json\",\n        background: \"white\",\n        config: { view: { stroke: \"transparent\" }},\n        \"data\": { \"values\": data },\n        \"facet\": {\n        \"row\": {\n            \"field\": \"title\", \"type\": \"ordinal\",\n            \"header\": { \"labelAngle\": 0, \"title\": \"\", \"labelAlign\": \"left\" }\n        }\n        },\n        \"spacing\": 10,\n        \"spec\": {\n        \"encoding\": {\n            \"x\": {\n            \"type\": \"quantitative\",\n            \"scale\": { \"nice\": false },\n            \"title\": null\n            }\n        },\n        \"layer\": [\n            { \"mark\": { \"type\": \"bar\", \"color\": \"#eee\" }, \"encoding\": { \"x\": { \"field\": \"ranges[2]\" } } },\n            { \"mark\": { \"type\": \"bar\", \"color\": \"#ddd\" }, \"encoding\": { \"x\": { \"field\": \"ranges[1]\" } } },\n            { \"mark\": { \"type\": \"bar\", \"color\": \"#ccc\" }, \"encoding\": { \"x\": { \"field\": \"ranges[0]\" } } },\n            { \"mark\": { \"type\": \"bar\", \"color\": \"lightsteelblue\", \"size\": 10 }, \"encoding\": { \"x\": { \"field\": \"measures[1]\" } } },\n            { \"mark\": { \"type\": \"bar\", \"color\": \"steelblue\", \"size\": 10 }, \"encoding\": { \"x\": { \"field\": \"measures[0]\" } } },\n            { \"mark\": { \"type\": \"tick\", \"color\": \"black\" }, \"encoding\": { \"x\": { \"field\": \"markers[0]\" } } }\n        ]\n        },\n        \"resolve\": { \"scale\": { \"x\": \"independent\" } },\n        \"config\": { \"tick\": { \"thickness\": 2 }, \"scale\": { \"barBandPaddingInner\": 0 } }\n      };\n      }\n\n      else if (chartType === \"box\") {\n      // Expect headers: Category | Value\n      const data = rows\n        .filter(r => r[0] && !isNaN(+r[1]))\n        .map(r => ({\n          category: r[0],\n          value: +r[1]\n        }));\n\n      spec = {\n        \"$schema\": \"https://vega.github.io/schema/vega-lite/v6.json\",\n        \"description\": \"Box plot from Excel selection\",\n        \"data\": { \"values\": data },\n        \"mark\": {\n          \"type\": \"boxplot\",\n          \"extent\": \"min-max\"   // show whiskers from min to max\n        },\n        \"encoding\": {\n          \"x\": { \"field\": \"category\", \"type\": \"nominal\" },\n          \"y\": {\n            \"field\": \"value\",\n            \"type\": \"quantitative\",\n            \"scale\": { \"zero\": false }\n          },\n          \"color\": {\n            \"field\": \"category\",\n            \"type\": \"nominal\",\n            \"legend\": null\n          }\n        }\n      };\n      }\n\n      else if (chartType === \"pie\") {\n        spec = {\n        $schema: \"https://vega.github.io/schema/vega-lite/v6.json\",\n        background: \"white\",\n        config: { view: { stroke: \"transparent\" }},\n        description: \"Pie chart from Excel selection\",\n        data: { values: data },\n        mark: { type: \"arc\", outerRadius: 120 },\n        encoding: {\n          theta: { field: headers[1], type: \"quantitative\" },\n          color: { field: headers[0], type: \"nominal\" }\n          }\n        };\n      }\n\n      else if (chartType === \"histogram\") {\n      // Expect a single numeric column\n      const data = rows\n        .filter(r => !isNaN(+r[0]))\n        .map(r => ({ value: +r[0] }));\n\n      spec = {\n        \"$schema\": \"https://vega.github.io/schema/vega-lite/v6.json\",\n        \"description\": \"Histogram from Excel selection\",\n        \"data\": { \"values\": data },\n        \"mark\": \"bar\",\n        \"encoding\": {\n          \"x\": {\n            \"field\": \"value\",\n            \"bin\": { \"maxbins\": 20 },   // adjust bin count here\n            \"type\": \"quantitative\",\n            \"axis\": { \"title\": \"Value\" }\n          },\n          \"y\": {\n            \"aggregate\": \"count\",\n            \"type\": \"quantitative\",\n            \"axis\": { \"title\": \"Count\" }\n          }\n        }\n      };\n      }\n\n      else if (chartType === \"mekko\") {\n        spec = {\n          $schema: \"https://vega.github.io/schema/vega/v5.json\",\n          description: \"Marimekko chart from Excel selection\",\n          width: 800,\n          height: 500,\n          background: \"white\",\n          config: { view: { stroke: \"transparent\" }},\n          view: { stroke: null },\n          padding: { top: 60, bottom: 80, left: 60, right: 60 },\n          data: [\n            {\n              name: \"table\",\n              values: data\n            },\n            {\n              name: \"categories\",\n              source: \"table\",\n              transform: [\n                {\n                  type: \"aggregate\",\n                  fields: [headers[2]],\n                  ops: [\"sum\"],\n                  as: [\"categoryTotal\"],\n                  groupby: [headers[0]]\n                },\n                {\n                  type: \"stack\",\n                  offset: \"normalize\",\n                  sort: { field: \"categoryTotal\", order: \"descending\" },\n                  field: \"categoryTotal\",\n                  as: [\"x0\", \"x1\"]\n                },\n                {\n                  type: \"formula\",\n                  as: \"Percent\",\n                  expr: \"datum.x1-datum.x0\"\n                },\n                {\n                  type: \"formula\",\n                  as: \"Label\",\n                  expr: `datum.${headers[0]} + ' (' + format(datum.Percent,'.1%') + ')'`\n                }\n              ]\n            },\n            {\n              name: \"finalTable\",\n              source: \"table\",\n              transform: [\n                {\n                  type: \"stack\",\n                  offset: \"normalize\",\n                  groupby: [headers[0]],\n                  sort: { field: headers[2], order: \"descending\" },\n                  field: headers[2],\n                  as: [\"y0\", \"y1\"]\n                },\n                {\n                  type: \"stack\",\n                  groupby: [headers[0]],\n                  sort: { field: headers[2], order: \"descending\" },\n                  field: headers[2],\n                  as: [\"z0\", \"z1\"]\n                },\n                {\n                  type: \"lookup\",\n                  from: \"categories\",\n                  key: headers[0],\n                  values: [\"x0\", \"x1\"],\n                  fields: [headers[0]]\n                },\n                {\n                  type: \"formula\",\n                  as: \"Percent\",\n                  expr: \"datum.y1-datum.y0\"\n                },\n                {\n                  type: \"formula\",\n                  as: \"Label\",\n                  expr: `[datum.${headers[1]}, format(datum.${headers[2]}, '.0f') + ' (' + format(datum.Percent, '.1%') + ')']`\n                },\n                {\n                  type: \"window\",\n                  sort: { field: \"y0\", order: \"ascending\" },\n                  ops: [\"row_number\"],\n                  fields: [null],\n                  as: [\"rank\"],\n                  groupby: [headers[0]]\n                }\n              ]\n            }\n          ],\n          scales: [\n            {\n              name: \"x\",\n              type: \"linear\",\n              range: \"width\",\n              domain: { data: \"finalTable\", field: \"x1\" }\n            },\n            {\n              name: \"y\",\n              type: \"linear\",\n              range: \"height\",\n              nice: false,\n              zero: true,\n              domain: { data: \"finalTable\", field: \"z1\" }\n            },\n            {\n              name: \"opacity\",\n              type: \"linear\",\n              range: [1, 0.6],\n              domain: { data: \"finalTable\", field: \"rank\" }\n            },\n            {\n              name: \"color\",\n              type: \"ordinal\",\n              range: { scheme: \"category20\" },\n              domain: {\n                data: \"categories\",\n                field: headers[0],\n                sort: { field: \"x0\", order: \"ascending\", op: \"sum\" }\n              }\n            }\n          ],\n          axes: [\n            {\n              orient: \"left\",\n              scale: \"y\",\n              zindex: 1,\n              format: \"\",\n              tickCount: 5,\n              tickSize: 15,\n              labelColor: { value: \"#333740\" },\n              labelFontWeight: { value: \"normal\" },\n              labelFontSize: { value: 12 },\n              labelFont: { value: \"Segoe UI\" },\n              offset: 5,\n              domain: false,\n              encode: {\n                labels: {\n                  update: {\n                    text: { signal: `format(datum.value, '.0f')` }\n                  }\n                }\n              }\n            }\n          ],\n          marks: [\n            {\n              type: \"rect\",\n              name: \"bars\",\n              from: { data: \"finalTable\" },\n              encode: {\n                update: {\n                  x: { scale: \"x\", field: \"x0\" },\n                  x2: { scale: \"x\", field: \"x1\" },\n                  y: { scale: \"y\", field: \"z0\" },\n                  y2: { scale: \"y\", field: \"z1\" },\n                  fill: { scale: \"color\", field: headers[0] },\n                  stroke: { value: \"white\" },\n                  strokeWidth: { value: 1 },\n                  fillOpacity: { scale: \"opacity\", field: \"rank\" },\n                  tooltip: { signal: \"datum\" }\n                }\n              }\n            },\n            {\n              type: \"text\",\n              name: \"labels\",\n              interactive: false,\n              from: { data: \"bars\" },\n              encode: {\n                update: {\n                  x: { signal: \"(datum.x2 - datum.x)*0.5 + datum.x\" },\n                  align: { value: \"center\" },\n                  text: { field: \"datum.Label\" },\n                  y: { signal: \"(datum.y2 - datum.y)*0.5 + datum.y\" },\n                  fill: { value: \"white\" },\n                  font: { value: \"Segoe UI\" },\n                  lineHeight: { value: 12 },\n                  fontSize: { value: 10 },\n                  opacity: { signal: \"(datum.x2 - datum.x) > 0.05 && (datum.y2 - datum.y) > 20 ? 1 : 0\" }\n                }\n              }\n            },\n            {\n              type: \"text\",\n              name: \"categoryLabels\",\n              from: { data: \"categories\" },\n              encode: {\n                update: {\n                  x: { scale: \"x\", signal: \"(datum.x1-datum.x0)/2 + datum.x0\" },\n                  y: { signal: \"-15\" },\n                  text: { field: headers[0] },\n                  align: { value: \"center\" },\n                  baseline: { value: \"bottom\" },\n                  fill: { value: \"#333740\" },\n                  fontWeight: { value: \"bold\" },\n                  fontSize: { value: 12 },\n                  font: { value: \"Segoe UI\" }\n                }\n              }\n            },\n            {\n              type: \"text\",\n              name: \"categoryPercentages\",\n              from: { data: \"categories\" },\n              encode: {\n                update: {\n                  x: { scale: \"x\", signal: \"(datum.x1-datum.x0)/2 + datum.x0\" },\n                  y: { signal: \"height + 30\" },\n                  text: { field: \"Label\" },\n                  align: { value: \"center\" },\n                  baseline: { value: \"top\" },\n                  fill: { value: \"#666666\" },\n                  fontWeight: { value: \"normal\" },\n                  fontSize: { value: 10 },\n                  font: { value: \"Segoe UI\" }\n                }\n              }\n            }\n          ]\n        };\n      }\n\n      if (chartType === \"marimekko\") {\n      if (headers.length < 3) {\n        console.warn(\"Marimekko chart requires at least 3 columns: Category, Subcategory, Value\");\n        return;\n      }\n\n      spec = {\n        \"$schema\": \"https://vega.github.io/schema/vega/v5.json\",\n        \"description\": \"Marimekko Chart from Excel selection\",\n        \"width\": 600,\n        \"height\": 400,\n        \"background\": \"white\",\n        \"config\": { \"view\": { \"stroke\": \"transparent\" }},\n        \"padding\": { \"top\": 30, \"bottom\": 60, \"left\": 60, \"right\": 60 },\n        \"data\": [\n          {\n            \"name\": \"table\",\n            \"values\": data,\n            \"transform\": [\n              {\n                \"type\": \"formula\",\n                \"as\": \"Category\",\n                \"expr\": `datum['${headers[0]}']`\n              },\n              {\n                \"type\": \"formula\", \n                \"as\": \"Subcategory\",\n                \"expr\": `datum['${headers[1]}']`\n              },\n              {\n                \"type\": \"formula\",\n                \"as\": \"Value\", \n                \"expr\": `datum['${headers[2]}']`\n              }\n            ]\n          },\n          {\n            \"name\": \"categories\",\n            \"source\": \"table\",\n            \"transform\": [\n              {\n                \"type\": \"aggregate\",\n                \"fields\": [\"Value\"],\n                \"ops\": [\"sum\"],\n                \"as\": [\"categoryTotal\"],\n                \"groupby\": [\"Category\"]\n              },\n              {\n                \"type\": \"stack\",\n                \"offset\": \"normalize\",\n                \"sort\": { \"field\": \"categoryTotal\", \"order\": \"descending\" },\n                \"field\": \"categoryTotal\",\n                \"as\": [\"x0\", \"x1\"]\n              },\n              {\n                \"type\": \"formula\",\n                \"as\": \"Percent\",\n                \"expr\": \"datum.x1 - datum.x0\"\n              }\n            ]\n          },\n          {\n            \"name\": \"finalTable\",\n            \"source\": \"table\",\n            \"transform\": [\n              {\n                \"type\": \"stack\",\n                \"offset\": \"normalize\",\n                \"groupby\": [\"Category\"],\n                \"sort\": { \"field\": \"Value\", \"order\": \"descending\" },\n                \"field\": \"Value\",\n                \"as\": [\"y0\", \"y1\"]\n              },\n              {\n                \"type\": \"lookup\",\n                \"from\": \"categories\",\n                \"key\": \"Category\",\n                \"values\": [\"x0\", \"x1\"],\n                \"fields\": [\"Category\"]\n              },\n              {\n                \"type\": \"formula\",\n                \"as\": \"Percent\",\n                \"expr\": \"datum.y1 - datum.y0\"\n              }\n            ]\n          }\n        ],\n        \"scales\": [\n          {\n            \"name\": \"x\",\n            \"type\": \"linear\",\n            \"range\": \"width\",\n            \"domain\": { \"data\": \"finalTable\", \"field\": \"x1\" }\n          },\n          {\n            \"name\": \"y\",\n            \"type\": \"linear\",\n            \"range\": \"height\",\n            \"nice\": false,\n            \"zero\": true,\n            \"domain\": { \"data\": \"finalTable\", \"field\": \"y1\" }\n          },\n          {\n            \"name\": \"color\",\n            \"type\": \"ordinal\",\n            \"range\": { \"scheme\": \"category20\" },\n            \"domain\": {\n              \"data\": \"categories\",\n              \"field\": \"Category\",\n              \"sort\": { \"field\": \"x0\", \"order\": \"ascending\", \"op\": \"sum\" }\n            }\n          }\n        ],\n        \"axes\": [\n          {\n            \"orient\": \"left\",\n            \"scale\": \"y\",\n            \"format\": \"%\",\n            \"tickCount\": 5,\n            \"labelColor\": \"#333333\",\n            \"labelFontSize\": 11,\n            \"domain\": false\n          },\n          {\n            \"orient\": \"bottom\",\n            \"scale\": \"x\",\n            \"format\": \"%\",\n            \"tickCount\": 5,\n            \"labelColor\": \"#333333\", \n            \"labelFontSize\": 11,\n            \"domain\": false\n          }\n        ],\n        \"marks\": [\n          {\n            \"type\": \"rect\",\n            \"name\": \"bars\",\n            \"from\": { \"data\": \"finalTable\" },\n            \"encode\": {\n              \"update\": {\n                \"x\": { \"scale\": \"x\", \"field\": \"x0\" },\n                \"x2\": { \"scale\": \"x\", \"field\": \"x1\" },\n                \"y\": { \"scale\": \"y\", \"field\": \"y0\" },\n                \"y2\": { \"scale\": \"y\", \"field\": \"y1\" },\n                \"fill\": { \"scale\": \"color\", \"field\": \"Category\" },\n                \"stroke\": { \"value\": \"white\" },\n                \"strokeWidth\": { \"value\": 1 },\n                \"opacity\": { \"value\": 0.8 },\n                \"tooltip\": { \n                  \"signal\": \"{'Category': datum.Category, 'Subcategory': datum.Subcategory, 'Value': datum.Value, 'Percentage': format(datum.Percent, '.1%')}\" \n                }\n              },\n              \"hover\": {\n                \"opacity\": { \"value\": 1.0 }\n              }\n            }\n          },\n          {\n            \"type\": \"text\",\n            \"name\": \"valueLabels\",\n            \"from\": { \"data\": \"finalTable\" },\n            \"encode\": {\n              \"update\": {\n                \"x\": { \"scale\": \"x\", \"signal\": \"(datum.x1 - datum.x0)/2 + datum.x0\" },\n                \"y\": { \"scale\": \"y\", \"signal\": \"(datum.y1 - datum.y0)/2 + datum.y0\" },\n                \"text\": { \n                  \"signal\": \"datum.Percent > 0.027 ? [datum.Subcategory, format(datum.Value, ',.0f') + ' (' + format(datum.Percent, '.0%') + ')'] : []\" \n                },\n                \"align\": { \"value\": \"center\" },\n                \"baseline\": { \"value\": \"middle\" },\n                \"fill\": { \"value\": \"white\" },\n                \"fontSize\": { \"value\": 10 },\n                \"fontWeight\": { \"value\": \"normal\" },\n                \"font\": { \"value\": \"Segoe UI\" },\n                \"lineHeight\": { \"value\": 12 },\n                \"opacity\": { \"signal\": \"datum.Percent > 0.027 ? 1 : 0\" }\n              }\n            }\n          }\n        ]\n      };\n      }\n\n      else if (chartType === \"arc\") {\n        // Transform Excel data for arc chart\n        const edges = data.map((row, index) => ({\n          source: row[headers[0]],\n          target: row[headers[1]],\n          value: headers.length >= 3 && row[headers[2]] ? row[headers[2]] : 1,\n          group: headers.length >= 4 && row[headers[3]] ? row[headers[3]] : \"default\"\n        }));\n\n        // Get unique nodes from edges\n        const nodeMap = new Map();\n        edges.forEach(edge => {\n          if (!nodeMap.has(edge.source)) {\n            nodeMap.set(edge.source, { \n              name: edge.source, \n              group: edge.group,\n              index: nodeMap.size\n            });\n          }\n          if (!nodeMap.has(edge.target)) {\n            nodeMap.set(edge.target, { \n              name: edge.target, \n              group: edge.group,\n              index: nodeMap.size\n            });\n          }\n        });\n\n        const nodes = Array.from(nodeMap.values());\n\n        // Transform edges to use node indices\n        const edgesWithIndices = edges.map(edge => ({\n          source: nodeMap.get(edge.source).index,\n          target: nodeMap.get(edge.target).index,\n          value: edge.value\n        }));\n\n        spec = {\n          $schema: \"https://vega.github.io/schema/vega/v5.json\",\n          description: \"Arc diagram from Excel selection\",\n          width: Math.max(600, nodes.length * 40),\n          height: 300,\n          padding: { top: 20, bottom: 80, left: 20, right: 20 },\n          background: \"white\",\n          config: { view: { stroke: \"transparent\" }},\n          data: [\n            {\n              name: \"edges\",\n              values: edgesWithIndices\n            },\n            {\n              name: \"sourceDegree\",\n              source: \"edges\",\n              transform: [\n                { type: \"aggregate\", groupby: [\"source\"], as: [\"count\"] }\n              ]\n            },\n            {\n              name: \"targetDegree\", \n              source: \"edges\",\n              transform: [\n                { type: \"aggregate\", groupby: [\"target\"], as: [\"count\"] }\n              ]\n            },\n            {\n              name: \"nodes\",\n              values: nodes,\n              transform: [\n                { type: \"window\", ops: [\"rank\"], as: [\"order\"] },\n                {\n                  type: \"lookup\", from: \"sourceDegree\", key: \"source\",\n                  fields: [\"index\"], as: [\"sourceDegree\"],\n                  default: { count: 0 }\n                },\n                {\n                  type: \"lookup\", from: \"targetDegree\", key: \"target\", \n                  fields: [\"index\"], as: [\"targetDegree\"],\n                  default: { count: 0 }\n                },\n                {\n                  type: \"formula\", as: \"degree\",\n                  expr: \"(datum.sourceDegree.count || 0) + (datum.targetDegree.count || 0)\"\n                }\n              ]\n            }\n          ],\n\n          scales: [\n            {\n              name: \"position\",\n              type: \"band\",\n              domain: { data: \"nodes\", field: \"order\", sort: true },\n              range: \"width\"\n            },\n            {\n              name: \"color\",\n              type: \"ordinal\",\n              range: { scheme: \"category20\" },\n              domain: { data: \"nodes\", field: \"group\" }\n            }\n          ],\n\n          marks: [\n            {\n              type: \"symbol\",\n              name: \"layout\",\n              interactive: false,\n              from: { data: \"nodes\" },\n              encode: {\n                enter: { opacity: { value: 0 } },\n                update: {\n                  x: { scale: \"position\", field: \"order\" },\n                  y: { value: 0 },\n                  size: { field: \"degree\", mult: 8, offset: 50 },\n                  fill: { scale: \"color\", field: \"group\" }\n                }\n              }\n            },\n            {\n              type: \"path\",\n              from: { data: \"edges\" },\n              encode: {\n                update: {\n                  stroke: { value: \"#0078d4\" },\n                  strokeOpacity: { value: 0.4 },\n                  strokeWidth: { field: \"value\", mult: 2, offset: 1 }\n                }\n              },\n              transform: [\n                {\n                  type: \"lookup\", from: \"layout\", key: \"datum.index\",\n                  fields: [\"datum.source\", \"datum.target\"],\n                  as: [\"sourceNode\", \"targetNode\"]\n                },\n                {\n                  type: \"linkpath\",\n                  sourceX: { expr: \"min(datum.sourceNode.x, datum.targetNode.x)\" },\n                  targetX: { expr: \"max(datum.sourceNode.x, datum.targetNode.x)\" },\n                  sourceY: { expr: \"0\" },\n                  targetY: { expr: \"0\" },\n                  shape: \"arc\"\n                }\n              ]\n            },\n            {\n              type: \"symbol\",\n              from: { data: \"layout\" },\n              encode: {\n                update: {\n                  x: { field: \"x\" },\n                  y: { field: \"y\" },\n                  fill: { field: \"fill\" },\n                  size: { field: \"size\" },\n                  stroke: { value: \"white\" },\n                  strokeWidth: { value: 1 },\n                  tooltip: { \n                    signal: \"{'Node': datum.datum.name, 'Group': datum.datum.group, 'Connections': datum.datum.degree}\" \n                  }\n                }\n              }\n            },\n            {\n              type: \"text\",\n              from: { data: \"nodes\" },\n              encode: {\n                update: {\n                  x: { scale: \"position\", field: \"order\" },\n                  y: { value: 25 },\n                  fontSize: { value: 10 },\n                  align: { value: \"center\" },\n                  baseline: { value: \"top\" },\n                  angle: { value: -45 },\n                  text: { field: \"name\" },\n                  fill: { value: \"#323130\" },\n                  font: { value: \"Segoe UI\" }\n                }\n              }\n            }\n          ],\n          \n          config: {\n            view: { stroke: \"transparent\" },\n            font: \"Segoe UI\",\n            text: { font: \"Segoe UI\", fontSize: 10, fill: \"#605e5c\" }\n          }\n        };\n      }\n\n      else if (chartType === \"lollipop\") {\n        spec = {\n          $schema: \"https://vega.github.io/schema/vega-lite/v5.json\",\n          description: \"Lollipop chart from Excel selection\",\n          background: \"white\",\n          config: { view: { stroke: \"transparent\" }},\n          data: { values: data },\n          encoding: {\n            y: {\n              field: headers[0],\n              type: \"nominal\",\n              sort: \"-x\",\n              axis: {\n                domain: false,\n                title: null,\n                ticks: false,\n                labelFont: \"Segoe UI\",\n                labelFontSize: 14,\n                labelPadding: 10,\n                labelColor: \"#605e5c\"\n              }\n            },\n            x: {\n              field: headers[1],\n              type: \"quantitative\",\n              axis: {\n                domain: false,\n                ticks: false,\n                grid: true,\n                gridColor: \"#e0e0e0\",\n                labelFont: \"Segoe UI\",\n                labelFontSize: 12,\n                labelColor: \"#605e5c\",\n                title: headers[1],\n                titleFont: \"Segoe UI\",\n                titleFontSize: 14,\n                titleColor: \"#323130\"\n              }\n            },\n            color: { value: \"#0078d4\" }\n          },\n          layer: [\n            {\n              mark: {\n                type: \"rule\",\n                tooltip: true,\n                strokeWidth: 3,\n                opacity: 0.7\n              }\n            },\n            {\n              mark: {\n                type: \"circle\",\n                tooltip: true,\n                size: 300,\n                opacity: 0.9\n              },\n              encoding: {\n                size: {\n                  field: headers[1],\n                  type: \"quantitative\",\n                  scale: {\n                    range: [200, 800]\n                  },\n                  legend: null\n                }\n              }\n            }\n          ],\n          config: {\n            autosize: {\n              type: \"fit\",\n              contains: \"padding\"\n            },\n            view: { stroke: \"transparent\" },\n            font: \"Segoe UI\",\n            text: { font: \"Segoe UI\", fontSize: 12, fill: \"#605E5C\" }\n          }\n        };\n      }\n\n      else if (chartType === \"strip\") {\n        // Strip plot implementation\n        spec = {\n        $schema: \"https://vega.github.io/schema/vega-lite/v6.json\",\n        description: \"Strip plot showing distribution using tick marks\",\n        background: \"white\",\n        config: { \n            view: { stroke: \"transparent\" },\n            axis: {\n            labelFontSize: 11,\n            titleFontSize: 12,\n            labelColor: \"#605E5C\",\n            titleColor: \"#323130\"\n            }\n        },\n        data: { values: data },\n        mark: {\n            type: \"tick\",\n            thickness: 2,\n            size: 15,\n            color: \"#0078d4\",\n            opacity: 0.8,\n            tooltip: true\n        },\n        encoding: {\n            y: { \n            field: headers[0],\n            type: \"ordinal\",\n            axis: {\n                title: headers[0],\n                labelAngle: 0\n            }\n            },\n            x: { \n            field: headers[1],\n            type: \"quantitative\",\n            axis: {\n                title: headers[1],\n                grid: true,\n                gridColor: \"#f3f2f1\",\n                gridOpacity: 0.5\n            }\n            },\n            // Add color encoding if 3rd column exists\n            ...(headers.length > 2 && {\n            color: {\n                field: headers[2],\n                type: \"nominal\",\n                scale: { scheme: \"category10\" },\n                legend: {\n                title: headers[2],\n                orient: \"right\",\n                titleFontSize: 11,\n                labelFontSize: 10\n                }\n            }\n            }),\n            tooltip: headers.map(h => ({ field: h, type: \"nominal\" }))\n        }\n        };\n      }\n\n      else if (chartType === \"treemap\") {\n        let treeData;\n        \n        if (headers.length >= 3) {\n          // Hierarchical data with parent column\n          treeData = data.map((d, i) => ({\n            id: `${d[headers[1]]}_${i}`,\n            name: d[headers[1]],\n            parent: d[headers[0]] || \"root\",\n            size: parseFloat(d[headers[2]]) || 0\n          }));\n          \n          // Add root and parent nodes\n          const parents = [...new Set(treeData.map(d => d.parent))];\n          parents.forEach(parent => {\n            if (parent !== \"root\" && !treeData.find(d => d.id === parent)) {\n              treeData.push({\n                id: parent,\n                name: parent,\n                parent: \"root\",\n                size: 0\n              });\n            }\n          });\n          \n          // Add root node\n          treeData.push({\n            id: \"root\",\n            name: \"Root\",\n            parent: \"\",\n            size: 0\n          });\n        } else {\n          // Simple flat data - create single level hierarchy\n          treeData = [\n            {\n              id: \"root\",\n              name: \"Root\", \n              parent: \"\",\n              size: 0\n            },\n            ...data.map((d, i) => ({\n              id: `item_${i}`,\n              name: d[headers[1]],\n              parent: \"root\",\n              size: parseFloat(d[headers[2]]) || 0\n            }))\n          ];\n        }\n\n        spec = {\n          $schema: \"https://vega.github.io/schema/vega/v5.json\",\n          description: \"Treemap visualization from Excel data\",\n          background: \"white\",\n          width: 600,\n          height: 400,\n          padding: 5,\n          autosize: \"fit\",\n          \n          data: [\n            {\n              name: \"tree\",\n              values: treeData,\n              transform: [\n                {\n                  type: \"stratify\",\n                  key: \"id\",\n                  parentKey: \"parent\"\n                },\n                {\n                  type: \"treemap\",\n                  field: \"size\",\n                  sort: { field: \"value\" },\n                  round: true,\n                  method: \"squarify\",\n                  ratio: 1.6,\n                  size: [{ signal: \"width\" }, { signal: \"height\" }]\n                }\n              ]\n            },\n            {\n              name: \"nodes\",\n              source: \"tree\",\n              transform: [\n                { type: \"filter\", expr: \"datum.children\" }\n              ]\n            },\n            {\n              name: \"leaves\", \n              source: \"tree\",\n              transform: [\n                { type: \"filter\", expr: \"!datum.children\" }\n              ]\n            }\n          ],\n          \n          scales: [\n            {\n              name: \"color\",\n              type: \"ordinal\",\n              domain: { data: \"nodes\", field: \"name\" },\n              range: [\n                \"#0078d4\", \"#00bcf2\", \"#40e0d0\", \"#00cc6a\", \"#10893e\",\n                \"#107c10\", \"#bad80a\", \"#ffb900\", \"#ff8c00\", \"#d13438\"\n              ]\n            },\n            {\n              name: \"fontSize\",\n              type: \"ordinal\", \n              domain: [0, 1, 2, 3],\n              range: [20, 16, 12, 10]\n            },\n            {\n              name: \"opacity\",\n              type: \"ordinal\",\n              domain: [0, 1, 2, 3], \n              range: [0.3, 0.6, 0.8, 1.0]\n            }\n          ],\n          \n          marks: [\n            {\n              type: \"rect\",\n              from: { data: \"nodes\" },\n              interactive: false,\n              encode: {\n                enter: {\n                  fill: { scale: \"color\", field: \"name\" },\n                  fillOpacity: { scale: \"opacity\", field: \"depth\" }\n                },\n                update: {\n                  x: { field: \"x0\" },\n                  y: { field: \"y0\" },\n                  x2: { field: \"x1\" },\n                  y2: { field: \"y1\" },\n                  stroke: { value: \"#ffffff\" },\n                  strokeWidth: { value: 1 }\n                }\n              }\n            },\n            {\n              type: \"rect\",\n              from: { data: \"leaves\" },\n              encode: {\n                enter: {\n                  stroke: { value: \"#ffffff\" },\n                  strokeWidth: { value: 2 }\n                },\n                update: {\n                  x: { field: \"x0\" },\n                  y: { field: \"y0\" },\n                  x2: { field: \"x1\" },\n                  y2: { field: \"y1\" },\n                  fill: { value: \"transparent\" },\n                  tooltip: {\n                    signal: `{'Category': datum.name, 'Value': datum.size, 'Parent': datum.parent}`\n                  }\n                },\n                hover: {\n                  fill: { value: \"#323130\" },\n                  fillOpacity: { value: 0.1 }\n                }\n              }\n            },\n            {\n              type: \"text\",\n              from: { data: \"leaves\" },\n              interactive: false,\n              encode: {\n                enter: {\n                  font: { value: \"Segoe UI, Arial, sans-serif\" },\n                  align: { value: \"center\" },\n                  baseline: { value: \"middle\" },\n                  fill: { value: \"#323130\" },\n                  fontWeight: { value: \"bold\" },\n                  text: { field: \"name\" },\n                  fontSize: { scale: \"fontSize\", field: \"depth\" }\n                },\n                update: {\n                  x: { signal: \"0.5 * (datum.x0 + datum.x1)\" },\n                  y: { signal: \"0.5 * (datum.y0 + datum.y1)\" },\n                  opacity: {\n                    signal: \"(datum.x1 - datum.x0) > 50 && (datum.y1 - datum.y0) > 20 ? 1 : 0\"\n                  }\n                }\n              }\n            }\n          ]\n        };\n      }\n      \n      else if (chartType === \"waffle\") {\n        spec = {\n          $schema: \"https://vega.github.io/schema/vega-lite/v5.json\",\n          description: \"Waffle chart from Excel selection\",\n          background: \"white\",\n          config: { view: { stroke: \"transparent\" }},\n          data: { values: data },\n          transform: [\n            {\n              joinaggregate: [{\"op\": \"sum\", \"field\": headers[1], \"as\": \"TotalValue\"}]\n            },\n            {\n              calculate: `round(datum.${headers[1]}/datum.TotalValue * 100)`,\n              as: \"PercentOfTotal\"\n            },\n            {\n              aggregate: [{\"op\": \"min\", \"field\": \"PercentOfTotal\", \"as\": \"Percent\"}],\n              groupby: [headers[0]]\n            },\n            {\"calculate\": \"sequence(1,101)\", \"as\": \"Sequence\"},\n            {\"flatten\": [\"Sequence\"]},\n            {\n              calculate: `if(datum.Sequence <= datum.Percent, datum.${headers[0]},'_blank')`,\n              as: \"Plot\"\n            },\n            {\"calculate\": \"ceil (datum.Sequence / 10)\", \"as\": \"row\"},\n            {\"calculate\": \"datum.Sequence - datum.row * 10\", \"as\": \"col\"}\n          ],\n          facet: {\"column\": {\"field\": headers[0], \"header\": {\"labelOrient\": \"bottom\"}}},\n          spec: {\n            layer: [\n              {\n                mark: {\n                  type: \"circle\",\n                  filled: true,\n                  tooltip: true,\n                  stroke: \"#9e9b9b\",\n                  strokeWidth: 0.7\n                },\n                encoding: {\n                  x: {\"field\": \"col\", \"type\": \"ordinal\", \"axis\": null},\n                  y: {\"field\": \"row\", \"type\": \"ordinal\", \"axis\": null, \"sort\": \"-y\"},\n                  color: {\n                    condition: {\"test\": \"datum.Plot == '_blank'\", \"value\": \"#e6e3e3\"},\n                    scale: {\"scheme\": \"set1\"},\n                    field: \"Plot\",\n                    type: \"nominal\",\n                    legend: null\n                  },\n                  size: {\"value\": 241},\n                  tooltip: [{\"field\": headers[0], \"type\": \"nominal\"}]\n                }\n              },\n              {\n                mark: {\"type\": \"text\", \"fontSize\": 30, \"fontWeight\": \"bold\"},\n                encoding: {\n                  y: {\"value\": 30},\n                  text: {\n                    condition: {\n                      test: \"datum.Sequence == 1\",\n                      value: {\"expr\": \"datum.Percent + '%'\"}\n                    }\n                  },\n                  color: {\"scale\": {\"scheme\": \"set1\"}, \"field\": \"Plot\"}\n                }\n              }\n            ]\n          },\n          config: {\n            view: {\"stroke\": \"transparent\"},\n            font: \"Segoe UI\",\n            text: {\"font\": \"Segoe UI\", \"fontSize\": 12, \"fill\": \"#605E5C\"},\n            axis: {\n              ticks: false,\n              grid: false,\n              domain: false,\n              labelColor: \"#605E5C\",\n              labelFontSize: 12\n            },\n            header: {\n              titleFont: \"Segoe UI\",\n              titleFontSize: 16,\n              titleColor: \"#757575\",\n              labelFont: \"Segoe UI\",\n              labelFontSize: 13,\n              labelColor: \"#605E5C\"\n            },\n            legend: {\n              titleFont: \"Segoe UI\",\n              titleFontWeight: \"bold\",\n              titleColor: \"#605E5C\",\n              labelFont: \"Segoe UI\",\n              labelFontSize: 13,\n              labelColor: \"#605E5C\",\n              symbolType: \"circle\",\n              symbolSize: 75\n            }\n          }\n        };\n      }\n\n      else if (chartType === \"violin\") {\n        spec = {\n          $schema: \"https://vega.github.io/schema/vega-lite/v5.json\",\n          description: \"Violin chart from Excel selection\",\n          background: \"white\",\n          config: { view: { stroke: \"transparent\" }},\n          data: { values: data },\n          spacing: 0,\n          facet: {\n            column: {\n              field: headers[0],\n              header: {\n                orient: \"bottom\",\n                title: null,\n                labelFontSize: 14\n              }\n            }\n          },\n          spec: {\n            width: 180,\n            height: 400,\n            encoding: {\n              y: {\n                field: headers[1],\n                type: \"quantitative\",\n                title: headers[1],\n                axis: {\n                  tickCount: 10,\n                  titleFontSize: 16,\n                  labelFontSize: 12\n                }\n              },\n              x: {\n                type: \"quantitative\",\n                axis: {\n                  labels: false,\n                  title: null,\n                  grid: false,\n                  ticks: false\n                }\n              },\n              color: {\n                field: headers[0],\n                type: \"nominal\",\n                legend: null,\n                scale: {\n                  scheme: \"category10\"\n                }\n              }\n            },\n            layer: [\n              {\n                name: \"KDE_PLOT\",\n                transform: [\n                  {\n                    density: headers[1],\n                    groupby: [headers[0]],\n                    as: [\"_kde_value\", \"_kde_density\"]\n                  },\n                  {\n                    calculate: \"datum['_kde_density'] * -1\",\n                    as: \"_negative_kde_density\"\n                  }\n                ],\n                layer: [\n                  {\n                    name: \"KDE_POSITIVE\",\n                    mark: {\n                      type: \"area\",\n                      orient: \"vertical\",\n                      opacity: 0.6\n                    },\n                    encoding: {\n                      y: { field: \"_kde_value\" },\n                      x: { field: \"_kde_density\" }\n                    }\n                  },\n                  {\n                    name: \"KDE_NEGATIVE\",\n                    mark: {\n                      type: \"area\",\n                      orient: \"vertical\",\n                      opacity: 0.6\n                    },\n                    encoding: {\n                      y: { field: \"_kde_value\" },\n                      x: { field: \"_negative_kde_density\" }\n                    }\n                  }\n                ],\n                encoding: {\n                  x2: { datum: 0 }\n                }\n              },\n              {\n                name: \"BOX_PLOT\",\n                mark: {\n                  type: \"boxplot\",\n                  extent: \"min-max\",\n                  median: {\n                    color: \"black\",\n                    strokeWidth: 2\n                  },\n                  size: 20\n                },\n                encoding: {\n                  y: { field: headers[1] },\n                  fill: { value: \"#969696\" },\n                  stroke: { value: \"black\" }\n                }\n              }\n            ]\n          },\n          config: {\n            view: { stroke: \"transparent\" },\n            font: \"Segoe UI\",\n            text: { font: \"Segoe UI\", fontSize: 12, fill: \"#605E5C\" },\n            axis: {\n              ticks: false,\n              grid: true,\n              gridColor: \"#e0e0e0\",\n              domain: false,\n              labelColor: \"#605E5C\",\n              labelFontSize: 12\n            },\n            header: {\n              titleFont: \"Segoe UI\",\n              titleFontSize: 16,\n              titleColor: \"#757575\",\n              labelFont: \"Segoe UI\",\n              labelFontSize: 13,\n              labelColor: \"#605E5C\"\n            }\n          }\n        };\n      }\n\n      else if (chartType === \"heatmap\") {\n        spec = {\n          $schema: \"https://vega.github.io/schema/vega-lite/v5.json\",\n          description: \"Heatmap with marginal bars from Excel selection\",\n          background: \"white\",\n          config: { view: { stroke: \"transparent\" }},\n          data: { values: data },\n          spacing: 15,\n          bounds: \"flush\",\n          vconcat: [\n            {\n              height: 60,\n              mark: {\n                type: \"bar\",\n                stroke: null,\n                cornerRadiusEnd: 2,\n                tooltip: true,\n                color: \"lightgrey\"\n              },\n              encoding: {\n                x: {\n                  field: headers[1],\n                  type: \"ordinal\",\n                  axis: null\n                },\n                y: {\n                  field: headers[2],\n                  aggregate: \"mean\",\n                  type: \"quantitative\",\n                  axis: null\n                }\n              }\n            },\n            {\n              spacing: 15,\n              bounds: \"flush\",\n              hconcat: [\n                {\n                  mark: {\n                    type: \"rect\",\n                    stroke: \"white\",\n                    tooltip: true\n                  },\n                  encoding: {\n                    y: {\n                      field: headers[0],\n                      type: \"ordinal\",\n                      title: headers[0],\n                      axis: {\n                        domain: false,\n                        ticks: false,\n                        labels: true,\n                        labelAngle: 0,\n                        labelPadding: 5\n                      }\n                    },\n                    x: {\n                      field: headers[1],\n                      type: \"ordinal\",\n                      title: headers[1],\n                      axis: {\n                        domain: false,\n                        ticks: false,\n                        labels: true,\n                        labelAngle: 0\n                      }\n                    },\n                    color: {\n                      aggregate: \"mean\",\n                      field: headers[2],\n                      type: \"quantitative\",\n                      title: headers[2],\n                      scale: {\n                        scheme: \"blues\"\n                      },\n                      legend: {\n                        direction: \"vertical\",\n                        gradientLength: 120\n                      }\n                    }\n                  }\n                },\n                {\n                  mark: {\n                    type: \"bar\",\n                    stroke: null,\n                    cornerRadiusEnd: 2,\n                    tooltip: true,\n                    color: \"lightgrey\"\n                  },\n                  width: 60,\n                  encoding: {\n                    y: {\n                      field: headers[0],\n                      type: \"ordinal\",\n                      axis: null\n                    },\n                    x: {\n                      field: headers[2],\n                      type: \"quantitative\",\n                      aggregate: \"mean\",\n                      axis: null\n                    }\n                  }\n                }\n              ]\n            }\n          ],\n          config: {\n            autosize: {\n              type: \"fit\",\n              contains: \"padding\"\n            },\n            view: { stroke: \"transparent\" },\n            font: \"Segoe UI\",\n            text: { font: \"Segoe UI\", fontSize: 12, fill: \"#605E5C\" },\n            axis: {\n              ticks: false,\n              grid: false,\n              domain: false,\n              labelColor: \"#605E5C\",\n              labelFontSize: 12,\n              titleFontSize: 14,\n              titleColor: \"#323130\"\n            },\n            legend: {\n              titleFont: \"Segoe UI\",\n              titleFontWeight: \"bold\",\n              titleColor: \"#605E5C\",\n              labelFont: \"Segoe UI\",\n              labelFontSize: 12,\n              labelColor: \"#605E5C\"\n            }\n          }\n        };\n      }\n\n      else if (chartType === \"deviation\") {\n      spec = {\n        $schema: \"https://vega.github.io/schema/vega-lite/v6.json\",\n        description: \"Deviation chart from Excel selection\",\n        background: \"white\",\n        config: { view: { stroke: \"transparent\" }},\n        data: { values: data },\n        layer: [\n        {\n            mark: { type: \"line\", tooltip: true, color: \"grey\" },\n            encoding: {\n            x: { field: headers[0], type: \"ordinal\" },\n            y: { field: headers[1], type: \"quantitative\" }\n            }\n        },\n        {\n            mark: { type: \"circle\", size: 80, color: \"grey\", tooltip: true },\n            encoding: {\n            x: { field: headers[0], type: \"ordinal\" },\n            y: { field: headers[1], type: \"quantitative\" }\n            }\n        },\n        {\n            mark: { type: \"rule\", strokeWidth: 2, tooltip: true },\n            encoding: {\n            x: { field: headers[0], type: \"ordinal\" },\n            y: { field: headers[1], type: \"quantitative\" },\n            y2: { field: headers[2] },\n            color: {\n                condition: { test: `datum[\"${headers[1]}\"] < datum[\"${headers[2]}\"]`, value: \"red\" },\n                value: \"green\"\n            }\n            }\n        },\n        {\n            mark: { type: \"circle\", size: 60, tooltip: true },\n            encoding: {\n            x: { field: headers[0], type: \"ordinal\" },\n            y: { field: headers[2], type: \"quantitative\" },\n            color: {\n                condition: { test: `datum[\"${headers[1]}\"] < datum[\"${headers[2]}\"]`, value: \"red\" },\n                value: \"green\"\n            }\n            }\n        }\n        ],\n        encoding: {\n        x: { \n            field: headers[0], \n            type: \"ordinal\", \n            axis: { \n                title: null,\n                labelAngle: 0       // Optional: adjust label angle if needed\n            } \n        },\n        y: { type: \"quantitative\", axis: { title: \"\" } }\n        },\n        config: {\n        view: { stroke: \"transparent\" },\n        line: { strokeWidth: 3, strokeCap: \"round\", strokeJoin: \"round\" },\n        axis: {\n            ticks: false,\n            grid: false,\n            domain: false,\n            labelColor: \"#605E5C\",\n            labelFontSize: 12\n        }\n        }\n      };\n      }\n\n      else if (chartType === \"radial\") {\n        spec = {\n        $schema: \"https://vega.github.io/schema/vega-lite/v6.json\",\n        description: \"Radial chart from Excel selection\",\n        background: \"white\",\n        config: { view: { stroke: \"transparent\" }},\n        data: { values: data },\n        layer: [{\n        mark: { type: \"arc\", innerRadius: 20, stroke: \"#fff\" }\n        }, {\n        mark: { type: \"text\", radiusOffset: 10 },\n        encoding: {\n            text: { field: headers[1], type: \"quantitative\" }\n        }\n        }],\n        encoding: {\n        theta: { field: headers[1], type: \"quantitative\", stack: true },\n        radius: { \n            field: headers[1], \n            scale: { type: \"sqrt\", zero: true, rangeMin: 20 }\n        },\n        color: { field: headers[0], type: \"nominal\", legend: null }\n        }\n      };\n      }\n\n      else if (chartType === \"bump\") {\n      // calculate width based on number of unique x-values\n      const uniqueX = [...new Set(data.map(d => d[headers[0]]))];\n      const dynamicWidth = Math.max(400, uniqueX.length * 80);\n\n      spec = {\n        $schema: \"https://vega.github.io/schema/vega-lite/v6.json\",\n        description: \"Bump chart from Excel selection\",\n        background: \"white\",\n        config: { view: { stroke: \"transparent\" }},\n        data: { values: data },\n        width: dynamicWidth,\n        height: 200,   // give it some room\n        encoding: {\n          x: {\n            field: headers[0],\n            type: \"nominal\",\n            axis: { title: \"\" },\n            scale: { type: \"point\", padding: 1 }   // padding 1 for more spread\n          },\n          y: {\n            field: headers[2],      \n            type: \"ordinal\",\n            axis: false\n          }\n        },\n        layer: [\n          {\n            mark: { type: \"line\", interpolate: \"monotone\" },\n            encoding: {\n              color: {\n                field: headers[1],   \n                type: \"nominal\",\n                legend: false\n              }\n            }\n          },\n          {\n            mark: { type: \"circle\", size: 400, tooltip: true },\n            encoding: {\n              color: {\n                field: headers[1],\n                type: \"nominal\",\n                legend: false\n              }\n            }\n          },\n          {\n            mark: { type: \"text\", color: \"white\" },\n            encoding: {\n              text: { field: headers[2] }\n            }\n          },\n          {\n            // Left-side labels\n            transform: [\n              { window: [{ op: \"rank\", as: \"rank\" }], sort: [{ field: headers[0], order: \"descending\" }] },\n              { filter: \"datum.rank === 1\" }\n            ],\n            mark: {\n              type: \"text\",\n              align: \"left\",\n              baseline: \"middle\",\n              dx: 15,\n              fontWeight: \"bold\",\n              fontSize: 12\n            },\n            encoding: {\n              text: { field: headers[1], type: \"nominal\" },\n              color: { field: headers[1], type: \"nominal\", legend: false }\n            }\n          },\n          {\n            // Right-side labels\n            transform: [\n              { window: [{ op: \"rank\", as: \"rank\" }], sort: [{ field: headers[0], order: \"ascending\" }] },\n              { filter: \"datum.rank === 1\" }\n            ],\n            mark: {\n              type: \"text\",\n              align: \"right\",\n              baseline: \"middle\",\n              dx: -15,\n              fontWeight: \"bold\",\n              fontSize: 12\n            },\n            encoding: {\n              text: { field: headers[1], type: \"nominal\" },\n              color: { field: headers[1], type: \"nominal\", legend: false }\n            }\n          }\n        ],\n        config: {\n          view: { stroke: \"transparent\" },\n          line: { strokeWidth: 3, strokeCap: \"round\", strokeJoin: \"round\" },\n          axis: {\n            ticks: false,\n            grid: false,\n            domain: false,\n            labelColor: \"#666666\",\n            labelFontSize: 12\n          }\n        }\n      };\n      }\n\n      else if (chartType === \"sankey\") {\n      const data = rows\n        .filter(r => r[0] && r[1] && !isNaN(+r[2]))\n        .map(r => ({\n          key: { stk1: r[0], stk2: r[1] },\n          doc_count: +r[2]\n        }));\n\n      spec = {\n        $schema: \"https://vega.github.io/schema/vega/v5.2.json\",\n        height: 300,\n        width: 600,\n        background: \"white\",\n        config: { view: { stroke: \"transparent\" }},\n        data: [\n          {\n            name: \"rawData\",\n            values: data,\n            transform: [\n              { type: \"formula\", expr: \"datum.key.stk1\", as: \"stk1\" },\n              { type: \"formula\", expr: \"datum.key.stk2\", as: \"stk2\" },\n              { type: \"formula\", expr: \"datum.doc_count\", as: \"size\" }\n            ]\n          },\n          {\n            name: \"nodes\",\n            source: \"rawData\",\n            transform: [\n              {\n                type: \"filter\",\n                expr:\n                  \"!groupSelector || groupSelector.stk1 == datum.stk1 || groupSelector.stk2 == datum.stk2\"\n              },\n              { type: \"formula\", expr: \"datum.stk1+datum.stk2\", as: \"key\" },\n              { type: \"fold\", fields: [\"stk1\", \"stk2\"], as: [\"stack\", \"grpId\"] },\n              {\n                type: \"formula\",\n                expr:\n                  \"datum.stack == 'stk1' ? datum.stk1+' '+datum.stk2 : datum.stk2+' '+datum.stk1\",\n                as: \"sortField\"\n              },\n              {\n                type: \"stack\",\n                groupby: [\"stack\"],\n                sort: { field: \"sortField\", order: \"descending\" },\n                field: \"size\"\n              },\n              { type: \"formula\", expr: \"(datum.y0+datum.y1)/2\", as: \"yc\" }\n            ]\n          },\n          {\n            name: \"groups\",\n            source: \"nodes\",\n            transform: [\n              {\n                type: \"aggregate\",\n                groupby: [\"stack\", \"grpId\"],\n                fields: [\"size\"],\n                ops: [\"sum\"],\n                as: [\"total\"]\n              },\n              {\n                type: \"stack\",\n                groupby: [\"stack\"],\n                sort: { field: \"grpId\", order: \"descending\" },\n                field: \"total\"\n              },\n              { type: \"formula\", expr: \"scale('y', datum.y0)\", as: \"scaledY0\" },\n              { type: \"formula\", expr: \"scale('y', datum.y1)\", as: \"scaledY1\" },\n              { type: \"formula\", expr: \"datum.stack == 'stk1'\", as: \"rightLabel\" },\n              { type: \"formula\", expr: \"datum.total/domain('y')[1]\", as: \"percentage\" }\n            ]\n          },\n          {\n            name: \"destinationNodes\",\n            source: \"nodes\",\n            transform: [{ type: \"filter\", expr: \"datum.stack == 'stk2'\" }]\n          },\n          {\n            name: \"edges\",\n            source: \"nodes\",\n            transform: [\n              { type: \"filter\", expr: \"datum.stack == 'stk1'\" },\n              {\n                type: \"lookup\",\n                from: \"destinationNodes\",\n                key: \"key\",\n                fields: [\"key\"],\n                as: [\"target\"]\n              },\n              {\n                type: \"linkpath\",\n                orient: \"horizontal\",\n                shape: \"diagonal\",\n                sourceY: { expr: \"scale('y', datum.yc)\" },\n                sourceX: { expr: \"scale('x', 'stk1') + bandwidth('x')\" },\n                targetY: { expr: \"scale('y', datum.target.yc)\" },\n                targetX: { expr: \"scale('x', 'stk2')\" }\n              },\n              { type: \"formula\", expr: \"range('y')[0]-scale('y', datum.size)\", as: \"strokeWidth\" },\n              { type: \"formula\", expr: \"datum.size/domain('y')[1]\", as: \"percentage\" }\n            ]\n          }\n        ],\n        scales: [\n          {\n            name: \"x\",\n            type: \"band\",\n            range: \"width\",\n            domain: [\"stk1\", \"stk2\"],\n            paddingOuter: 0.05,\n            paddingInner: 0.95\n          },\n          {\n            name: \"y\",\n            type: \"linear\",\n            range: \"height\",\n            domain: { data: \"nodes\", field: \"y1\" }\n          },\n          {\n            name: \"color\",\n            type: \"ordinal\",\n            range: \"category\",\n            domain: {\n              fields: [\n                { data: \"rawData\", field: \"stk1\" },\n                { data: \"rawData\", field: \"stk2\" }\n              ]\n            }\n          },\n          {\n            name: \"stackNames\",\n            type: \"ordinal\",\n            range: [\"Source\", \"Destination\"],\n            domain: [\"stk1\", \"stk2\"]\n          }\n        ],\n        axes: [\n          {\n            orient: \"bottom\",\n            scale: \"x\",\n            encode: {\n              labels: { update: { text: { scale: \"stackNames\", field: \"value\" } } }\n            }\n          },\n          { orient: \"left\", scale: \"y\" }\n        ],\n        marks: [\n          {\n            type: \"path\",\n            name: \"edgeMark\",\n            from: { data: \"edges\" },\n            clip: true,\n            encode: {\n              update: {\n                stroke: { scale: \"color\", field: \"stk1\" }, // links colored by source\n                strokeWidth: { field: \"strokeWidth\" },\n                path: { field: \"path\" },\n                strokeOpacity: {\n                  signal:\n                    \"!groupSelector && (groupHover.stk1 == datum.stk1 || groupHover.stk2 == datum.stk2) ? 0.9 : 0.3\"\n                },\n                zindex: {\n                  signal:\n                    \"!groupSelector && (groupHover.stk1 == datum.stk1 || groupHover.stk2 == datum.stk2) ? 1 : 0\"\n                },\n                tooltip: {\n                  signal:\n                    \"datum.stk1 + ' → ' + datum.stk2 + '    ' + format(datum.size, ',.0f') + '   (' + format(datum.percentage, '.1%') + ')'\"\n                }\n              },\n              hover: { strokeOpacity: { value: 1 } }\n            }\n          },\n          {\n            type: \"rect\",\n            name: \"groupMark\",\n            from: { data: \"groups\" },\n            encode: {\n              enter: {\n                fill: { scale: \"color\", field: \"grpId\" }, // both source & destination use union colors\n                width: { scale: \"x\", band: 1 }\n              },\n              update: {\n                x: { scale: \"x\", field: \"stack\" },\n                y: { field: \"scaledY0\" },\n                y2: { field: \"scaledY1\" },\n                fillOpacity: { value: 0.6 },\n                tooltip: {\n                  signal:\n                    \"datum.grpId + '   ' + format(datum.total, ',.0f') + '   (' + format(datum.percentage, '.1%') + ')'\"\n                }\n              },\n              hover: { fillOpacity: { value: 1 } }\n            }\n          },\n          {\n            type: \"text\",\n            from: { data: \"groups\" },\n            interactive: false,\n            encode: {\n              update: {\n                x: {\n                  signal:\n                    \"scale('x', datum.stack) + (datum.rightLabel ? bandwidth('x') + 8 : -8)\"\n                },\n                yc: { signal: \"(datum.scaledY0 + datum.scaledY1)/2\" },\n                align: { signal: \"datum.rightLabel ? 'left' : 'right'\" },\n                baseline: { value: \"middle\" },\n                fontWeight: { value: \"bold\" },\n                text: {\n                  signal: \"abs(datum.scaledY0-datum.scaledY1) > 13 ? datum.grpId : ''\"\n                }\n              }\n            }\n          }\n        ],\n        signals: [\n          {\n            name: \"groupHover\",\n            value: {},\n            on: [\n              {\n                events: \"@groupMark:mouseover\",\n                update:\n                  \"{stk1:datum.stack=='stk1' && datum.grpId, stk2:datum.stack=='stk2' && datum.grpId}\"\n              },\n              { events: \"mouseout\", update: \"{}\" }\n            ]\n          },\n          {\n            name: \"groupSelector\",\n            value: false,\n            on: [\n              {\n                events: \"@groupMark:click!\",\n                update:\n                  \"{stack:datum.stack, stk1:datum.stack=='stk1' && datum.grpId, stk2:datum.stack=='stk2' && datum.grpId}\"\n              },\n              {\n                events: [\n                  { type: \"click\", markname: \"groupReset\" },\n                  { type: \"dblclick\" }\n                ],\n                update: \"false\"\n              }\n            ]\n          }\n        ]\n      };\n      }\n\n      else if (chartType === \"ribbon\") {\n      spec = {\n        $schema: \"https://vega.github.io/schema/vega-lite/v6.json\",\n        description: \"Ribbon chart from Excel selection\",\n        background: \"white\",\n        config: { view: { stroke: \"transparent\" }},\n        data: { values: data },\n        layer: [\n        {\n            mark: { type: \"area\", interpolate: \"monotone\", tooltip: true },\n            encoding: {\n            x: {\n                field: headers[0],\n                type: \"ordinal\" // temporal change to \"ordinal\" if your first col is not a date\n            },\n            y: {\n                aggregate: \"sum\",\n                field: headers[2],\n                type: \"quantitative\",\n                axis: null,\n                stack: \"center\"\n            },\n            color: {\n                field: headers[1],\n                type: \"nominal\"\n            },\n            order: {\n                aggregate: \"sum\",\n                field: headers[2],\n                type: \"quantitative\"\n            }\n            }\n        }\n        ],\n        config: {\n        view: { stroke: \"transparent\" },\n        axis: {\n            ticks: false,\n            grid: true,\n            gridColor: \"white\",\n            gridWidth: 3,\n            domain: false,\n            labelColor: \"#666666\"\n        },\n        legend: {\n            titleFont: \"Segoe UI\",\n            titleFontWeight: \"bold\",\n            titleColor: \"#666666\",\n            labelFont: \"Segoe UI\",\n            labelColor: \"#666666\",\n            symbolType: \"circle\",\n            symbolSize: 75\n        }\n        }\n      };\n      }\n\n      else if (chartType === \"ridgeline\") {\n      spec = {\n        $schema: \"https://vega.github.io/schema/vega-lite/v6.json\",\n        description: \"Ridgeline (Joyplot) chart from Excel selection\",\n        background: \"white\",\n        config: { view: { stroke: \"transparent\" }},\n        data: { values: data },\n        mark: {\n        type: \"area\",\n        fillOpacity: 0.7,\n        strokeOpacity: 1,\n        strokeWidth: 1,\n        interpolate: \"monotone\"\n        },\n        width: 400,\n        height: 20,\n        encoding: {\n        x: {\n            field: headers[0],       // date/time column\n            type: \"ordinal\",\n            title: headers[0]\n        },\n        y: {\n            aggregate: \"sum\",\n            field: headers[2],       // value column\n            type: \"quantitative\",\n            scale: { range: [20, -40] },\n            axis: {\n            title: null,\n            values: [0],\n            domain: false,\n            labels: false,\n            ticks: false\n            }\n        },\n        row: {\n            field: headers[1],       // category column\n            type: \"nominal\",\n            title: headers[1],\n            header: {\n            title: null,\n            labelAngle: 0,\n            labelOrient: \"left\",\n            labelAlign: \"left\",\n            labelPadding: 0\n            },\n            sort: { field: headers[0], op: \"max\", order: \"ascending\" }\n        },\n        fill: {\n            field: headers[1],\n            type: \"nominal\",\n            legend: null,\n            scale: { scheme: \"plasma\" }\n        }\n        },\n        resolve: { scale: { y: \"independent\" } },\n        config: {\n        view: { stroke: \"transparent\" },\n        facet: { spacing: 20 },\n        header: {\n            labelFontSize: 12,\n            labelFontWeight: 500,\n            labelAngle: 0,\n            labelAnchor: \"end\",\n            labelOrient: \"top\",\n            labelPadding: -19\n        },\n        axis: {\n            domain: false,\n            grid: false,\n            ticks: false,\n            tickCount: 5,\n            labelFontSize: 12,\n            titleFontSize: 12,\n            titleFontWeight: 400,\n            titleColor: \"#605E5C\"\n        }\n        }\n      };\n      }\n\n      else if (chartType === \"wordcloud\") {\n      spec = {\n        $schema: \"https://vega.github.io/schema/vega/v5.json\",\n        description: \"Word cloud from Excel selection\",\n        width: 800,\n        height: 400,\n        padding: 0,\n        background: \"white\",\n        config: { view: { stroke: \"transparent\" }},\n        data: [\n        {\n            name: \"table\",\n            values: data,\n            transform: [\n            {\n                type: \"countpattern\",\n                field: headers[0], // Use first column as text source\n                case: \"upper\",\n                pattern: \"[\\\\w']{3,}\",\n                stopwords: \"(i|me|my|myself|we|us|our|ours|ourselves|you|your|yours|yourself|yourselves|he|him|his|himself|she|her|hers|herself|it|its|itself|they|them|their|theirs|themselves|what|which|who|whom|whose|this|that|these|those|am|is|are|was|were|be|been|being|have|has|had|having|do|does|did|doing|will|would|should|can|could|ought|i'm|you're|he's|she's|it's|we're|they're|i've|you've|we've|they've|i'd|you'd|he'd|she'd|we'd|they'd|i'll|you'll|he'll|she'll|we'll|they'll|isn't|aren't|wasn't|weren't|hasn't|haven't|hadn't|doesn't|don't|didn't|won't|wouldn't|shan't|shouldn't|can't|cannot|couldn't|mustn't|let's|that's|who's|what's|here's|there's|when's|where's|why's|how's|a|an|the|and|but|if|or|because|as|until|while|of|at|by|for|with|about|against|between|into|through|during|before|after|above|below|to|from|up|upon|down|in|out|on|off|over|under|again|further|then|once|here|there|when|where|why|how|all|any|both|each|few|more|most|other|some|such|no|nor|not|only|own|same|so|than|too|very|say|says|said|shall)\"\n            },\n            {\n                type: \"formula\", \n                as: \"angle\",\n                expr: \"[-45, 0, 45][~~(random() * 3)]\"\n            },\n            {\n                type: \"formula\", \n                as: \"weight\",\n                expr: \"if(datum.count > 10, 600, 300)\"\n            }\n            ]\n        }\n        ],\n        \n        scales: [\n        {\n            name: \"color\",\n            type: \"ordinal\",\n            domain: { data: \"table\", field: \"text\" },\n            range: [\"#d5a928\", \"#652c90\", \"#939597\", \"#2563eb\", \"#dc2626\", \"#059669\"]\n        }\n        ],\n        \n        marks: [\n        {\n            type: \"text\",\n            from: { data: \"table\" },\n            encode: {\n            enter: {\n                text: { field: \"text\" },\n                align: { value: \"center\" },\n                baseline: { value: \"alphabetic\" },\n                fill: { scale: \"color\", field: \"text\" }\n            },\n            update: {\n                fillOpacity: { value: 1 }\n            },\n            hover: {\n                fillOpacity: { value: 0.5 }\n            }\n            },\n            transform: [\n            {\n                type: \"wordcloud\",\n                size: [800, 400],\n                text: { field: \"text\" },\n                rotate: { field: \"datum.angle\" },\n                font: \"Helvetica Neue, Arial\",\n                fontSize: { field: \"datum.count\" },\n                fontWeight: { field: \"datum.weight\" },\n                fontSizeRange: [12, 56],\n                padding: 2\n            }\n            ]\n        }\n        ]\n      };\n      }\n\n      else if (chartType === \"area\") {\n        spec = {\n          $schema: \"https://vega.github.io/schema/vega-lite/v6.json\",\n          description: \"Area chart from Excel selection\",\n          background: \"white\",\n          config: { view: { stroke: \"transparent\" }},\n          data: { values: data },\n          mark: { \n            type: \"area\", \n            tooltip: true,\n            opacity: 0.7\n          },\n          encoding: {\n            x: { \n              field: headers[0], \n              type: \"ordinal\",\n              axis: {\n                title: headers[0],\n                labelFontSize: 12,\n                titleFontSize: 14\n              }\n            },\n            y: { \n              field: headers[1], \n              type: \"quantitative\",\n              axis: {\n                title: headers[1],\n                labelFontSize: 12,\n                titleFontSize: 14\n              }\n            },\n            // Add color encoding for multiple areas if 3rd column exists\n            ...(headers.length >= 3 && {\n              color: { \n                field: headers[2], \n                type: \"nominal\",\n                legend: {\n                  title: headers[2],\n                  titleFontSize: 12,\n                  labelFontSize: 11\n                }\n              }\n            })\n          },\n          config: {\n            font: \"Segoe UI\",\n            axis: {\n              labelColor: \"#605e5c\",\n              titleColor: \"#323130\",\n              gridColor: \"#f3f2f1\"\n            },\n            legend: {\n              titleColor: \"#323130\",\n              labelColor: \"#605e5c\"\n            }\n          }\n        };\n      }\n\n      else if (chartType === \"bar\") {\n        spec = {\n          $schema: \"https://vega.github.io/schema/vega-lite/v6.json\",\n          description: \"Bar chart from Excel selection\",\n          background: \"white\",\n          config: { view: { stroke: \"transparent\" }},\n          data: { values: data },\n          mark: { \n            type: \"bar\", \n            tooltip: true\n          },\n          encoding: {\n            x: { \n              field: headers[0], \n              type: \"nominal\",\n              axis: {\n                title: headers[0],\n                labelFontSize: 12,\n                titleFontSize: 14\n              }\n            },\n            y: { \n              field: headers[1], \n              type: \"quantitative\",\n              axis: {\n                title: headers[1],\n                labelFontSize: 12,\n                titleFontSize: 14\n              }\n            },\n            // Add color encoding for grouped bars if 3rd column exists\n            ...(headers.length >= 3 && {\n              color: { \n                field: headers[2], \n                type: \"nominal\",\n                legend: {\n                  title: headers[2],\n                  titleFontSize: 12,\n                  labelFontSize: 11\n                }\n              }\n            })\n          },\n          config: {\n            font: \"Segoe UI\",\n            axis: {\n              labelColor: \"#605e5c\",\n              titleColor: \"#323130\",\n              gridColor: \"#f3f2f1\"\n            },\n            legend: {\n              titleColor: \"#323130\",\n              labelColor: \"#605e5c\"\n            }\n          }\n        };\n      }\n\n      // Render hidden chart\n      const hiddenDiv = document.createElement(\"div\");\n      hiddenDiv.style.display = \"none\";\n      document.body.appendChild(hiddenDiv);\n\n      const result = await vegaEmbed(hiddenDiv, spec, { actions: false });\n      const view = result.view;\n\n      // Export chart -> PNG\n      const pngUrl = await view.toImageURL(\"png\");\n      const response = await fetch(pngUrl);\n      const blob = await response.blob();\n\n      const reader = new FileReader();\n      reader.onloadend = async () => {\n      const base64data = reader.result.split(\",\")[1];\n\n      // Insert picture above selection\n      const image = sheet.shapes.addImage(base64data);\n      image.left = range.left;\n      image.top = range.top;\n      image.lockAspectRatio = true; // keep proportions\n\n      await context.sync();\n      };\n\n      reader.readAsDataURL(blob);\n      \n      // Clean up hidden div\n      document.body.removeChild(hiddenDiv);\n    });\n  } catch (error) {\n    console.error(error);\n  }\n}","// Imports\nvar ___HTML_LOADER_IMPORT_0___ = new URL(\"./taskpane.js\", import.meta.url);\n// Module\nvar code = \"<!DOCTYPE html> <html> <head> <meta charset=\\\"UTF-8\\\"/> <meta http-equiv=\\\"X-UA-Compatible\\\" content=\\\"IE=Edge\\\"/> <meta name=\\\"viewport\\\" content=\\\"width=device-width,initial-scale=1\\\"> <title>Vega Chart</title> <\" + \"script src=\\\"https://appsforoffice.microsoft.com/lib/1/hosted/office.js\\\"><\" + \"/script> <\" + \"script src=\\\"https://cdn.jsdelivr.net/npm/vega@6\\\"><\" + \"/script> <\" + \"script src=\\\"https://cdn.jsdelivr.net/npm/vega-lite@6\\\"><\" + \"/script> <\" + \"script src=\\\"https://cdn.jsdelivr.net/npm/vega-embed@6\\\"><\" + \"/script> <\" + \"script type=\\\"module\\\" src=\\\"\" + ___HTML_LOADER_IMPORT_0___ + \"\\\"><\" + \"/script> <style>body{font-family:-apple-system,BlinkMacSystemFont,'Segoe UI',Roboto,sans-serif;margin:20px;line-height:1.4}.chart-selector{margin-bottom:15px}label{display:block;margin-bottom:5px;font-weight:600;color:#323130}.custom-dropdown{position:relative;width:100%}.dropdown-header{width:100%;padding:8px 12px;border:1px solid #8a8886;border-radius:4px;font-size:14px;background:#fff;cursor:pointer;display:flex;justify-content:space-between;align-items:center;box-sizing:border-box}.dropdown-header:hover{border-color:#0078d4}.dropdown-arrow{font-size:12px;transition:transform .2s}.dropdown-arrow.expanded{transform:rotate(180deg)}.dropdown-list{position:absolute;top:100%;left:0;right:0;background:#fff;border:1px solid #8a8886;border-top:none;border-radius:0 0 4px 4px;max-height:300px;overflow-y:auto;z-index:1000;display:none;box-shadow:0 2px 8px rgba(0,0,0,.1)}.dropdown-list.open{display:block}.folder-item{padding:8px 12px;cursor:pointer;font-weight:600;color:#0078d4;background:#f8f9fa;border-bottom:1px solid #e1e4e8;display:flex;justify-content:space-between;align-items:center}.folder-item:hover{background:#e3f2fd}.folder-arrow{font-size:10px;transition:transform .2s}.folder-arrow.expanded{transform:rotate(90deg)}.chart-item{padding:8px 12px 8px 32px;cursor:pointer;color:#323130;border-bottom:1px solid #f0f0f0;display:none}.chart-item.visible{display:block}.chart-item:hover{background:#f5f5f5}.chart-item:last-child{border-bottom:none}button{background-color:#0078d4;color:#fff;border:none;padding:10px 20px;border-radius:4px;font-size:14px;cursor:pointer;width:100%;margin-bottom:15px}button:hover{background-color:#106ebe}.data-requirements{background-color:#f8f9fa;border:1px solid #e1e4e8;border-radius:6px;padding:12px;margin-top:10px;font-size:13px}.data-requirements h4{margin:0 0 8px 0;color:#24292f;font-size:14px}.data-requirements ul{margin:0;padding-left:18px}.data-requirements li{margin-bottom:4px}.hidden{display:none}</style> </head> <body> <h2></h2> <div class=\\\"chart-selector\\\"> <label for=\\\"chartDropdown\\\">Select Chart Type:</label> <div class=\\\"custom-dropdown\\\" id=\\\"chartDropdown\\\"> <div class=\\\"dropdown-header\\\" id=\\\"dropdownHeader\\\"> <span id=\\\"selectedText\\\">Choose a chart...</span> <span class=\\\"dropdown-arrow\\\">▼</span> </div> <div class=\\\"dropdown-list\\\" id=\\\"dropdownList\\\"> <div class=\\\"folder-item\\\" data-folder=\\\"standard\\\"> <span>Standard</span> <span class=\\\"folder-arrow\\\">►</span> </div> <div class=\\\"chart-item\\\" data-chart=\\\"bar\\\" data-folder=\\\"standard\\\">Bar</div> <div class=\\\"chart-item\\\" data-chart=\\\"line\\\" data-folder=\\\"standard\\\">Line</div> <div class=\\\"chart-item\\\" data-chart=\\\"area\\\" data-folder=\\\"standard\\\">Area</div> <div class=\\\"chart-item\\\" data-chart=\\\"point\\\" data-folder=\\\"standard\\\">Scatter</div> <div class=\\\"chart-item\\\" data-chart=\\\"pie\\\" data-folder=\\\"standard\\\">Pie</div> <div class=\\\"chart-item\\\" data-chart=\\\"box\\\" data-folder=\\\"standard\\\">Box</div> <div class=\\\"chart-item\\\" data-chart=\\\"radar\\\" data-folder=\\\"standard\\\">Radar</div> <div class=\\\"chart-item\\\" data-chart=\\\"histogram\\\" data-folder=\\\"standard\\\">Histogram</div> <div class=\\\"chart-item\\\" data-chart=\\\"treemap\\\" data-folder=\\\"standard\\\">Treemap</div> <div class=\\\"chart-item\\\" data-chart=\\\"sunburst\\\" data-folder=\\\"standard\\\">Sunburst</div> <div class=\\\"chart-item\\\" data-chart=\\\"waterfall\\\" data-folder=\\\"standard\\\">Waterfall</div> <div class=\\\"folder-item\\\" data-folder=\\\"special\\\"> <span>Special</span> <span class=\\\"folder-arrow\\\">►</span> </div> <div class=\\\"chart-item\\\" data-chart=\\\"radial\\\" data-folder=\\\"special\\\">Radial</div> <div class=\\\"chart-item\\\" data-chart=\\\"arc\\\" data-folder=\\\"special\\\">Arc</div> <div class=\\\"chart-item\\\" data-chart=\\\"tree\\\" data-folder=\\\"special\\\">Tree</div> <div class=\\\"chart-item\\\" data-chart=\\\"wordcloud\\\" data-folder=\\\"special\\\">Wordcloud</div> <div class=\\\"chart-item\\\" data-chart=\\\"gantt\\\" data-folder=\\\"special\\\">Gantt</div> <div class=\\\"chart-item\\\" data-chart=\\\"strip\\\" data-folder=\\\"special\\\">Strip</div> <div class=\\\"chart-item\\\" data-chart=\\\"heatmap\\\" data-folder=\\\"special\\\">Heatmap</div> <div class=\\\"chart-item\\\" data-chart=\\\"bullet\\\" data-folder=\\\"special\\\">Bullet</div> <div class=\\\"chart-item\\\" data-chart=\\\"horizon\\\" data-folder=\\\"special\\\">Horizon</div> <div class=\\\"chart-item\\\" data-chart=\\\"slope\\\" data-folder=\\\"special\\\">Slope</div> <div class=\\\"chart-item\\\" data-chart=\\\"mekko\\\" data-folder=\\\"special\\\">Mekko</div> <div class=\\\"chart-item\\\" data-chart=\\\"marimekko\\\" data-folder=\\\"special\\\">Marimekko</div> <div class=\\\"chart-item\\\" data-chart=\\\"bump\\\" data-folder=\\\"special\\\">Bump</div> <div class=\\\"chart-item\\\" data-chart=\\\"waffle\\\" data-folder=\\\"special\\\">Waffle</div> <div class=\\\"chart-item\\\" data-chart=\\\"lollipop\\\" data-folder=\\\"special\\\">Lollipop</div> <div class=\\\"chart-item\\\" data-chart=\\\"violin\\\" data-folder=\\\"special\\\">Violin</div> <div class=\\\"chart-item\\\" data-chart=\\\"sankey\\\" data-folder=\\\"special\\\">Sankey</div> <div class=\\\"chart-item\\\" data-chart=\\\"ribbon\\\" data-folder=\\\"special\\\">Ribbon</div> <div class=\\\"chart-item\\\" data-chart=\\\"ridgeline\\\" data-folder=\\\"special\\\">Ridgeline</div> <div class=\\\"chart-item\\\" data-chart=\\\"deviation\\\" data-folder=\\\"special\\\">Deviation</div> </div> </div> </div> <button id=\\\"drawChart\\\">Generate Chart</button> <select id=\\\"chartType\\\" style=\\\"display:none\\\"> <option value=\\\"\\\">Choose a chart...</option> <option value=\\\"bar\\\">Bar</option> <option value=\\\"line\\\">Line</option> <option value=\\\"area\\\">Area</option> <option value=\\\"point\\\">Scatter</option> <option value=\\\"pie\\\">Pie</option> <option value=\\\"box\\\">Box</option> <option value=\\\"histogram\\\">Histogram</option> <option value=\\\"radar\\\">Radar</option> <option value=\\\"heatmap\\\">Heatmap</option> <option value=\\\"radial\\\">Radial</option> <option value=\\\"arc\\\">Arc</option> <option value=\\\"tree\\\">Tree</option> <option value=\\\"wordcloud\\\">Wordcloud</option> <option value=\\\"gantt\\\">Gantt</option> <option value=\\\"strip\\\">Strip</option> <option value=\\\"treemap\\\">Treemap</option> <option value=\\\"sunburst\\\">Sunburst</option> <option value=\\\"bullet\\\">Bullet</option> <option value=\\\"horizon\\\">Horizon</option> <option value=\\\"slope\\\">Slope</option> <option value=\\\"mekko\\\">Mekko</option> <option value=\\\"marimekko\\\">Marimekko</option> <option value=\\\"bump\\\">Bump</option> <option value=\\\"waffle\\\">Waffle</option> <option value=\\\"lollipop\\\">Lollipop</option> <option value=\\\"violin\\\">Violin</option> <option value=\\\"sankey\\\">Sankey</option> <option value=\\\"ribbon\\\">Ribbon</option> <option value=\\\"ridgeline\\\">Ridgeline</option> <option value=\\\"deviation\\\">Deviation</option> <option value=\\\"waterfall\\\">Waterfall</option> </select> <div id=\\\"req-point\\\" class=\\\"data-requirements hidden\\\"> <h4>Data Requirements:</h4> <ul> <li><strong>Column 1:</strong> X-axis values (numbers)</li> <li><strong>Column 2:</strong> Y-axis values (numbers)</li> <li><strong>Column 3 (optional):</strong> Color grouping (categories for different colors)</li> <li><strong>Column 4 (optional):</strong> Shape grouping (categories for different shapes)</li> </ul> </div> <div id=\\\"req-bar\\\" class=\\\"data-requirements hidden\\\"> <h4>Data Requirements:</h4> <ul> <li><strong>Column 1:</strong> Categories or X-axis values</li> <li><strong>Column 2:</strong> Values (numbers)</li> <li><strong>Column 3 (optional):</strong> Grouping variable for grouped bars</li> </ul> </div> <div id=\\\"req-line\\\" class=\\\"data-requirements hidden\\\"> <h4>Data Requirements:</h4> <ul> <li><strong>Column 1:</strong> X-axis values (often dates/time or categories)</li> <li><strong>Columns 2-n:</strong> Value series</li> </ul> </div> <div id=\\\"req-area\\\" class=\\\"data-requirements hidden\\\"> <h4>Data Requirements:</h4> <ul> <li><strong>Column 1:</strong> X-axis values (often dates/time)</li> <li><strong>Column 2:</strong> Y-axis values (numbers)</li> <li><strong>Column 3 (optional):</strong> Series grouping for multiple areas</li> </ul> </div> <div id=\\\"req-horizon\\\" class=\\\"data-requirements hidden\\\"> <h4>Data Requirements:</h4> <ul> <li><strong>Column 1:</strong> X-axis values (time periods, dates, or sequence numbers)</li> <li><strong>Column 2:</strong> Y-axis values (numeric data to visualize)</li> </ul> </div> <div id=\\\"req-slope\\\" class=\\\"data-requirements hidden\\\"> <h4>Data Requirements:</h4> <ul> <li><strong>Column 1:</strong> Time periods (e.g., \\\"2023\\\", \\\"2024\\\" or \\\"Q1\\\", \\\"Q4\\\")</li> <li><strong>Column 2:</strong> Categories/Series (e.g., \\\"Product A\\\", \\\"Region 1\\\")</li> <li><strong>Column 3:</strong> Values (numbers)</li> </ul> </div> <div id=\\\"req-radar\\\" class=\\\"data-requirements hidden\\\"> <h4>Data Requirements:</h4> <ul> <li><strong>Column 1:</strong> Series/Category name (e.g., \\\"Product A\\\", \\\"Team 1\\\")</li> <li><strong>Columns 2-n:</strong> Dimension values (e.g., \\\"Speed\\\", \\\"Quality\\\", \\\"Cost\\\")</li> </ul> </div> <div id=\\\"req-box\\\" class=\\\"data-requirements hidden\\\"> <h4>Data Requirements:</h4> <ul> <li><strong>Column 1:</strong> Categories/Groups (e.g., \\\"Species\\\", \\\"Department\\\", \\\"Region\\\")</li> <li><strong>Column 2:</strong> Values for distribution analysis (numbers)</li> </ul> </div> <div id=\\\"req-pie\\\" class=\\\"data-requirements hidden\\\"> <h4>Data Requirements:</h4> <ul> <li><strong>Column 1:</strong> Values (numbers for slice sizes)</li> </ul> </div> <div id=\\\"req-histogram\\\" class=\\\"data-requirements hidden\\\"> <h4>Data Requirements:</h4> <ul> <li><strong>Column 1:</strong> Continuous numeric values to create distribution bins</li> <li><strong>Column 2 (optional):</strong> Grouping variable for colored/separate histograms</li> </ul> </div> <div id=\\\"req-radial\\\" class=\\\"data-requirements hidden\\\"> <h4>Data Requirements:</h4> <ul> <li><strong>Column 1:</strong> Category names</li> <li><strong>Column 2:</strong> Values (determines both angle and radius)</li> </ul> </div> <div id=\\\"req-arc\\\" class=\\\"data-requirements hidden\\\"> <h4>Data Requirements:</h4> <ul> <li><strong>Column 1:</strong> Source node/entity (e.g., \\\"Person A\\\", \\\"Department 1\\\")</li> <li><strong>Column 2:</strong> Target node/entity (e.g., \\\"Person B\\\", \\\"Department 2\\\")</li> <li><strong>Column 3:</strong> Connection strength/weight (numbers, optional)</li> <li><strong>Column 4:</strong> Group/Category (optional, for coloring nodes)</li> </ul> </div> <div id=\\\"req-tree\\\" class=\\\"data-requirements hidden\\\"> <h4>Data Requirements:</h4> <ul> <li><strong>Column 1:</strong> Parent (parent node name, empty for root nodes)</li> <li><strong>Column 2:</strong> Child (child node name)</li> <li><strong>Column 3 (optional):</strong> Value (affects node size, defaults to 1)</li> </ul> </div> <div id=\\\"req-strip\\\" class=\\\"data-requirements hidden\\\"> <h4>Data Requirements:</h4> <ul> <li><strong>Column 1:</strong> Categories</li> <li><strong>Column 2:</strong> Values</li> <li><strong>Column 3 (optional):</strong> Color grouping (e.g., Brand, Region, Type)</li> </ul> </div> <div id=\\\"req-treemap\\\" class=\\\"data-requirements hidden\\\"> <h4>Data Requirements:</h4> <ul> <li><strong>Column 1:</strong> Parent/Group hierarchy (e.g., Region, Division)</li> <li><strong>Column 2:</strong> Category/Item names (e.g., Product, Department, File)</li> <li><strong>Column 3:</strong> Values/Sizes (e.g., Sales, Budget, File Size)</li> </ul> </div> <div id=\\\"req-sunburst\\\" class=\\\"data-requirements hidden\\\"> <h4>Data Requirements:</h4> <ul> <li><strong>Column 1:</strong> Parent (parent category, empty for root level)</li> <li><strong>Column 2:</strong> Child (child category or item name)</li> <li><strong>Column 3 (optional):</strong> Value (size of the segment, defaults to 1)</li> </ul> </div> <div id=\\\"req-wordcloud\\\" class=\\\"data-requirements hidden\\\"> <h4>Data Requirements:</h4> <ul> <li><strong>Column 1:</strong> Text data (sentences, phrases, or words)</li> </ul> </div> <div id=\\\"req-gantt\\\" class=\\\"data-requirements hidden\\\"> <h4>Data Requirements:</h4> <ul> <li><strong>Column 1:</strong> Task ID (number, empty for root tasks)</li> <li><strong>Column 2:</strong> Sub Task ID (number)</li> <li><strong>Column 3:</strong> Sub Task Name (text)</li> <li><strong>Column 4:</strong> Start Date (date)</li> <li><strong>Column 5:</strong> End Date (date)</li> <li><strong>Column 6:</strong> Progress (0-1 decimal or percentage)</li> </ul> </div> <div id=\\\"req-lollipop\\\" class=\\\"data-requirements hidden\\\"> <h4>Data Requirements:</h4> <ul> <li><strong>Column 1:</strong> Category names (e.g., \\\"Products\\\", \\\"Regions\\\", \\\"Teams\\\")</li> <li><strong>Column 2:</strong> Values (numbers for stick length and circle size)</li> </ul> </div> <div id=\\\"req-waffle\\\" class=\\\"data-requirements hidden\\\"> <h4>Data Requirements:</h4> <ul> <li><strong>Column 1:</strong> Category names (e.g., \\\"Product A\\\", \\\"Product B\\\")</li> <li><strong>Column 2:</strong> Values (numbers that will be converted to percentages)</li> </ul> </div> <div id=\\\"req-bullet\\\" class=\\\"data-requirements hidden\\\"> <h4>Data Requirements:</h4> <ul> <li><strong>Column 1:</strong> Title/Metric name (e.g., \\\"Revenue\\\", \\\"Profit\\\")</li> <li><strong>Column 2:</strong> Poor range max</li> <li><strong>Column 3:</strong> Satisfactory range max</li> <li><strong>Column 4:</strong> Good range max</li> <li><strong>Column 5:</strong> Actual value</li> <li><strong>Column 6:</strong> Forecast value (optional)</li> <li><strong>Column 7:</strong> Target value (marker)</li> </ul> </div> <div id=\\\"req-mekko\\\" class=\\\"data-requirements hidden\\\"> <h4>Data Requirements:</h4> <ul> <li><strong>Column 1:</strong> Category (text)</li> <li><strong>Column 2:</strong> Subcategory (text)</li> <li><strong>Column 3:</strong> Value (number)</li> </ul> </div> <div id=\\\"req-marimekko\\\" class=\\\"data-requirements hidden\\\"> <h4>Data Requirements:</h4> <ul> <li><strong>Column 1:</strong> Category (text)</li> <li><strong>Column 2:</strong> Subcategory (text)</li> <li><strong>Column 3:</strong> Value (number)</li> </ul> </div> <div id=\\\"req-heatmap\\\" class=\\\"data-requirements hidden\\\"> <h4>Data Requirements:</h4> <ul> <li><strong>Column 1:</strong> Y-axis categories (e.g., \\\"Months\\\", \\\"Products\\\", \\\"Regions\\\")</li> <li><strong>Column 2:</strong> X-axis categories (e.g., \\\"Days\\\", \\\"Quarters\\\", \\\"Sales Reps\\\")</li> <li><strong>Column 3:</strong> Values (numbers for color intensity)</li> </ul> </div> <div id=\\\"req-bump\\\" class=\\\"data-requirements hidden\\\"> <h4>Data Requirements:</h4> <ul> <li><strong>Column 1:</strong> Time periods</li> <li><strong>Column 2:</strong> Categories (e.g., \\\"Team A\\\", \\\"Team B\\\")</li> <li><strong>Column 3:</strong> Rank values (1, 2, 3, etc.)</li> </ul> </div> <div id=\\\"req-violin\\\" class=\\\"data-requirements hidden\\\"> <h4>Data Requirements:</h4> <ul> <li><strong>Column 1:</strong> Categories/Groups (e.g., \\\"Country A\\\", \\\"Product Line\\\", \\\"Department\\\")</li> <li><strong>Column 2:</strong> Continuous values (numbers for distribution analysis)</li> </ul> </div> <div id=\\\"req-sankey\\\" class=\\\"data-requirements hidden\\\"> <h4>Data Requirements:</h4> <ul> <li><strong>Column 1:</strong> Source Category</li> <li><strong>Column 2:</strong> Destination Category</li> <li><strong>Column 3:</strong> Values (numbers)</li> </ul> </div> <div id=\\\"req-ribbon\\\" class=\\\"data-requirements hidden\\\"> <h4>Data Requirements:</h4> <ul> <li><strong>Column 1:</strong> Time periods (dates/periods)</li> <li><strong>Column 2:</strong> Categories (different series)</li> <li><strong>Column 3:</strong> Values (numbers)</li> </ul> </div> <div id=\\\"req-ridgeline\\\" class=\\\"data-requirements hidden\\\"> <h4>Data Requirements:</h4> <ul> <li><strong>Column 1:</strong> Time periods/X-axis values</li> <li><strong>Column 2:</strong> Categories (creates separate ridges)</li> <li><strong>Column 3:</strong> Values (creates distribution shape)</li> </ul> </div> <div id=\\\"req-deviation\\\" class=\\\"data-requirements hidden\\\"> <h4>Data Requirements:</h4> <ul> <li><strong>Column 1:</strong> Date/Period</li> <li><strong>Column 2:</strong> Actual values</li> <li><strong>Column 3:</strong> Target/Baseline values</li> </ul> </div> <div id=\\\"req-waterfall\\\" class=\\\"data-requirements hidden\\\"> <h4>Data Requirements:</h4> <ul> <li><strong>Column 1:</strong> Categories/Labels (e.g., \\\"Begin\\\", \\\"Q1\\\", \\\"Q2\\\", \\\"End\\\")</li> <li><strong>Column 2:</strong> Amount values (positive/negative numbers)</li> </ul> </div> <div id=\\\"chart\\\"></div> <\" + \"script>document.addEventListener(\\\"DOMContentLoaded\\\",function(){const e=document.getElementById(\\\"dropdownHeader\\\"),t=document.getElementById(\\\"dropdownList\\\"),o=e.querySelector(\\\".dropdown-arrow\\\"),d=document.getElementById(\\\"selectedText\\\"),c=document.querySelectorAll(\\\".data-requirements\\\"),n=document.getElementById(\\\"chartType\\\");let s=!1;c.forEach(e=>e.classList.add(\\\"hidden\\\")),e.addEventListener(\\\"click\\\",function(){s=!s,t.classList.toggle(\\\"open\\\",s),o.classList.toggle(\\\"expanded\\\",s)}),document.addEventListener(\\\"click\\\",function(e){e.target.closest(\\\".custom-dropdown\\\")||(s=!1,t.classList.remove(\\\"open\\\"),o.classList.remove(\\\"expanded\\\"))}),document.querySelectorAll(\\\".folder-item\\\").forEach(e=>{e.addEventListener(\\\"click\\\",function(e){e.stopPropagation();const t=this.dataset.folder,o=this.querySelector(\\\".folder-arrow\\\"),d=document.querySelectorAll(`[data-folder=\\\"${t}\\\"].chart-item`),c=o.classList.contains(\\\"expanded\\\");o.classList.toggle(\\\"expanded\\\",!c),d.forEach(e=>{e.classList.toggle(\\\"visible\\\",!c)})})}),document.querySelectorAll(\\\".chart-item\\\").forEach(e=>{e.addEventListener(\\\"click\\\",function(){const e=this.dataset.chart,r=this.textContent;d.textContent=r,n.value=e,s=!1,t.classList.remove(\\\"open\\\"),o.classList.remove(\\\"expanded\\\"),document.querySelectorAll(\\\".folder-arrow\\\").forEach(e=>{e.classList.remove(\\\"expanded\\\")}),document.querySelectorAll(\\\".chart-item\\\").forEach(e=>{e.classList.remove(\\\"visible\\\")}),c.forEach(e=>e.classList.add(\\\"hidden\\\"));const l=document.getElementById(`req-${e}`);l&&l.classList.remove(\\\"hidden\\\")})})})<\" + \"/script> </body> </html>\";\n// Exports\nexport default code;"],"names":["__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","m","d","definition","key","o","Object","defineProperty","enumerable","get","g","globalThis","this","Function","e","window","obj","prop","prototype","hasOwnProperty","call","scriptUrl","importScripts","location","document","currentScript","tagName","toUpperCase","src","scripts","getElementsByTagName","length","i","test","Error","replace","p","b","baseURI","self","href","t","r","Symbol","n","iterator","toStringTag","c","Generator","u","create","_regeneratorDefine2","f","y","G","v","a","bind","l","TypeError","done","value","return","GeneratorFunction","GeneratorFunctionPrototype","getPrototypeOf","setPrototypeOf","__proto__","displayName","_regenerator","w","_invoke","configurable","writable","_slicedToArray","Array","isArray","_arrayWithHoles","next","push","_iterableToArrayLimit","_unsupportedIterableToArray","_nonIterableRest","_toConsumableArray","_arrayLikeToArray","_arrayWithoutHoles","from","_iterableToArray","_nonIterableSpread","_createForOfIteratorHelper","_n","F","s","toString","slice","constructor","name","ownKeys","keys","getOwnPropertySymbols","filter","getOwnPropertyDescriptor","apply","_objectSpread","arguments","forEach","_defineProperty","getOwnPropertyDescriptors","defineProperties","_typeof","toPrimitive","String","_toPrimitive","_toPropertyKey","asyncGeneratorStep","Promise","resolve","then","_asyncToGenerator","_next","_throw","run","_run","_callee3","_t","_context3","Excel","_ref","_callee2","context","sheet","range","values","headers","rows","data","chartType","spec","transformedData","valueColumns","excelDateToJSDate","_buildHierarchy","ganttData","childrenMap","_iterator","_step","_step$value","orderedTasks","timePeriods","categories","firstPeriod","lastPeriod","slopeData","allValues","isPercentage","formatString","dynamicHeight","horizonData","yValues","maxY","minY","_range","bandHeight","baseline","dataPoints","_dynamicWidth","nodes","treeData","allIds","nodeCount","_dynamicWidth2","_dynamicHeight","_nodes","hierarchicalData","_allIds","_nodeCount","chartSize","radarData","dimensions","uniqueDimensions","processedData","numDataPoints","_dynamicWidth3","maxAmount","_dynamicHeight2","_data","_data2","_data3","edges","nodeMap","_nodes2","edgesWithIndices","_treeData","uniqueX","_dynamicWidth4","_data4","hiddenDiv","result","view","pngUrl","response","blob","reader","_context2","workbook","worksheets","getActiveWorksheet","getSelectedRange","load","sync","console","warn","map","row","h","getElementById","$schema","description","background","config","stroke","mark","type","size","tooltip","encoding","x","field","scale","zero","axis","title","labelFontSize","titleFontSize","color","legend","shape","font","labelColor","titleColor","gridColor","colName","parseFloat","point","strokeWidth","labelAngle","scheme","filled","serial","Date","Math","round","buildHierarchy","_step2","parentId","level","ordered","_iterator2","task","id","err","concat","start","end","isNaN","progress","includes","startDate","endDate","dependencies","split","trim","Boolean","duration","progressEnd","getTime","Map","has","set","entries","sort","width","height","max","layer","opacity","format","x2","align","dx","fontSize","text","strokeDash","date","toISOString","grid","Set","every","min","autosize","contains","labelFontWeight","labelPadding","domain","ticks","padding","datum","detail","transform","fontWeight","op","as","order","dy","fontStyle","fill","index","dynamicWidth","toLowerCase","parent","child","existingNode","node","seriesIndex","seriesName","dimension","series","category","abs","paddingInner","paddingOuter","y2","condition","xOffset","x2Offset","expr","ranges","measures","markers","outerRadius","theta","top","bottom","left","right","source","fields","ops","groupby","offset","scales","nice","axes","orient","zindex","tickCount","tickSize","labelFont","encode","labels","update","signal","marks","fillOpacity","interactive","lineHeight","target","group","edge","default","count","enter","mult","strokeOpacity","sourceX","targetX","sourceY","targetY","angle","titleFont","thickness","gridOpacity","find","parentKey","method","ratio","hover","joinaggregate","calculate","aggregate","facet","header","titleFontWeight","symbolType","symbolSize","spacing","column","density","extent","median","bounds","vconcat","cornerRadiusEnd","hconcat","direction","gradientLength","line","strokeCap","strokeJoin","innerRadius","radiusOffset","stack","radius","rangeMin","interpolate","stk1","stk2","doc_count","clip","path","band","yc","signals","on","events","markname","gridWidth","labelOrient","labelAlign","labelAnchor","case","pattern","stopwords","rotate","fontSizeRange","createElement","style","display","body","appendChild","vegaEmbed","actions","toImageURL","fetch","FileReader","onloadend","_callee","base64data","image","_context","shapes","addImage","lockAspectRatio","readAsDataURL","removeChild","_x","error","Office","onReady","onclick","URL"],"sourceRoot":""}