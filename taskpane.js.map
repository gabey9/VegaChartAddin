{"version":3,"file":"taskpane.js","mappings":"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","sources":["webpack://excel-custom-functions-js/webpack/bootstrap","webpack://excel-custom-functions-js/webpack/runtime/define property getters","webpack://excel-custom-functions-js/webpack/runtime/global","webpack://excel-custom-functions-js/webpack/runtime/hasOwnProperty shorthand","webpack://excel-custom-functions-js/webpack/runtime/publicPath","webpack://excel-custom-functions-js/webpack/runtime/jsonp chunk loading","webpack://excel-custom-functions-js/./src/taskpane/taskpane.js","webpack://excel-custom-functions-js/./src/taskpane/taskpane.html"],"sourcesContent":["// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript && document.currentScript.tagName.toUpperCase() === 'SCRIPT')\n\t\tscriptUrl = document.currentScript.src;\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) {\n\t\t\tvar i = scripts.length - 1;\n\t\t\twhile (i > -1 && (!scriptUrl || !/^http(s?):/.test(scriptUrl))) scriptUrl = scripts[i--].src;\n\t\t}\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/^blob:/, \"\").replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","__webpack_require__.b = document.baseURI || self.location.href;\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t926: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n// no on chunks loaded\n\n// no jsonp function","/* global console, document, Excel, Office */\n\nOffice.onReady(() => {\n  document.getElementById(\"drawChart\").onclick = run;\n});\n\nexport async function run() {\n  try {\n    await Excel.run(async (context) => {\n      const sheet = context.workbook.worksheets.getActiveWorksheet();\n\n      // Get current selection\n      const range = context.workbook.getSelectedRange();\n      range.load(\"values, left, top\");\n      await context.sync();\n\n      const values = range.values;\n      if (values.length < 2) {\n        console.warn(\"Need at least header row + one data row\");\n        return;\n      }\n\n      // First row is header\n      const headers = values[0];\n      const rows = values.slice(1);\n\n      // Convert rows -> objects\n      const data = rows.map(row => {\n        let obj = {};\n        headers.forEach((h, i) => {\n          obj[h] = row[i];\n        });\n        return obj;\n      });\n\n      // Get chart type from dropdown\n      const chartType = document.getElementById(\"chartType\").value;\n\n      let spec;\n\n      if (chartType === \"point\") {\n        spec = {\n          $schema: \"https://vega.github.io/schema/vega-lite/v6.json\",\n          description: \"Colored scatter plot from Excel selection\",\n          background: \"white\",\n          config: { view: { stroke: \"transparent\" }},\n          data: { values: data },\n          mark: { type: \"point\", size: 100, tooltip: true },\n          encoding: {\n            x: { \n              field: headers[0], \n              type: \"quantitative\",\n              scale: { zero: false },\n              axis: {\n                title: headers[0],\n                labelFontSize: 12,\n                titleFontSize: 14\n              }\n            },\n            y: { \n              field: headers[1], \n              type: \"quantitative\",\n              scale: { zero: false },\n              axis: {\n                title: headers[1],\n                labelFontSize: 12,\n                titleFontSize: 14\n              }\n            },\n            // Add color encoding if 3rd column exists\n            ...(headers.length >= 3 && {\n              color: { \n                field: headers[2], \n                type: \"nominal\",\n                legend: {\n                  title: headers[2],\n                  titleFontSize: 12,\n                  labelFontSize: 11\n                }\n              }\n            }),\n            // Add shape encoding if 4th column exists\n            ...(headers.length >= 4 && {\n              shape: { \n                field: headers[3], \n                type: \"nominal\",\n                legend: {\n                  title: headers[3],\n                  titleFontSize: 12,\n                  labelFontSize: 11\n                }\n              }\n            })\n          },\n          config: {\n            font: \"Segoe UI\",\n            axis: {\n              labelColor: \"#605e5c\",\n              titleColor: \"#323130\",\n              gridColor: \"#f3f2f1\"\n            },\n            legend: {\n              titleColor: \"#323130\",\n              labelColor: \"#605e5c\"\n            }\n          }\n        };\n      }\n\n      else if (chartType === \"bubble\") {\n        spec = {\n          $schema: \"https://vega.github.io/schema/vega-lite/v6.json\",\n          description: \"Bubble chart from Excel selection\",\n          background: \"white\",\n          config: { view: { stroke: \"transparent\" }},\n          data: { values: data },\n          mark: { type: \"circle\", tooltip: true, opacity: 0.7 },\n          encoding: {\n            x: { \n              field: headers[0], \n              type: \"quantitative\",\n              scale: { zero: false },\n              axis: {\n                title: headers[0],\n                labelFontSize: 12,\n                titleFontSize: 14\n              }\n            },\n            y: { \n              field: headers[1], \n              type: \"quantitative\",\n              scale: { zero: false },\n              axis: {\n                title: headers[1],\n                labelFontSize: 12,\n                titleFontSize: 14\n              }\n            },\n            size: {\n              field: headers[2],\n              type: \"quantitative\",\n              scale: {\n                type: \"linear\",\n                range: [100, 1000]\n              },\n              legend: {\n                title: headers[2],\n                titleFontSize: 12,\n                labelFontSize: 11\n              }\n            },\n            // Add color encoding if 4th column exists\n            ...(headers.length >= 4 && {\n              color: { \n                field: headers[3], \n                type: \"nominal\",\n                legend: {\n                  title: headers[3],\n                  titleFontSize: 12,\n                  labelFontSize: 11\n                }\n              }\n            })\n          },\n          config: {\n            font: \"Segoe UI\",\n            axis: {\n              labelColor: \"#605e5c\",\n              titleColor: \"#323130\",\n              gridColor: \"#f3f2f1\"\n            },\n            legend: {\n              titleColor: \"#323130\",\n              labelColor: \"#605e5c\"\n            }\n          }\n        };\n      }\n\n      else if (chartType === \"ring\") {\n        // Ring chart requires 2 columns: Category, Value\n        if (headers.length < 2) {\n          throw new Error(\"Ring chart requires 2 columns: Category, Value\");\n        }\n\n        const numRings = data.length;\n        if (numRings === 0) {\n          throw new Error(\"Ring chart requires at least one data row\");\n        }\n\n        // Dynamic ring parameters based on number of rings\n        const ringWidth = Math.max(15, Math.min(25, 120 / numRings));\n        const ringGap = Math.max(3, Math.min(8, 40 / numRings));\n        const maxRadius = 150 + (numRings * 5);\n\n        // Generate colors dynamically\n        const generateRingColor = (index, total) => {\n          const baseHue = 210; // Blue base\n          const saturation = Math.max(50, 80 - (index * 5));\n          const lightness = Math.max(25, 60 - (index * 8));\n          return `hsl(${baseHue}, ${saturation}%, ${lightness}%)`;\n        };\n\n        // Transform data for the chart\n        const transformedData = data.map((d, index) => ({\n          [`__${index}__`]: d[headers[0]], // Category\n          [`__${index + 100}__`]: d[headers[1]], // Value\n          [`Ring${index + 1}_Theta2`]: 2 * Math.PI * d[headers[1]] / 100,\n          [`Ring${index + 1}_Percent_Label`]: d[headers[1]] + '%'\n        }));\n\n        // Flatten into single object\n        const chartData = [Object.assign({}, ...transformedData)];\n\n        // Calculate ring positions\n        const ringPositions = [];\n        let currentOuter = maxRadius;\n        for (let i = 0; i < numRings; i++) {\n          const outer = currentOuter;\n          const inner = outer - ringWidth;\n          const middle = (outer + inner) / 2;\n          ringPositions.push({ outer, inner, middle });\n          currentOuter = inner - ringGap;\n        }\n\n        // Calculate legend dimensions and positioning\n        const legendWidth = 120; // Fixed width for legend area\n        const legendItemHeight = 25; // Height per legend item\n        const totalLegendHeight = numRings * legendItemHeight;\n        const chartCenterY = maxRadius + 50; // Y center of the chart\n        const legendStartY = chartCenterY - (totalLegendHeight / 2); // Center legend relative to chart center\n\n        spec = {\n          \"$schema\": \"https://vega.github.io/schema/vega-lite/v5.json\",\n          \"config\": {\n            \"autosize\": {\n              \"type\": \"pad\",\n              \"resize\": true\n            },\n            \"concat\": {\"spacing\": 20} // Increased spacing between chart and legend\n          },\n          \"description\": `Dynamic ring chart with ${numRings} concentric rings`,\n          \"background\": \"white\",\n          \"data\": {\"values\": chartData},\n          \"hconcat\": [\n            {\n              \"description\": \"RINGS - Main Chart\",\n              \"width\": (maxRadius + 50) * 2,\n              \"height\": (maxRadius + 50) * 2,\n              \"view\": {\"stroke\": null},\n              \"layer\": [\n                // Background rings (full circles) - centered\n                ...data.map((d, index) => ({\n                  \"description\": `RING ${index + 1} BACKGROUND`,\n                  \"mark\": {\n                    \"type\": \"arc\",\n                    \"radius\": ringPositions[index].outer,\n                    \"radius2\": ringPositions[index].inner,\n                    \"theta\": 0,\n                    \"theta2\": 6.283185307179586, // 2π\n                    \"opacity\": 0.25,\n                    \"x\": maxRadius + 50,\n                    \"y\": maxRadius + 50\n                  },\n                  \"encoding\": {\n                    \"color\": {\"value\": generateRingColor(index, numRings)}\n                  }\n                })),\n                // Progress rings - centered\n                ...data.map((d, index) => ({\n                  \"description\": `RING ${index + 1} PROGRESS`,\n                  \"mark\": {\n                    \"type\": \"arc\",\n                    \"radius\": ringPositions[index].outer,\n                    \"radius2\": ringPositions[index].inner,\n                    \"theta\": 0,\n                    \"theta2\": {\"expr\": `datum['Ring${index + 1}_Theta2']`},\n                    \"cornerRadius\": Math.min(8, ringWidth / 2),\n                    \"tooltip\": true,\n                    \"x\": maxRadius + 50,\n                    \"y\": maxRadius + 50\n                  },\n                  \"encoding\": {\n                    \"color\": {\"value\": generateRingColor(index, numRings)},\n                    \"tooltip\": [\n                      {\"value\": d[headers[0]], \"title\": \"Category\"},\n                      {\"value\": d[headers[1]] + \"%\", \"title\": \"Progress\"}\n                    ]\n                  }\n                })),\n                // White percentage labels slightly to the right - centered\n                ...data.map((d, index) => ({\n                  \"description\": `RING ${index + 1} LABEL`,\n                  \"mark\": {\n                    \"type\": \"text\",\n                    \"align\": \"center\",\n                    \"baseline\": \"middle\",\n                    \"x\": maxRadius + 50 + 15, // Center + offset to right\n                    \"y\": maxRadius + 50 - ringPositions[index].middle, // Center + offset up\n                    \"fontSize\": Math.max(10, Math.min(14, 180 / numRings)),\n                    \"font\": \"Segoe UI\",\n                    \"fontWeight\": \"bold\",\n                    \"color\": \"white\"\n                  },\n                  \"encoding\": {\n                    \"text\": {\"value\": d[headers[1]] + \"%\"},\n                    \"opacity\": {\n                      \"condition\": {\n                        \"test\": `datum['Ring${index + 1}_Theta2'] > 0`,\n                        \"value\": 1\n                      },\n                      \"value\": 0\n                    }\n                  }\n                }))\n              ]\n            },\n            {\n              \"description\": \"LEGEND - Right Side\",\n              \"width\": legendWidth,\n              \"height\": (maxRadius + 50) * 2, // Match chart height exactly\n              \"view\": {\"stroke\": null},\n              \"layer\": data.map((d, index) => [\n                {\n                  \"description\": `LEGEND CIRCLE ${index + 1}`,\n                  \"mark\": {\n                    \"type\": \"circle\",\n                    \"size\": 150,\n                    \"x\": 15, // Fixed position from left edge\n                    \"y\": legendStartY + (index * legendItemHeight),\n                    \"color\": generateRingColor(index, numRings)\n                  }\n                },\n                {\n                  \"description\": `LEGEND LABEL ${index + 1}`,\n                  \"mark\": {\n                    \"type\": \"text\",\n                    \"x\": 35, // Positioned to the right of the circle\n                    \"y\": legendStartY + (index * legendItemHeight),\n                    \"align\": \"left\",\n                    \"baseline\": \"middle\",\n                    \"fontSize\": 11,\n                    \"font\": \"Segoe UI\"\n                  },\n                  \"encoding\": {\n                    \"text\": {\"value\": d[headers[0]]}\n                  }\n                }\n              ]).flat()\n            }\n          ],\n          \"view\": {\"stroke\": null}\n        };\n      }\n\n      else if (chartType === \"line\") {\n        const transformedData = [];\n        const valueColumns = headers.slice(1);\n        data.forEach(row => {\n            valueColumns.forEach(colName => {\n            if (row[colName] !== null && row[colName] !== undefined && row[colName] !== \"\") {\n                transformedData.push({\n                [headers[0]]: row[headers[0]], // x-axis value (first column)\n                series: colName,               // series name (column header)\n                value: parseFloat(row[colName]) || 0  // y-axis value\n                });\n            }\n            });\n        });\n\n        spec = {\n            $schema: \"https://vega.github.io/schema/vega-lite/v6.json\",\n            description: \"Multi-series line chart from Excel selection\",\n            background: \"white\",\n            config: { view: { stroke: \"transparent\" }},\n            data: { values: transformedData },\n            mark: { \n            type: \"line\", \n            point: false,\n            tooltip: true,\n            strokeWidth: 2\n            },\n            encoding: {\n            x: { \n                field: headers[0], \n                type: \"ordinal\",\n                axis: {\n                title: headers[0],\n                labelFontSize: 12,\n                titleFontSize: 14,\n                labelAngle: 0\n                }\n            },\n            y: { \n                field: \"value\", \n                type: \"quantitative\",\n                axis: {\n                title: \"Value\",\n                labelFontSize: 12,\n                titleFontSize: 14\n                }\n            },\n            color: { \n                field: \"series\", \n                type: \"nominal\",\n                scale: {\n                scheme: \"category10\"\n                },\n                legend: {\n                title: \"Series\",\n                titleFontSize: 12,\n                labelFontSize: 11\n                }\n            }\n            },\n            config: {\n            font: \"Segoe UI\",\n            axis: {\n                labelColor: \"#605e5c\",\n                titleColor: \"#323130\",\n                gridColor: \"#f3f2f1\"\n            },\n            legend: {\n                titleColor: \"#323130\",\n                labelColor: \"#605e5c\"\n            },\n            point: {\n                size: 60,\n                filled: true\n            }\n            }\n        };\n      }\n\n      else if (chartType === \"gantt\") {\n      function excelDateToJSDate(serial) {\n          return new Date(Math.round((serial - 25569) * 86400 * 1000));\n      }\n\n      const ganttData = rows.map(row => {\n          const parentId = row[0] || null;   // col 1 = parent id\n          const id = row[1];                 // col 2 = task id\n          const name = row[2] || `Task ${id}`;\n          if (!id) return null;\n\n          const start = typeof row[3] === \"number\" ? excelDateToJSDate(row[3]) : new Date(row[3]);\n          const end = typeof row[4] === \"number\" ? excelDateToJSDate(row[4]) : new Date(row[4]);\n          if (!(start instanceof Date) || isNaN(start) || !(end instanceof Date) || isNaN(end)) return null;\n\n          let progress = 0;\n          if (row[5]) {\n              if (typeof row[5] === \"string\" && row[5].includes(\"%\")) {\n                  progress = parseFloat(row[5]) / 100;\n              } else if (row[5] > 1) {\n                  progress = row[5] / 100;\n              } else {\n                  progress = row[5];\n              }\n          }\n\n          const dependencies = row[6] ? String(row[6]).split(\",\").map(d => d.trim()) : [];\n\n          return { id, parentId, name, startDate: start, endDate: end, progress, dependencies };\n      }).filter(Boolean);\n\n      // Precompute progressEnd\n      ganttData.forEach(task => {\n          const duration = task.endDate - task.startDate;\n          task.progressEnd = new Date(task.startDate.getTime() + duration * task.progress);\n      });\n\n      // Build parent->children map\n      const childrenMap = new Map();\n      ganttData.forEach(task => {\n          if (!childrenMap.has(task.parentId)) {\n              childrenMap.set(task.parentId, []);\n          }\n          childrenMap.get(task.parentId).push(task);\n      });\n\n      // Sort children by startDate\n      for (let [pid, childList] of childrenMap.entries()) {\n          childList.sort((a, b) => a.startDate - b.startDate);\n      }\n\n      // Recursive hierarchy ordering\n      function buildHierarchy(parentId = null, level = 0) {\n          const ordered = [];\n          const tasks = childrenMap.get(parentId) || [];\n          for (const task of tasks) {\n              task.level = level;\n              ordered.push(task);\n              ordered.push(...buildHierarchy(task.id, level + 1));\n          }\n          return ordered;\n      }\n\n      const orderedTasks = buildHierarchy(null);\n\n      spec = {\n          $schema: \"https://vega.github.io/schema/vega-lite/v5.json\",\n          description: \"Gantt Chart from Excel Data\",\n          width: 800,\n          height: Math.max(300, orderedTasks.length * 30),\n          data: { values: orderedTasks },\n          layer: [\n              {\n                  mark: { type: \"bar\", opacity: 0.3, height: 20 },\n                  encoding: {\n                      y: { field: \"name\", type: \"nominal\", axis: { title: null, labelFontSize: 11 }, sort: null },\n                      x: { field: \"startDate\", type: \"temporal\", axis: { title: \"Timeline\", format: \"%b %d\", labelAngle: -45 } },\n                      x2: { field: \"endDate\", type: \"temporal\" },\n                      color: { field: \"level\", type: \"ordinal\", scale: { scheme: \"category10\" }, legend: { title: \"Level\" } },\n                      tooltip: [\n                          { field: \"name\", type: \"nominal\", title: \"Task\" },\n                          { field: \"startDate\", type: \"temporal\", title: \"Start\", format: \"%Y-%m-%d\" },\n                          { field: \"endDate\", type: \"temporal\", title: \"End\", format: \"%Y-%m-%d\" },\n                          { field: \"progress\", type: \"quantitative\", title: \"Progress\", format: \".0%\" }\n                      ]\n                  }\n              },\n              {\n                  mark: { type: \"bar\", opacity: 0.8, height: 20 },\n                  encoding: {\n                      y: { field: \"name\", type: \"nominal\", sort: null },\n                      x: { field: \"startDate\", type: \"temporal\" },\n                      x2: { field: \"progressEnd\", type: \"temporal\" },\n                      color: { field: \"level\", type: \"ordinal\", scale: { scheme: \"category10\" } }\n                  }\n              },\n              {\n                  mark: { type: \"text\", align: \"left\", baseline: \"middle\", dx: 5, fontSize: 10 },\n                  encoding: {\n                      y: { field: \"name\", type: \"nominal\", sort: null },\n                      x: { field: \"endDate\", type: \"temporal\" },\n                      text: { field: \"progress\", type: \"quantitative\", format: \".0%\" },\n                      color: { value: \"#666\" }\n                  }\n              },\n              {\n                  mark: { type: \"rule\", strokeDash: [4, 4], opacity: 0.5 },\n                  data: { values: [{ date: new Date().toISOString() }] },\n                  encoding: {\n                      x: { field: \"date\", type: \"temporal\" },\n                      color: { value: \"red\" },\n                      size: { value: 1 }\n                  }\n              }\n          ],\n          config: { view: { stroke: null }, axis: { grid: true, gridColor: \"#f0f0f0\" } }\n        };\n      }\n\n      else if (chartType === \"dumbbell\") {\n      // Expect headers: Category | Value 1 | Value 2\n      \n      if (headers.length < 3) {\n        console.warn(\"Dumbbell chart requires 3 columns: Category, Value 1, Value 2\");\n        return;\n      }\n\n      // Transform wide data (Category | Value1 | Value2) to long format for Vega-Lite\n      const dumbellData = [];\n      \n      data.forEach(row => {\n        const category = row[headers[0]];\n        const value1 = parseFloat(row[headers[1]]) || 0;\n        const value2 = parseFloat(row[headers[2]]) || 0;\n        \n        // Add both data points for each category\n        dumbellData.push({\n          category: category,\n          period: headers[1], // First value label\n          value: value1\n        });\n        \n        dumbellData.push({\n          category: category,\n          period: headers[2], // Second value label  \n          value: value2\n        });\n      });\n\n      // Calculate dynamic dimensions based on number of categories\n      const categories = [...new Set(data.map(d => d[headers[0]]))];\n      const categoryCount = categories.length;\n      \n      // Auto-adjust height and padding based on category count\n      let dynamicHeight, paddingInner, paddingOuter;\n      \n      if (categoryCount <= 3) {\n        // Few categories: smaller height, minimal padding\n        dynamicHeight = Math.max(200, categoryCount * 80);\n        paddingInner = 0.3;\n        paddingOuter = 0.2;\n      } else if (categoryCount <= 6) {\n        // Medium categories: moderate height and padding\n        dynamicHeight = Math.max(300, categoryCount * 60);\n        paddingInner = 0.2;\n        paddingOuter = 0.1;\n      } else {\n        // Many categories: larger height, tight padding\n        dynamicHeight = Math.max(400, Math.min(600, categoryCount * 50));\n        paddingInner = 0.1;\n        paddingOuter = 0.05;\n      }\n\n      spec = {\n        $schema: \"https://vega.github.io/schema/vega-lite/v6.json\",\n        description: \"Dumbbell chart from Excel selection\",\n        background: \"white\",\n        config: { view: { stroke: \"transparent\" }},\n        width: 500,\n        height: dynamicHeight,\n        data: { values: dumbellData },\n        encoding: {\n          x: { \n            field: \"value\", \n            type: \"quantitative\", \n            title: null,\n            scale: { zero: false },\n            axis: {\n              labelFontSize: 12,\n              labelColor: \"#605e5c\",\n              grid: true,\n              gridColor: \"#f3f2f1\",\n              labelAlign: \"center\"\n            }\n          },\n          y: { \n            field: \"category\", \n            type: \"nominal\", \n            title: null,\n            scale: { paddingInner: paddingInner, paddingOuter: paddingOuter },\n            axis: {\n              offset: 5,\n              ticks: false,\n              minExtent: 70,\n              domain: false,\n              labelFontSize: 12,\n              labelColor: \"#605e5c\"\n            }\n          }\n        },\n        layer: [\n          {\n            mark: \"line\",\n            encoding: {\n              detail: { field: \"category\", type: \"nominal\" },\n              color: { value: \"#d1d5db\" }\n            }\n          },\n          {\n            mark: { \n              type: \"point\", \n              filled: true,\n              tooltip: true\n            },\n            encoding: {\n              color: { \n                field: \"period\", \n                type: \"ordinal\",\n                scale: {\n                  domain: [headers[1], headers[2]],\n                  range: [\"#87ceeb\", \"#1e3a8a\"]\n                },\n                title: \"Measure\",\n                legend: {\n                  titleFontSize: 12,\n                  labelFontSize: 11,\n                  titleColor: \"#323130\",\n                  labelColor: \"#605e5c\"\n                }\n              },\n              size: { value: 100 },\n              opacity: { value: 1 },\n              tooltip: [\n                { field: \"category\", type: \"nominal\", title: \"Category\" },\n                { field: \"period\", type: \"nominal\", title: \"Measure\" },\n                { field: \"value\", type: \"quantitative\", title: \"Value\", format: \",.1f\" }\n              ]\n            }\n          }\n        ],\n        config: {\n          font: \"Segoe UI\",\n          axis: {\n            labelColor: \"#605e5c\",\n            titleColor: \"#323130\",\n            gridColor: \"#f3f2f1\"\n          },\n          legend: {\n            titleColor: \"#323130\",\n            labelColor: \"#605e5c\"\n          }\n        }\n      };\n      }\n\n      else if (chartType === \"slope\") {\n        const timePeriods = [...new Set(data.map(d => d[headers[0]]))];\n        const categories = [...new Set(data.map(d => d[headers[1]]))];\n        \n        // Filter data for first and last periods only\n        const firstPeriod = timePeriods[0];\n        const lastPeriod = timePeriods[timePeriods.length - 1];\n        \n        const slopeData = data.filter(d => \n            d[headers[0]] === firstPeriod || d[headers[0]] === lastPeriod\n        );\n\n        // Check if values are percentages (between -1 and 1)\n        const allValues = slopeData.map(d => d[headers[2]]);\n        const isPercentage = allValues.every(v => v >= -1 && v <= 1);\n        const formatString = isPercentage ? \".1%\" : \",.0f\";\n\n        // Calculate dynamic dimensions based on number of categories\n        const dynamicHeight = Math.max(300, Math.min(600, categories.length * 40));\n        const dynamicWidth = 500;\n\n        spec = {\n            $schema: \"https://vega.github.io/schema/vega-lite/v6.json\",\n            description: \"Slope chart from Excel selection\",\n            background: \"white\",\n            config: { \n            view: { stroke: \"transparent\" },\n            autosize: { type: \"fit\", contains: \"padding\" }\n            },\n            width: dynamicWidth,\n            height: dynamicHeight,\n            data: { values: slopeData },\n            encoding: {\n            x: {\n                field: headers[0],\n                type: \"ordinal\",\n                axis: {\n                title: null,\n                labelFontSize: 14,\n                labelFontWeight: \"bold\",\n                labelPadding: 10,\n                domain: false,\n                ticks: false,\n                labelColor: \"#323130\"\n                },\n                scale: { padding: 0.1 }\n            },\n            y: {\n                field: headers[2],\n                type: \"quantitative\",\n                axis: null,\n                scale: { zero: false }\n            },\n            color: {\n                field: headers[1],\n                type: \"nominal\",\n                legend: null,\n                scale: { scheme: \"category10\" }\n            }\n            },\n            layer: [\n            // Background grid lines\n            {\n                mark: {\n                type: \"rule\",\n                strokeDash: [2, 2],\n                opacity: 0.3\n                },\n                data: { values: [{}] },\n                encoding: {\n                x: { datum: firstPeriod },\n                x2: { datum: lastPeriod },\n                y: { value: 0 },\n                color: { value: \"#e0e0e0\" }\n                }\n            },\n            // Slope lines\n            {\n                mark: {\n                type: \"line\",\n                strokeWidth: 2,\n                opacity: 0.7,\n                tooltip: true\n                },\n                encoding: {\n                detail: { field: headers[1], type: \"nominal\" },\n                tooltip: [\n                    { field: headers[1], type: \"nominal\", title: \"Category\" },\n                    { field: headers[0], type: \"nominal\", title: \"Period\" },\n                    { field: headers[2], type: \"quantitative\", title: \"Value\", format: formatString }\n                ]\n                }\n            },\n            // Points at the ends\n            {\n                mark: {\n                type: \"circle\",\n                size: 100,\n                opacity: 1,\n                tooltip: true\n                }\n            },\n            // Left side value labels\n            {\n                transform: [\n                { filter: `datum['${headers[0]}'] == '${firstPeriod}'` }\n                ],\n                mark: {\n                type: \"text\",\n                align: \"right\",\n                baseline: \"middle\",\n                dx: -8,\n                fontSize: 11,\n                fontWeight: \"normal\"\n                },\n                encoding: {\n                text: { \n                    field: headers[2], \n                    type: \"quantitative\",\n                    format: formatString\n                }\n                }\n            },\n            // Left side category labels (for top values)\n            {\n                transform: [\n                { filter: `datum['${headers[0]}'] == '${firstPeriod}'` },\n                {\n                    window: [{ op: \"rank\", as: \"rank\" }],\n                    sort: [{ field: headers[2], order: \"descending\" }]\n                },\n                { filter: \"datum.rank <= 3\" }\n                ],\n                mark: {\n                type: \"text\",\n                align: \"right\",\n                baseline: \"bottom\",\n                dx: -8,\n                dy: -12,\n                fontSize: 10,\n                fontWeight: \"bold\",\n                fontStyle: \"italic\"\n                },\n                encoding: {\n                text: { field: headers[1], type: \"nominal\" }\n                }\n            },\n            // Right side value labels\n            {\n                transform: [\n                { filter: `datum['${headers[0]}'] == '${lastPeriod}'` }\n                ],\n                mark: {\n                type: \"text\",\n                align: \"left\",\n                baseline: \"middle\",\n                dx: 8,\n                fontSize: 11,\n                fontWeight: \"normal\"\n                },\n                encoding: {\n                text: { \n                    field: headers[2], \n                    type: \"quantitative\",\n                    format: formatString\n                }\n                }\n            },\n            // Right side category labels\n            {\n                transform: [\n                { filter: `datum['${headers[0]}'] == '${lastPeriod}'` }\n                ],\n                mark: {\n                type: \"text\",\n                align: \"left\",\n                baseline: \"middle\",\n                dx: 35,\n                fontSize: 10,\n                fontWeight: \"bold\"\n                },\n                encoding: {\n                text: { field: headers[1], type: \"nominal\" }\n                }\n            }\n            ],\n            config: {\n            view: { stroke: \"transparent\" },\n            font: \"Segoe UI\",\n            text: { \n                font: \"Segoe UI\", \n                fontSize: 11, \n                fill: \"#605E5C\" \n            },\n            axis: {\n                labelColor: \"#605e5c\",\n                titleColor: \"#323130\",\n                gridColor: \"#f3f2f1\"\n            }\n            }\n        };\n      }\n\n      else if (chartType === \"bullet\") {\n      const data = rows.map(r => ({\n        title: r[0],\n        ranges: [+r[1], +r[2], +r[3]],\n        measures: [+r[4], +r[5]],\n        markers: [+r[6]]\n      }));\n\n      spec = {\n        \"$schema\": \"https://vega.github.io/schema/vega-lite/v6.json\",\n        background: \"white\",\n        config: { view: { stroke: \"transparent\" }},\n        \"data\": { \"values\": data },\n        \"facet\": {\n        \"row\": {\n            \"field\": \"title\", \"type\": \"ordinal\",\n            \"header\": { \"labelAngle\": 0, \"title\": \"\", \"labelAlign\": \"left\" }\n        }\n        },\n        \"spacing\": 10,\n        \"spec\": {\n        \"encoding\": {\n            \"x\": {\n            \"type\": \"quantitative\",\n            \"scale\": { \"nice\": false },\n            \"title\": null\n            }\n        },\n        \"layer\": [\n            { \"mark\": { \"type\": \"bar\", \"color\": \"#eee\" }, \"encoding\": { \"x\": { \"field\": \"ranges[2]\" } } },\n            { \"mark\": { \"type\": \"bar\", \"color\": \"#ddd\" }, \"encoding\": { \"x\": { \"field\": \"ranges[1]\" } } },\n            { \"mark\": { \"type\": \"bar\", \"color\": \"#ccc\" }, \"encoding\": { \"x\": { \"field\": \"ranges[0]\" } } },\n            { \"mark\": { \"type\": \"bar\", \"color\": \"lightsteelblue\", \"size\": 10 }, \"encoding\": { \"x\": { \"field\": \"measures[1]\" } } },\n            { \"mark\": { \"type\": \"bar\", \"color\": \"steelblue\", \"size\": 10 }, \"encoding\": { \"x\": { \"field\": \"measures[0]\" } } },\n            { \"mark\": { \"type\": \"tick\", \"color\": \"black\" }, \"encoding\": { \"x\": { \"field\": \"markers[0]\" } } }\n        ]\n        },\n        \"resolve\": { \"scale\": { \"x\": \"independent\" } },\n        \"config\": { \"tick\": { \"thickness\": 2 }, \"scale\": { \"barBandPaddingInner\": 0 } }\n      };\n      }\n\n      else if (chartType === \"box\") {\n      // Expect headers: Category | Value\n      const data = rows\n        .filter(r => r[0] && !isNaN(+r[1]))\n        .map(r => ({\n          category: r[0],\n          value: +r[1]\n        }));\n\n      spec = {\n        \"$schema\": \"https://vega.github.io/schema/vega-lite/v6.json\",\n        \"description\": \"Box plot from Excel selection\",\n        \"data\": { \"values\": data },\n        \"mark\": {\n          \"type\": \"boxplot\",\n          \"extent\": \"min-max\"   // show whiskers from min to max\n        },\n        \"encoding\": {\n          \"x\": { \"field\": \"category\", \"type\": \"nominal\" },\n          \"y\": {\n            \"field\": \"value\",\n            \"type\": \"quantitative\",\n            \"scale\": { \"zero\": false }\n          },\n          \"color\": {\n            \"field\": \"category\",\n            \"type\": \"nominal\",\n            \"legend\": null\n          }\n        }\n      };\n      }\n\n      else if (chartType === \"horizon\") {\n        const horizonData = data.map((row, index) => ({\n            x: row[headers[0]] || index + 1,\n            y: parseFloat(row[headers[1]]) || 0\n        }));\n\n        // Calculate data range and bands\n        const yValues = horizonData.map(d => d.y);\n        const maxY = Math.max(...yValues);\n        const minY = Math.min(...yValues);\n        const range = maxY - minY;\n        \n        // Define number of bands (typically 2-4 for horizon graphs)\n        const numBands = 3;\n        const bandHeight = range / (numBands * 2); // Divide by 2 for positive and negative\n        const baseline = minY + range / 2; // Use middle as baseline\n        \n        // Calculate dynamic dimensions\n        const dataPoints = horizonData.length;\n        const dynamicWidth = Math.max(300, Math.min(800, dataPoints * 15));\n\n        spec = {\n            \"$schema\": \"https://vega.github.io/schema/vega-lite/v6.json\",\n            \"description\": \"Horizon Graph from Excel selection (IDL methodology)\",\n            \"width\": dynamicWidth,\n            \"height\": 60,\n            \"background\": \"white\",\n            \"config\": { \n            \"view\": { \"stroke\": \"transparent\" },\n            \"area\": {\"interpolate\": \"monotone\"}\n            },\n            \"data\": { \"values\": horizonData },\n            \"encoding\": {\n            \"x\": {\n                \"field\": \"x\",\n                \"type\": headers[0].toLowerCase().includes('date') ? \"temporal\" : \"quantitative\",\n                \"scale\": {\"zero\": false, \"nice\": false},\n                \"axis\": {\n                \"title\": headers[0],\n                \"labelFontSize\": 10,\n                \"titleFontSize\": 12,\n                \"labelColor\": \"#605e5c\",\n                \"titleColor\": \"#323130\",\n                \"font\": \"Segoe UI\"\n                }\n            },\n            \"y\": {\n                \"type\": \"quantitative\",\n                \"scale\": {\"domain\": [0, bandHeight]},\n                \"axis\": {\n                \"title\": headers[1],\n                \"orient\": \"left\",\n                \"labelFontSize\": 10,\n                \"titleFontSize\": 12,\n                \"labelColor\": \"#605e5c\",\n                \"titleColor\": \"#323130\",\n                \"font\": \"Segoe UI\",\n                \"tickCount\": 3\n                }\n            }\n            },\n            \"layer\": [\n            // Band 1 (lightest positive)\n            {\n                \"transform\": [\n                {\"calculate\": `max(0, min(datum.y - ${baseline}, ${bandHeight}))`, \"as\": \"band1\"}\n                ],\n                \"mark\": {\n                \"type\": \"area\",\n                \"clip\": true,\n                \"opacity\": 0.3,\n                \"color\": \"#4a90e2\",\n                \"interpolate\": \"monotone\"\n                },\n                \"encoding\": {\n                \"y\": {\"field\": \"band1\"}\n                }\n            },\n            // Band 2 (medium positive)\n            {\n                \"transform\": [\n                {\"calculate\": `max(0, min(datum.y - ${baseline} - ${bandHeight}, ${bandHeight}))`, \"as\": \"band2\"}\n                ],\n                \"mark\": {\n                \"type\": \"area\",\n                \"clip\": true,\n                \"opacity\": 0.6,\n                \"color\": \"#2e7bd6\",\n                \"interpolate\": \"monotone\"\n                },\n                \"encoding\": {\n                \"y\": {\"field\": \"band2\"}\n                }\n            },\n            // Band 3 (darkest positive)\n            {\n                \"transform\": [\n                {\"calculate\": `max(0, datum.y - ${baseline} - ${bandHeight * 2})`, \"as\": \"band3\"}\n                ],\n                \"mark\": {\n                \"type\": \"area\",\n                \"clip\": true,\n                \"opacity\": 0.9,\n                \"color\": \"#1a5bb8\",\n                \"interpolate\": \"monotone\"\n                },\n                \"encoding\": {\n                \"y\": {\"field\": \"band3\"}\n                }\n            },\n            // Band -1 (lightest negative, mirrored)\n            {\n                \"transform\": [\n                {\"calculate\": `max(0, min(${baseline} - datum.y, ${bandHeight}))`, \"as\": \"nband1\"}\n                ],\n                \"mark\": {\n                \"type\": \"area\",\n                \"clip\": true,\n                \"opacity\": 0.3,\n                \"color\": \"#e74c3c\",\n                \"interpolate\": \"monotone\"\n                },\n                \"encoding\": {\n                \"y\": {\"field\": \"nband1\"}\n                }\n            },\n            // Band -2 (medium negative, mirrored)\n            {\n                \"transform\": [\n                {\"calculate\": `max(0, min(${baseline} - datum.y - ${bandHeight}, ${bandHeight}))`, \"as\": \"nband2\"}\n                ],\n                \"mark\": {\n                \"type\": \"area\",\n                \"clip\": true,\n                \"opacity\": 0.6,\n                \"color\": \"#c0392b\",\n                \"interpolate\": \"monotone\"\n                },\n                \"encoding\": {\n                \"y\": {\"field\": \"nband2\"}\n                }\n            },\n            // Band -3 (darkest negative, mirrored)\n            {\n                \"transform\": [\n                {\"calculate\": `max(0, ${baseline} - datum.y - ${bandHeight * 2})`, \"as\": \"nband3\"}\n                ],\n                \"mark\": {\n                \"type\": \"area\",\n                \"clip\": true,\n                \"opacity\": 0.9,\n                \"color\": \"#a93226\",\n                \"interpolate\": \"monotone\"\n                },\n                \"encoding\": {\n                \"y\": {\"field\": \"nband3\"}\n                }\n            }\n            ]\n        };\n      }\n\n      else if (chartType === \"tree\") {\n        const nodes = new Map();\n\n        data.forEach((row, i) => {\n            const parent = row[headers[0]] || \"\";\n            const child = row[headers[1]] || `node_${i}`;\n            const value = headers.length >= 3 ? (parseFloat(row[headers[2]]) || 1) : 1;\n            \n            // Add parent node if it doesn't exist and is not empty\n            if (parent && !nodes.has(parent)) {\n            nodes.set(parent, {\n                id: parent,\n                parent: \"\",\n                name: parent,\n                value: 1\n            });\n            }\n            \n            // Add child node\n            if (!nodes.has(child)) {\n            nodes.set(child, {\n                id: child,\n                parent: parent,\n                name: child,\n                value: value\n            });\n            } else {\n            // Update parent and value if child already exists\n            const existingNode = nodes.get(child);\n            existingNode.parent = parent;\n            existingNode.value = value;\n            }\n        });\n        \n        // Convert Map to array\n        const treeData = Array.from(nodes.values());\n        \n        // Find root nodes (nodes with no parent or parent not in dataset)\n        const allIds = new Set(treeData.map(d => d.id));\n        treeData.forEach(node => {\n            if (node.parent && !allIds.has(node.parent)) {\n            node.parent = \"\"; // Make it a root node if parent doesn't exist\n            }\n        });\n\n        // Calculate dynamic dimensions based on data size\n        const nodeCount = treeData.length;\n        const dynamicWidth = Math.max(600, Math.min(1200, nodeCount * 40));\n        const dynamicHeight = Math.max(400, Math.min(1600, nodeCount * 30));\n\n        spec = {\n            \"$schema\": \"https://vega.github.io/schema/vega/v6.json\",\n            \"description\": \"Tree diagram from Excel selection\",\n            \"width\": dynamicWidth,\n            \"height\": dynamicHeight,\n            \"padding\": 20,\n            \"background\": \"white\",\n            \"config\": { \"view\": { \"stroke\": \"transparent\" }},\n\n            \"signals\": [\n            {\n                \"name\": \"layout\", \n                \"value\": \"tidy\"\n            },\n            {\n                \"name\": \"links\", \n                \"value\": \"diagonal\"\n            }\n            ],\n\n            \"data\": [\n            {\n                \"name\": \"tree\",\n                \"values\": treeData,\n                \"transform\": [\n                {\n                    \"type\": \"stratify\",\n                    \"key\": \"id\",\n                    \"parentKey\": \"parent\"\n                },\n                {\n                    \"type\": \"tree\",\n                    \"method\": {\"signal\": \"layout\"},\n                    \"size\": [{\"signal\": \"height - 40\"}, {\"signal\": \"width - 100\"}],\n                    \"as\": [\"y\", \"x\", \"depth\", \"children\"]\n                }\n                ]\n            },\n            {\n                \"name\": \"links\",\n                \"source\": \"tree\",\n                \"transform\": [\n                { \"type\": \"treelinks\" },\n                {\n                    \"type\": \"linkpath\",\n                    \"orient\": \"horizontal\",\n                    \"shape\": {\"signal\": \"links\"}\n                }\n                ]\n            }\n            ],\n\n            \"scales\": [\n            {\n                \"name\": \"color\",\n                \"type\": \"ordinal\",\n                \"range\": [\"#0078d4\", \"#00bcf2\", \"#40e0d0\", \"#00cc6a\", \"#10893e\", \"#107c10\", \"#bad80a\", \"#ffb900\", \"#ff8c00\", \"#d13438\"],\n                \"domain\": {\"data\": \"tree\", \"field\": \"depth\"}\n            },\n            {\n                \"name\": \"size\",\n                \"type\": \"linear\",\n                \"range\": [100, 400],\n                \"domain\": {\"data\": \"tree\", \"field\": \"value\"}\n            }\n            ],\n\n            \"marks\": [\n            {\n                \"type\": \"path\",\n                \"from\": {\"data\": \"links\"},\n                \"encode\": {\n                \"update\": {\n                    \"path\": {\"field\": \"path\"},\n                    \"stroke\": {\"value\": \"#8a8886\"},\n                    \"strokeWidth\": {\"value\": 2},\n                    \"strokeOpacity\": {\"value\": 0.6}\n                }\n                }\n            },\n            {\n                \"type\": \"symbol\",\n                \"from\": {\"data\": \"tree\"},\n                \"encode\": {\n                \"enter\": {\n                    \"stroke\": {\"value\": \"#ffffff\"},\n                    \"strokeWidth\": {\"value\": 2}\n                },\n                \"update\": {\n                    \"x\": {\"field\": \"x\"},\n                    \"y\": {\"field\": \"y\"},\n                    \"size\": {\"scale\": \"size\", \"field\": \"value\"},\n                    \"fill\": {\"scale\": \"color\", \"field\": \"depth\"},\n                    \"fillOpacity\": {\"value\": 0.8},\n                    \"tooltip\": {\n                    \"signal\": \"{'Name': datum.name, 'ID': datum.id, 'Parent': datum.parent, 'Depth': datum.depth, 'Value': datum.value}\"\n                    }\n                },\n                \"hover\": {\n                    \"fillOpacity\": {\"value\": 1.0},\n                    \"strokeWidth\": {\"value\": 3}\n                }\n                }\n            },\n            {\n                \"type\": \"text\",\n                \"from\": {\"data\": \"tree\"},\n                \"encode\": {\n                \"enter\": {\n                    \"fontSize\": {\"value\": 11},\n                    \"baseline\": {\"value\": \"middle\"},\n                    \"font\": {\"value\": \"Segoe UI\"},\n                    \"fontWeight\": {\"value\": \"bold\"}\n                },\n                \"update\": {\n                    \"x\": {\"field\": \"x\"},\n                    \"y\": {\"field\": \"y\"},\n                    \"text\": {\"field\": \"name\"},\n                    \"dx\": {\"signal\": \"datum.children ? -12 : 12\"},\n                    \"align\": {\"signal\": \"datum.children ? 'right' : 'left'\"},\n                    \"fill\": {\"value\": \"#323130\"}\n                }\n                }\n            }\n            ]\n        };\n      }\n\n      else if (chartType === \"sunburst\") {\n        const nodes = new Map();\n        data.forEach((row, i) => {\n            const parent = row[headers[0]] || \"\";\n            const child = row[headers[1]] || `node_${i}`;\n            const value = headers.length >= 3 ? (parseFloat(row[headers[2]]) || 1) : 1;\n            \n            // Add parent node if it doesn't exist and is not empty\n            if (parent && !nodes.has(parent)) {\n            nodes.set(parent, {\n                id: parent,\n                parent: \"\",\n                name: parent,\n                size: 0 // Will be calculated later\n            });\n            }\n            \n            // Add child node\n            if (!nodes.has(child)) {\n            nodes.set(child, {\n                id: child,\n                parent: parent,\n                name: child,\n                size: value\n            });\n            } else {\n            // Update parent and value if child already exists\n            const existingNode = nodes.get(child);\n            existingNode.parent = parent;\n            existingNode.size = value;\n            }\n        });\n        \n        // Convert Map to array\n        const hierarchicalData = Array.from(nodes.values());\n        \n        // Find root nodes (nodes with no parent or parent not in dataset)\n        const allIds = new Set(hierarchicalData.map(d => d.id));\n        hierarchicalData.forEach(node => {\n            if (node.parent && !allIds.has(node.parent)) {\n            node.parent = \"\"; // Make it a root node if parent doesn't exist\n            }\n        });\n\n        // Calculate chart size based on data complexity\n        const nodeCount = hierarchicalData.length;\n        const chartSize = Math.max(400, Math.min(600, nodeCount * 15 + 300));\n\n        spec = {\n            \"$schema\": \"https://vega.github.io/schema/vega/v6.json\",\n            \"description\": \"Sunburst chart from Excel selection\",\n            \"width\": chartSize,\n            \"height\": chartSize,\n            \"padding\": 10,\n            \"autosize\": \"none\",\n            \"background\": \"white\",\n            \"config\": { \"view\": { \"stroke\": \"transparent\" }},\n\n            \"signals\": [\n            {\n                \"name\": \"centerX\",\n                \"update\": \"width / 2\"\n            },\n            {\n                \"name\": \"centerY\", \n                \"update\": \"height / 2\"\n            },\n            {\n                \"name\": \"outerRadius\",\n                \"update\": \"min(width, height) / 2 - 10\"\n            }\n            ],\n\n            \"data\": [\n            {\n                \"name\": \"tree\",\n                \"values\": hierarchicalData,\n                \"transform\": [\n                {\n                    \"type\": \"stratify\",\n                    \"key\": \"id\",\n                    \"parentKey\": \"parent\"\n                },\n                {\n                    \"type\": \"partition\",\n                    \"field\": \"size\",\n                    \"sort\": {\"field\": \"size\", \"order\": \"descending\"},\n                    \"size\": [{\"signal\": \"2 * PI\"}, {\"signal\": \"outerRadius\"}],\n                    \"as\": [\"a0\", \"r0\", \"a1\", \"r1\", \"depth\", \"children\"]\n                }\n                ]\n            }\n            ],\n\n            \"scales\": [\n            {\n                \"name\": \"color\",\n                \"type\": \"ordinal\",\n                \"domain\": {\"data\": \"tree\", \"field\": \"depth\"},\n                \"range\": [\n                \"#0078d4\", \"#00bcf2\", \"#40e0d0\", \"#00cc6a\", \"#10893e\", \n                \"#107c10\", \"#bad80a\", \"#ffb900\", \"#ff8c00\", \"#d13438\",\n                \"#8764b8\", \"#e3008c\", \"#00b7c3\", \"#038387\", \"#486991\"\n                ]\n            },\n            {\n                \"name\": \"opacity\",\n                \"type\": \"linear\",\n                \"domain\": {\"data\": \"tree\", \"field\": \"depth\"},\n                \"range\": [0.8, 0.4]\n            }\n            ],\n\n            \"marks\": [\n            {\n                \"type\": \"arc\",\n                \"from\": {\"data\": \"tree\"},\n                \"encode\": {\n                \"enter\": {\n                    \"x\": {\"signal\": \"centerX\"},\n                    \"y\": {\"signal\": \"centerY\"},\n                    \"stroke\": {\"value\": \"white\"},\n                    \"strokeWidth\": {\"value\": 1}\n                },\n                \"update\": {\n                    \"startAngle\": {\"field\": \"a0\"},\n                    \"endAngle\": {\"field\": \"a1\"},\n                    \"innerRadius\": {\"field\": \"r0\"},\n                    \"outerRadius\": {\"field\": \"r1\"},\n                    \"fill\": {\"scale\": \"color\", \"field\": \"depth\"},\n                    \"fillOpacity\": {\"scale\": \"opacity\", \"field\": \"depth\"}\n                }\n                }\n            },\n            {\n                \"type\": \"text\",\n                \"from\": {\"data\": \"tree\"},\n                \"encode\": {\n                \"enter\": {\n                    \"x\": {\"signal\": \"centerX\"},\n                    \"y\": {\"signal\": \"centerY\"},\n                    \"radius\": {\"signal\": \"(datum.r0 + datum.r1) / 2\"},\n                    \"theta\": {\"signal\": \"(datum.a0 + datum.a1) / 2\"},\n                    \"fill\": {\"value\": \"#323130\"},\n                    \"font\": {\"value\": \"Segoe UI\"},\n                    \"fontSize\": {\"value\": 10},\n                    \"fontWeight\": {\"value\": \"bold\"},\n                    \"align\": {\"value\": \"center\"},\n                    \"baseline\": {\"value\": \"middle\"}\n                },\n                \"update\": {\n                    \"text\": {\n                    \"signal\": \"(datum.r1 - datum.r0) > 20 && (datum.a1 - datum.a0) > 0.3 ? datum.name : ''\"\n                    },\n                    \"opacity\": {\n                    \"signal\": \"(datum.r1 - datum.r0) > 20 && (datum.a1 - datum.a0) > 0.3 ? 1 : 0\"\n                    }\n                }\n                }\n            }\n            ]\n        };\n      }\n\n      else if (chartType === \"radar\") {\n        const radarData = [];\n        const dimensions = headers.slice(1); // All columns except first are dimensions\n        \n        data.forEach((row, seriesIndex) => {\n            const seriesName = row[headers[0]] || `Series ${seriesIndex + 1}`;\n            \n            dimensions.forEach(dimension => {\n            const value = parseFloat(row[dimension]) || 0;\n            radarData.push({\n                series: seriesName,\n                dimension: dimension,\n                value: value,\n                category: seriesIndex\n            });\n            });\n        });\n\n        // Get unique dimensions for grid\n        const uniqueDimensions = [...new Set(radarData.map(d => d.dimension))];\n\n        spec = {\n            \"$schema\": \"https://vega.github.io/schema/vega/v6.json\",\n            \"description\": \"Radar chart from Excel selection\",\n            \"width\": 400,\n            \"height\": 400,\n            \"padding\": 60,\n            \"autosize\": {\"type\": \"none\", \"contains\": \"padding\"},\n            \"background\": \"white\",\n            \"config\": { \"view\": { \"stroke\": \"transparent\" }},\n\n            \"signals\": [\n            {\"name\": \"radius\", \"update\": \"width / 2\"}\n            ],\n\n            \"data\": [\n            {\n                \"name\": \"table\",\n                \"values\": radarData\n            },\n            {\n                \"name\": \"dimensions\",\n                \"values\": uniqueDimensions.map(d => ({dimension: d}))\n            }\n            ],\n\n            \"scales\": [\n            {\n                \"name\": \"angular\",\n                \"type\": \"point\",\n                \"range\": {\"signal\": \"[-PI, PI]\"},\n                \"padding\": 0.5,\n                \"domain\": uniqueDimensions\n            },\n            {\n                \"name\": \"radial\",\n                \"type\": \"linear\",\n                \"range\": {\"signal\": \"[0, radius]\"},\n                \"zero\": true,\n                \"nice\": true,\n                \"domain\": {\"data\": \"table\", \"field\": \"value\"},\n                \"domainMin\": 0\n            },\n            {\n                \"name\": \"color\",\n                \"type\": \"ordinal\",\n                \"domain\": {\"data\": \"table\", \"field\": \"category\"},\n                \"range\": [\n                \"#0078d4\", \"#00bcf2\", \"#40e0d0\", \"#00cc6a\", \"#10893e\",\n                \"#107c10\", \"#bad80a\", \"#ffb900\", \"#ff8c00\", \"#d13438\"\n                ]\n            }\n            ],\n\n            \"encode\": {\n            \"enter\": {\n                \"x\": {\"signal\": \"radius\"},\n                \"y\": {\"signal\": \"radius\"}\n            }\n            },\n\n            \"marks\": [\n            {\n                \"type\": \"group\",\n                \"name\": \"categories\",\n                \"zindex\": 1,\n                \"from\": {\n                \"facet\": {\"data\": \"table\", \"name\": \"facet\", \"groupby\": [\"category\", \"series\"]}\n                },\n                \"marks\": [\n                {\n                    \"type\": \"line\",\n                    \"name\": \"category-line\",\n                    \"from\": {\"data\": \"facet\"},\n                    \"encode\": {\n                    \"enter\": {\n                        \"interpolate\": {\"value\": \"linear-closed\"},\n                        \"x\": {\"signal\": \"scale('radial', datum.value) * cos(scale('angular', datum.dimension))\"},\n                        \"y\": {\"signal\": \"scale('radial', datum.value) * sin(scale('angular', datum.dimension))\"},\n                        \"stroke\": {\"scale\": \"color\", \"field\": \"category\"},\n                        \"strokeWidth\": {\"value\": 2},\n                        \"fill\": {\"scale\": \"color\", \"field\": \"category\"},\n                        \"fillOpacity\": {\"value\": 0.1},\n                        \"strokeOpacity\": {\"value\": 0.8}\n                    }\n                    }\n                },\n                {\n                    \"type\": \"symbol\",\n                    \"name\": \"category-points\",\n                    \"from\": {\"data\": \"facet\"},\n                    \"encode\": {\n                    \"enter\": {\n                        \"x\": {\"signal\": \"scale('radial', datum.value) * cos(scale('angular', datum.dimension))\"},\n                        \"y\": {\"signal\": \"scale('radial', datum.value) * sin(scale('angular', datum.dimension))\"},\n                        \"size\": {\"value\": 50},\n                        \"fill\": {\"scale\": \"color\", \"field\": \"category\"},\n                        \"stroke\": {\"value\": \"white\"},\n                        \"strokeWidth\": {\"value\": 1}\n                    }\n                    }\n                }\n                ]\n            },\n            {\n                \"type\": \"rule\",\n                \"name\": \"radial-grid\",\n                \"from\": {\"data\": \"dimensions\"},\n                \"zindex\": 0,\n                \"encode\": {\n                \"enter\": {\n                    \"x\": {\"value\": 0},\n                    \"y\": {\"value\": 0},\n                    \"x2\": {\"signal\": \"radius * cos(scale('angular', datum.dimension))\"},\n                    \"y2\": {\"signal\": \"radius * sin(scale('angular', datum.dimension))\"},\n                    \"stroke\": {\"value\": \"#e1e4e8\"},\n                    \"strokeWidth\": {\"value\": 1}\n                }\n                }\n            },\n            {\n                \"type\": \"text\",\n                \"name\": \"dimension-label\",\n                \"from\": {\"data\": \"dimensions\"},\n                \"zindex\": 1,\n                \"encode\": {\n                \"enter\": {\n                    \"x\": {\"signal\": \"(radius + 20) * cos(scale('angular', datum.dimension))\"},\n                    \"y\": {\"signal\": \"(radius + 20) * sin(scale('angular', datum.dimension))\"},\n                    \"text\": {\"field\": \"dimension\"},\n                    \"align\": [\n                    {\n                        \"test\": \"abs(scale('angular', datum.dimension)) > PI / 2\",\n                        \"value\": \"right\"\n                    },\n                    {\n                        \"value\": \"left\"\n                    }\n                    ],\n                    \"baseline\": [\n                    {\n                        \"test\": \"scale('angular', datum.dimension) > 0\", \n                        \"value\": \"top\"\n                    },\n                    {\n                        \"test\": \"scale('angular', datum.dimension) == 0\", \n                        \"value\": \"middle\"\n                    },\n                    {\n                        \"value\": \"bottom\"\n                    }\n                    ],\n                    \"fill\": {\"value\": \"#323130\"},\n                    \"fontWeight\": {\"value\": \"bold\"},\n                    \"font\": {\"value\": \"Segoe UI\"},\n                    \"fontSize\": {\"value\": 12}\n                }\n                }\n            },\n            {\n                \"type\": \"line\",\n                \"name\": \"outer-line\",\n                \"from\": {\"data\": \"radial-grid\"},\n                \"encode\": {\n                \"enter\": {\n                    \"interpolate\": {\"value\": \"linear-closed\"},\n                    \"x\": {\"field\": \"x2\"},\n                    \"y\": {\"field\": \"y2\"},\n                    \"stroke\": {\"value\": \"#8a8886\"},\n                    \"strokeWidth\": {\"value\": 2},\n                    \"strokeOpacity\": {\"value\": 0.6}\n                }\n                }\n            }\n            ]\n        };\n      }\n\n      else if (chartType === \"waterfall\") {\n        // Process waterfall data inline - set last entry's amount to 0\n        const processedData = [...data];\n        if (processedData.length > 0) {\n            processedData[processedData.length - 1] = {\n            ...processedData[processedData.length - 1],\n            [headers[1]]: 0\n            };\n        }\n\n        // Calculate dynamic dimensions\n        const numDataPoints = data.length;\n        const dynamicWidth = Math.max(400, Math.min(1600, numDataPoints * 50));\n        const maxAmount = Math.max(...data.map(d => Math.abs(d[headers[1]])));\n        const dynamicHeight = Math.max(300, Math.min(600, maxAmount / 100 + 200));\n\n        spec = {\n            $schema: \"https://vega.github.io/schema/vega-lite/v6.json\",\n            description: \"Waterfall chart with multiple subtotals\",\n            background: \"white\",\n            data: { values: processedData },\n            config: { view: { stroke: \"transparent\" }},\n            width: dynamicWidth,\n            height: dynamicHeight,\n            transform: [\n            { \"window\": [{ \"op\": \"sum\", \"field\": headers[1], \"as\": \"sum\" }] },\n            { \"window\": [{ \"op\": \"lead\", \"field\": headers[0], \"as\": \"lead\" }] },\n            {\n                \"calculate\": `datum.lead === null ? datum.${headers[0]} : datum.lead`,\n                \"as\": \"lead\"\n            },\n            {\n                // If total → reset, else → running sum step\n                \"calculate\": `datum.${headers[2]} == 'total' ? 0 : datum.sum - datum.${headers[1]}`,\n                \"as\": \"previous_sum\"\n            },\n            {\n                \"calculate\": `datum.${headers[2]} == 'total' ? datum.sum : datum.${headers[1]}`,\n                \"as\": \"amount\"\n            },\n            {\n                \"calculate\": `datum.${headers[2]} == 'total' ? datum.${headers[1]} / 2 : (datum.sum + datum.previous_sum) / 2`,\n                \"as\": \"center\"\n            },\n            {\n                \"calculate\": `datum.${headers[2]} == 'total' ? datum.sum : (datum.${headers[1]} > 0 ? '+' : '') + datum.${headers[1]}`,\n                \"as\": \"text_amount\"\n            },\n            { \"calculate\": \"(datum.sum + datum.previous_sum) / 2\", \"as\": \"center\" },\n\n            // Add group index for stacked handling\n            {\n                \"window\": [{ \"op\": \"rank\", \"as\": \"group_index\" }],\n                \"frame\": [null, null],\n                \"groupby\": [headers[0]]\n            },\n\n            // Precompute color shades\n            {\n                \"calculate\": `\n                datum.${headers[2]} == 'total'\n                    ? '#00B0F0'\n                    : datum.amount >= 0\n                    ? (datum.group_index == 1 ? '#70AD47'\n                        : (datum.group_index == 2 ? '#8BC97A'\n                        : (datum.group_index == 3 ? '#A7DA9D'\n                        : '#C3EBC0')))\n                    : (datum.group_index == 1 ? '#E15759'\n                        : (datum.group_index == 2 ? '#EC7A7C'\n                        : (datum.group_index == 3 ? '#F29C9D'\n                        : '#F8BEBF')))\n                `,\n                \"as\": \"bar_color\"\n            }\n            ],\n            encoding: {\n            x: {\n                field: headers[0],\n                type: \"ordinal\",\n                sort: null,\n                axis: { labelAngle: -45, title: null },\n                scale: { paddingInner: 0.05, paddingOuter: 0.025 }\n            }\n            },\n            layer: [\n            {\n                mark: { type: \"bar\", size: 60},\n                encoding: {\n                y: { field: \"previous_sum\", type: \"quantitative\", title: null },\n                y2: { field: \"sum\" },\n                color: { field: \"bar_color\", type: \"nominal\", scale: null }\n                }\n            },\n            {\n                mark: { type: \"text\", fontWeight: \"bold\", baseline: \"middle\" },\n                encoding: {\n                y: { field: \"center\", type: \"quantitative\" },\n                text: { field: \"text_amount\", type: \"nominal\" },\n                color: {\n                    condition: [\n                    { test: `datum.${headers[2]} == 'total'`, value: \"#725a30\" }\n                    ],\n                    value: \"white\"\n                }\n                }\n            }\n            ],\n            config: { text: { fontWeight: \"bold\", color: \"#D9D9D9\" } }\n        };\n      }\n\n      else if (chartType === \"gauge\") {\n      if (headers.length < 2) {\n        console.warn(\"Gauge chart requires 2 columns: Current Value, Max Value\");\n        return;\n      }\n\n      // Process gauge data - expect one row with current value and max value\n      const gaugeRow = data[0]; // Use first data row\n      const mainValue = parseFloat(gaugeRow[headers[0]]) || 0;\n      const maxValue = parseFloat(gaugeRow[headers[1]]) || 100;\n      const minValue = 0; // Always start from 0\n\n      spec = {\n        \"$schema\": \"https://vega.github.io/schema/vega/v5.json\",\n        \"description\": \"Gauge chart from Excel selection\",\n        \"width\": 400,\n        \"height\": 300,\n        \"background\": \"white\",\n        \"config\": { \"view\": { \"stroke\": \"transparent\" }},\n        \n        \"signals\": [\n          {\"name\": \"centerX\", \"update\": \"width / 2\"},\n          {\"name\": \"centerY\", \"update\": \"height / 2\"},\n          {\"name\": \"outerRadius\", \"update\": \"min(width, height) / 2 - 10\"},\n          {\"name\": \"innerRadius\", \"update\": \"outerRadius - outerRadius * 0.25\"},\n          {\"name\": \"mainValue\", \"value\": mainValue},\n          {\"name\": \"minValue\", \"value\": minValue},\n          {\"name\": \"maxValue\", \"value\": maxValue},\n          {\"name\": \"usedValue\", \"update\": \"min(max(minValue, mainValue), maxValue)\"},\n          {\"name\": \"fontFactor\", \"update\": \"(min(width, height)/5)/25\"},\n          {\"name\": \"backgroundColor\", \"value\": \"#e1e4e8\"},\n          {\"name\": \"fillColor\", \"value\": \"#0078d4\"},\n          {\"name\": \"needleColor\", \"value\": \"#323130\"},\n          {\"name\": \"needleSize\", \"update\": \"innerRadius\"}\n        ],\n        \n        \"scales\": [\n          {\n            \"name\": \"gaugeScale\",\n            \"type\": \"linear\",\n            \"domain\": [{\"signal\": \"minValue\"}, {\"signal\": \"maxValue\"}],\n            \"range\": [{\"signal\": \"-PI/2\"}, {\"signal\": \"PI/2\"}]\n          },\n          {\n            \"name\": \"needleScale\",\n            \"type\": \"linear\",\n            \"domain\": [{\"signal\": \"minValue\"}, {\"signal\": \"maxValue\"}],\n            \"range\": [-90, 90]\n          }\n        ],\n        \n        \"marks\": [\n          {\n            \"type\": \"arc\",\n            \"name\": \"gauge\",\n            \"encode\": {\n              \"enter\": {\n                \"x\": {\"signal\": \"centerX\"},\n                \"y\": {\"signal\": \"centerY\"},\n                \"startAngle\": {\"signal\": \"-PI/2\"},\n                \"endAngle\": {\"signal\": \"PI/2\"},\n                \"outerRadius\": {\"signal\": \"outerRadius\"},\n                \"innerRadius\": {\"signal\": \"innerRadius\"},\n                \"fill\": {\"signal\": \"backgroundColor\"}\n              }\n            }\n          },\n          {\n            \"type\": \"arc\",\n            \"encode\": {\n              \"enter\": {\"startAngle\": {\"signal\": \"-PI/2\"}},\n              \"update\": {\n                \"x\": {\"signal\": \"centerX\"},\n                \"y\": {\"signal\": \"centerY\"},\n                \"innerRadius\": {\"signal\": \"innerRadius\"},\n                \"outerRadius\": {\"signal\": \"outerRadius\"},\n                \"endAngle\": {\"scale\": \"gaugeScale\", \"signal\": \"usedValue\"},\n                \"fill\": {\"signal\": \"fillColor\"}\n              }\n            }\n          },\n          {\n            \"type\": \"text\",\n            \"description\": \"displayed main value at the center\",\n            \"encode\": {\n              \"enter\": {\n                \"x\": {\"signal\": \"centerX\"},\n                \"y\": {\"signal\": \"centerY + fontFactor * 15\"},\n                \"baseline\": {\"value\": \"middle\"},\n                \"align\": {\"value\": \"center\"},\n                \"fontSize\": {\"signal\": \"fontFactor * 7\"},\n                \"font\": {\"value\": \"Segoe UI\"},\n                \"fontWeight\": {\"value\": \"bold\"}\n              },\n              \"update\": {\n                \"text\": {\"signal\": \"mainValue < 1 ? format(mainValue, '.0%') : format(mainValue, ',.0f')\"},\n                \"fill\": {\"signal\": \"fillColor\"}\n              }\n            }\n          },\n          {\n            \"type\": \"symbol\",\n            \"name\": \"needle\",\n            \"encode\": {\n              \"enter\": {\"x\": {\"signal\": \"centerX\"}, \"y\": {\"signal\": \"centerY\"}},\n              \"update\": {\n                \"shape\": {\n                  \"signal\": \"'M-2.5 -2.5 Q 0 0 2.5 -2.5 L 0 -' + toString(needleSize) + ' Z '\"\n                },\n                \"angle\": {\"signal\": \"usedValue\", \"scale\": \"needleScale\"},\n                \"size\": {\"signal\": \"4\"},\n                \"stroke\": {\"signal\": \"needleColor\"},\n                \"fill\": {\"signal\": \"needleColor\"}\n              }\n            }\n          },\n          {\n            \"type\": \"symbol\",\n            \"description\": \"center circle\",\n            \"encode\": {\n              \"enter\": {\n                \"x\": {\"signal\": \"centerX\"},\n                \"y\": {\"signal\": \"centerY\"},\n                \"shape\": {\"value\": \"circle\"},\n                \"size\": {\"signal\": \"pow(fontFactor * 8, 2)\"},\n                \"fill\": {\"signal\": \"needleColor\"},\n                \"stroke\": {\"value\": \"white\"},\n                \"strokeWidth\": {\"value\": 2}\n              }\n            }\n          }\n        ]\n      };\n      }\n\n      else if (chartType === \"pie\") {\n        spec = {\n        $schema: \"https://vega.github.io/schema/vega-lite/v6.json\",\n        background: \"white\",\n        config: { view: { stroke: \"transparent\" }},\n        description: \"Pie chart from Excel selection\",\n        data: { values: data },\n        mark: { type: \"arc\", outerRadius: 120 },\n        encoding: {\n          theta: { field: headers[1], type: \"quantitative\" },\n          color: { field: headers[0], type: \"nominal\" }\n          }\n        };\n      }\n\n      else if (chartType === \"donut\") {\n        if (headers.length < 2) {\n            throw new Error(\"Donut chart requires 2 columns: Category, Value\");\n        }\n\n        // Validate that all values are positive numbers\n        const hasInvalidValues = data.some(row => isNaN(row[headers[1]]) || row[headers[1]] <= 0);\n        if (hasInvalidValues) {\n            throw new Error(\"Donut chart values must be positive numbers\");\n        }\n\n        // Use Vega-Lite specification for donut chart\n        spec = {\n            $schema: \"https://vega.github.io/schema/vega-lite/v6.json\",\n            background: \"white\",\n            config: { view: { stroke: \"transparent\" }},\n            description: \"Donut chart from Excel selection\",\n            data: { values: data },\n            mark: { \n            type: \"arc\", \n            innerRadius: 50,  // This creates the donut hole\n            outerRadius: 120,\n            tooltip: true,\n            stroke: \"white\",\n            strokeWidth: 2\n            },\n            encoding: {\n            theta: { \n                field: headers[1], \n                type: \"quantitative\",\n                scale: { type: \"linear\", range: [0, 6.28] }\n            },\n            color: { \n                field: headers[0], \n                type: \"nominal\",\n                scale: { scheme: \"category10\" },\n                legend: {\n                title: headers[0],\n                titleFontSize: 12,\n                labelFontSize: 11,\n                orient: \"right\"\n                }\n            },\n            tooltip: [\n                { field: headers[0], type: \"nominal\", title: \"Category\" },\n                { field: headers[1], type: \"quantitative\", title: \"Value\", format: \",.0f\" }\n            ]\n            },\n            config: {\n            font: \"Segoe UI\",\n            legend: {\n                titleColor: \"#323130\",\n                labelColor: \"#605e5c\"\n            }\n            }\n        };\n      }\n\n      else if (chartType === \"histogram\") {\n        // Expect a single numeric column\n        const numericData = rows\n          .filter(r => !isNaN(+r[0]))\n          .map(r => ({ value: +r[0] }));\n\n        // Calculate data range for better binning control\n        const values = numericData.map(d => d.value);\n        const minVal = Math.min(...values);\n        const maxVal = Math.max(...values);\n        const range = maxVal - minVal;\n        \n        // Calculate nice bin boundaries\n        const binCount = 20;\n        const binWidth = range / binCount;\n        const niceMin = Math.floor(minVal / binWidth) * binWidth;\n        const niceMax = Math.ceil(maxVal / binWidth) * binWidth;\n\n        spec = {\n          \"$schema\": \"https://vega.github.io/schema/vega-lite/v6.json\",\n          \"description\": \"Histogram from Excel selection\",\n          \"background\": \"white\",\n          \"config\": { \"view\": { \"stroke\": \"transparent\" }},\n          \"data\": { \"values\": numericData },\n          \"mark\": {\n            \"type\": \"bar\",\n            \"tooltip\": true,\n            \"stroke\": \"white\",\n            \"strokeWidth\": 1\n          },\n          \"encoding\": {\n            \"x\": {\n              \"field\": \"value\",\n              \"bin\": { \n                \"extent\": [niceMin, niceMax],\n                \"step\": binWidth,\n                \"nice\": false  // Prevent Vega from adjusting our nice boundaries\n              },\n              \"type\": \"quantitative\",\n              \"axis\": { \n                \"title\": \"Value\",\n                \"labelFontSize\": 12,\n                \"titleFontSize\": 14,\n                \"labelColor\": \"#605e5c\",\n                \"titleColor\": \"#323130\"\n              },\n              \"scale\": {\n                \"domain\": [niceMin, niceMax],\n                \"range\": \"width\",\n                \"paddingInner\": 0.05,\n                \"paddingOuter\": 0.02\n              }\n            },\n            \"y\": {\n              \"aggregate\": \"count\",\n              \"type\": \"quantitative\",\n              \"axis\": { \n                \"title\": \"Count\",\n                \"labelFontSize\": 12,\n                \"titleFontSize\": 14,\n                \"labelColor\": \"#605e5c\",\n                \"titleColor\": \"#323130\",\n                \"gridColor\": \"#f3f2f1\"\n              }\n            },\n            \"color\": {\n              \"value\": \"#0078d4\"\n            }\n          },\n          \"config\": {\n            \"font\": \"Segoe UI\",\n            \"axis\": {\n              \"labelColor\": \"#605e5c\",\n              \"titleColor\": \"#323130\",\n              \"gridColor\": \"#f3f2f1\"\n            }\n          }\n        };\n      }\n\n      else if (chartType === \"candlestick\") {\n        // Helper function to convert Excel dates to JS dates\n        function excelDateToJSDate(serial) {\n          if (typeof serial === 'number') {\n            return new Date(Math.round((serial - 25569) * 86400 * 1000));\n          }\n          return new Date(serial);\n        }\n\n        // Process and validate data - SKIP ROWS WITH MISSING VALUES\n        const candlestickData = data\n          .map((row, index) => {\n            // Skip if any required value is missing/null/empty\n            if (!row[headers[0]] || \n                row[headers[1]] == null || row[headers[1]] === \"\" ||\n                row[headers[2]] == null || row[headers[2]] === \"\" ||\n                row[headers[3]] == null || row[headers[3]] === \"\" ||\n                row[headers[4]] == null || row[headers[4]] === \"\") {\n              return null;\n            }\n\n            const date = excelDateToJSDate(row[headers[0]]);\n            const open = parseFloat(row[headers[1]]);\n            const high = parseFloat(row[headers[2]]);\n            const low = parseFloat(row[headers[3]]);\n            const close = parseFloat(row[headers[4]]);\n            \n            if (isNaN(date.getTime()) || isNaN(open) || isNaN(high) || isNaN(low) || isNaN(close)) {\n              return null;\n            }\n            \n            return {\n              date: date.toISOString(),\n              open: open,\n              high: high,\n              low: low,\n              close: close\n            };\n          })\n          .filter(Boolean); // Remove null entries\n\n        if (candlestickData.length === 0) {\n          console.warn(\"No valid candlestick data found\");\n          return;\n        }\n\n        // Calculate dynamic width based on number of data points\n        const dataPoints = candlestickData.length;\n        const minWidth = 500;\n        const maxWidth = 1400;\n        const widthPerPoint = 18; // Pixels per candlestick\n        const dynamicWidth = Math.max(minWidth, Math.min(maxWidth, dataPoints * widthPerPoint));\n\n        // Format dates for display (keep original date for sorting)\n        const formattedData = candlestickData.map(d => ({\n          ...d,\n          dateDisplay: new Date(d.date).toLocaleDateString('en-US', { \n            month: dataPoints > 50 ? 'numeric' : 'short', \n            day: 'numeric',\n            year: dataPoints > 100 ? undefined : '2-digit'\n          })\n        }));\n\n        spec = {\n          \"$schema\": \"https://vega.github.io/schema/vega-lite/v6.json\",\n          \"width\": dynamicWidth,\n          \"height\": 400,\n          \"description\": \"Candlestick chart V4 from Excel selection\",\n          \"background\": \"white\",\n          \"padding\": {\"left\": 10, \"right\": 10, \"top\": 10, \"bottom\": 10},\n          \"config\": { \"view\": { \"stroke\": \"transparent\" }},\n          \"data\": { \"values\": formattedData },\n          \"encoding\": {\n            \"x\": {\n              \"field\": \"dateDisplay\",\n              \"type\": \"ordinal\", // Ordinal scale eliminates gaps for missing dates\n              \"title\": \"Date\",\n              \"axis\": {\n                \"labelAngle\": dataPoints > 15 ? -45 : 0,\n                \"labelFontSize\": 10,\n                \"titleFontSize\": 12,\n                \"labelColor\": \"#605e5c\",\n                \"titleColor\": \"#323130\",\n                \"font\": \"Segoe UI\",\n                \"labelLimit\": 100,\n                \"labelOverlap\": false,\n                \"titlePadding\": 5,\n                \"labelPadding\": 3\n              },\n              \"scale\": {\n                \"type\": \"band\",\n                \"paddingInner\": 0.1, // 10% gap between bars\n                \"paddingOuter\": 0.05 // 5% padding at edges\n              }\n            },\n            \"y\": {\n              \"type\": \"quantitative\",\n              \"scale\": { \"zero\": false },\n              \"axis\": {\n                \"title\": \"Price\",\n                \"labelFontSize\": 11,\n                \"titleFontSize\": 12,\n                \"labelColor\": \"#605e5c\",\n                \"titleColor\": \"#323130\",\n                \"font\": \"Segoe UI\",\n                \"grid\": true,\n                \"gridColor\": \"#f3f2f1\",\n                \"titlePadding\": 5,\n                \"labelPadding\": 3\n              }\n            },\n            \"color\": {\n              \"condition\": {\n                \"test\": \"datum.open < datum.close\",\n                \"value\": \"#06982d\" // Green for bullish (up) candles\n              },\n              \"value\": \"#ae1325\" // Red for bearish (down) candles\n            }\n          },\n          \"layer\": [\n            {\n              \"mark\": {\n                \"type\": \"rule\",\n                \"tooltip\": true,\n                \"strokeWidth\": 1\n              },\n              \"encoding\": {\n                \"y\": { \"field\": \"low\" },\n                \"y2\": { \"field\": \"high\" },\n                \"tooltip\": [\n                  { \"field\": \"date\", \"type\": \"temporal\", \"title\": \"Date\", \"format\": \"%Y-%m-%d\" },\n                  { \"field\": \"open\", \"type\": \"quantitative\", \"title\": \"Open\", \"format\": \".2f\" },\n                  { \"field\": \"high\", \"type\": \"quantitative\", \"title\": \"High\", \"format\": \".2f\" },\n                  { \"field\": \"low\", \"type\": \"quantitative\", \"title\": \"Low\", \"format\": \".2f\" },\n                  { \"field\": \"close\", \"type\": \"quantitative\", \"title\": \"Close\", \"format\": \".2f\" }\n                ]\n              }\n            },\n            {\n              \"mark\": {\n                \"type\": \"bar\",\n                \"tooltip\": true,\n                \"stroke\": \"white\",\n                \"strokeWidth\": 0.5\n              },\n              \"encoding\": {\n                \"y\": { \"field\": \"open\" },\n                \"y2\": { \"field\": \"close\" },\n                \"tooltip\": [\n                  { \"field\": \"date\", \"type\": \"temporal\", \"title\": \"Date\", \"format\": \"%Y-%m-%d\" },\n                  { \"field\": \"open\", \"type\": \"quantitative\", \"title\": \"Open\", \"format\": \".2f\" },\n                  { \"field\": \"high\", \"type\": \"quantitative\", \"title\": \"High\", \"format\": \".2f\" },\n                  { \"field\": \"low\", \"type\": \"quantitative\", \"title\": \"Low\", \"format\": \".2f\" },\n                  { \"field\": \"close\", \"type\": \"quantitative\", \"title\": \"Close\", \"format\": \".2f\" }\n                ]\n              }\n            }\n          ],\n          \"config\": {\n            \"font\": \"Segoe UI\",\n            \"axis\": {\n              \"labelColor\": \"#605e5c\",\n              \"titleColor\": \"#323130\",\n              \"gridColor\": \"#f3f2f1\"\n            }\n          }\n        };\n      }\n\n      else if (chartType === \"map\") {\n      // Expect headers: Country (ISO3) | Value\n      const isoToId = {\n        \"AFG\": 4,    // Afghanistan\n        \"AGO\": 24,   // Angola\n        \"ALB\": 8,    // Albania\n        \"AND\": 20,   // Andorra\n        \"ARE\": 784,  // United Arab Emirates\n        \"ARG\": 32,   // Argentina\n        \"ARM\": 51,   // Armenia\n        \"ATA\": 10,   // Antarctica\n        \"ATG\": 28,   // Antigua and Barbuda\n        \"AUS\": 36,   // Australia\n        \"AUT\": 40,   // Austria\n        \"AZE\": 31,   // Azerbaijan\n        \"BDI\": 108,  // Burundi\n        \"BEL\": 56,   // Belgium\n        \"BEN\": 204,  // Benin\n        \"BFA\": 854,  // Burkina Faso\n        \"BGD\": 50,   // Bangladesh\n        \"BGR\": 100,  // Bulgaria\n        \"BHR\": 48,   // Bahrain\n        \"BHS\": 44,   // Bahamas\n        \"BIH\": 70,   // Bosnia and Herzegovina\n        \"BLR\": 112,  // Belarus\n        \"BLZ\": 84,   // Belize\n        \"BOL\": 68,   // Bolivia\n        \"BRA\": 76,   // Brazil\n        \"BRB\": 52,   // Barbados\n        \"BRN\": 96,   // Brunei\n        \"BTN\": 64,   // Bhutan\n        \"BWA\": 72,   // Botswana\n        \"CAF\": 140,  // Central African Republic\n        \"CAN\": 124,  // Canada\n        \"CHE\": 756,  // Switzerland\n        \"CHL\": 152,  // Chile\n        \"CHN\": 156,  // China\n        \"CIV\": 384,  // Côte d'Ivoire\n        \"CMR\": 120,  // Cameroon\n        \"COD\": 180,  // Democratic Republic of Congo\n        \"COG\": 178,  // Congo\n        \"COL\": 170,  // Colombia\n        \"COM\": 174,  // Comoros\n        \"CPV\": 132,  // Cape Verde\n        \"CRI\": 188,  // Costa Rica\n        \"CUB\": 192,  // Cuba\n        \"CYP\": 196,  // Cyprus\n        \"CZE\": 203,  // Czechia\n        \"DEU\": 276,  // Germany\n        \"DJI\": 262,  // Djibouti\n        \"DMA\": 212,  // Dominica\n        \"DNK\": 208,  // Denmark\n        \"DOM\": 214,  // Dominican Republic\n        \"DZA\": 12,   // Algeria\n        \"ECU\": 218,  // Ecuador\n        \"EGY\": 818,  // Egypt\n        \"ERI\": 232,  // Eritrea\n        \"ESH\": 732,  // Western Sahara\n        \"ESP\": 724,  // Spain\n        \"EST\": 233,  // Estonia\n        \"ETH\": 231,  // Ethiopia\n        \"FIN\": 246,  // Finland\n        \"FJI\": 242,  // Fiji\n        \"FRA\": 250,  // France\n        \"FSM\": 583,  // Micronesia\n        \"GAB\": 266,  // Gabon\n        \"GBR\": 826,  // United Kingdom\n        \"GEO\": 268,  // Georgia\n        \"GHA\": 288,  // Ghana\n        \"GIN\": 324,  // Guinea\n        \"GMB\": 270,  // Gambia\n        \"GNB\": 624,  // Guinea-Bissau\n        \"GNQ\": 226,  // Equatorial Guinea\n        \"GRC\": 300,  // Greece\n        \"GRD\": 308,  // Grenada\n        \"GRL\": 304,  // Greenland\n        \"GTM\": 320,  // Guatemala\n        \"GUY\": 328,  // Guyana\n        \"HND\": 340,  // Honduras\n        \"HRV\": 191,  // Croatia\n        \"HTI\": 332,  // Haiti\n        \"HUN\": 348,  // Hungary\n        \"IDN\": 360,  // Indonesia\n        \"IND\": 356,  // India\n        \"IRL\": 372,  // Ireland\n        \"IRN\": 364,  // Iran\n        \"IRQ\": 368,  // Iraq\n        \"ISL\": 352,  // Iceland\n        \"ISR\": 376,  // Israel\n        \"ITA\": 380,  // Italy\n        \"JAM\": 388,  // Jamaica\n        \"JOR\": 400,  // Jordan\n        \"JPN\": 392,  // Japan\n        \"KAZ\": 398,  // Kazakhstan\n        \"KEN\": 404,  // Kenya\n        \"KGZ\": 417,  // Kyrgyzstan\n        \"KHM\": 116,  // Cambodia\n        \"KIR\": 296,  // Kiribati\n        \"KNA\": 659,  // Saint Kitts and Nevis\n        \"KOR\": 410,  // South Korea\n        \"KWT\": 414,  // Kuwait\n        \"LAO\": 418,  // Laos\n        \"LBN\": 422,  // Lebanon\n        \"LBR\": 430,  // Liberia\n        \"LBY\": 434,  // Libya\n        \"LCA\": 662,  // Saint Lucia\n        \"LIE\": 438,  // Liechtenstein\n        \"LKA\": 144,  // Sri Lanka\n        \"LSO\": 426,  // Lesotho\n        \"LTU\": 440,  // Lithuania\n        \"LUX\": 442,  // Luxembourg\n        \"LVA\": 428,  // Latvia\n        \"MAR\": 504,  // Morocco\n        \"MCO\": 492,  // Monaco\n        \"MDA\": 498,  // Moldova\n        \"MDG\": 450,  // Madagascar\n        \"MDV\": 462,  // Maldives\n        \"MEX\": 484,  // Mexico\n        \"MHL\": 584,  // Marshall Islands\n        \"MKD\": 807,  // North Macedonia\n        \"MLI\": 466,  // Mali\n        \"MLT\": 470,  // Malta\n        \"MMR\": 104,  // Myanmar\n        \"MNE\": 499,  // Montenegro\n        \"MNG\": 496,  // Mongolia\n        \"MOZ\": 508,  // Mozambique\n        \"MRT\": 478,  // Mauritania\n        \"MUS\": 480,  // Mauritius\n        \"MWI\": 454,  // Malawi\n        \"MYS\": 458,  // Malaysia\n        \"NAM\": 516,  // Namibia\n        \"NCL\": 540,  // New Caledonia\n        \"NER\": 562,  // Niger\n        \"NGA\": 566,  // Nigeria\n        \"NIC\": 558,  // Nicaragua\n        \"NLD\": 528,  // Netherlands\n        \"NOR\": 578,  // Norway\n        \"NPL\": 524,  // Nepal\n        \"NRU\": 520,  // Nauru\n        \"NZL\": 554,  // New Zealand\n        \"OMN\": 512,  // Oman\n        \"PAK\": 586,  // Pakistan\n        \"PAN\": 591,  // Panama\n        \"PER\": 604,  // Peru\n        \"PHL\": 608,  // Philippines\n        \"PLW\": 585,  // Palau\n        \"PNG\": 598,  // Papua New Guinea\n        \"POL\": 616,  // Poland\n        \"PRI\": 630,  // Puerto Rico\n        \"PRK\": 408,  // North Korea\n        \"PRT\": 620,  // Portugal\n        \"PRY\": 600,  // Paraguay\n        \"PSE\": 275,  // Palestine\n        \"QAT\": 634,  // Qatar\n        \"ROU\": 642,  // Romania\n        \"RUS\": 643,  // Russia\n        \"RWA\": 646,  // Rwanda\n        \"SAU\": 682,  // Saudi Arabia\n        \"SDN\": 729,  // Sudan\n        \"SEN\": 686,  // Senegal\n        \"SGP\": 702,  // Singapore\n        \"SLB\": 90,   // Solomon Islands\n        \"SLE\": 694,  // Sierra Leone\n        \"SLV\": 222,  // El Salvador\n        \"SMR\": 674,  // San Marino\n        \"SOM\": 706,  // Somalia\n        \"SRB\": 688,  // Serbia\n        \"SSD\": 728,  // South Sudan\n        \"STP\": 678,  // São Tomé and Príncipe\n        \"SUR\": 740,  // Suriname\n        \"SVK\": 703,  // Slovakia\n        \"SVN\": 705,  // Slovenia\n        \"SWE\": 752,  // Sweden\n        \"SWZ\": 748,  // Eswatini\n        \"SYC\": 690,  // Seychelles\n        \"SYR\": 760,  // Syria\n        \"TCD\": 148,  // Chad\n        \"TGO\": 768,  // Togo\n        \"THA\": 764,  // Thailand\n        \"TJK\": 762,  // Tajikistan\n        \"TKM\": 795,  // Turkmenistan\n        \"TLS\": 626,  // Timor-Leste\n        \"TON\": 776,  // Tonga\n        \"TTO\": 780,  // Trinidad and Tobago\n        \"TUN\": 788,  // Tunisia\n        \"TUR\": 792,  // Turkey\n        \"TUV\": 798,  // Tuvalu\n        \"TWN\": 158,  // Taiwan\n        \"TZA\": 834,  // Tanzania\n        \"UGA\": 800,  // Uganda\n        \"UKR\": 804,  // Ukraine\n        \"URY\": 858,  // Uruguay\n        \"USA\": 840,  // United States\n        \"UZB\": 860,  // Uzbekistan\n        \"VAT\": 336,  // Vatican City\n        \"VCT\": 670,  // Saint Vincent and the Grenadines\n        \"VEN\": 862,  // Venezuela\n        \"VNM\": 704,  // Vietnam\n        \"VUT\": 548,  // Vanuatu\n        \"WSM\": 882,  // Samoa\n        \"XKX\": 383,  // Kosovo\n        \"YEM\": 887,  // Yemen\n        \"ZAF\": 710,  // South Africa\n        \"ZMB\": 894,  // Zambia\n        \"ZWE\": 716   // Zimbabwe\n      };\n\n      const worldData = rows\n        .filter(r => r[0] && !isNaN(+r[1]))\n        .map(r => {\n          const iso = (r[0] || \"\").toUpperCase().trim();\n          const idVal = isoToId[iso];\n          return {\n            id: idVal,     // numeric ID matching topojson country.id\n            iso: iso,       // original ISO3 for tooltip\n            rate: +r[1]\n          };\n        })\n        .filter(d => d.id); // drop rows where iso isn't in lookup\n\n      spec = {\n        $schema: \"https://vega.github.io/schema/vega-lite/v6.json\",\n        width: 800,\n        height: 450,\n        data: {\n          url: \"https://cdn.jsdelivr.net/npm/world-atlas@2/countries-110m.json\",\n          format: { type: \"topojson\", feature: \"countries\" }\n        },\n        transform: [\n          {\n            lookup: \"id\",\n            from: {\n              data: { values: worldData },\n              key: \"id\",\n              fields: [\"rate\", \"iso\"]\n            }\n          }\n        ],\n        projection: { type: \"equalEarth\" },\n        mark: { type: \"geoshape\", stroke: \"white\", strokeWidth: 0.5 },\n        encoding: {\n          color: {\n            field: \"rate\",\n            type: \"quantitative\",\n            scale: { scheme: \"blues\" }\n          },\n          tooltip: [\n            { field: \"iso\", type: \"nominal\", title: \"Country (ISO3)\" },\n            { field: \"rate\", type: \"quantitative\", title: \"Value\" }\n          ]\n        }\n      };\n      }\n\n      else if (chartType === \"mekko\") {\n        spec = {\n          $schema: \"https://vega.github.io/schema/vega/v5.json\",\n          description: \"Mekko chart from Excel selection\",\n          width: 800,\n          height: 500,\n          background: \"white\",\n          config: { view: { stroke: \"transparent\" }},\n          view: { stroke: null },\n          padding: { top: 60, bottom: 80, left: 60, right: 60 },\n          data: [\n            {\n              name: \"table\",\n              values: data\n            },\n            {\n              name: \"categories\",\n              source: \"table\",\n              transform: [\n                {\n                  type: \"aggregate\",\n                  fields: [headers[2]],\n                  ops: [\"sum\"],\n                  as: [\"categoryTotal\"],\n                  groupby: [headers[0]]\n                },\n                {\n                  type: \"stack\",\n                  offset: \"normalize\",\n                  sort: { field: \"categoryTotal\", order: \"descending\" },\n                  field: \"categoryTotal\",\n                  as: [\"x0\", \"x1\"]\n                },\n                {\n                  type: \"formula\",\n                  as: \"Percent\",\n                  expr: \"datum.x1-datum.x0\"\n                },\n                {\n                  type: \"formula\",\n                  as: \"Label\",\n                  expr: `datum.${headers[0]} + ' (' + format(datum.Percent,'.1%') + ')'`\n                }\n              ]\n            },\n            {\n              name: \"finalTable\",\n              source: \"table\",\n              transform: [\n                {\n                  type: \"stack\",\n                  offset: \"normalize\",\n                  groupby: [headers[0]],\n                  sort: { field: headers[2], order: \"descending\" },\n                  field: headers[2],\n                  as: [\"y0\", \"y1\"]\n                },\n                {\n                  type: \"stack\",\n                  groupby: [headers[0]],\n                  sort: { field: headers[2], order: \"descending\" },\n                  field: headers[2],\n                  as: [\"z0\", \"z1\"]\n                },\n                {\n                  type: \"lookup\",\n                  from: \"categories\",\n                  key: headers[0],\n                  values: [\"x0\", \"x1\"],\n                  fields: [headers[0]]\n                },\n                {\n                  type: \"formula\",\n                  as: \"Percent\",\n                  expr: \"datum.y1-datum.y0\"\n                },\n                {\n                  type: \"formula\",\n                  as: \"Label\",\n                  expr: `[datum.${headers[1]}, format(datum.${headers[2]}, '.0f') + ' (' + format(datum.Percent, '.1%') + ')']`\n                },\n                {\n                  type: \"window\",\n                  sort: { field: \"y0\", order: \"ascending\" },\n                  ops: [\"row_number\"],\n                  fields: [null],\n                  as: [\"rank\"],\n                  groupby: [headers[0]]\n                }\n              ]\n            }\n          ],\n          scales: [\n            {\n              name: \"x\",\n              type: \"linear\",\n              range: \"width\",\n              domain: { data: \"finalTable\", field: \"x1\" }\n            },\n            {\n              name: \"y\",\n              type: \"linear\",\n              range: \"height\",\n              nice: false,\n              zero: true,\n              domain: { data: \"finalTable\", field: \"z1\" }\n            },\n            {\n              name: \"opacity\",\n              type: \"linear\",\n              range: [1, 0.6],\n              domain: { data: \"finalTable\", field: \"rank\" }\n            },\n            {\n              name: \"color\",\n              type: \"ordinal\",\n              range: { scheme: \"category20\" },\n              domain: {\n                data: \"categories\",\n                field: headers[0],\n                sort: { field: \"x0\", order: \"ascending\", op: \"sum\" }\n              }\n            }\n          ],\n          axes: [\n            {\n              orient: \"left\",\n              scale: \"y\",\n              zindex: 1,\n              format: \"\",\n              tickCount: 5,\n              tickSize: 15,\n              labelColor: { value: \"#333740\" },\n              labelFontWeight: { value: \"normal\" },\n              labelFontSize: { value: 12 },\n              labelFont: { value: \"Segoe UI\" },\n              offset: 5,\n              domain: false,\n              encode: {\n                labels: {\n                  update: {\n                    text: { signal: `format(datum.value, '.0f')` }\n                  }\n                }\n              }\n            }\n          ],\n          marks: [\n            {\n              type: \"rect\",\n              name: \"bars\",\n              from: { data: \"finalTable\" },\n              encode: {\n                update: {\n                  x: { scale: \"x\", field: \"x0\" },\n                  x2: { scale: \"x\", field: \"x1\" },\n                  y: { scale: \"y\", field: \"z0\" },\n                  y2: { scale: \"y\", field: \"z1\" },\n                  fill: { scale: \"color\", field: headers[0] },\n                  stroke: { value: \"white\" },\n                  strokeWidth: { value: 1 },\n                  fillOpacity: { scale: \"opacity\", field: \"rank\" },\n                  tooltip: { signal: \"datum\" }\n                }\n              }\n            },\n            {\n              type: \"text\",\n              name: \"labels\",\n              interactive: false,\n              from: { data: \"bars\" },\n              encode: {\n                update: {\n                  x: { signal: \"(datum.x2 - datum.x)*0.5 + datum.x\" },\n                  align: { value: \"center\" },\n                  text: { field: \"datum.Label\" },\n                  y: { signal: \"(datum.y2 - datum.y)*0.5 + datum.y\" },\n                  fill: { value: \"white\" },\n                  font: { value: \"Segoe UI\" },\n                  lineHeight: { value: 12 },\n                  fontSize: { value: 10 },\n                  opacity: { signal: \"(datum.x2 - datum.x) > 0.05 && (datum.y2 - datum.y) > 20 ? 1 : 0\" }\n                }\n              }\n            },\n            {\n              type: \"text\",\n              name: \"categoryLabels\",\n              from: { data: \"categories\" },\n              encode: {\n                update: {\n                  x: { scale: \"x\", signal: \"(datum.x1-datum.x0)/2 + datum.x0\" },\n                  y: { signal: \"-15\" },\n                  text: { field: headers[0] },\n                  align: { value: \"center\" },\n                  baseline: { value: \"bottom\" },\n                  fill: { value: \"#333740\" },\n                  fontWeight: { value: \"bold\" },\n                  fontSize: { value: 12 },\n                  font: { value: \"Segoe UI\" }\n                }\n              }\n            },\n            {\n              type: \"text\",\n              name: \"categoryPercentages\",\n              from: { data: \"categories\" },\n              encode: {\n                update: {\n                  x: { scale: \"x\", signal: \"(datum.x1-datum.x0)/2 + datum.x0\" },\n                  y: { signal: \"height + 30\" },\n                  text: { field: \"Label\" },\n                  align: { value: \"center\" },\n                  baseline: { value: \"top\" },\n                  fill: { value: \"#666666\" },\n                  fontWeight: { value: \"normal\" },\n                  fontSize: { value: 10 },\n                  font: { value: \"Segoe UI\" }\n                }\n              }\n            }\n          ]\n        };\n      }\n\n      else if (chartType === \"marimekko\") {\n      if (headers.length < 3) {\n        console.warn(\"Marimekko chart requires at least 3 columns: Category, Subcategory, Value\");\n        return;\n      }\n\n      spec = {\n        \"$schema\": \"https://vega.github.io/schema/vega/v5.json\",\n        \"description\": \"Marimekko Chart from Excel selection\",\n        \"width\": 600,\n        \"height\": 400,\n        \"background\": \"white\",\n        \"config\": { \"view\": { \"stroke\": \"transparent\" }},\n        \"padding\": { \"top\": 30, \"bottom\": 60, \"left\": 60, \"right\": 60 },\n        \"data\": [\n          {\n            \"name\": \"table\",\n            \"values\": data,\n            \"transform\": [\n              {\n                \"type\": \"formula\",\n                \"as\": \"Category\",\n                \"expr\": `datum['${headers[0]}']`\n              },\n              {\n                \"type\": \"formula\", \n                \"as\": \"Subcategory\",\n                \"expr\": `datum['${headers[1]}']`\n              },\n              {\n                \"type\": \"formula\",\n                \"as\": \"Value\", \n                \"expr\": `datum['${headers[2]}']`\n              }\n            ]\n          },\n          {\n            \"name\": \"categories\",\n            \"source\": \"table\",\n            \"transform\": [\n              {\n                \"type\": \"aggregate\",\n                \"fields\": [\"Value\"],\n                \"ops\": [\"sum\"],\n                \"as\": [\"categoryTotal\"],\n                \"groupby\": [\"Category\"]\n              },\n              {\n                \"type\": \"stack\",\n                \"offset\": \"normalize\",\n                \"sort\": { \"field\": \"categoryTotal\", \"order\": \"descending\" },\n                \"field\": \"categoryTotal\",\n                \"as\": [\"x0\", \"x1\"]\n              },\n              {\n                \"type\": \"formula\",\n                \"as\": \"Percent\",\n                \"expr\": \"datum.x1 - datum.x0\"\n              }\n            ]\n          },\n          {\n            \"name\": \"finalTable\",\n            \"source\": \"table\",\n            \"transform\": [\n              {\n                \"type\": \"stack\",\n                \"offset\": \"normalize\",\n                \"groupby\": [\"Category\"],\n                \"sort\": { \"field\": \"Value\", \"order\": \"descending\" },\n                \"field\": \"Value\",\n                \"as\": [\"y0\", \"y1\"]\n              },\n              {\n                \"type\": \"lookup\",\n                \"from\": \"categories\",\n                \"key\": \"Category\",\n                \"values\": [\"x0\", \"x1\"],\n                \"fields\": [\"Category\"]\n              },\n              {\n                \"type\": \"formula\",\n                \"as\": \"Percent\",\n                \"expr\": \"datum.y1 - datum.y0\"\n              }\n            ]\n          }\n        ],\n        \"scales\": [\n          {\n            \"name\": \"x\",\n            \"type\": \"linear\",\n            \"range\": \"width\",\n            \"domain\": { \"data\": \"finalTable\", \"field\": \"x1\" }\n          },\n          {\n            \"name\": \"y\",\n            \"type\": \"linear\",\n            \"range\": \"height\",\n            \"nice\": false,\n            \"zero\": true,\n            \"domain\": { \"data\": \"finalTable\", \"field\": \"y1\" }\n          },\n          {\n            \"name\": \"color\",\n            \"type\": \"ordinal\",\n            \"range\": { \"scheme\": \"category10\" },\n            \"domain\": {\n              \"data\": \"categories\",\n              \"field\": \"Category\",\n              \"sort\": { \"field\": \"x0\", \"order\": \"ascending\", \"op\": \"sum\" }\n            }\n          }\n        ],\n        \"axes\": [\n          {\n            \"orient\": \"left\",\n            \"scale\": \"y\",\n            \"format\": \"%\",\n            \"tickCount\": 5,\n            \"labelColor\": \"#333333\",\n            \"labelFontSize\": 11,\n            \"domain\": false\n          },\n          {\n            \"orient\": \"bottom\",\n            \"scale\": \"x\",\n            \"format\": \"%\",\n            \"tickCount\": 5,\n            \"labelColor\": \"#333333\", \n            \"labelFontSize\": 11,\n            \"domain\": false\n          }\n        ],\n        \"marks\": [\n          {\n            \"type\": \"rect\",\n            \"name\": \"bars\",\n            \"from\": { \"data\": \"finalTable\" },\n            \"encode\": {\n              \"update\": {\n                \"x\": { \"scale\": \"x\", \"field\": \"x0\" },\n                \"x2\": { \"scale\": \"x\", \"field\": \"x1\" },\n                \"y\": { \"scale\": \"y\", \"field\": \"y0\" },\n                \"y2\": { \"scale\": \"y\", \"field\": \"y1\" },\n                \"fill\": { \"scale\": \"color\", \"field\": \"Category\" },\n                \"stroke\": { \"value\": \"white\" },\n                \"strokeWidth\": { \"value\": 1 },\n                \"opacity\": { \"value\": 0.8 },\n                \"tooltip\": { \n                  \"signal\": \"{'Category': datum.Category, 'Subcategory': datum.Subcategory, 'Value': datum.Value, 'Percentage': format(datum.Percent, '.1%')}\" \n                }\n              },\n              \"hover\": {\n                \"opacity\": { \"value\": 1.0 }\n              }\n            }\n          },\n          {\n            \"type\": \"text\",\n            \"name\": \"valueLabels\",\n            \"from\": { \"data\": \"finalTable\" },\n            \"encode\": {\n              \"update\": {\n                \"x\": { \"scale\": \"x\", \"signal\": \"(datum.x1 - datum.x0)/2 + datum.x0\" },\n                \"y\": { \"scale\": \"y\", \"signal\": \"(datum.y1 - datum.y0)/2 + datum.y0\" },\n                \"text\": { \n                  \"signal\": \"datum.Percent > 0.027 ? [datum.Subcategory, format(datum.Value, ',.0f') + ' (' + format(datum.Percent, '.0%') + ')'] : []\" \n                },\n                \"align\": { \"value\": \"center\" },\n                \"baseline\": { \"value\": \"middle\" },\n                \"fill\": { \"value\": \"white\" },\n                \"fontSize\": { \"value\": 10 },\n                \"fontWeight\": { \"value\": \"normal\" },\n                \"font\": { \"value\": \"Segoe UI\" },\n                \"lineHeight\": { \"value\": 12 },\n                \"opacity\": { \"signal\": \"datum.Percent > 0.027 ? 1 : 0\" }\n              }\n            }\n          }\n        ]\n      };\n      }\n\n      else if (chartType === \"arc\") {\n        // Transform Excel data for arc chart\n        const edges = data.map((row, index) => ({\n          source: row[headers[0]],\n          target: row[headers[1]],\n          value: headers.length >= 3 && row[headers[2]] ? row[headers[2]] : 1,\n          group: headers.length >= 4 && row[headers[3]] ? row[headers[3]] : \"default\"\n        }));\n\n        // Get unique nodes from edges\n        const nodeMap = new Map();\n        edges.forEach(edge => {\n          if (!nodeMap.has(edge.source)) {\n            nodeMap.set(edge.source, { \n              name: edge.source, \n              group: edge.group,\n              index: nodeMap.size\n            });\n          }\n          if (!nodeMap.has(edge.target)) {\n            nodeMap.set(edge.target, { \n              name: edge.target, \n              group: edge.group,\n              index: nodeMap.size\n            });\n          }\n        });\n\n        const nodes = Array.from(nodeMap.values());\n\n        // Transform edges to use node indices\n        const edgesWithIndices = edges.map(edge => ({\n          source: nodeMap.get(edge.source).index,\n          target: nodeMap.get(edge.target).index,\n          value: edge.value\n        }));\n\n        spec = {\n          $schema: \"https://vega.github.io/schema/vega/v5.json\",\n          description: \"Arc diagram from Excel selection\",\n          width: Math.max(600, nodes.length * 40),\n          height: 300,\n          padding: { top: 20, bottom: 80, left: 20, right: 20 },\n          background: \"white\",\n          config: { view: { stroke: \"transparent\" }},\n          data: [\n            {\n              name: \"edges\",\n              values: edgesWithIndices\n            },\n            {\n              name: \"sourceDegree\",\n              source: \"edges\",\n              transform: [\n                { type: \"aggregate\", groupby: [\"source\"], as: [\"count\"] }\n              ]\n            },\n            {\n              name: \"targetDegree\", \n              source: \"edges\",\n              transform: [\n                { type: \"aggregate\", groupby: [\"target\"], as: [\"count\"] }\n              ]\n            },\n            {\n              name: \"nodes\",\n              values: nodes,\n              transform: [\n                { type: \"window\", ops: [\"rank\"], as: [\"order\"] },\n                {\n                  type: \"lookup\", from: \"sourceDegree\", key: \"source\",\n                  fields: [\"index\"], as: [\"sourceDegree\"],\n                  default: { count: 0 }\n                },\n                {\n                  type: \"lookup\", from: \"targetDegree\", key: \"target\", \n                  fields: [\"index\"], as: [\"targetDegree\"],\n                  default: { count: 0 }\n                },\n                {\n                  type: \"formula\", as: \"degree\",\n                  expr: \"(datum.sourceDegree.count || 0) + (datum.targetDegree.count || 0)\"\n                }\n              ]\n            }\n          ],\n\n          scales: [\n            {\n              name: \"position\",\n              type: \"band\",\n              domain: { data: \"nodes\", field: \"order\", sort: true },\n              range: \"width\"\n            },\n            {\n              name: \"color\",\n              type: \"ordinal\",\n              range: { scheme: \"category20\" },\n              domain: { data: \"nodes\", field: \"group\" }\n            }\n          ],\n\n          marks: [\n            {\n              type: \"symbol\",\n              name: \"layout\",\n              interactive: false,\n              from: { data: \"nodes\" },\n              encode: {\n                enter: { opacity: { value: 0 } },\n                update: {\n                  x: { scale: \"position\", field: \"order\" },\n                  y: { value: 0 },\n                  size: { field: \"degree\", mult: 8, offset: 50 },\n                  fill: { scale: \"color\", field: \"group\" }\n                }\n              }\n            },\n            {\n              type: \"path\",\n              from: { data: \"edges\" },\n              encode: {\n                update: {\n                  stroke: { value: \"#0078d4\" },\n                  strokeOpacity: { value: 0.4 },\n                  strokeWidth: { field: \"value\", mult: 2, offset: 1 }\n                }\n              },\n              transform: [\n                {\n                  type: \"lookup\", from: \"layout\", key: \"datum.index\",\n                  fields: [\"datum.source\", \"datum.target\"],\n                  as: [\"sourceNode\", \"targetNode\"]\n                },\n                {\n                  type: \"linkpath\",\n                  sourceX: { expr: \"min(datum.sourceNode.x, datum.targetNode.x)\" },\n                  targetX: { expr: \"max(datum.sourceNode.x, datum.targetNode.x)\" },\n                  sourceY: { expr: \"0\" },\n                  targetY: { expr: \"0\" },\n                  shape: \"arc\"\n                }\n              ]\n            },\n            {\n              type: \"symbol\",\n              from: { data: \"layout\" },\n              encode: {\n                update: {\n                  x: { field: \"x\" },\n                  y: { field: \"y\" },\n                  fill: { field: \"fill\" },\n                  size: { field: \"size\" },\n                  stroke: { value: \"white\" },\n                  strokeWidth: { value: 1 },\n                  tooltip: { \n                    signal: \"{'Node': datum.datum.name, 'Group': datum.datum.group, 'Connections': datum.datum.degree}\" \n                  }\n                }\n              }\n            },\n            {\n              type: \"text\",\n              from: { data: \"nodes\" },\n              encode: {\n                update: {\n                  x: { scale: \"position\", field: \"order\" },\n                  y: { value: 25 },\n                  fontSize: { value: 10 },\n                  align: { value: \"center\" },\n                  baseline: { value: \"top\" },\n                  angle: { value: -45 },\n                  text: { field: \"name\" },\n                  fill: { value: \"#323130\" },\n                  font: { value: \"Segoe UI\" }\n                }\n              }\n            }\n          ],\n          \n          config: {\n            view: { stroke: \"transparent\" },\n            font: \"Segoe UI\",\n            text: { font: \"Segoe UI\", fontSize: 10, fill: \"#605e5c\" }\n          }\n        };\n      }\n\n      else if (chartType === \"lollipop\") {\n        spec = {\n          $schema: \"https://vega.github.io/schema/vega-lite/v5.json\",\n          description: \"Lollipop chart from Excel selection\",\n          background: \"white\",\n          config: { view: { stroke: \"transparent\" }},\n          data: { values: data },\n          encoding: {\n            y: {\n              field: headers[0],\n              type: \"nominal\",\n              sort: \"-x\",\n              axis: {\n                domain: false,\n                title: null,\n                ticks: false,\n                labelFont: \"Segoe UI\",\n                labelFontSize: 14,\n                labelPadding: 10,\n                labelColor: \"#605e5c\"\n              }\n            },\n            x: {\n              field: headers[1],\n              type: \"quantitative\",\n              axis: {\n                domain: false,\n                ticks: false,\n                grid: true,\n                gridColor: \"#e0e0e0\",\n                labelFont: \"Segoe UI\",\n                labelFontSize: 12,\n                labelColor: \"#605e5c\",\n                title: headers[1],\n                titleFont: \"Segoe UI\",\n                titleFontSize: 14,\n                titleColor: \"#323130\"\n              }\n            },\n            color: { value: \"#0078d4\" }\n          },\n          layer: [\n            {\n              mark: {\n                type: \"rule\",\n                tooltip: true,\n                strokeWidth: 3,\n                opacity: 0.7\n              }\n            },\n            {\n              mark: {\n                type: \"circle\",\n                tooltip: true,\n                size: 300,\n                opacity: 0.9\n              },\n              encoding: {\n                size: {\n                  field: headers[1],\n                  type: \"quantitative\",\n                  scale: {\n                    range: [200, 800]\n                  },\n                  legend: null\n                }\n              }\n            }\n          ],\n          config: {\n            autosize: {\n              type: \"fit\",\n              contains: \"padding\"\n            },\n            view: { stroke: \"transparent\" },\n            font: \"Segoe UI\",\n            text: { font: \"Segoe UI\", fontSize: 12, fill: \"#605E5C\" }\n          }\n        };\n      }\n\n      else if (chartType === \"strip\") {\n        // Strip plot implementation\n        spec = {\n        $schema: \"https://vega.github.io/schema/vega-lite/v6.json\",\n        description: \"Strip plot showing distribution using tick marks\",\n        background: \"white\",\n        config: { \n            view: { stroke: \"transparent\" },\n            axis: {\n            labelFontSize: 11,\n            titleFontSize: 12,\n            labelColor: \"#605E5C\",\n            titleColor: \"#323130\"\n            }\n        },\n        data: { values: data },\n        mark: {\n            type: \"tick\",\n            thickness: 2,\n            size: 15,\n            color: \"#0078d4\",\n            opacity: 0.8,\n            tooltip: true\n        },\n        encoding: {\n            y: { \n            field: headers[0],\n            type: \"ordinal\",\n            axis: {\n                title: headers[0],\n                labelAngle: 0\n            }\n            },\n            x: { \n            field: headers[1],\n            type: \"quantitative\",\n            axis: {\n                title: headers[1],\n                grid: true,\n                gridColor: \"#f3f2f1\",\n                gridOpacity: 0.5\n            }\n            },\n            // Add color encoding if 3rd column exists\n            ...(headers.length > 2 && {\n            color: {\n                field: headers[2],\n                type: \"nominal\",\n                scale: { scheme: \"category10\" },\n                legend: {\n                title: headers[2],\n                orient: \"right\",\n                titleFontSize: 11,\n                labelFontSize: 10\n                }\n            }\n            }),\n            tooltip: headers.map(h => ({ field: h, type: \"nominal\" }))\n        }\n        };\n      }\n\n      else if (chartType === \"treemap\") {\n        let treeData;\n        \n        if (headers.length >= 3) {\n          // Hierarchical data with parent column\n          treeData = data.map((d, i) => ({\n            id: `${d[headers[1]]}_${i}`,\n            name: d[headers[1]],\n            parent: d[headers[0]] || \"root\",\n            size: parseFloat(d[headers[2]]) || 0\n          }));\n          \n          // Add root and parent nodes\n          const parents = [...new Set(treeData.map(d => d.parent))];\n          parents.forEach(parent => {\n            if (parent !== \"root\" && !treeData.find(d => d.id === parent)) {\n              treeData.push({\n                id: parent,\n                name: parent,\n                parent: \"root\",\n                size: 0\n              });\n            }\n          });\n          \n          // Add root node\n          treeData.push({\n            id: \"root\",\n            name: \"Root\",\n            parent: \"\",\n            size: 0\n          });\n        } else {\n          // Simple flat data - create single level hierarchy\n          treeData = [\n            {\n              id: \"root\",\n              name: \"Root\", \n              parent: \"\",\n              size: 0\n            },\n            ...data.map((d, i) => ({\n              id: `item_${i}`,\n              name: d[headers[1]],\n              parent: \"root\",\n              size: parseFloat(d[headers[2]]) || 0\n            }))\n          ];\n        }\n\n        spec = {\n          $schema: \"https://vega.github.io/schema/vega/v5.json\",\n          description: \"Treemap visualization from Excel data\",\n          background: \"white\",\n          width: 600,\n          height: 400,\n          padding: 5,\n          autosize: \"fit\",\n          \n          data: [\n            {\n              name: \"tree\",\n              values: treeData,\n              transform: [\n                {\n                  type: \"stratify\",\n                  key: \"id\",\n                  parentKey: \"parent\"\n                },\n                {\n                  type: \"treemap\",\n                  field: \"size\",\n                  sort: { field: \"value\" },\n                  round: true,\n                  method: \"squarify\",\n                  ratio: 1.6,\n                  size: [{ signal: \"width\" }, { signal: \"height\" }]\n                }\n              ]\n            },\n            {\n              name: \"nodes\",\n              source: \"tree\",\n              transform: [\n                { type: \"filter\", expr: \"datum.children\" }\n              ]\n            },\n            {\n              name: \"leaves\", \n              source: \"tree\",\n              transform: [\n                { type: \"filter\", expr: \"!datum.children\" }\n              ]\n            }\n          ],\n          \n          scales: [\n            {\n              name: \"color\",\n              type: \"ordinal\",\n              domain: { data: \"nodes\", field: \"name\" },\n              range: [\n                \"#0078d4\", \"#00bcf2\", \"#40e0d0\", \"#00cc6a\", \"#10893e\",\n                \"#107c10\", \"#bad80a\", \"#ffb900\", \"#ff8c00\", \"#d13438\"\n              ]\n            },\n            {\n              name: \"fontSize\",\n              type: \"ordinal\", \n              domain: [0, 1, 2, 3],\n              range: [20, 16, 12, 10]\n            },\n            {\n              name: \"opacity\",\n              type: \"ordinal\",\n              domain: [0, 1, 2, 3], \n              range: [0.3, 0.6, 0.8, 1.0]\n            }\n          ],\n          \n          marks: [\n            {\n              type: \"rect\",\n              from: { data: \"nodes\" },\n              interactive: false,\n              encode: {\n                enter: {\n                  fill: { scale: \"color\", field: \"name\" },\n                  fillOpacity: { scale: \"opacity\", field: \"depth\" }\n                },\n                update: {\n                  x: { field: \"x0\" },\n                  y: { field: \"y0\" },\n                  x2: { field: \"x1\" },\n                  y2: { field: \"y1\" },\n                  stroke: { value: \"#ffffff\" },\n                  strokeWidth: { value: 1 }\n                }\n              }\n            },\n            {\n              type: \"rect\",\n              from: { data: \"leaves\" },\n              encode: {\n                enter: {\n                  stroke: { value: \"#ffffff\" },\n                  strokeWidth: { value: 2 }\n                },\n                update: {\n                  x: { field: \"x0\" },\n                  y: { field: \"y0\" },\n                  x2: { field: \"x1\" },\n                  y2: { field: \"y1\" },\n                  fill: { value: \"transparent\" },\n                  tooltip: {\n                    signal: `{'Category': datum.name, 'Value': datum.size, 'Parent': datum.parent}`\n                  }\n                },\n                hover: {\n                  fill: { value: \"#323130\" },\n                  fillOpacity: { value: 0.1 }\n                }\n              }\n            },\n            {\n              type: \"text\",\n              from: { data: \"leaves\" },\n              interactive: false,\n              encode: {\n                enter: {\n                  font: { value: \"Segoe UI, Arial, sans-serif\" },\n                  align: { value: \"center\" },\n                  baseline: { value: \"middle\" },\n                  fill: { value: \"#323130\" },\n                  fontWeight: { value: \"bold\" },\n                  text: { field: \"name\" },\n                  fontSize: { scale: \"fontSize\", field: \"depth\" }\n                },\n                update: {\n                  x: { signal: \"0.5 * (datum.x0 + datum.x1)\" },\n                  y: { signal: \"0.5 * (datum.y0 + datum.y1)\" },\n                  opacity: {\n                    signal: \"(datum.x1 - datum.x0) > 50 && (datum.y1 - datum.y0) > 20 ? 1 : 0\"\n                  }\n                }\n              }\n            }\n          ]\n        };\n      }\n      \n      else if (chartType === \"waffle\") {\n        spec = {\n          $schema: \"https://vega.github.io/schema/vega-lite/v5.json\",\n          description: \"Waffle chart from Excel selection\",\n          background: \"white\",\n          config: { view: { stroke: \"transparent\" }},\n          data: { values: data },\n          transform: [\n            {\n              joinaggregate: [{\"op\": \"sum\", \"field\": headers[1], \"as\": \"TotalValue\"}]\n            },\n            {\n              calculate: `round(datum.${headers[1]}/datum.TotalValue * 100)`,\n              as: \"PercentOfTotal\"\n            },\n            {\n              aggregate: [{\"op\": \"min\", \"field\": \"PercentOfTotal\", \"as\": \"Percent\"}],\n              groupby: [headers[0]]\n            },\n            {\"calculate\": \"sequence(1,101)\", \"as\": \"Sequence\"},\n            {\"flatten\": [\"Sequence\"]},\n            {\n              calculate: `if(datum.Sequence <= datum.Percent, datum.${headers[0]},'_blank')`,\n              as: \"Plot\"\n            },\n            {\"calculate\": \"ceil (datum.Sequence / 10)\", \"as\": \"row\"},\n            {\"calculate\": \"datum.Sequence - datum.row * 10\", \"as\": \"col\"}\n          ],\n          facet: {\"column\": {\"field\": headers[0], \"header\": {\"labelOrient\": \"bottom\"}}},\n          spec: {\n            layer: [\n              {\n                mark: {\n                  type: \"circle\",\n                  filled: true,\n                  tooltip: true,\n                  stroke: \"#9e9b9b\",\n                  strokeWidth: 0.7\n                },\n                encoding: {\n                  x: {\"field\": \"col\", \"type\": \"ordinal\", \"axis\": null},\n                  y: {\"field\": \"row\", \"type\": \"ordinal\", \"axis\": null, \"sort\": \"-y\"},\n                  color: {\n                    condition: {\"test\": \"datum.Plot == '_blank'\", \"value\": \"#e6e3e3\"},\n                    scale: {\"scheme\": \"set1\"},\n                    field: \"Plot\",\n                    type: \"nominal\",\n                    legend: null\n                  },\n                  size: {\"value\": 241},\n                  tooltip: [{\"field\": headers[0], \"type\": \"nominal\"}]\n                }\n              },\n              {\n                mark: {\"type\": \"text\", \"fontSize\": 30, \"fontWeight\": \"bold\"},\n                encoding: {\n                  y: {\"value\": 30},\n                  text: {\n                    condition: {\n                      test: \"datum.Sequence == 1\",\n                      value: {\"expr\": \"datum.Percent + '%'\"}\n                    }\n                  },\n                  color: {\"scale\": {\"scheme\": \"set1\"}, \"field\": \"Plot\"}\n                }\n              }\n            ]\n          },\n          config: {\n            view: {\"stroke\": \"transparent\"},\n            font: \"Segoe UI\",\n            text: {\"font\": \"Segoe UI\", \"fontSize\": 12, \"fill\": \"#605E5C\"},\n            axis: {\n              ticks: false,\n              grid: false,\n              domain: false,\n              labelColor: \"#605E5C\",\n              labelFontSize: 12\n            },\n            header: {\n              titleFont: \"Segoe UI\",\n              titleFontSize: 16,\n              titleColor: \"#757575\",\n              labelFont: \"Segoe UI\",\n              labelFontSize: 13,\n              labelColor: \"#605E5C\"\n            },\n            legend: {\n              titleFont: \"Segoe UI\",\n              titleFontWeight: \"bold\",\n              titleColor: \"#605E5C\",\n              labelFont: \"Segoe UI\",\n              labelFontSize: 13,\n              labelColor: \"#605E5C\",\n              symbolType: \"circle\",\n              symbolSize: 75\n            }\n          }\n        };\n      }\n\n      else if (chartType === \"violin\") {\n        spec = {\n          $schema: \"https://vega.github.io/schema/vega-lite/v5.20.1.json\",\n          description: \"Violin chart from Excel selection\",\n          background: \"white\",\n          config: {\n            view: { continuousWidth: 300, continuousHeight: 300, stroke: null },\n            facet: { spacing: 0 }\n          },\n          data: { values: data },\n          mark: { type: \"area\", orient: \"horizontal\" },\n          encoding: {\n            color: { field: headers[0], type: \"nominal\" },\n            column: {\n              field: headers[0],\n              header: {\n                labelOrient: \"bottom\",\n                labelPadding: 0,\n                titleOrient: \"bottom\"\n              },\n              type: \"nominal\"\n            },\n            x: {\n              axis: { grid: false, labels: false, ticks: true, values: [0] },\n              field: \"density\",\n              impute: null,\n              stack: \"center\",\n              title: null,\n              type: \"quantitative\"\n            },\n            y: { field: headers[1], type: \"quantitative\" }\n          },\n          transform: [\n            {\n              density: headers[1],\n              groupby: [headers[0]],\n              as: [headers[1], \"density\"]\n            }\n          ],\n          width: 100\n        };\n      }\n\n      else if (chartType === \"heatmap\") {\n        spec = {\n          $schema: \"https://vega.github.io/schema/vega-lite/v5.json\",\n          description: \"Heatmap with marginal bars from Excel selection\",\n          background: \"white\",\n          config: { view: { stroke: \"transparent\" }},\n          data: { values: data },\n          spacing: 15,\n          bounds: \"flush\",\n          vconcat: [\n            {\n              height: 60,\n              mark: {\n                type: \"bar\",\n                stroke: null,\n                cornerRadiusEnd: 2,\n                tooltip: true,\n                color: \"lightgrey\"\n              },\n              encoding: {\n                x: {\n                  field: headers[1],\n                  type: \"ordinal\",\n                  axis: null\n                },\n                y: {\n                  field: headers[2],\n                  aggregate: \"mean\",\n                  type: \"quantitative\",\n                  axis: null\n                }\n              }\n            },\n            {\n              spacing: 15,\n              bounds: \"flush\",\n              hconcat: [\n                {\n                  mark: {\n                    type: \"rect\",\n                    stroke: \"white\",\n                    tooltip: true\n                  },\n                  encoding: {\n                    y: {\n                      field: headers[0],\n                      type: \"ordinal\",\n                      title: headers[0],\n                      axis: {\n                        domain: false,\n                        ticks: false,\n                        labels: true,\n                        labelAngle: 0,\n                        labelPadding: 5\n                      }\n                    },\n                    x: {\n                      field: headers[1],\n                      type: \"ordinal\",\n                      title: headers[1],\n                      axis: {\n                        domain: false,\n                        ticks: false,\n                        labels: true,\n                        labelAngle: 0\n                      }\n                    },\n                    color: {\n                      aggregate: \"mean\",\n                      field: headers[2],\n                      type: \"quantitative\",\n                      title: headers[2],\n                      scale: {\n                        scheme: \"blues\"\n                      },\n                      legend: {\n                        direction: \"vertical\",\n                        gradientLength: 120\n                      }\n                    }\n                  }\n                },\n                {\n                  mark: {\n                    type: \"bar\",\n                    stroke: null,\n                    cornerRadiusEnd: 2,\n                    tooltip: true,\n                    color: \"lightgrey\"\n                  },\n                  width: 60,\n                  encoding: {\n                    y: {\n                      field: headers[0],\n                      type: \"ordinal\",\n                      axis: null\n                    },\n                    x: {\n                      field: headers[2],\n                      type: \"quantitative\",\n                      aggregate: \"mean\",\n                      axis: null\n                    }\n                  }\n                }\n              ]\n            }\n          ],\n          config: {\n            autosize: {\n              type: \"fit\",\n              contains: \"padding\"\n            },\n            view: { stroke: \"transparent\" },\n            font: \"Segoe UI\",\n            text: { font: \"Segoe UI\", fontSize: 12, fill: \"#605E5C\" },\n            axis: {\n              ticks: false,\n              grid: false,\n              domain: false,\n              labelColor: \"#605E5C\",\n              labelFontSize: 12,\n              titleFontSize: 14,\n              titleColor: \"#323130\"\n            },\n            legend: {\n              titleFont: \"Segoe UI\",\n              titleFontWeight: \"bold\",\n              titleColor: \"#605E5C\",\n              labelFont: \"Segoe UI\",\n              labelFontSize: 12,\n              labelColor: \"#605E5C\"\n            }\n          }\n        };\n      }\n\n      else if (chartType === \"variance\") {\n      if (headers.length < 3) {\n        console.warn(\"Variance chart requires 3 columns: Business Unit, First Metric, Second Metric\");\n        return;\n      }\n\n      spec = {\n        \"$schema\": \"https://vega.github.io/schema/vega-lite/v5.json\",\n        \"data\": { \"values\": data },\n        \"transform\": [\n          {\n            \"aggregate\": [\n              {\"op\": \"sum\", \"field\": headers[1], \"as\": headers[1]},\n              {\"op\": \"sum\", \"field\": headers[2], \"as\": headers[2]}\n            ],\n            \"groupby\": [headers[0]]\n          },\n          {\n            \"calculate\": `datum['${headers[1]}'] - datum['${headers[2]}']`,\n            \"as\": \"Variance Absolute\"\n          },\n          {\n            \"calculate\": `datum['${headers[2]}'] === 0 ? 0 : datum['${headers[1]}']/datum['${headers[2]}']-1`,\n            \"as\": \"Variance Percent\"\n          }\n        ],\n        \"hconcat\": [\n          {\n            \"width\": 350,\n            \"height\": {\"step\": 50},\n            \"view\": {\"stroke\": \"transparent\"},\n            \"encoding\": {\n              \"color\": {\n                \"type\": \"nominal\",\n                \"scale\": {\n                  \"domain\": [headers[1], headers[2]],\n                  \"range\": [\"#404040\", \"silver\"]\n                },\n                \"legend\": {\"title\": null, \"orient\": \"top\"}\n              },\n              \"y\": {\n                \"field\": headers[0],\n                \"type\": \"nominal\",\n                \"sort\": null,\n                \"axis\": {\"domain\": false, \"offset\": 0, \"ticks\": false, \"title\": \"\", \"labelPadding\": 35}\n              },\n              \"x\": {\n                \"type\": \"quantitative\",\n                \"axis\": {\n                  \"domain\": false,\n                  \"labels\": false,\n                  \"title\": null,\n                  \"ticks\": false,\n                  \"grid\": true,\n                  \"gridColor\": {\n                    \"condition\": {\"test\": \"datum.value === 0\", \"value\": \"#605E5C\"},\n                    \"value\": \"transparent\"\n                  }\n                }\n              }\n            },\n            \"layer\": [\n              {\n                \"mark\": {\n                  \"type\": \"bar\",\n                  \"tooltip\": true,\n                  \"cornerRadius\": 3,\n                  \"yOffset\": 12,\n                  \"height\": {\"band\": 0.5}\n                },\n                \"encoding\": {\n                  \"x\": {\"field\": headers[2]},\n                  \"color\": {\"datum\": headers[2]}\n                }\n              },\n              {\n                \"mark\": {\n                  \"type\": \"bar\",\n                  \"tooltip\": true,\n                  \"cornerRadius\": 3,\n                  \"yOffset\": 0,\n                  \"height\": {\"band\": 0.5}\n                },\n                \"encoding\": {\n                  \"x\": {\"field\": headers[1]},\n                  \"color\": {\"datum\": headers[1]}\n                }\n              },\n              {\n                \"mark\": {\n                  \"type\": \"text\",\n                  \"align\": {\n                    \"expr\": `datum['${headers[1]}'] < 0 ? 'right' : 'left'`\n                  },\n                  \"dx\": {\"expr\": `datum['${headers[1]}'] < 0 ? -5 : 5`},\n                  \"color\": \"black\",\n                  \"fontSize\": 11\n                },\n                \"encoding\": {\n                  \"x\": {\"field\": headers[1], \"type\": \"quantitative\"},\n                  \"text\": {\"field\": headers[1], \"type\": \"quantitative\", \"format\": \",\"}\n                }\n              }\n            ]\n          },\n          {\n            \"width\": 150,\n            \"height\": {\"step\": 50},\n            \"view\": {\"stroke\": \"transparent\"},\n            \"encoding\": {\n              \"y\": {\n                \"field\": headers[0],\n                \"type\": \"nominal\",\n                \"sort\": null,\n                \"axis\": null\n              },\n              \"x\": {\n                \"field\": \"Variance Absolute\",\n                \"type\": \"quantitative\",\n                \"axis\": {\n                  \"domain\": false,\n                  \"labels\": false,\n                  \"title\": null,\n                  \"ticks\": false,\n                  \"grid\": true,\n                  \"gridWidth\": 1,\n                  \"gridColor\": {\n                    \"condition\": {\"test\": \"datum.value === 0\", \"value\": \"#605E5C\"},\n                    \"value\": \"transparent\"\n                  }\n                }\n              }\n            },\n            \"layer\": [\n              {\n                \"mark\": {\n                  \"type\": \"bar\",\n                  \"tooltip\": true,\n                  \"cornerRadius\": 3,\n                  \"yOffset\": 0,\n                  \"height\": {\"band\": 0.5}\n                },\n                \"encoding\": {\n                  \"fill\": {\n                    \"condition\": {\n                      \"test\": \"datum['Variance Absolute'] < 0\",\n                      \"value\": \"#b92929\"\n                    },\n                    \"value\": \"#329351\"\n                  }\n                }\n              },\n              {\n                \"mark\": {\n                  \"type\": \"text\",\n                  \"align\": {\n                    \"expr\": \"datum['Variance Absolute'] < 0 ? 'right' : 'left'\"\n                  },\n                  \"dx\": {\"expr\": \"datum['Variance Absolute'] < 0 ? -5 : 5\"}\n                },\n                \"encoding\": {\n                  \"text\": {\n                    \"field\": \"Variance Absolute\",\n                    \"type\": \"quantitative\",\n                    \"format\": \"+,\"\n                  }\n                }\n              }\n            ]\n          },\n          {\n            \"width\": 150,\n            \"height\": {\"step\": 50},\n            \"view\": {\"stroke\": \"transparent\"},\n            \"transform\": [\n              {\n                \"calculate\": `datum['${headers[2]}'] === 0 ? 'n/m' : format(datum['Variance Percent'], '+.1%')`,\n                \"as\": \"PercentDisplay\"\n              }\n            ],\n            \"encoding\": {\n              \"y\": {\n                \"field\": headers[0],\n                \"type\": \"nominal\",\n                \"sort\": null,\n                \"axis\": null\n              },\n              \"x\": {\n                \"field\": \"Variance Percent\",\n                \"type\": \"quantitative\",\n                \"axis\": {\n                  \"domain\": false,\n                  \"labels\": false,\n                  \"title\": null,\n                  \"ticks\": false,\n                  \"grid\": true,\n                  \"gridColor\": {\n                    \"condition\": {\"test\": \"datum.value === 0\", \"value\": \"#605E5C\"},\n                    \"value\": \"transparent\"\n                  }\n                }\n              }\n            },\n            \"layer\": [\n              {\n                \"mark\": {\"type\": \"rule\", \"tooltip\": true},\n                \"encoding\": {\n                  \"strokeWidth\": {\"value\": 2},\n                  \"stroke\": {\n                    \"condition\": {\n                      \"test\": \"datum['Variance Absolute'] < 0\",\n                      \"value\": \"#b92929\"\n                    },\n                    \"value\": \"#329351\"\n                  }\n                }\n              },\n              {\n                \"mark\": {\"type\": \"circle\", \"tooltip\": true},\n                \"encoding\": {\n                  \"size\": {\"value\": 100},\n                  \"color\": {\n                    \"condition\": {\n                      \"test\": \"datum['Variance Absolute'] < 0\",\n                      \"value\": \"#b92929\"\n                    },\n                    \"value\": \"#329351\"\n                  }\n                }\n              },\n              {\n                \"mark\": {\n                  \"type\": \"text\",\n                  \"align\": {\n                    \"expr\": \"datum['Variance Absolute'] < 0 ? 'right' : 'left'\"\n                  },\n                  \"dx\": {\"expr\": \"datum['Variance Absolute'] < 0 ? -10 : 10\"}\n                },\n                \"encoding\": {\n                  \"text\": {\n                    \"field\": \"PercentDisplay\",\n                    \"type\": \"nominal\"\n                  }\n                }\n              }\n            ]\n          }\n        ],\n        \"config\": {\n          \"view\": {\"stroke\": \"transparent\"},\n          \"padding\": {\"left\": 5, \"top\": 20, \"right\": 5, \"bottom\": 5},\n          \"font\": \"Segoe UI\",\n          \"axis\": {\n            \"labelFontSize\": 12,\n            \"labelPadding\": 10,\n            \"offset\": 5,\n            \"labelFont\": \"Segoe UI\",\n            \"labelColor\": \"#252423\"\n          },\n          \"text\": {\"fontSize\": 12, \"font\": \"Segoe UI\", \"color\": \"#605E5C\"},\n          \"concat\": {\"spacing\": 50},\n          \"legend\": {\n            \"labelFontSize\": 12,\n            \"labelFont\": \"Segoe UI\",\n            \"labelColor\": \"#605E5C\"\n          }\n        }\n      };\n      }\n\n      else if (chartType === \"deviation\") {\n      spec = {\n        $schema: \"https://vega.github.io/schema/vega-lite/v6.json\",\n        description: \"Deviation chart from Excel selection\",\n        background: \"white\",\n        config: { view: { stroke: \"transparent\" }},\n        data: { values: data },\n        layer: [\n        {\n            mark: { type: \"line\", tooltip: true, color: \"grey\" },\n            encoding: {\n            x: { field: headers[0], type: \"ordinal\" },\n            y: { field: headers[1], type: \"quantitative\" }\n            }\n        },\n        {\n            mark: { type: \"circle\", size: 80, color: \"grey\", tooltip: true },\n            encoding: {\n            x: { field: headers[0], type: \"ordinal\" },\n            y: { field: headers[1], type: \"quantitative\" }\n            }\n        },\n        {\n            mark: { type: \"rule\", strokeWidth: 2, tooltip: true },\n            encoding: {\n            x: { field: headers[0], type: \"ordinal\" },\n            y: { field: headers[1], type: \"quantitative\" },\n            y2: { field: headers[2] },\n            color: {\n                condition: { test: `datum[\"${headers[1]}\"] < datum[\"${headers[2]}\"]`, value: \"red\" },\n                value: \"green\"\n            }\n            }\n        },\n        {\n            mark: { type: \"circle\", size: 60, tooltip: true },\n            encoding: {\n            x: { field: headers[0], type: \"ordinal\" },\n            y: { field: headers[2], type: \"quantitative\" },\n            color: {\n                condition: { test: `datum[\"${headers[1]}\"] < datum[\"${headers[2]}\"]`, value: \"red\" },\n                value: \"green\"\n            }\n            }\n        }\n        ],\n        encoding: {\n        x: { \n            field: headers[0], \n            type: \"ordinal\", \n            axis: { \n                title: null,\n                labelAngle: 0       // Optional: adjust label angle if needed\n            } \n        },\n        y: { type: \"quantitative\", axis: { title: \"\" } }\n        },\n        config: {\n        view: { stroke: \"transparent\" },\n        line: { strokeWidth: 3, strokeCap: \"round\", strokeJoin: \"round\" },\n        axis: {\n            ticks: false,\n            grid: false,\n            domain: false,\n            labelColor: \"#605E5C\",\n            labelFontSize: 12\n        }\n        }\n      };\n      }\n\n      else if (chartType === \"radial\") {\n        spec = {\n        $schema: \"https://vega.github.io/schema/vega-lite/v6.json\",\n        description: \"Radial chart from Excel selection\",\n        background: \"white\",\n        config: { view: { stroke: \"transparent\" }},\n        data: { values: data },\n        layer: [{\n        mark: { type: \"arc\", innerRadius: 20, stroke: \"#fff\" }\n        }, {\n        mark: { type: \"text\", radiusOffset: 10 },\n        encoding: {\n            text: { field: headers[1], type: \"quantitative\" }\n        }\n        }],\n        encoding: {\n        theta: { field: headers[1], type: \"quantitative\", stack: true },\n        radius: { \n            field: headers[1], \n            scale: { type: \"sqrt\", zero: true, rangeMin: 20 }\n        },\n        color: { field: headers[0], type: \"nominal\", legend: null }\n        }\n      };\n      }\n\n      else if (chartType === \"bump\") {\n      // calculate width based on number of unique x-values\n      const uniqueX = [...new Set(data.map(d => d[headers[0]]))];\n      const dynamicWidth = Math.max(400, uniqueX.length * 80);\n\n      spec = {\n        $schema: \"https://vega.github.io/schema/vega-lite/v6.json\",\n        description: \"Bump chart from Excel selection\",\n        background: \"white\",\n        config: { view: { stroke: \"transparent\" }},\n        data: { values: data },\n        width: dynamicWidth,\n        height: 200,   // give it some room\n        encoding: {\n          x: {\n            field: headers[0],\n            type: \"nominal\",\n            axis: { title: \"\" },\n            scale: { type: \"point\", padding: 1 }   // padding 1 for more spread\n          },\n          y: {\n            field: headers[2],      \n            type: \"ordinal\",\n            axis: false\n          }\n        },\n        layer: [\n          {\n            mark: { type: \"line\", interpolate: \"monotone\" },\n            encoding: {\n              color: {\n                field: headers[1],   \n                type: \"nominal\",\n                legend: false\n              }\n            }\n          },\n          {\n            mark: { type: \"circle\", size: 400, tooltip: true },\n            encoding: {\n              color: {\n                field: headers[1],\n                type: \"nominal\",\n                legend: false\n              }\n            }\n          },\n          {\n            mark: { type: \"text\", color: \"white\" },\n            encoding: {\n              text: { field: headers[2] }\n            }\n          },\n          {\n            // Left-side labels\n            transform: [\n              { window: [{ op: \"rank\", as: \"rank\" }], sort: [{ field: headers[0], order: \"descending\" }] },\n              { filter: \"datum.rank === 1\" }\n            ],\n            mark: {\n              type: \"text\",\n              align: \"left\",\n              baseline: \"middle\",\n              dx: 15,\n              fontWeight: \"bold\",\n              fontSize: 12\n            },\n            encoding: {\n              text: { field: headers[1], type: \"nominal\" },\n              color: { field: headers[1], type: \"nominal\", legend: false }\n            }\n          },\n          {\n            // Right-side labels\n            transform: [\n              { window: [{ op: \"rank\", as: \"rank\" }], sort: [{ field: headers[0], order: \"ascending\" }] },\n              { filter: \"datum.rank === 1\" }\n            ],\n            mark: {\n              type: \"text\",\n              align: \"right\",\n              baseline: \"middle\",\n              dx: -15,\n              fontWeight: \"bold\",\n              fontSize: 12\n            },\n            encoding: {\n              text: { field: headers[1], type: \"nominal\" },\n              color: { field: headers[1], type: \"nominal\", legend: false }\n            }\n          }\n        ],\n        config: {\n          view: { stroke: \"transparent\" },\n          line: { strokeWidth: 3, strokeCap: \"round\", strokeJoin: \"round\" },\n          axis: {\n            ticks: false,\n            grid: false,\n            domain: false,\n            labelColor: \"#666666\",\n            labelFontSize: 12\n          }\n        }\n      };\n      }\n\n      else if (chartType === \"sankey\") {\n      // Parse links from Source-Target-Value format\n      const links = data\n        .filter(r => r[headers[0]] && r[headers[1]] && !isNaN(+r[headers[2]]))\n        .map(r => ({\n          source: String(r[headers[0]]).trim(),\n          destination: String(r[headers[1]]).trim(),\n          value: +r[headers[2]]\n        }));\n\n      if (links.length === 0) {\n        showError(\"No valid data found for Sankey chart\");\n        return;\n      }\n\n      // Helper function to assign stage levels using topological sort\n      const assignNodeStages = (links) => {\n        const nodeStages = new Map();\n        const inDegree = new Map();\n        const outEdges = new Map();\n        \n        // Build graph\n        const allNodes = new Set();\n        links.forEach(link => {\n          allNodes.add(link.source);\n          allNodes.add(link.destination);\n          \n          if (!outEdges.has(link.source)) {\n            outEdges.set(link.source, []);\n          }\n          outEdges.get(link.source).push(link.destination);\n          \n          inDegree.set(link.destination, (inDegree.get(link.destination) || 0) + 1);\n        });\n        \n        // Find source nodes (stage 0)\n        const queue = [];\n        allNodes.forEach(node => {\n          if (!inDegree.has(node) || inDegree.get(node) === 0) {\n            queue.push(node);\n            nodeStages.set(node, 0);\n          }\n        });\n        \n        // Handle cycles or no clear sources\n        if (queue.length === 0 && allNodes.size > 0) {\n          const firstNode = Array.from(allNodes)[0];\n          queue.push(firstNode);\n          nodeStages.set(firstNode, 0);\n        }\n        \n        // Topological sort\n        const processed = new Set();\n        while (queue.length > 0) {\n          const current = queue.shift();\n          if (processed.has(current)) continue;\n          processed.add(current);\n          \n          const currentStage = nodeStages.get(current) || 0;\n          const neighbors = outEdges.get(current) || [];\n          \n          neighbors.forEach(neighbor => {\n            const newStage = currentStage + 1;\n            const existingStage = nodeStages.get(neighbor);\n            \n            if (existingStage === undefined || newStage > existingStage) {\n              nodeStages.set(neighbor, newStage);\n            }\n            \n            if (!processed.has(neighbor)) {\n              queue.push(neighbor);\n            }\n          });\n        }\n        \n        // Assign stage 0 to any remaining nodes\n        allNodes.forEach(node => {\n          if (!nodeStages.has(node)) {\n            nodeStages.set(node, 0);\n          }\n        });\n        \n        return nodeStages;\n      };\n\n      // Auto-detect node stages\n      const nodeStages = assignNodeStages(links);\n      \n      // Get all unique nodes\n      const allNodes = new Set();\n      links.forEach(link => {\n        allNodes.add(link.source);\n        allNodes.add(link.destination);\n      });\n\n      // Create category definitions with stack assignments\n      const categories = [];\n      const stageGroups = new Map();\n      \n      allNodes.forEach(node => {\n        const stage = nodeStages.get(node);\n        if (!stageGroups.has(stage)) {\n          stageGroups.set(stage, []);\n        }\n        stageGroups.get(stage).push(node);\n      });\n\n      // Create categories for each node with proper stack assignment\n      const sortedStages = Array.from(stageGroups.keys()).sort((a, b) => a - b);\n      sortedStages.forEach((stage, stageIndex) => {\n        const nodesInStage = stageGroups.get(stage);\n        nodesInStage.sort(); // Sort alphabetically within stage\n        \n        nodesInStage.forEach((node, nodeIndex) => {\n          const stackNumber = stageIndex + 1;\n          \n          categories.push({\n            category: node,\n            stack: stackNumber,\n            sort: nodeIndex + 1,\n            labels: stageIndex === 0 ? \"left\" : null\n          });\n        });\n      });\n\n      // Combine categories and links into input data\n      const inputData = [...categories, ...links];\n\n      // Create Vega spec\n      spec = {\n        $schema: \"https://vega.github.io/schema/vega/v5.json\",\n        description: \"Sankey diagram\",\n        width: 800,\n        height: 600,\n        padding: { bottom: 20, left: 80, right: 80, top: 40 },\n        background: \"white\",\n        signals: [\n          {\n            name: \"standardGap\",\n            value: 14,\n            description: \"Gap as a percentage of full domain\"\n          },\n          {\n            name: \"base\",\n            value: \"center\",\n            description: \"How to stack (center or zero)\"\n          }\n        ],\n        data: [\n          {\n            name: \"input\",\n            values: inputData\n          },\n          {\n            name: \"stacks\",\n            source: \"input\",\n            transform: [\n              { type: \"filter\", expr: \"datum.source != null\" },\n              { type: \"formula\", as: \"end\", expr: \"['source','destination']\" },\n              { type: \"formula\", as: \"name\", expr: \"[datum.source, datum.destination]\" },\n              { type: \"project\", fields: [\"end\", \"name\", \"value\"] },\n              { type: \"flatten\", fields: [\"end\", \"name\"] },\n              {\n                type: \"lookup\",\n                from: \"input\",\n                key: \"category\",\n                values: [\"stack\", \"sort\", \"gap\", \"labels\"],\n                fields: [\"name\"],\n                as: [\"stack\", \"sort\", \"gap\", \"labels\"]\n              },\n              {\n                type: \"aggregate\",\n                fields: [\"value\", \"stack\", \"sort\", \"gap\", \"labels\"],\n                groupby: [\"end\", \"name\"],\n                ops: [\"sum\", \"max\", \"max\", \"max\", \"max\"],\n                as: [\"value\", \"stack\", \"sort\", \"gap\", \"labels\"]\n              },\n              {\n                type: \"aggregate\",\n                fields: [\"value\", \"stack\", \"sort\", \"gap\", \"labels\"],\n                groupby: [\"name\"],\n                ops: [\"max\", \"max\", \"max\", \"max\", \"max\"],\n                as: [\"value\", \"stack\", \"sort\", \"gap\", \"labels\"]\n              },\n              { type: \"formula\", as: \"gap\", expr: \"datum.gap ? datum.gap : 0\" }\n            ]\n          },\n          {\n            name: \"maxValue\",\n            source: [\"stacks\"],\n            transform: [\n              {\n                type: \"aggregate\",\n                fields: [\"value\"],\n                groupby: [\"stack\"],\n                ops: [\"sum\"],\n                as: [\"value\"]\n              },\n              {\n                type: \"aggregate\",\n                fields: [\"value\"],\n                ops: [\"max\"],\n                as: [\"value\"]\n              }\n            ]\n          },\n          {\n            name: \"plottedStacks\",\n            source: [\"stacks\"],\n            transform: [\n              {\n                type: \"formula\",\n                as: \"spacer\",\n                expr: \"(data('maxValue')[0].value/100)*(standardGap+datum.gap)\"\n              },\n              { type: \"formula\", as: \"type\", expr: \"['data','spacer']\" },\n              { type: \"formula\", as: \"spacedValue\", expr: \"[datum.value, datum.spacer]\" },\n              { type: \"flatten\", fields: [\"type\", \"spacedValue\"] },\n              {\n                type: \"stack\",\n                groupby: [\"stack\"],\n                sort: { field: \"sort\", order: \"descending\" },\n                field: \"spacedValue\",\n                offset: { signal: \"base\" }\n              },\n              { type: \"formula\", expr: \"((datum.value)/2)+datum.y0\", as: \"yc\" }\n            ]\n          },\n          {\n            name: \"finalTable\",\n            source: [\"plottedStacks\"],\n            transform: [{ type: \"filter\", expr: \"datum.type == 'data'\" }]\n          },\n          {\n            name: \"linkTable\",\n            source: [\"input\"],\n            transform: [\n              { type: \"filter\", expr: \"datum.source != null\" },\n              {\n                type: \"lookup\",\n                from: \"finalTable\",\n                key: \"name\",\n                values: [\"y0\", \"y1\", \"stack\", \"sort\"],\n                fields: [\"source\"],\n                as: [\"sourceStacky0\", \"sourceStacky1\", \"sourceStack\", \"sourceSort\"]\n              },\n              {\n                type: \"lookup\",\n                from: \"finalTable\",\n                key: \"name\",\n                values: [\"y0\", \"y1\", \"stack\", \"sort\"],\n                fields: [\"destination\"],\n                as: [\"destinationStacky0\", \"destinationStacky1\", \"destinationStack\", \"destinationSort\"]\n              },\n              {\n                type: \"stack\",\n                groupby: [\"source\"],\n                sort: { field: \"destinationSort\", order: \"descending\" },\n                field: \"value\",\n                offset: \"zero\",\n                as: [\"syi0\", \"syi1\"]\n              },\n              { type: \"formula\", expr: \"datum.syi0+datum.sourceStacky0\", as: \"sy0\" },\n              { type: \"formula\", expr: \"datum.sy0+datum.value\", as: \"sy1\" },\n              {\n                type: \"stack\",\n                groupby: [\"destination\"],\n                sort: { field: \"sourceSort\", order: \"descending\" },\n                field: \"value\",\n                offset: \"zero\",\n                as: [\"dyi0\", \"dyi1\"]\n              },\n              { type: \"formula\", expr: \"datum.dyi0+datum.destinationStacky0\", as: \"dy0\" },\n              { type: \"formula\", expr: \"datum.dy0+datum.value\", as: \"dy1\" },\n              { type: \"formula\", expr: \"((datum.value)/2)+datum.sy0\", as: \"syc\" },\n              { type: \"formula\", expr: \"((datum.value)/2)+datum.dy0\", as: \"dyc\" },\n              {\n                type: \"linkpath\",\n                orient: \"horizontal\",\n                shape: \"diagonal\",\n                sourceY: { expr: \"scale('y', datum.syc)\" },\n                sourceX: { expr: \"scale('x', toNumber(datum.sourceStack)) + bandwidth('x')\" },\n                targetY: { expr: \"scale('y', datum.dyc)\" },\n                targetX: { expr: \"scale('x', datum.destinationStack)\" }\n              },\n              { type: \"formula\", expr: \"range('y')[0]-scale('y', datum.value)\", as: \"strokeWidth\" }\n            ]\n          }\n        ],\n        scales: [\n          {\n            name: \"x\",\n            type: \"band\",\n            range: \"width\",\n            domain: { data: \"finalTable\", field: \"stack\" },\n            paddingInner: 0.88\n          },\n          {\n            name: \"y\",\n            type: \"linear\",\n            range: \"height\",\n            domain: { data: \"finalTable\", field: \"y1\" },\n            reverse: false\n          },\n          {\n            name: \"color\",\n            type: \"ordinal\",\n            range: [\n              \"#1f77b4\", \"#ff7f0e\", \"#2ca02c\", \"#d62728\", \"#9467bd\",\n              \"#8c564b\", \"#e377c2\", \"#7f7f7f\", \"#bcbd22\", \"#17becf\",\n              \"#aec7e8\", \"#ffbb78\", \"#98df8a\", \"#ff9896\", \"#c5b0d5\",\n              \"#c49c94\", \"#f7b6d2\", \"#c7c7c7\", \"#dbdb8d\", \"#9edae5\"\n            ],\n            domain: { data: \"stacks\", field: \"name\" }\n          }\n        ],\n        marks: [\n          {\n            type: \"rect\",\n            from: { data: \"finalTable\" },\n            encode: {\n              update: {\n                x: { scale: \"x\", field: \"stack\" },\n                width: { scale: \"x\", band: 1 },\n                y: { scale: \"y\", field: \"y0\" },\n                y2: { scale: \"y\", field: \"y1\" },\n                fill: { scale: \"color\", field: \"name\" },\n                fillOpacity: { value: 0.75 },\n                strokeWidth: { value: 0 },\n                stroke: { scale: \"color\", field: \"name\" }\n              },\n              hover: {\n                tooltip: { signal: \"{'Name': datum.name, 'Value': format(datum.value, ',.2f')}\" },\n                fillOpacity: { value: 1 }\n              }\n            }\n          },\n          {\n            type: \"path\",\n            name: \"links\",\n            from: { data: \"linkTable\" },\n            clip: true,\n            encode: {\n              update: {\n                strokeWidth: { field: \"strokeWidth\" },\n                path: { field: \"path\" },\n                strokeOpacity: { signal: \"0.3\" },\n                stroke: { field: \"destination\", scale: \"color\" }\n              },\n              hover: {\n                strokeOpacity: { value: 0.8 },\n                tooltip: {\n                  signal: \"{'Source': datum.source, 'Destination': datum.destination, 'Value': format(datum.value, ',.2f')}\"\n                }\n              }\n            }\n          },\n          {\n            type: \"group\",\n            name: \"labelText\",\n            zindex: 1,\n            from: {\n              facet: {\n                data: \"finalTable\",\n                name: \"labelFacet\",\n                groupby: [\"name\", \"stack\", \"yc\", \"value\", \"labels\"]\n              }\n            },\n            clip: false,\n            encode: {\n              update: {\n                x: {\n                  signal: \"datum.labels=='left' ? scale('x', datum.stack)-8 : scale('x', datum.stack) + bandwidth('x') + 8\"\n                },\n                yc: { scale: \"y\", signal: \"datum.yc\" },\n                width: { signal: \"0\" },\n                height: { signal: \"0\" }\n              }\n            },\n            marks: [\n              {\n                type: \"text\",\n                name: \"heading\",\n                from: { data: \"labelFacet\" },\n                encode: {\n                  update: {\n                    x: { value: 0 },\n                    y: { value: -2 },\n                    text: { field: \"name\" },\n                    align: { signal: \"datum.labels=='left' ? 'right' : 'left'\" },\n                    fontWeight: { value: \"bold\" },\n                    fontSize: { value: 11 }\n                  }\n                }\n              },\n              {\n                type: \"text\",\n                name: \"amount\",\n                from: { data: \"labelFacet\" },\n                encode: {\n                  update: {\n                    x: { value: 0 },\n                    y: { value: 12 },\n                    text: { signal: \"format(datum.value, ',.0f')\" },\n                    align: { signal: \"datum.labels=='left' ? 'right' : 'left'\" },\n                    fontSize: { value: 10 }\n                  }\n                }\n              }\n            ]\n          },\n          {\n            type: \"rect\",\n            from: { data: \"labelText\" },\n            encode: {\n              update: {\n                x: { field: \"bounds.x1\", offset: -2 },\n                x2: { field: \"bounds.x2\", offset: 2 },\n                y: { field: \"bounds.y1\", offset: -2 },\n                y2: { field: \"bounds.y2\", offset: 2 },\n                fill: { value: \"white\" },\n                opacity: { value: 0.8 },\n                cornerRadius: { value: 4 }\n              }\n            }\n          }\n        ],\n        config: {\n          view: { stroke: \"transparent\" },\n          text: { fontSize: 11, fill: \"#333333\" }\n        }\n      };\n      }\n\n      else if (chartType === \"streamgraph\") {\n        // Streamgraph requires 3 columns: Time/Date, Series, Values\n        if (headers.length < 3) {\n            throw new Error(\"Streamgraph requires 3 columns: Time/Date, Series/Category, Values\");\n        }\n\n        // Process data and detect X-axis type\n        let xAxisType = \"ordinal\"; // Default for simple values like years\n        const processedData = data.map(row => {\n            let processedRow = { ...row };\n            \n            // Check if first column needs date conversion\n            const firstColValue = row[headers[0]];\n            if (typeof firstColValue === 'number' && firstColValue > 25569) {\n            // Excel date serial\n            processedRow[headers[0]] = new Date((firstColValue - 25569) * 86400 * 1000);\n            xAxisType = \"temporal\";\n            } else if (typeof firstColValue === 'string' && firstColValue.includes('-')) {\n            // String dates like \"2020-01-01\"\n            const parsedDate = new Date(firstColValue);\n            if (!isNaN(parsedDate.getTime())) {\n                processedRow[headers[0]] = parsedDate;\n                xAxisType = \"temporal\";\n            }\n            }\n            // For simple values like 2020, 2021, keep as-is and use ordinal\n            \n            return processedRow;\n        });\n\n        // Create axis configuration based on detected type\n        const xAxisConfig = xAxisType === \"temporal\" ? {\n            field: headers[0],\n            type: \"temporal\",\n            axis: {\n            domain: false,\n            format: \"%Y-%m\",\n            tickSize: 0,\n            title: headers[0],\n            labelFontSize: 11,\n            titleFontSize: 12,\n            labelColor: \"#605e5c\",\n            titleColor: \"#323130\",\n            labelAngle: -45\n            }\n        } : {\n            field: headers[0],\n            type: \"ordinal\",\n            axis: {\n            domain: false,\n            tickSize: 0,\n            title: headers[0],\n            labelFontSize: 11,\n            titleFontSize: 12,\n            labelColor: \"#605e5c\",\n            titleColor: \"#323130\"\n            }\n        };\n\n        // Use Vega-Lite specification for streamgraph\n        spec = {\n            $schema: \"https://vega.github.io/schema/vega-lite/v6.json\",\n            width: 700,\n            height: 400,\n            background: \"white\",\n            config: { view: { stroke: \"transparent\" }},\n            description: \"Streamgraph from Excel selection\",\n            data: { values: processedData },\n            mark: {\n            type: \"area\",\n            tooltip: true,\n            interpolate: \"basis\",\n            opacity: 0.8\n            },\n            encoding: {\n            x: xAxisConfig,\n            y: {\n                aggregate: \"sum\",\n                field: headers[2],\n                type: \"quantitative\",\n                axis: null,\n                stack: \"center\"\n            },\n            color: {\n                field: headers[1],\n                type: \"nominal\",\n                scale: { scheme: \"category20b\" },\n                legend: {\n                title: headers[1],\n                titleFontSize: 12,\n                labelFontSize: 11,\n                orient: \"right\"\n                }\n            },\n            tooltip: [\n                { \n                field: headers[0], \n                type: xAxisType === \"temporal\" ? \"temporal\" : \"ordinal\", \n                title: \"Period\",\n                format: xAxisType === \"temporal\" ? \"%Y-%m-%d\" : undefined\n                },\n                { field: headers[1], type: \"nominal\", title: \"Series\" },\n                { field: headers[2], type: \"quantitative\", title: \"Value\", format: \",.0f\" }\n            ]\n            },\n            config: {\n            font: \"Segoe UI\",\n            legend: {\n                titleColor: \"#323130\",\n                labelColor: \"#605e5c\"\n            }\n            }\n        };\n      }\n\n      else if (chartType === \"ribbon\") {\n        // Calculate dynamic dimensions based on data\n        const uniquePeriods = [...new Set(data.map(d => d[headers[0]]))];\n        const dynamicWidth = Math.max(600, uniquePeriods.length * 100); // More space per period\n        const dynamicHeight = 400; // Adequate height for ribbon flow\n\n        spec = {\n            $schema: \"https://vega.github.io/schema/vega-lite/v6.json\",\n            description: \"Ribbon chart from Excel selection\",\n            background: \"white\",\n            width: dynamicWidth,\n            height: dynamicHeight,\n            config: { view: { stroke: \"transparent\" }},\n            data: { values: data },\n            layer: [\n            {\n                mark: { \n                type: \"area\", \n                interpolate: \"monotone\", \n                tooltip: true,\n                opacity: 0.8\n                },\n                encoding: {\n                x: {\n                    field: headers[0],\n                    type: \"ordinal\", // temporal change to \"ordinal\" if your first col is not a date\n                    scale: {\n                    type: \"point\",\n                    padding: 0.3 // Add padding between periods for more spread\n                    },\n                    axis: {\n                    title: headers[0],\n                    labelAngle: -45, // Angle labels to prevent overlap\n                    labelFontSize: 12,\n                    titleFontSize: 14,\n                    labelPadding: 10,\n                    titlePadding: 20\n                    }\n                },\n                y: {\n                    aggregate: \"sum\",\n                    field: headers[2],\n                    type: \"quantitative\",\n                    axis: {\n                    title: headers[2],\n                    labelFontSize: 12,\n                    titleFontSize: 14,\n                    grid: true,\n                    gridOpacity: 0.3\n                    },\n                    stack: \"center\"\n                },\n                color: {\n                    field: headers[1],\n                    type: \"nominal\",\n                    legend: {\n                    title: headers[1],\n                    titleFontSize: 12,\n                    labelFontSize: 11,\n                    orient: \"right\"\n                    }\n                },\n                order: {\n                    aggregate: \"sum\",\n                    field: headers[2],\n                    type: \"quantitative\"\n                }\n                }\n            }\n            ],\n            config: {\n            view: { stroke: \"transparent\" },\n            font: \"Segoe UI\",\n            axis: {\n                ticks: false,\n                grid: true,\n                gridColor: \"#f0f0f0\",\n                gridOpacity: 0.5,\n                gridWidth: 1,\n                domain: false,\n                labelColor: \"#605e5c\",\n                titleColor: \"#323130\"\n            },\n            legend: {\n                titleFont: \"Segoe UI\",\n                titleFontWeight: \"bold\",\n                titleColor: \"#323130\",\n                labelFont: \"Segoe UI\",\n                labelColor: \"#605e5c\",\n                symbolType: \"circle\",\n                symbolSize: 75\n            }\n            }\n        };\n      }\n\n      else if (chartType === \"ridgeline\") {\n      spec = {\n        $schema: \"https://vega.github.io/schema/vega-lite/v6.json\",\n        description: \"Ridgeline (Joyplot) chart from Excel selection\",\n        background: \"white\",\n        config: { view: { stroke: \"transparent\" }},\n        data: { values: data },\n        mark: {\n        type: \"area\",\n        fillOpacity: 0.7,\n        strokeOpacity: 1,\n        strokeWidth: 1,\n        interpolate: \"monotone\"\n        },\n        width: 400,\n        height: 20,\n        encoding: {\n        x: {\n            field: headers[0],       // date/time column\n            type: \"ordinal\",\n            title: headers[0]\n        },\n        y: {\n            aggregate: \"sum\",\n            field: headers[2],       // value column\n            type: \"quantitative\",\n            scale: { range: [20, -40] },\n            axis: {\n            title: null,\n            values: [0],\n            domain: false,\n            labels: false,\n            ticks: false\n            }\n        },\n        row: {\n            field: headers[1],       // category column\n            type: \"nominal\",\n            title: headers[1],\n            header: {\n            title: null,\n            labelAngle: 0,\n            labelOrient: \"left\",\n            labelAlign: \"left\",\n            labelPadding: 0\n            },\n            sort: { field: headers[0], op: \"max\", order: \"ascending\" }\n        },\n        fill: {\n            field: headers[1],\n            type: \"nominal\",\n            legend: null,\n            scale: { scheme: \"plasma\" }\n        }\n        },\n        resolve: { scale: { y: \"independent\" } },\n        config: {\n        view: { stroke: \"transparent\" },\n        facet: { spacing: 20 },\n        header: {\n            labelFontSize: 12,\n            labelFontWeight: 500,\n            labelAngle: 0,\n            labelAnchor: \"end\",\n            labelOrient: \"top\",\n            labelPadding: -19\n        },\n        axis: {\n            domain: false,\n            grid: false,\n            ticks: false,\n            tickCount: 5,\n            labelFontSize: 12,\n            titleFontSize: 12,\n            titleFontWeight: 400,\n            titleColor: \"#605E5C\"\n        }\n        }\n      };\n      }\n\n      else if (chartType === \"wordcloud\") {\n      spec = {\n        $schema: \"https://vega.github.io/schema/vega/v5.json\",\n        description: \"Word cloud from Excel selection\",\n        width: 800,\n        height: 400,\n        padding: 0,\n        background: \"white\",\n        config: { view: { stroke: \"transparent\" }},\n        data: [\n        {\n            name: \"table\",\n            values: data,\n            transform: [\n            {\n                type: \"countpattern\",\n                field: headers[0], // Use first column as text source\n                case: \"upper\",\n                pattern: \"[\\\\w']{3,}\",\n                stopwords: \"(i|me|my|myself|we|us|our|ours|ourselves|you|your|yours|yourself|yourselves|he|him|his|himself|she|her|hers|herself|it|its|itself|they|them|their|theirs|themselves|what|which|who|whom|whose|this|that|these|those|am|is|are|was|were|be|been|being|have|has|had|having|do|does|did|doing|will|would|should|can|could|ought|i'm|you're|he's|she's|it's|we're|they're|i've|you've|we've|they've|i'd|you'd|he'd|she'd|we'd|they'd|i'll|you'll|he'll|she'll|we'll|they'll|isn't|aren't|wasn't|weren't|hasn't|haven't|hadn't|doesn't|don't|didn't|won't|wouldn't|shan't|shouldn't|can't|cannot|couldn't|mustn't|let's|that's|who's|what's|here's|there's|when's|where's|why's|how's|a|an|the|and|but|if|or|because|as|until|while|of|at|by|for|with|about|against|between|into|through|during|before|after|above|below|to|from|up|upon|down|in|out|on|off|over|under|again|further|then|once|here|there|when|where|why|how|all|any|both|each|few|more|most|other|some|such|no|nor|not|only|own|same|so|than|too|very|say|says|said|shall)\"\n            },\n            {\n                type: \"formula\", \n                as: \"angle\",\n                expr: \"[-45, 0, 45][~~(random() * 3)]\"\n            },\n            {\n                type: \"formula\", \n                as: \"weight\",\n                expr: \"if(datum.count > 10, 600, 300)\"\n            }\n            ]\n        }\n        ],\n        \n        scales: [\n        {\n            name: \"color\",\n            type: \"ordinal\",\n            domain: { data: \"table\", field: \"text\" },\n            range: [\"#d5a928\", \"#652c90\", \"#939597\", \"#2563eb\", \"#dc2626\", \"#059669\"]\n        }\n        ],\n        \n        marks: [\n        {\n            type: \"text\",\n            from: { data: \"table\" },\n            encode: {\n            enter: {\n                text: { field: \"text\" },\n                align: { value: \"center\" },\n                baseline: { value: \"alphabetic\" },\n                fill: { scale: \"color\", field: \"text\" }\n            },\n            update: {\n                fillOpacity: { value: 1 }\n            },\n            hover: {\n                fillOpacity: { value: 0.5 }\n            }\n            },\n            transform: [\n            {\n                type: \"wordcloud\",\n                size: [800, 400],\n                text: { field: \"text\" },\n                rotate: { field: \"datum.angle\" },\n                font: \"Helvetica Neue, Arial\",\n                fontSize: { field: \"datum.count\" },\n                fontWeight: { field: \"datum.weight\" },\n                fontSizeRange: [12, 56],\n                padding: 2\n            }\n            ]\n        }\n        ]\n      };\n      }\n\n      else if (chartType === \"area\") {\n        spec = {\n          $schema: \"https://vega.github.io/schema/vega-lite/v6.json\",\n          description: \"Area chart from Excel selection\",\n          background: \"white\",\n          config: { view: { stroke: \"transparent\" }},\n          data: { values: data },\n          mark: { \n            type: \"area\", \n            tooltip: true,\n            opacity: 0.7\n          },\n          encoding: {\n            x: { \n              field: headers[0], \n              type: \"ordinal\",\n              axis: {\n                title: headers[0],\n                labelFontSize: 12,\n                titleFontSize: 14\n              }\n            },\n            y: { \n              field: headers[1], \n              type: \"quantitative\",\n              axis: {\n                title: headers[1],\n                labelFontSize: 12,\n                titleFontSize: 14\n              }\n            },\n            // Add color encoding for multiple areas if 3rd column exists\n            ...(headers.length >= 3 && {\n              color: { \n                field: headers[2], \n                type: \"nominal\",\n                legend: {\n                  title: headers[2],\n                  titleFontSize: 12,\n                  labelFontSize: 11\n                }\n              }\n            })\n          },\n          config: {\n            font: \"Segoe UI\",\n            axis: {\n              labelColor: \"#605e5c\",\n              titleColor: \"#323130\",\n              gridColor: \"#f3f2f1\"\n            },\n            legend: {\n              titleColor: \"#323130\",\n              labelColor: \"#605e5c\"\n            }\n          }\n        };\n      }\n\n      else if (chartType === \"bar\") {\n        spec = {\n          $schema: \"https://vega.github.io/schema/vega-lite/v6.json\",\n          description: \"Bar chart from Excel selection\",\n          background: \"white\",\n          config: { view: { stroke: \"transparent\" }},\n          data: { values: data },\n          mark: { \n            type: \"bar\", \n            tooltip: true\n          },\n          encoding: {\n            x: { \n              field: headers[0], \n              type: \"nominal\",\n              axis: {\n                title: headers[0],\n                labelFontSize: 12,\n                titleFontSize: 14\n              }\n            },\n            y: { \n              field: headers[1], \n              type: \"quantitative\",\n              axis: {\n                title: headers[1],\n                labelFontSize: 12,\n                titleFontSize: 14\n              }\n            },\n            // Add color encoding for grouped bars if 3rd column exists\n            ...(headers.length >= 3 && {\n              color: { \n                field: headers[2], \n                type: \"nominal\",\n                legend: {\n                  title: headers[2],\n                  titleFontSize: 12,\n                  labelFontSize: 11\n                }\n              }\n            })\n          },\n          config: {\n            font: \"Segoe UI\",\n            axis: {\n              labelColor: \"#605e5c\",\n              titleColor: \"#323130\",\n              gridColor: \"#f3f2f1\"\n            },\n            legend: {\n              titleColor: \"#323130\",\n              labelColor: \"#605e5c\"\n            }\n          }\n        };\n      }\n\n      // Render hidden chart\n      const hiddenDiv = document.createElement(\"div\");\n      hiddenDiv.style.display = \"none\";\n      document.body.appendChild(hiddenDiv);\n\n      const result = await vegaEmbed(hiddenDiv, spec, { actions: false });\n      const view = result.view;\n\n      // Export chart -> PNG\n      const pngUrl = await view.toImageURL(\"png\");\n      const response = await fetch(pngUrl);\n      const blob = await response.blob();\n\n      const reader = new FileReader();\n      reader.onloadend = async () => {\n      const base64data = reader.result.split(\",\")[1];\n\n      // Insert picture above selection\n      const image = sheet.shapes.addImage(base64data);\n      image.left = range.left;\n      image.top = range.top;\n      image.lockAspectRatio = true; // keep proportions\n\n      await context.sync();\n      };\n\n      reader.readAsDataURL(blob);\n      \n      // Clean up hidden div\n      document.body.removeChild(hiddenDiv);\n    });\n  } catch (error) {\n    console.error(error);\n  }\n}","// Imports\nvar ___HTML_LOADER_IMPORT_0___ = new URL(\"./taskpane.js\", import.meta.url);\n// Module\nvar code = \"<!DOCTYPE html> <html> <head> <meta charset=\\\"UTF-8\\\"/> <meta http-equiv=\\\"X-UA-Compatible\\\" content=\\\"IE=Edge\\\"/> <meta name=\\\"viewport\\\" content=\\\"width=device-width,initial-scale=1\\\"> <title>Vega Chart</title> <\" + \"script src=\\\"https://appsforoffice.microsoft.com/lib/1/hosted/office.js\\\"><\" + \"/script> <\" + \"script src=\\\"https://cdn.jsdelivr.net/npm/vega@6\\\"><\" + \"/script> <\" + \"script src=\\\"https://cdn.jsdelivr.net/npm/vega-lite@6\\\"><\" + \"/script> <\" + \"script src=\\\"https://cdn.jsdelivr.net/npm/vega-embed@6\\\"><\" + \"/script> <\" + \"script type=\\\"module\\\" src=\\\"\" + ___HTML_LOADER_IMPORT_0___ + \"\\\"><\" + \"/script> <style>body{font-family:-apple-system,BlinkMacSystemFont,'Segoe UI',Roboto,sans-serif;margin:20px;line-height:1.4}.chart-selector{margin-bottom:15px}label{display:block;margin-bottom:5px;font-weight:600;color:#323130}.custom-dropdown{position:relative;width:100%}.dropdown-header{width:100%;padding:8px 12px;border:1px solid #8a8886;border-radius:4px;font-size:14px;background:#fff;cursor:pointer;display:flex;justify-content:space-between;align-items:center;box-sizing:border-box}.dropdown-header:hover{border-color:#0078d4}.dropdown-arrow{font-size:12px;transition:transform .2s}.dropdown-arrow.expanded{transform:rotate(180deg)}.dropdown-list{position:absolute;top:100%;left:0;right:0;background:#fff;border:1px solid #8a8886;border-top:none;border-radius:0 0 4px 4px;max-height:300px;overflow-y:auto;z-index:1000;display:none;box-shadow:0 2px 8px rgba(0,0,0,.1)}.dropdown-list.open{display:block}.folder-item{padding:8px 12px;cursor:pointer;font-weight:600;color:#0078d4;background:#f8f9fa;border-bottom:1px solid #e1e4e8;display:flex;justify-content:space-between;align-items:center}.folder-item:hover{background:#e3f2fd}.folder-arrow{font-size:10px;transition:transform .2s}.folder-arrow.expanded{transform:rotate(90deg)}.chart-item{padding:8px 12px 8px 32px;cursor:pointer;color:#323130;border-bottom:1px solid #f0f0f0;display:none}.chart-item.visible{display:block}.chart-item:hover{background:#f5f5f5}.chart-item:last-child{border-bottom:none}button{background-color:#0078d4;color:#fff;border:none;padding:10px 20px;border-radius:4px;font-size:14px;cursor:pointer;width:100%;margin-bottom:15px}button:hover{background-color:#106ebe}.data-requirements{background-color:#f8f9fa;border:1px solid #e1e4e8;border-radius:6px;padding:12px;margin-top:10px;font-size:13px}.data-requirements h4{margin:0 0 8px 0;color:#24292f;font-size:14px}.data-requirements ul{margin:0;padding-left:18px}.data-requirements li{margin-bottom:4px}.hidden{display:none}</style> </head> <body> <h2></h2> <div class=\\\"chart-selector\\\"> <label for=\\\"chartDropdown\\\">Select Chart Type:</label> <div class=\\\"custom-dropdown\\\" id=\\\"chartDropdown\\\"> <div class=\\\"dropdown-header\\\" id=\\\"dropdownHeader\\\"> <span id=\\\"selectedText\\\">Choose a chart...</span> <span class=\\\"dropdown-arrow\\\">▼</span> </div> <div class=\\\"dropdown-list\\\" id=\\\"dropdownList\\\"> <div class=\\\"folder-item\\\" data-folder=\\\"standard\\\"> <span>Standard</span> <span class=\\\"folder-arrow\\\">►</span> </div> <div class=\\\"chart-item\\\" data-chart=\\\"bar\\\" data-folder=\\\"standard\\\">Bar</div> <div class=\\\"chart-item\\\" data-chart=\\\"line\\\" data-folder=\\\"standard\\\">Line</div> <div class=\\\"chart-item\\\" data-chart=\\\"area\\\" data-folder=\\\"standard\\\">Area</div> <div class=\\\"chart-item\\\" data-chart=\\\"point\\\" data-folder=\\\"standard\\\">Scatter</div> <div class=\\\"chart-item\\\" data-chart=\\\"bubble\\\" data-folder=\\\"standard\\\">Bubble</div> <div class=\\\"chart-item\\\" data-chart=\\\"pie\\\" data-folder=\\\"standard\\\">Pie</div> <div class=\\\"chart-item\\\" data-chart=\\\"donut\\\" data-folder=\\\"standard\\\">Donut</div> <div class=\\\"chart-item\\\" data-chart=\\\"box\\\" data-folder=\\\"standard\\\">Box</div> <div class=\\\"chart-item\\\" data-chart=\\\"radar\\\" data-folder=\\\"standard\\\">Radar</div> <div class=\\\"chart-item\\\" data-chart=\\\"map\\\" data-folder=\\\"standard\\\">Map</div> <div class=\\\"chart-item\\\" data-chart=\\\"histogram\\\" data-folder=\\\"standard\\\">Histogram</div> <div class=\\\"chart-item\\\" data-chart=\\\"candlestick\\\" data-folder=\\\"standard\\\">Candlestick</div> <div class=\\\"chart-item\\\" data-chart=\\\"treemap\\\" data-folder=\\\"standard\\\">Treemap</div> <div class=\\\"chart-item\\\" data-chart=\\\"sunburst\\\" data-folder=\\\"standard\\\">Sunburst</div> <div class=\\\"chart-item\\\" data-chart=\\\"waterfall\\\" data-folder=\\\"standard\\\">Waterfall</div> <div class=\\\"folder-item\\\" data-folder=\\\"special\\\"> <span>Special</span> <span class=\\\"folder-arrow\\\">►</span> </div> <div class=\\\"chart-item\\\" data-chart=\\\"radial\\\" data-folder=\\\"special\\\">Radial</div> <div class=\\\"chart-item\\\" data-chart=\\\"gauge\\\" data-folder=\\\"special\\\">Gauge</div> <div class=\\\"chart-item\\\" data-chart=\\\"ring\\\" data-folder=\\\"special\\\">Ring</div> <div class=\\\"chart-item\\\" data-chart=\\\"arc\\\" data-folder=\\\"special\\\">Arc</div> <div class=\\\"chart-item\\\" data-chart=\\\"tree\\\" data-folder=\\\"special\\\">Tree</div> <div class=\\\"chart-item\\\" data-chart=\\\"wordcloud\\\" data-folder=\\\"special\\\">Wordcloud</div> <div class=\\\"chart-item\\\" data-chart=\\\"gantt\\\" data-folder=\\\"special\\\">Gantt</div> <div class=\\\"chart-item\\\" data-chart=\\\"strip\\\" data-folder=\\\"special\\\">Strip</div> <div class=\\\"chart-item\\\" data-chart=\\\"heatmap\\\" data-folder=\\\"special\\\">Heatmap</div> <div class=\\\"chart-item\\\" data-chart=\\\"bullet\\\" data-folder=\\\"special\\\">Bullet</div> <div class=\\\"chart-item\\\" data-chart=\\\"horizon\\\" data-folder=\\\"special\\\">Horizon</div> <div class=\\\"chart-item\\\" data-chart=\\\"dumbbell\\\" data-folder=\\\"special\\\">Dumbbell</div> <div class=\\\"chart-item\\\" data-chart=\\\"slope\\\" data-folder=\\\"special\\\">Slope</div> <div class=\\\"chart-item\\\" data-chart=\\\"mekko\\\" data-folder=\\\"special\\\">Mekko</div> <div class=\\\"chart-item\\\" data-chart=\\\"marimekko\\\" data-folder=\\\"special\\\">Marimekko</div> <div class=\\\"chart-item\\\" data-chart=\\\"bump\\\" data-folder=\\\"special\\\">Bump</div> <div class=\\\"chart-item\\\" data-chart=\\\"waffle\\\" data-folder=\\\"special\\\">Waffle</div> <div class=\\\"chart-item\\\" data-chart=\\\"lollipop\\\" data-folder=\\\"special\\\">Lollipop</div> <div class=\\\"chart-item\\\" data-chart=\\\"violin\\\" data-folder=\\\"special\\\">Violin</div> <div class=\\\"chart-item\\\" data-chart=\\\"sankey\\\" data-folder=\\\"special\\\">Sankey</div> <div class=\\\"chart-item\\\" data-chart=\\\"streamgraph\\\" data-folder=\\\"special\\\">Streamgraph</div> <div class=\\\"chart-item\\\" data-chart=\\\"ribbon\\\" data-folder=\\\"special\\\">Ribbon</div> <div class=\\\"chart-item\\\" data-chart=\\\"ridgeline\\\" data-folder=\\\"special\\\">Ridgeline</div> <div class=\\\"chart-item\\\" data-chart=\\\"deviation\\\" data-folder=\\\"special\\\">Deviation</div> <div class=\\\"chart-item\\\" data-chart=\\\"variance\\\" data-folder=\\\"special\\\">Variance</div> </div> </div> </div> <button id=\\\"drawChart\\\">Generate Chart</button> <select id=\\\"chartType\\\" style=\\\"display:none\\\"> <option value=\\\"\\\">Choose a chart...</option> <option value=\\\"bar\\\">Bar</option> <option value=\\\"line\\\">Line</option> <option value=\\\"area\\\">Area</option> <option value=\\\"point\\\">Scatter</option> <option value=\\\"bubble\\\">Bubble</option> <option value=\\\"gauge\\\">Gauge</option> <option value=\\\"pie\\\">Pie</option> <option value=\\\"donut\\\">Donut</option> <option value=\\\"ring\\\">Ring</option> <option value=\\\"box\\\">Box</option> <option value=\\\"histogram\\\">Histogram</option> <option value=\\\"candlestick\\\">Candlestick</option> <option value=\\\"map\\\">Map</option> <option value=\\\"radar\\\">Radar</option> <option value=\\\"heatmap\\\">Heatmap</option> <option value=\\\"radial\\\">Radial</option> <option value=\\\"arc\\\">Arc</option> <option value=\\\"tree\\\">Tree</option> <option value=\\\"wordcloud\\\">Wordcloud</option> <option value=\\\"gantt\\\">Gantt</option> <option value=\\\"strip\\\">Strip</option> <option value=\\\"treemap\\\">Treemap</option> <option value=\\\"sunburst\\\">Sunburst</option> <option value=\\\"bullet\\\">Bullet</option> <option value=\\\"horizon\\\">Horizon</option> <option value=\\\"dumbbell\\\">Dumbbell</option> <option value=\\\"slope\\\">Slope</option> <option value=\\\"mekko\\\">Mekko</option> <option value=\\\"marimekko\\\">Marimekko</option> <option value=\\\"bump\\\">Bump</option> <option value=\\\"waffle\\\">Waffle</option> <option value=\\\"lollipop\\\">Lollipop</option> <option value=\\\"violin\\\">Violin</option> <option value=\\\"sankey\\\">Sankey</option> <option value=\\\"streamgraph\\\">Streamgraph</option> <option value=\\\"ribbon\\\">Ribbon</option> <option value=\\\"ridgeline\\\">Ridgeline</option> <option value=\\\"deviation\\\">Deviation</option> <option value=\\\"variance\\\">Variance</option> <option value=\\\"waterfall\\\">Waterfall</option> </select> <div id=\\\"req-point\\\" class=\\\"data-requirements hidden\\\"> <h4>Data Requirements:</h4> <ul> <li><strong>Column 1:</strong> X-axis values (numbers)</li> <li><strong>Column 2:</strong> Y-axis values (numbers)</li> <li><strong>Column 3 (optional):</strong> Color grouping (categories for different colors)</li> <li><strong>Column 4 (optional):</strong> Shape grouping (categories for different shapes)</li> </ul> </div> <div id=\\\"req-bubble\\\" class=\\\"data-requirements hidden\\\"> <h4>Data Requirements:</h4> <ul> <li><strong>Column 1:</strong> X-axis values (numbers)</li> <li><strong>Column 2:</strong> Y-axis values (numbers)</li> <li><strong>Column 3:</strong> Bubble size values (numbers)</li> <li><strong>Column 4 (optional):</strong> Color grouping (categories for different colors)</li> </ul> </div> <div id=\\\"req-bar\\\" class=\\\"data-requirements hidden\\\"> <h4>Data Requirements:</h4> <ul> <li><strong>Column 1:</strong> Categories or X-axis values</li> <li><strong>Column 2:</strong> Values (numbers)</li> <li><strong>Column 3 (optional):</strong> Grouping variable for grouped bars</li> </ul> </div> <div id=\\\"req-line\\\" class=\\\"data-requirements hidden\\\"> <h4>Data Requirements:</h4> <ul> <li><strong>Column 1:</strong> X-axis values (often dates/time or categories)</li> <li><strong>Columns 2-n:</strong> Value series</li> </ul> </div> <div id=\\\"req-area\\\" class=\\\"data-requirements hidden\\\"> <h4>Data Requirements:</h4> <ul> <li><strong>Column 1:</strong> X-axis values (often dates/time)</li> <li><strong>Column 2:</strong> Y-axis values (numbers)</li> <li><strong>Column 3 (optional):</strong> Series grouping for multiple areas</li> </ul> </div> <div id=\\\"req-horizon\\\" class=\\\"data-requirements hidden\\\"> <h4>Data Requirements:</h4> <ul> <li><strong>Column 1:</strong> X-axis values (time periods, dates, or sequence numbers)</li> <li><strong>Column 2:</strong> Y-axis values (numeric data to visualize)</li> </ul> </div> <div id=\\\"req-dumbbell\\\" class=\\\"data-requirements hidden\\\"> <h4>Data Requirements:</h4> <ul> <li><strong>Column 1:</strong> Categories</li> <li><strong>Column 2:</strong> First measure (number)</li> <li><strong>Column 3:</strong> Second measure (number)</li> </ul> </div> <div id=\\\"req-slope\\\" class=\\\"data-requirements hidden\\\"> <h4>Data Requirements:</h4> <ul> <li><strong>Column 1:</strong> Time periods (e.g., \\\"2023\\\", \\\"2024\\\" or \\\"Q1\\\", \\\"Q4\\\")</li> <li><strong>Column 2:</strong> Categories/Series (e.g., \\\"Product A\\\", \\\"Region 1\\\")</li> <li><strong>Column 3:</strong> Values (numbers)</li> </ul> </div> <div id=\\\"req-radar\\\" class=\\\"data-requirements hidden\\\"> <h4>Data Requirements:</h4> <ul> <li><strong>Column 1:</strong> Series/Category name (e.g., \\\"Product A\\\", \\\"Team 1\\\")</li> <li><strong>Columns 2-n:</strong> Dimension values (e.g., \\\"Speed\\\", \\\"Quality\\\", \\\"Cost\\\")</li> </ul> </div> <div id=\\\"req-box\\\" class=\\\"data-requirements hidden\\\"> <h4>Data Requirements:</h4> <ul> <li><strong>Column 1:</strong> Categories/Groups (e.g., \\\"Species\\\", \\\"Department\\\", \\\"Region\\\")</li> <li><strong>Column 2:</strong> Values for distribution analysis (numbers)</li> </ul> </div> <div id=\\\"req-gauge\\\" class=\\\"data-requirements hidden\\\"> <h4>Data Requirements:</h4> <ul> <li><strong>Column 1:</strong> Current value (numbers)</li> <li><strong>Column 2:</strong> Maximum value (numbers)</li> </ul> </div> <div id=\\\"req-pie\\\" class=\\\"data-requirements hidden\\\"> <h4>Data Requirements:</h4> <ul> <li><strong>Column 1:</strong> Category names</li> <li><strong>Column 2:</strong> Values (numbers for slice sizes)</li> </ul> </div> <div id=\\\"req-donut\\\" class=\\\"data-requirements hidden\\\"> <h4>Data Requirements:</h4> <ul> <li><strong>Column 1:</strong> Category names</li> <li><strong>Column 2:</strong> Values (numbers for slice sizes)</li> </ul> </div> <div id=\\\"req-ring\\\" class=\\\"data-requirements hidden\\\"> <h4>Data Requirements:</h4> <ul> <li><strong>Column 1:</strong> Category names (e.g., \\\"Online Sales\\\", \\\"Retail Sales\\\", \\\"Partner Sales\\\")</li> <li><strong>Column 2:</strong> Values as percentages (0-100, e.g., 75, 60, 45)</li> </ul> </div> <div id=\\\"req-histogram\\\" class=\\\"data-requirements hidden\\\"> <h4>Data Requirements:</h4> <ul> <li><strong>Column 1:</strong> Continuous numeric values to create distribution bins</li> </ul> </div> <div id=\\\"req-map\\\" class=\\\"data-requirements hidden\\\"> <h4>Data Requirements:</h4> <ul> <li><strong>Column 1:</strong> Country ISO (e.g., \\\"USA\\\", \\\"CAN\\\", \\\"MEX\\\")</li> <li><strong>Column 2:</strong> Values to visualize (numbers for color intensity)</li> </ul> </div> <div id=\\\"req-candlestick\\\" class=\\\"data-requirements hidden\\\"> <h4>Data Requirements:</h4> <ul> <li><strong>Column 1:</strong> Date/Time (Excel date values or date strings)</li> <li><strong>Column 2:</strong> Open price (numbers)</li> <li><strong>Column 3:</strong> High price (numbers)</li> <li><strong>Column 4:</strong> Low price (numbers)</li> <li><strong>Column 5:</strong> Close price (numbers)</li> </ul> </div> <div id=\\\"req-radial\\\" class=\\\"data-requirements hidden\\\"> <h4>Data Requirements:</h4> <ul> <li><strong>Column 1:</strong> Category names</li> <li><strong>Column 2:</strong> Values (determines both angle and radius)</li> </ul> </div> <div id=\\\"req-arc\\\" class=\\\"data-requirements hidden\\\"> <h4>Data Requirements:</h4> <ul> <li><strong>Column 1:</strong> Source node/entity (e.g., \\\"Person A\\\", \\\"Department 1\\\")</li> <li><strong>Column 2:</strong> Target node/entity (e.g., \\\"Person B\\\", \\\"Department 2\\\")</li> <li><strong>Column 3:</strong> Connection strength/weight (numbers, optional)</li> </ul> </div> <div id=\\\"req-tree\\\" class=\\\"data-requirements hidden\\\"> <h4>Data Requirements:</h4> <ul> <li><strong>Column 1:</strong> Parent (parent node name, empty for root nodes)</li> <li><strong>Column 2:</strong> Child (child node name)</li> <li><strong>Column 3 (optional):</strong> Value (affects node size, defaults to 1)</li> </ul> </div> <div id=\\\"req-strip\\\" class=\\\"data-requirements hidden\\\"> <h4>Data Requirements:</h4> <ul> <li><strong>Column 1:</strong> Categories</li> <li><strong>Column 2:</strong> Values</li> <li><strong>Column 3 (optional):</strong> Color grouping (e.g., Brand, Region, Type)</li> </ul> </div> <div id=\\\"req-treemap\\\" class=\\\"data-requirements hidden\\\"> <h4>Data Requirements:</h4> <ul> <li><strong>Column 1:</strong> Parent/Group hierarchy (e.g., Region, Division)</li> <li><strong>Column 2:</strong> Category/Item names (e.g., Product, Department, File)</li> <li><strong>Column 3:</strong> Values/Sizes (e.g., Sales, Budget, File Size)</li> </ul> </div> <div id=\\\"req-sunburst\\\" class=\\\"data-requirements hidden\\\"> <h4>Data Requirements:</h4> <ul> <li><strong>Column 1:</strong> Parent (parent category, empty for root level)</li> <li><strong>Column 2:</strong> Child (child category or item name)</li> <li><strong>Column 3 (optional):</strong> Value (size of the segment, defaults to 1)</li> </ul> </div> <div id=\\\"req-wordcloud\\\" class=\\\"data-requirements hidden\\\"> <h4>Data Requirements:</h4> <ul> <li><strong>Column 1:</strong> Text data (sentences, phrases, or words)</li> </ul> </div> <div id=\\\"req-gantt\\\" class=\\\"data-requirements hidden\\\"> <h4>Data Requirements:</h4> <ul> <li><strong>Column 1:</strong> Task ID (number, empty for root tasks)</li> <li><strong>Column 2:</strong> Sub Task ID (number)</li> <li><strong>Column 3:</strong> Sub Task Name (text)</li> <li><strong>Column 4:</strong> Start Date (date)</li> <li><strong>Column 5:</strong> End Date (date)</li> <li><strong>Column 6:</strong> Progress (0-1 decimal or percentage)</li> </ul> </div> <div id=\\\"req-lollipop\\\" class=\\\"data-requirements hidden\\\"> <h4>Data Requirements:</h4> <ul> <li><strong>Column 1:</strong> Category names (e.g., \\\"Products\\\", \\\"Regions\\\", \\\"Teams\\\")</li> <li><strong>Column 2:</strong> Values (numbers for stick length and circle size)</li> </ul> </div> <div id=\\\"req-waffle\\\" class=\\\"data-requirements hidden\\\"> <h4>Data Requirements:</h4> <ul> <li><strong>Column 1:</strong> Category names (e.g., \\\"Product A\\\", \\\"Product B\\\")</li> <li><strong>Column 2:</strong> Values (numbers that will be converted to percentages)</li> </ul> </div> <div id=\\\"req-bullet\\\" class=\\\"data-requirements hidden\\\"> <h4>Data Requirements:</h4> <ul> <li><strong>Column 1:</strong> Title/Metric name (e.g., \\\"Revenue\\\", \\\"Profit\\\")</li> <li><strong>Column 2:</strong> Poor range max</li> <li><strong>Column 3:</strong> Satisfactory range max</li> <li><strong>Column 4:</strong> Good range max</li> <li><strong>Column 5:</strong> Actual value</li> <li><strong>Column 6:</strong> Forecast value (optional)</li> <li><strong>Column 7:</strong> Target value (marker)</li> </ul> </div> <div id=\\\"req-mekko\\\" class=\\\"data-requirements hidden\\\"> <h4>Data Requirements:</h4> <ul> <li><strong>Column 1:</strong> Category (text)</li> <li><strong>Column 2:</strong> Subcategory (text)</li> <li><strong>Column 3:</strong> Value (number)</li> </ul> </div> <div id=\\\"req-marimekko\\\" class=\\\"data-requirements hidden\\\"> <h4>Data Requirements:</h4> <ul> <li><strong>Column 1:</strong> Category (text)</li> <li><strong>Column 2:</strong> Subcategory (text)</li> <li><strong>Column 3:</strong> Value (number)</li> </ul> </div> <div id=\\\"req-heatmap\\\" class=\\\"data-requirements hidden\\\"> <h4>Data Requirements:</h4> <ul> <li><strong>Column 1:</strong> Y-axis categories (e.g., \\\"Months\\\", \\\"Products\\\", \\\"Regions\\\")</li> <li><strong>Column 2:</strong> X-axis categories (e.g., \\\"Days\\\", \\\"Quarters\\\", \\\"Sales Reps\\\")</li> <li><strong>Column 3:</strong> Values (numbers for color intensity)</li> </ul> </div> <div id=\\\"req-bump\\\" class=\\\"data-requirements hidden\\\"> <h4>Data Requirements:</h4> <ul> <li><strong>Column 1:</strong> Time periods</li> <li><strong>Column 2:</strong> Categories (e.g., \\\"Team A\\\", \\\"Team B\\\")</li> <li><strong>Column 3:</strong> Rank values (1, 2, 3, etc.)</li> </ul> </div> <div id=\\\"req-violin\\\" class=\\\"data-requirements hidden\\\"> <h4>Data Requirements:</h4> <ul> <li><strong>Column 1:</strong> Categories/Groups (e.g., \\\"Country A\\\", \\\"Product Line\\\", \\\"Department\\\")</li> <li><strong>Column 2:</strong> Continuous values (numbers for distribution analysis)</li> </ul> </div> <div id=\\\"req-sankey\\\" class=\\\"data-requirements hidden\\\"> <h4>Data Requirements:</h4> <ul> <li><strong>Column 1:</strong> Source Category</li> <li><strong>Column 2:</strong> Destination Category</li> <li><strong>Column 3:</strong> Values (numbers)</li> </ul> </div> <div id=\\\"req-streamgraph\\\" class=\\\"data-requirements hidden\\\"> <h4>Data Requirements:</h4> <ul> <li><strong>Column 1:</strong> Time/Date values (dates, Excel date serials, or time periods)</li> <li><strong>Column 2:</strong> Series/Categories (e.g., \\\"Product Lines\\\", \\\"Industries\\\", \\\"Regions\\\")</li> <li><strong>Column 3:</strong> Values (numbers for each series at each time point)</li> </ul> </div> <div id=\\\"req-ribbon\\\" class=\\\"data-requirements hidden\\\"> <h4>Data Requirements:</h4> <ul> <li><strong>Column 1:</strong> Time periods (dates/periods)</li> <li><strong>Column 2:</strong> Categories (different series)</li> <li><strong>Column 3:</strong> Values (numbers)</li> </ul> </div> <div id=\\\"req-ridgeline\\\" class=\\\"data-requirements hidden\\\"> <h4>Data Requirements:</h4> <ul> <li><strong>Column 1:</strong> Time periods/X-axis values</li> <li><strong>Column 2:</strong> Categories (creates separate ridges)</li> <li><strong>Column 3:</strong> Values (creates distribution shape)</li> </ul> </div> <div id=\\\"req-deviation\\\" class=\\\"data-requirements hidden\\\"> <h4>Data Requirements:</h4> <ul> <li><strong>Column 1:</strong> Date/Period</li> <li><strong>Column 2:</strong> Actual values</li> <li><strong>Column 3:</strong> Target/Baseline values</li> </ul> </div> <div id=\\\"req-variance\\\" class=\\\"data-requirements hidden\\\"> <h4>Data Requirements:</h4> <ul> <li><strong>Column 1:</strong> Business Unit/Category names (e.g., \\\"Channel Partners\\\", \\\"Enterprise\\\")</li> <li><strong>Column 2:</strong> First metric values (e.g., Actual, Sales, Results)</li> <li><strong>Column 3:</strong> Second metric values (e.g., Forecast, Budget, Target)</li> </ul> </div> <div id=\\\"req-waterfall\\\" class=\\\"data-requirements hidden\\\"> <h4>Data Requirements:</h4> <ul> <li><strong>Column 1:</strong> Categories/Labels (e.g., \\\"Begin\\\", \\\"Q1\\\", \\\"Q2\\\", \\\"End\\\")</li> <li><strong>Column 2:</strong> Amount values (positive/negative numbers), 0 for total, except for beginning total</li> <li><strong>Column 3:</strong> Type (total or not)</li> </ul> </div> <div id=\\\"chart\\\"></div> <\" + \"script>document.addEventListener(\\\"DOMContentLoaded\\\",function(){const e=document.getElementById(\\\"dropdownHeader\\\"),t=document.getElementById(\\\"dropdownList\\\"),o=e.querySelector(\\\".dropdown-arrow\\\"),d=document.getElementById(\\\"selectedText\\\"),c=document.querySelectorAll(\\\".data-requirements\\\"),n=document.getElementById(\\\"chartType\\\");let s=!1;c.forEach(e=>e.classList.add(\\\"hidden\\\")),e.addEventListener(\\\"click\\\",function(){s=!s,t.classList.toggle(\\\"open\\\",s),o.classList.toggle(\\\"expanded\\\",s)}),document.addEventListener(\\\"click\\\",function(e){e.target.closest(\\\".custom-dropdown\\\")||(s=!1,t.classList.remove(\\\"open\\\"),o.classList.remove(\\\"expanded\\\"))}),document.querySelectorAll(\\\".folder-item\\\").forEach(e=>{e.addEventListener(\\\"click\\\",function(e){e.stopPropagation();const t=this.dataset.folder,o=this.querySelector(\\\".folder-arrow\\\"),d=document.querySelectorAll(`[data-folder=\\\"${t}\\\"].chart-item`),c=o.classList.contains(\\\"expanded\\\");o.classList.toggle(\\\"expanded\\\",!c),d.forEach(e=>{e.classList.toggle(\\\"visible\\\",!c)})})}),document.querySelectorAll(\\\".chart-item\\\").forEach(e=>{e.addEventListener(\\\"click\\\",function(){const e=this.dataset.chart,r=this.textContent;d.textContent=r,n.value=e,s=!1,t.classList.remove(\\\"open\\\"),o.classList.remove(\\\"expanded\\\"),document.querySelectorAll(\\\".folder-arrow\\\").forEach(e=>{e.classList.remove(\\\"expanded\\\")}),document.querySelectorAll(\\\".chart-item\\\").forEach(e=>{e.classList.remove(\\\"visible\\\")}),c.forEach(e=>e.classList.add(\\\"hidden\\\"));const l=document.getElementById(`req-${e}`);l&&l.classList.remove(\\\"hidden\\\")})})})<\" + \"/script> </body> </html>\";\n// Exports\nexport default code;"],"names":["__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","m","d","definition","key","o","Object","defineProperty","enumerable","get","g","globalThis","this","Function","e","window","obj","prop","prototype","hasOwnProperty","call","scriptUrl","importScripts","location","document","currentScript","tagName","toUpperCase","src","scripts","getElementsByTagName","length","i","test","Error","replace","p","b","baseURI","self","href","t","r","Symbol","n","iterator","toStringTag","c","Generator","u","create","_regeneratorDefine2","f","y","G","v","a","bind","l","TypeError","done","value","return","GeneratorFunction","GeneratorFunctionPrototype","getPrototypeOf","setPrototypeOf","__proto__","displayName","_regenerator","w","_invoke","configurable","writable","_slicedToArray","Array","isArray","_arrayWithHoles","next","push","_iterableToArrayLimit","_unsupportedIterableToArray","_nonIterableRest","_createForOfIteratorHelper","_n","F","s","_toConsumableArray","_arrayLikeToArray","_arrayWithoutHoles","from","_iterableToArray","_nonIterableSpread","toString","slice","constructor","name","ownKeys","keys","getOwnPropertySymbols","filter","getOwnPropertyDescriptor","apply","_objectSpread","arguments","forEach","_defineProperty","getOwnPropertyDescriptors","defineProperties","_typeof","toPrimitive","String","_toPrimitive","_toPropertyKey","asyncGeneratorStep","Promise","resolve","then","_asyncToGenerator","_next","_throw","run","_run","_callee3","_t","_context3","Excel","_ref","_callee2","context","sheet","range","values","headers","rows","data","chartType","spec","numRings","ringWidth","ringGap","maxRadius","generateRingColor","transformedData","chartData","ringPositions","currentOuter","outer","inner","middle","legendStartY","_transformedData","valueColumns","excelDateToJSDate","_buildHierarchy","ganttData","childrenMap","_iterator","_step","_step$value","orderedTasks","dumbellData","categories","categoryCount","dynamicHeight","paddingInner","paddingOuter","timePeriods","_categories","firstPeriod","lastPeriod","slopeData","allValues","isPercentage","formatString","_dynamicHeight","_data","_data2","horizonData","yValues","maxY","minY","_range","bandHeight","baseline","dataPoints","_dynamicWidth","nodes","treeData","allIds","nodeCount","_dynamicWidth2","_dynamicHeight2","_nodes","hierarchicalData","_allIds","_nodeCount","chartSize","radarData","dimensions","uniqueDimensions","processedData","numDataPoints","_dynamicWidth3","maxAmount","_dynamicHeight3","gaugeRow","mainValue","maxValue","numericData","_values","minVal","maxVal","binWidth","niceMin","niceMax","_excelDateToJSDate","candlestickData","_dataPoints","_dynamicWidth4","formattedData","isoToId","worldData","edges","nodeMap","_nodes2","edgesWithIndices","_treeData","uniqueX","_dynamicWidth5","links","assignNodeStages","nodeStages","allNodes","_categories2","stageGroups","inputData","xAxisType","_processedData","xAxisConfig","uniquePeriods","_dynamicWidth6","hiddenDiv","result","view","pngUrl","response","blob","reader","_context2","workbook","worksheets","getActiveWorksheet","getSelectedRange","load","sync","console","warn","map","row","h","getElementById","$schema","description","background","config","stroke","mark","type","size","tooltip","encoding","x","field","scale","zero","axis","title","labelFontSize","titleFontSize","color","legend","shape","font","labelColor","titleColor","gridColor","opacity","Math","max","min","index","total","saturation","lightness","concat","PI","assign","flat","colName","parseFloat","point","strokeWidth","labelAngle","scheme","filled","serial","Date","round","buildHierarchy","_step2","parentId","level","ordered","_iterator2","task","id","err","start","end","isNaN","progress","includes","startDate","endDate","dependencies","split","trim","Boolean","duration","progressEnd","getTime","Map","has","set","entries","sort","width","height","layer","format","x2","align","dx","fontSize","text","strokeDash","date","toISOString","grid","category","value1","value2","period","Set","labelAlign","offset","ticks","minExtent","domain","detail","every","autosize","contains","labelFontWeight","labelPadding","padding","datum","transform","fontWeight","op","as","order","dy","fontStyle","fill","ranges","measures","markers","dynamicWidth","toLowerCase","parent","child","existingNode","node","seriesIndex","seriesName","dimension","series","abs","y2","condition","outerRadius","theta","some","innerRadius","orient","floor","ceil","open","high","low","close","dateDisplay","toLocaleDateString","month","day","year","iso","rate","url","feature","lookup","fields","projection","top","bottom","left","right","source","ops","groupby","expr","scales","nice","axes","zindex","tickCount","tickSize","labelFont","encode","labels","update","signal","marks","fillOpacity","interactive","lineHeight","target","group","edge","default","count","enter","mult","strokeOpacity","sourceX","targetX","sourceY","targetY","angle","titleFont","thickness","gridOpacity","find","parentKey","method","ratio","hover","joinaggregate","calculate","aggregate","facet","header","titleFontWeight","symbolType","symbolSize","continuousWidth","continuousHeight","spacing","column","labelOrient","titleOrient","impute","stack","density","bounds","vconcat","cornerRadiusEnd","hconcat","direction","gradientLength","line","strokeCap","strokeJoin","radiusOffset","radius","rangeMin","interpolate","destination","showError","inDegree","outEdges","link","add","queue","firstNode","processed","_loop","current","shift","currentStage","neighbor","newStage","existingStage","stage","stageIndex","nodesInStage","nodeIndex","stackNumber","signals","reverse","band","clip","path","yc","cornerRadius","processedRow","firstColValue","parsedDate","titlePadding","gridWidth","labelAnchor","case","pattern","stopwords","rotate","fontSizeRange","createElement","style","display","body","appendChild","vegaEmbed","actions","toImageURL","fetch","FileReader","onloadend","_callee","base64data","image","_context","shapes","addImage","lockAspectRatio","readAsDataURL","removeChild","_x","error","Office","onReady","onclick","URL"],"sourceRoot":""}